
SelfDriving_RTOS_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f4  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08109c94  08109c94  00019c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810a014  0810a014  0001a014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810a018  0810a018  0001a018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000120  10000000  0810a01c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004c24  10000120  0810a13c  00020120  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10004d44  0810a13c  00024d44  2**0
                  ALLOC
  8 .openamp_section 0000008c  38000000  0810a13c  00030000  2**2
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 10 .debug_info   000460ff  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000817a  00000000  00000000  0006624f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020e8  00000000  00000000  0006e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001e08  00000000  00000000  000704b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042c2e  00000000  00000000  000722c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d582  00000000  00000000  000b4eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019236a  00000000  00000000  000e2470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002747da  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008f84  00000000  00000000  00274830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000120 	.word	0x10000120
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08109c7c 	.word	0x08109c7c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000124 	.word	0x10000124
 81002dc:	08109c7c 	.word	0x08109c7c

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr
	...

08100300 <memchr>:
 8100300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100304:	2a10      	cmp	r2, #16
 8100306:	db2b      	blt.n	8100360 <memchr+0x60>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	d008      	beq.n	8100320 <memchr+0x20>
 810030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100312:	3a01      	subs	r2, #1
 8100314:	428b      	cmp	r3, r1
 8100316:	d02d      	beq.n	8100374 <memchr+0x74>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	b342      	cbz	r2, 8100370 <memchr+0x70>
 810031e:	d1f6      	bne.n	810030e <memchr+0xe>
 8100320:	b4f0      	push	{r4, r5, r6, r7}
 8100322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810032a:	f022 0407 	bic.w	r4, r2, #7
 810032e:	f07f 0700 	mvns.w	r7, #0
 8100332:	2300      	movs	r3, #0
 8100334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100338:	3c08      	subs	r4, #8
 810033a:	ea85 0501 	eor.w	r5, r5, r1
 810033e:	ea86 0601 	eor.w	r6, r6, r1
 8100342:	fa85 f547 	uadd8	r5, r5, r7
 8100346:	faa3 f587 	sel	r5, r3, r7
 810034a:	fa86 f647 	uadd8	r6, r6, r7
 810034e:	faa5 f687 	sel	r6, r5, r7
 8100352:	b98e      	cbnz	r6, 8100378 <memchr+0x78>
 8100354:	d1ee      	bne.n	8100334 <memchr+0x34>
 8100356:	bcf0      	pop	{r4, r5, r6, r7}
 8100358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810035c:	f002 0207 	and.w	r2, r2, #7
 8100360:	b132      	cbz	r2, 8100370 <memchr+0x70>
 8100362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100366:	3a01      	subs	r2, #1
 8100368:	ea83 0301 	eor.w	r3, r3, r1
 810036c:	b113      	cbz	r3, 8100374 <memchr+0x74>
 810036e:	d1f8      	bne.n	8100362 <memchr+0x62>
 8100370:	2000      	movs	r0, #0
 8100372:	4770      	bx	lr
 8100374:	3801      	subs	r0, #1
 8100376:	4770      	bx	lr
 8100378:	2d00      	cmp	r5, #0
 810037a:	bf06      	itte	eq
 810037c:	4635      	moveq	r5, r6
 810037e:	3803      	subeq	r0, #3
 8100380:	3807      	subne	r0, #7
 8100382:	f015 0f01 	tst.w	r5, #1
 8100386:	d107      	bne.n	8100398 <memchr+0x98>
 8100388:	3001      	adds	r0, #1
 810038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810038e:	bf02      	ittt	eq
 8100390:	3001      	addeq	r0, #1
 8100392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100396:	3001      	addeq	r0, #1
 8100398:	bcf0      	pop	{r4, r5, r6, r7}
 810039a:	3801      	subs	r0, #1
 810039c:	4770      	bx	lr
 810039e:	bf00      	nop

081003a0 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 81003a0:	b480      	push	{r7}
 81003a2:	b085      	sub	sp, #20
 81003a4:	af00      	add	r7, sp, #0
 81003a6:	60f8      	str	r0, [r7, #12]
 81003a8:	60b9      	str	r1, [r7, #8]
 81003aa:	607a      	str	r2, [r7, #4]
 81003ac:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 81003ae:	68bb      	ldr	r3, [r7, #8]
 81003b0:	681b      	ldr	r3, [r3, #0]
 81003b2:	4a07      	ldr	r2, [pc, #28]	; (81003d0 <rpmsg_recv_callback+0x30>)
 81003b4:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 81003b6:	68bb      	ldr	r3, [r7, #8]
 81003b8:	4a06      	ldr	r2, [pc, #24]	; (81003d4 <rpmsg_recv_callback+0x34>)
 81003ba:	6013      	str	r3, [r2, #0]
	message_received=1;
 81003bc:	4b06      	ldr	r3, [pc, #24]	; (81003d8 <rpmsg_recv_callback+0x38>)
 81003be:	2201      	movs	r2, #1
 81003c0:	601a      	str	r2, [r3, #0]
//	parseRecievedMessages((uint8_t)received_data);
	return 0;
 81003c2:	2300      	movs	r3, #0
}
 81003c4:	4618      	mov	r0, r3
 81003c6:	3714      	adds	r7, #20
 81003c8:	46bd      	mov	sp, r7
 81003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003ce:	4770      	bx	lr
 81003d0:	10004bf0 	.word	0x10004bf0
 81003d4:	1000013c 	.word	0x1000013c
 81003d8:	10004c34 	.word	0x10004c34

081003dc <receive_message>:

#ifdef CORE_CM4
unsigned int receive_message(void)
{
 81003dc:	b580      	push	{r7, lr}
 81003de:	af00      	add	r7, sp, #0
	while (message_received == 0)
 81003e0:	e001      	b.n	81003e6 <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 81003e2:	f008 fb89 	bl	8108af8 <OPENAMP_check_for_message>
	while (message_received == 0)
 81003e6:	4b05      	ldr	r3, [pc, #20]	; (81003fc <receive_message+0x20>)
 81003e8:	681b      	ldr	r3, [r3, #0]
 81003ea:	2b00      	cmp	r3, #0
 81003ec:	d0f9      	beq.n	81003e2 <receive_message+0x6>
	}
	message_received = 0;
 81003ee:	4b03      	ldr	r3, [pc, #12]	; (81003fc <receive_message+0x20>)
 81003f0:	2200      	movs	r2, #0
 81003f2:	601a      	str	r2, [r3, #0]

	return received_data;
 81003f4:	4b02      	ldr	r3, [pc, #8]	; (8100400 <receive_message+0x24>)
 81003f6:	681b      	ldr	r3, [r3, #0]
}
 81003f8:	4618      	mov	r0, r3
 81003fa:	bd80      	pop	{r7, pc}
 81003fc:	10004c34 	.word	0x10004c34
 8100400:	10004bf0 	.word	0x10004bf0

08100404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100404:	b480      	push	{r7}
 8100406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100408:	4b0b      	ldr	r3, [pc, #44]	; (8100438 <SystemInit+0x34>)
 810040a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810040e:	4a0a      	ldr	r2, [pc, #40]	; (8100438 <SystemInit+0x34>)
 8100410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100418:	4b07      	ldr	r3, [pc, #28]	; (8100438 <SystemInit+0x34>)
 810041a:	691b      	ldr	r3, [r3, #16]
 810041c:	4a06      	ldr	r2, [pc, #24]	; (8100438 <SystemInit+0x34>)
 810041e:	f043 0310 	orr.w	r3, r3, #16
 8100422:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100424:	4b04      	ldr	r3, [pc, #16]	; (8100438 <SystemInit+0x34>)
 8100426:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810042a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810042c:	bf00      	nop
 810042e:	46bd      	mov	sp, r7
 8100430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100434:	4770      	bx	lr
 8100436:	bf00      	nop
 8100438:	e000ed00 	.word	0xe000ed00

0810043c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 810043c:	b480      	push	{r7}
 810043e:	b083      	sub	sp, #12
 8100440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100442:	4b0a      	ldr	r3, [pc, #40]	; (810046c <MX_DMA_Init+0x30>)
 8100444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100448:	4a08      	ldr	r2, [pc, #32]	; (810046c <MX_DMA_Init+0x30>)
 810044a:	f043 0301 	orr.w	r3, r3, #1
 810044e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100452:	4b06      	ldr	r3, [pc, #24]	; (810046c <MX_DMA_Init+0x30>)
 8100454:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100458:	f003 0301 	and.w	r3, r3, #1
 810045c:	607b      	str	r3, [r7, #4]
 810045e:	687b      	ldr	r3, [r7, #4]

}
 8100460:	bf00      	nop
 8100462:	370c      	adds	r7, #12
 8100464:	46bd      	mov	sp, r7
 8100466:	f85d 7b04 	ldr.w	r7, [sp], #4
 810046a:	4770      	bx	lr
 810046c:	58024400 	.word	0x58024400

08100470 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8100470:	b580      	push	{r7, lr}
 8100472:	b086      	sub	sp, #24
 8100474:	af02      	add	r7, sp, #8
 8100476:	60f8      	str	r0, [r7, #12]
 8100478:	60b9      	str	r1, [r7, #8]
 810047a:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 810047c:	68fb      	ldr	r3, [r7, #12]
 810047e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100484:	d101      	bne.n	810048a <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 8100486:	4b09      	ldr	r3, [pc, #36]	; (81004ac <rpmsg_send+0x3c>)
 8100488:	e00c      	b.n	81004a4 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 810048a:	68fb      	ldr	r3, [r7, #12]
 810048c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 810048e:	68fb      	ldr	r3, [r7, #12]
 8100490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8100492:	2301      	movs	r3, #1
 8100494:	9301      	str	r3, [sp, #4]
 8100496:	687b      	ldr	r3, [r7, #4]
 8100498:	9300      	str	r3, [sp, #0]
 810049a:	68bb      	ldr	r3, [r7, #8]
 810049c:	68f8      	ldr	r0, [r7, #12]
 810049e:	f007 f89d 	bl	81075dc <rpmsg_send_offchannel_raw>
 81004a2:	4603      	mov	r3, r0
					 len, true);
}
 81004a4:	4618      	mov	r0, r3
 81004a6:	3710      	adds	r7, #16
 81004a8:	46bd      	mov	sp, r7
 81004aa:	bd80      	pop	{r7, pc}
 81004ac:	fffff829 	.word	0xfffff829

081004b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 81004b0:	b580      	push	{r7, lr}
 81004b2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 81004b4:	4a04      	ldr	r2, [pc, #16]	; (81004c8 <MX_FREERTOS_Init+0x18>)
 81004b6:	2100      	movs	r1, #0
 81004b8:	4804      	ldr	r0, [pc, #16]	; (81004cc <MX_FREERTOS_Init+0x1c>)
 81004ba:	f003 fcb5 	bl	8103e28 <osThreadNew>
 81004be:	4603      	mov	r3, r0
 81004c0:	4a03      	ldr	r2, [pc, #12]	; (81004d0 <MX_FREERTOS_Init+0x20>)
 81004c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 81004c4:	bf00      	nop
 81004c6:	bd80      	pop	{r7, pc}
 81004c8:	08109ec8 	.word	0x08109ec8
 81004cc:	081004d5 	.word	0x081004d5
 81004d0:	10004b9c 	.word	0x10004b9c

081004d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 81004d4:	b580      	push	{r7, lr}
 81004d6:	b084      	sub	sp, #16
 81004d8:	af00      	add	r7, sp, #0
 81004da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	int32_t status = 0;
 81004dc:	2300      	movs	r3, #0
 81004de:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
//	  message = receive_message();
	  message++;
 81004e0:	4b07      	ldr	r3, [pc, #28]	; (8100500 <StartDefaultTask+0x2c>)
 81004e2:	681b      	ldr	r3, [r3, #0]
 81004e4:	3301      	adds	r3, #1
 81004e6:	4a06      	ldr	r2, [pc, #24]	; (8100500 <StartDefaultTask+0x2c>)
 81004e8:	6013      	str	r3, [r2, #0]
	  status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 81004ea:	2204      	movs	r2, #4
 81004ec:	4904      	ldr	r1, [pc, #16]	; (8100500 <StartDefaultTask+0x2c>)
 81004ee:	4805      	ldr	r0, [pc, #20]	; (8100504 <StartDefaultTask+0x30>)
 81004f0:	f7ff ffbe 	bl	8100470 <rpmsg_send>
 81004f4:	60f8      	str	r0, [r7, #12]
    osDelay(1);
 81004f6:	2001      	movs	r0, #1
 81004f8:	f003 fd28 	bl	8103f4c <osDelay>
	  message++;
 81004fc:	e7f0      	b.n	81004e0 <StartDefaultTask+0xc>
 81004fe:	bf00      	nop
 8100500:	10004bec 	.word	0x10004bec
 8100504:	10004bf4 	.word	0x10004bf4

08100508 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8100508:	b480      	push	{r7}
 810050a:	b083      	sub	sp, #12
 810050c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810050e:	4b12      	ldr	r3, [pc, #72]	; (8100558 <MX_GPIO_Init+0x50>)
 8100510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100514:	4a10      	ldr	r2, [pc, #64]	; (8100558 <MX_GPIO_Init+0x50>)
 8100516:	f043 0301 	orr.w	r3, r3, #1
 810051a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810051e:	4b0e      	ldr	r3, [pc, #56]	; (8100558 <MX_GPIO_Init+0x50>)
 8100520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100524:	f003 0301 	and.w	r3, r3, #1
 8100528:	607b      	str	r3, [r7, #4]
 810052a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810052c:	4b0a      	ldr	r3, [pc, #40]	; (8100558 <MX_GPIO_Init+0x50>)
 810052e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100532:	4a09      	ldr	r2, [pc, #36]	; (8100558 <MX_GPIO_Init+0x50>)
 8100534:	f043 0302 	orr.w	r3, r3, #2
 8100538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810053c:	4b06      	ldr	r3, [pc, #24]	; (8100558 <MX_GPIO_Init+0x50>)
 810053e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100542:	f003 0302 	and.w	r3, r3, #2
 8100546:	603b      	str	r3, [r7, #0]
 8100548:	683b      	ldr	r3, [r7, #0]

}
 810054a:	bf00      	nop
 810054c:	370c      	adds	r7, #12
 810054e:	46bd      	mov	sp, r7
 8100550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100554:	4770      	bx	lr
 8100556:	bf00      	nop
 8100558:	58024400 	.word	0x58024400

0810055c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 810055c:	b580      	push	{r7, lr}
 810055e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100560:	4b1b      	ldr	r3, [pc, #108]	; (81005d0 <MX_I2C2_Init+0x74>)
 8100562:	4a1c      	ldr	r2, [pc, #112]	; (81005d4 <MX_I2C2_Init+0x78>)
 8100564:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301242;
 8100566:	4b1a      	ldr	r3, [pc, #104]	; (81005d0 <MX_I2C2_Init+0x74>)
 8100568:	4a1b      	ldr	r2, [pc, #108]	; (81005d8 <MX_I2C2_Init+0x7c>)
 810056a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 810056c:	4b18      	ldr	r3, [pc, #96]	; (81005d0 <MX_I2C2_Init+0x74>)
 810056e:	2200      	movs	r2, #0
 8100570:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100572:	4b17      	ldr	r3, [pc, #92]	; (81005d0 <MX_I2C2_Init+0x74>)
 8100574:	2201      	movs	r2, #1
 8100576:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100578:	4b15      	ldr	r3, [pc, #84]	; (81005d0 <MX_I2C2_Init+0x74>)
 810057a:	2200      	movs	r2, #0
 810057c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 810057e:	4b14      	ldr	r3, [pc, #80]	; (81005d0 <MX_I2C2_Init+0x74>)
 8100580:	2200      	movs	r2, #0
 8100582:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100584:	4b12      	ldr	r3, [pc, #72]	; (81005d0 <MX_I2C2_Init+0x74>)
 8100586:	2200      	movs	r2, #0
 8100588:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810058a:	4b11      	ldr	r3, [pc, #68]	; (81005d0 <MX_I2C2_Init+0x74>)
 810058c:	2200      	movs	r2, #0
 810058e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100590:	4b0f      	ldr	r3, [pc, #60]	; (81005d0 <MX_I2C2_Init+0x74>)
 8100592:	2200      	movs	r2, #0
 8100594:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8100596:	480e      	ldr	r0, [pc, #56]	; (81005d0 <MX_I2C2_Init+0x74>)
 8100598:	f000 ffba 	bl	8101510 <HAL_I2C_Init>
 810059c:	4603      	mov	r3, r0
 810059e:	2b00      	cmp	r3, #0
 81005a0:	d001      	beq.n	81005a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81005a2:	f000 f947 	bl	8100834 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81005a6:	2100      	movs	r1, #0
 81005a8:	4809      	ldr	r0, [pc, #36]	; (81005d0 <MX_I2C2_Init+0x74>)
 81005aa:	f001 f85a 	bl	8101662 <HAL_I2CEx_ConfigAnalogFilter>
 81005ae:	4603      	mov	r3, r0
 81005b0:	2b00      	cmp	r3, #0
 81005b2:	d001      	beq.n	81005b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 81005b4:	f000 f93e 	bl	8100834 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81005b8:	2100      	movs	r1, #0
 81005ba:	4805      	ldr	r0, [pc, #20]	; (81005d0 <MX_I2C2_Init+0x74>)
 81005bc:	f001 f89c 	bl	81016f8 <HAL_I2CEx_ConfigDigitalFilter>
 81005c0:	4603      	mov	r3, r0
 81005c2:	2b00      	cmp	r3, #0
 81005c4:	d001      	beq.n	81005ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81005c6:	f000 f935 	bl	8100834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 81005ca:	bf00      	nop
 81005cc:	bd80      	pop	{r7, pc}
 81005ce:	bf00      	nop
 81005d0:	10004ba0 	.word	0x10004ba0
 81005d4:	40005800 	.word	0x40005800
 81005d8:	00301242 	.word	0x00301242

081005dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 81005dc:	b580      	push	{r7, lr}
 81005de:	b0b8      	sub	sp, #224	; 0xe0
 81005e0:	af00      	add	r7, sp, #0
 81005e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81005e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81005e8:	2200      	movs	r2, #0
 81005ea:	601a      	str	r2, [r3, #0]
 81005ec:	605a      	str	r2, [r3, #4]
 81005ee:	609a      	str	r2, [r3, #8]
 81005f0:	60da      	str	r2, [r3, #12]
 81005f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81005f4:	f107 0310 	add.w	r3, r7, #16
 81005f8:	22bc      	movs	r2, #188	; 0xbc
 81005fa:	2100      	movs	r1, #0
 81005fc:	4618      	mov	r0, r3
 81005fe:	f008 fc15 	bl	8108e2c <memset>
  if(i2cHandle->Instance==I2C2)
 8100602:	687b      	ldr	r3, [r7, #4]
 8100604:	681b      	ldr	r3, [r3, #0]
 8100606:	4a29      	ldr	r2, [pc, #164]	; (81006ac <HAL_I2C_MspInit+0xd0>)
 8100608:	4293      	cmp	r3, r2
 810060a:	d14a      	bne.n	81006a2 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 810060c:	2308      	movs	r3, #8
 810060e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8100610:	2300      	movs	r3, #0
 8100612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100616:	f107 0310 	add.w	r3, r7, #16
 810061a:	4618      	mov	r0, r3
 810061c:	f001 fb44 	bl	8101ca8 <HAL_RCCEx_PeriphCLKConfig>
 8100620:	4603      	mov	r3, r0
 8100622:	2b00      	cmp	r3, #0
 8100624:	d001      	beq.n	810062a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8100626:	f000 f905 	bl	8100834 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810062a:	4b21      	ldr	r3, [pc, #132]	; (81006b0 <HAL_I2C_MspInit+0xd4>)
 810062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100630:	4a1f      	ldr	r2, [pc, #124]	; (81006b0 <HAL_I2C_MspInit+0xd4>)
 8100632:	f043 0302 	orr.w	r3, r3, #2
 8100636:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810063a:	4b1d      	ldr	r3, [pc, #116]	; (81006b0 <HAL_I2C_MspInit+0xd4>)
 810063c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100640:	f003 0302 	and.w	r3, r3, #2
 8100644:	60fb      	str	r3, [r7, #12]
 8100646:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL___OLED_Screen_Pin|I2C2_SDA___OLED_Screen_Pin;
 8100648:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810064c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100650:	2312      	movs	r3, #18
 8100652:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100656:	2301      	movs	r3, #1
 8100658:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810065c:	2300      	movs	r3, #0
 810065e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8100662:	2304      	movs	r3, #4
 8100664:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100668:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810066c:	4619      	mov	r1, r3
 810066e:	4811      	ldr	r0, [pc, #68]	; (81006b4 <HAL_I2C_MspInit+0xd8>)
 8100670:	f000 fd44 	bl	81010fc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8100674:	4b0e      	ldr	r3, [pc, #56]	; (81006b0 <HAL_I2C_MspInit+0xd4>)
 8100676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810067a:	4a0d      	ldr	r2, [pc, #52]	; (81006b0 <HAL_I2C_MspInit+0xd4>)
 810067c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8100680:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100684:	4b0a      	ldr	r3, [pc, #40]	; (81006b0 <HAL_I2C_MspInit+0xd4>)
 8100686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810068a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810068e:	60bb      	str	r3, [r7, #8]
 8100690:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8100692:	2200      	movs	r2, #0
 8100694:	2105      	movs	r1, #5
 8100696:	2021      	movs	r0, #33	; 0x21
 8100698:	f000 fce6 	bl	8101068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 810069c:	2021      	movs	r0, #33	; 0x21
 810069e:	f000 fcfd 	bl	810109c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 81006a2:	bf00      	nop
 81006a4:	37e0      	adds	r7, #224	; 0xe0
 81006a6:	46bd      	mov	sp, r7
 81006a8:	bd80      	pop	{r7, pc}
 81006aa:	bf00      	nop
 81006ac:	40005800 	.word	0x40005800
 81006b0:	58024400 	.word	0x58024400
 81006b4:	58020400 	.word	0x58020400

081006b8 <rpmsg_send>:
{
 81006b8:	b580      	push	{r7, lr}
 81006ba:	b086      	sub	sp, #24
 81006bc:	af02      	add	r7, sp, #8
 81006be:	60f8      	str	r0, [r7, #12]
 81006c0:	60b9      	str	r1, [r7, #8]
 81006c2:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 81006c4:	68fb      	ldr	r3, [r7, #12]
 81006c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81006c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81006cc:	d101      	bne.n	81006d2 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 81006ce:	4b09      	ldr	r3, [pc, #36]	; (81006f4 <rpmsg_send+0x3c>)
 81006d0:	e00c      	b.n	81006ec <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 81006d2:	68fb      	ldr	r3, [r7, #12]
 81006d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 81006d6:	68fb      	ldr	r3, [r7, #12]
 81006d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81006da:	2301      	movs	r3, #1
 81006dc:	9301      	str	r3, [sp, #4]
 81006de:	687b      	ldr	r3, [r7, #4]
 81006e0:	9300      	str	r3, [sp, #0]
 81006e2:	68bb      	ldr	r3, [r7, #8]
 81006e4:	68f8      	ldr	r0, [r7, #12]
 81006e6:	f006 ff79 	bl	81075dc <rpmsg_send_offchannel_raw>
 81006ea:	4603      	mov	r3, r0
}
 81006ec:	4618      	mov	r0, r3
 81006ee:	3710      	adds	r7, #16
 81006f0:	46bd      	mov	sp, r7
 81006f2:	bd80      	pop	{r7, pc}
 81006f4:	fffff829 	.word	0xfffff829

081006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81006f8:	b580      	push	{r7, lr}
 81006fa:	b084      	sub	sp, #16
 81006fc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	int32_t status = 0;
 81006fe:	2300      	movs	r3, #0
 8100700:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100702:	4b3c      	ldr	r3, [pc, #240]	; (81007f4 <main+0xfc>)
 8100704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100708:	4a3a      	ldr	r2, [pc, #232]	; (81007f4 <main+0xfc>)
 810070a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810070e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100712:	4b38      	ldr	r3, [pc, #224]	; (81007f4 <main+0xfc>)
 8100714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810071c:	603b      	str	r3, [r7, #0]
 810071e:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100720:	2001      	movs	r0, #1
 8100722:	f000 fec9 	bl	81014b8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100726:	f001 f8ad 	bl	8101884 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810072a:	2201      	movs	r2, #1
 810072c:	2102      	movs	r1, #2
 810072e:	2000      	movs	r0, #0
 8100730:	f001 f82e 	bl	8101790 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100734:	4b30      	ldr	r3, [pc, #192]	; (81007f8 <main+0x100>)
 8100736:	681b      	ldr	r3, [r3, #0]
 8100738:	091b      	lsrs	r3, r3, #4
 810073a:	f003 030f 	and.w	r3, r3, #15
 810073e:	2b07      	cmp	r3, #7
 8100740:	d108      	bne.n	8100754 <main+0x5c>
 8100742:	4b2e      	ldr	r3, [pc, #184]	; (81007fc <main+0x104>)
 8100744:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100748:	4a2c      	ldr	r2, [pc, #176]	; (81007fc <main+0x104>)
 810074a:	f043 0301 	orr.w	r3, r3, #1
 810074e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100752:	e007      	b.n	8100764 <main+0x6c>
 8100754:	4b29      	ldr	r3, [pc, #164]	; (81007fc <main+0x104>)
 8100756:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810075a:	4a28      	ldr	r2, [pc, #160]	; (81007fc <main+0x104>)
 810075c:	f043 0301 	orr.w	r3, r3, #1
 8100760:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  HAL_NVIC_ClearPendingIRQ(HSEM2_IRQn);
 8100764:	207e      	movs	r0, #126	; 0x7e
 8100766:	f000 fca7 	bl	81010b8 <HAL_NVIC_ClearPendingIRQ>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810076a:	f000 fb29 	bl	8100dc0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810076e:	f7ff fecb 	bl	8100508 <MX_GPIO_Init>
  MX_DMA_Init();
 8100772:	f7ff fe63 	bl	810043c <MX_DMA_Init>
  MX_I2C2_Init();
 8100776:	f7ff fef1 	bl	810055c <MX_I2C2_Init>
  MX_TIM2_Init();
 810077a:	f000 fa11 	bl	8100ba0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MAILBOX_Init();
 810077e:	f008 f805 	bl	810878c <MAILBOX_Init>

    if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL)!= HAL_OK)
 8100782:	2100      	movs	r1, #0
 8100784:	2001      	movs	r0, #1
 8100786:	f008 f903 	bl	8108990 <MX_OPENAMP_Init>
 810078a:	4603      	mov	r3, r0
 810078c:	2b00      	cmp	r3, #0
 810078e:	d001      	beq.n	8100794 <main+0x9c>
    {
  	  Error_Handler();
 8100790:	f000 f850 	bl	8100834 <Error_Handler>
    }

    /* create a endpoint for rmpsg communication */
    status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
 8100794:	2300      	movs	r3, #0
 8100796:	9300      	str	r3, [sp, #0]
 8100798:	4b19      	ldr	r3, [pc, #100]	; (8100800 <main+0x108>)
 810079a:	f04f 32ff 	mov.w	r2, #4294967295
 810079e:	4919      	ldr	r1, [pc, #100]	; (8100804 <main+0x10c>)
 81007a0:	4819      	ldr	r0, [pc, #100]	; (8100808 <main+0x110>)
 81007a2:	f008 f98b 	bl	8108abc <OPENAMP_create_endpoint>
 81007a6:	6078      	str	r0, [r7, #4]
  		  rpmsg_recv_callback, NULL);
    if (status < 0)
 81007a8:	687b      	ldr	r3, [r7, #4]
 81007aa:	2b00      	cmp	r3, #0
 81007ac:	da17      	bge.n	81007de <main+0xe6>
    {
  	  Error_Handler();
 81007ae:	f000 f841 	bl	8100834 <Error_Handler>
    }

    /* Pingpong application*/
    /* Reveice an interger from the master, incremennt it and send back the result to the master*/
    while (message < 100)
 81007b2:	e014      	b.n	81007de <main+0xe6>
    {
  	  message = receive_message();
 81007b4:	f7ff fe12 	bl	81003dc <receive_message>
 81007b8:	4603      	mov	r3, r0
 81007ba:	4a14      	ldr	r2, [pc, #80]	; (810080c <main+0x114>)
 81007bc:	6013      	str	r3, [r2, #0]
  	  message++;
 81007be:	4b13      	ldr	r3, [pc, #76]	; (810080c <main+0x114>)
 81007c0:	681b      	ldr	r3, [r3, #0]
 81007c2:	3301      	adds	r3, #1
 81007c4:	4a11      	ldr	r2, [pc, #68]	; (810080c <main+0x114>)
 81007c6:	6013      	str	r3, [r2, #0]
  	  status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 81007c8:	2204      	movs	r2, #4
 81007ca:	4910      	ldr	r1, [pc, #64]	; (810080c <main+0x114>)
 81007cc:	480e      	ldr	r0, [pc, #56]	; (8100808 <main+0x110>)
 81007ce:	f7ff ff73 	bl	81006b8 <rpmsg_send>
 81007d2:	6078      	str	r0, [r7, #4]
  	  if (status < 0)
 81007d4:	687b      	ldr	r3, [r7, #4]
 81007d6:	2b00      	cmp	r3, #0
 81007d8:	da01      	bge.n	81007de <main+0xe6>
  	  {
  		  Error_Handler();
 81007da:	f000 f82b 	bl	8100834 <Error_Handler>
    while (message < 100)
 81007de:	4b0b      	ldr	r3, [pc, #44]	; (810080c <main+0x114>)
 81007e0:	681b      	ldr	r3, [r3, #0]
 81007e2:	2b63      	cmp	r3, #99	; 0x63
 81007e4:	d9e6      	bls.n	81007b4 <main+0xbc>
  	  }
    }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 81007e6:	f003 fad5 	bl	8103d94 <osKernelInitialize>
  MX_FREERTOS_Init();
 81007ea:	f7ff fe61 	bl	81004b0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 81007ee:	f003 faf5 	bl	8103ddc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81007f2:	e7fe      	b.n	81007f2 <main+0xfa>
 81007f4:	58024400 	.word	0x58024400
 81007f8:	e000ed00 	.word	0xe000ed00
 81007fc:	58026400 	.word	0x58026400
 8100800:	081003a1 	.word	0x081003a1
 8100804:	08109ca0 	.word	0x08109ca0
 8100808:	10004bf4 	.word	0x10004bf4
 810080c:	10004bec 	.word	0x10004bec

08100810 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100810:	b580      	push	{r7, lr}
 8100812:	b082      	sub	sp, #8
 8100814:	af00      	add	r7, sp, #0
 8100816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8100818:	687b      	ldr	r3, [r7, #4]
 810081a:	681b      	ldr	r3, [r3, #0]
 810081c:	4a04      	ldr	r2, [pc, #16]	; (8100830 <HAL_TIM_PeriodElapsedCallback+0x20>)
 810081e:	4293      	cmp	r3, r2
 8100820:	d101      	bne.n	8100826 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100822:	f000 fb2b 	bl	8100e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100826:	bf00      	nop
 8100828:	3708      	adds	r7, #8
 810082a:	46bd      	mov	sp, r7
 810082c:	bd80      	pop	{r7, pc}
 810082e:	bf00      	nop
 8100830:	40001c00 	.word	0x40001c00

08100834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100834:	b480      	push	{r7}
 8100836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100838:	b672      	cpsid	i
}
 810083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810083c:	e7fe      	b.n	810083c <Error_Handler+0x8>
	...

08100840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100840:	b580      	push	{r7, lr}
 8100842:	b082      	sub	sp, #8
 8100844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100846:	4b18      	ldr	r3, [pc, #96]	; (81008a8 <HAL_MspInit+0x68>)
 8100848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810084c:	4a16      	ldr	r2, [pc, #88]	; (81008a8 <HAL_MspInit+0x68>)
 810084e:	f043 0302 	orr.w	r3, r3, #2
 8100852:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100856:	4b14      	ldr	r3, [pc, #80]	; (81008a8 <HAL_MspInit+0x68>)
 8100858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810085c:	f003 0302 	and.w	r3, r3, #2
 8100860:	607b      	str	r3, [r7, #4]
 8100862:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100864:	2200      	movs	r2, #0
 8100866:	210f      	movs	r1, #15
 8100868:	f06f 0001 	mvn.w	r0, #1
 810086c:	f000 fbfc 	bl	8101068 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 5, 0);
 8100870:	2200      	movs	r2, #0
 8100872:	2105      	movs	r1, #5
 8100874:	2040      	movs	r0, #64	; 0x40
 8100876:	f000 fbf7 	bl	8101068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 810087a:	2040      	movs	r0, #64	; 0x40
 810087c:	f000 fc0e 	bl	810109c <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8100880:	2200      	movs	r2, #0
 8100882:	2105      	movs	r1, #5
 8100884:	207e      	movs	r0, #126	; 0x7e
 8100886:	f000 fbef 	bl	8101068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810088a:	207e      	movs	r0, #126	; 0x7e
 810088c:	f000 fc06 	bl	810109c <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 5, 0);
 8100890:	2200      	movs	r2, #0
 8100892:	2105      	movs	r1, #5
 8100894:	2094      	movs	r0, #148	; 0x94
 8100896:	f000 fbe7 	bl	8101068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 810089a:	2094      	movs	r0, #148	; 0x94
 810089c:	f000 fbfe 	bl	810109c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81008a0:	bf00      	nop
 81008a2:	3708      	adds	r7, #8
 81008a4:	46bd      	mov	sp, r7
 81008a6:	bd80      	pop	{r7, pc}
 81008a8:	58024400 	.word	0x58024400

081008ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81008ac:	b580      	push	{r7, lr}
 81008ae:	b090      	sub	sp, #64	; 0x40
 81008b0:	af00      	add	r7, sp, #0
 81008b2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM13 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81008b4:	687b      	ldr	r3, [r7, #4]
 81008b6:	2b0f      	cmp	r3, #15
 81008b8:	d827      	bhi.n	810090a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0U);
 81008ba:	2200      	movs	r2, #0
 81008bc:	6879      	ldr	r1, [r7, #4]
 81008be:	202c      	movs	r0, #44	; 0x2c
 81008c0:	f000 fbd2 	bl	8101068 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 81008c4:	202c      	movs	r0, #44	; 0x2c
 81008c6:	f000 fbe9 	bl	810109c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 81008ca:	4a29      	ldr	r2, [pc, #164]	; (8100970 <HAL_InitTick+0xc4>)
 81008cc:	687b      	ldr	r3, [r7, #4]
 81008ce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 81008d0:	4b28      	ldr	r3, [pc, #160]	; (8100974 <HAL_InitTick+0xc8>)
 81008d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81008d6:	4a27      	ldr	r2, [pc, #156]	; (8100974 <HAL_InitTick+0xc8>)
 81008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81008dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81008e0:	4b24      	ldr	r3, [pc, #144]	; (8100974 <HAL_InitTick+0xc8>)
 81008e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81008ea:	60fb      	str	r3, [r7, #12]
 81008ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81008ee:	f107 0210 	add.w	r2, r7, #16
 81008f2:	f107 0314 	add.w	r3, r7, #20
 81008f6:	4611      	mov	r1, r2
 81008f8:	4618      	mov	r0, r3
 81008fa:	f001 f993 	bl	8101c24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81008fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8100900:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8100904:	2b00      	cmp	r3, #0
 8100906:	d106      	bne.n	8100916 <HAL_InitTick+0x6a>
 8100908:	e001      	b.n	810090e <HAL_InitTick+0x62>
    return HAL_ERROR;
 810090a:	2301      	movs	r3, #1
 810090c:	e02b      	b.n	8100966 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810090e:	f001 f973 	bl	8101bf8 <HAL_RCC_GetPCLK1Freq>
 8100912:	63f8      	str	r0, [r7, #60]	; 0x3c
 8100914:	e004      	b.n	8100920 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100916:	f001 f96f 	bl	8101bf8 <HAL_RCC_GetPCLK1Freq>
 810091a:	4603      	mov	r3, r0
 810091c:	005b      	lsls	r3, r3, #1
 810091e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8100922:	4a15      	ldr	r2, [pc, #84]	; (8100978 <HAL_InitTick+0xcc>)
 8100924:	fba2 2303 	umull	r2, r3, r2, r3
 8100928:	0c9b      	lsrs	r3, r3, #18
 810092a:	3b01      	subs	r3, #1
 810092c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 810092e:	4b13      	ldr	r3, [pc, #76]	; (810097c <HAL_InitTick+0xd0>)
 8100930:	4a13      	ldr	r2, [pc, #76]	; (8100980 <HAL_InitTick+0xd4>)
 8100932:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8100934:	4b11      	ldr	r3, [pc, #68]	; (810097c <HAL_InitTick+0xd0>)
 8100936:	f240 32e7 	movw	r2, #999	; 0x3e7
 810093a:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 810093c:	4a0f      	ldr	r2, [pc, #60]	; (810097c <HAL_InitTick+0xd0>)
 810093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100940:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8100942:	4b0e      	ldr	r3, [pc, #56]	; (810097c <HAL_InitTick+0xd0>)
 8100944:	2200      	movs	r2, #0
 8100946:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100948:	4b0c      	ldr	r3, [pc, #48]	; (810097c <HAL_InitTick+0xd0>)
 810094a:	2200      	movs	r2, #0
 810094c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 810094e:	480b      	ldr	r0, [pc, #44]	; (810097c <HAL_InitTick+0xd0>)
 8100950:	f002 fa4e 	bl	8102df0 <HAL_TIM_Base_Init>
 8100954:	4603      	mov	r3, r0
 8100956:	2b00      	cmp	r3, #0
 8100958:	d104      	bne.n	8100964 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 810095a:	4808      	ldr	r0, [pc, #32]	; (810097c <HAL_InitTick+0xd0>)
 810095c:	f002 faaa 	bl	8102eb4 <HAL_TIM_Base_Start_IT>
 8100960:	4603      	mov	r3, r0
 8100962:	e000      	b.n	8100966 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8100964:	2301      	movs	r3, #1
}
 8100966:	4618      	mov	r0, r3
 8100968:	3740      	adds	r7, #64	; 0x40
 810096a:	46bd      	mov	sp, r7
 810096c:	bd80      	pop	{r7, pc}
 810096e:	bf00      	nop
 8100970:	10000008 	.word	0x10000008
 8100974:	58024400 	.word	0x58024400
 8100978:	431bde83 	.word	0x431bde83
 810097c:	10004c38 	.word	0x10004c38
 8100980:	40001c00 	.word	0x40001c00

08100984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100984:	b480      	push	{r7}
 8100986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100988:	e7fe      	b.n	8100988 <NMI_Handler+0x4>

0810098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810098a:	b480      	push	{r7}
 810098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810098e:	e7fe      	b.n	810098e <HardFault_Handler+0x4>

08100990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100990:	b480      	push	{r7}
 8100992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100994:	e7fe      	b.n	8100994 <MemManage_Handler+0x4>

08100996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100996:	b480      	push	{r7}
 8100998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810099a:	e7fe      	b.n	810099a <BusFault_Handler+0x4>

0810099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810099c:	b480      	push	{r7}
 810099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81009a0:	e7fe      	b.n	81009a0 <UsageFault_Handler+0x4>

081009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81009a2:	b480      	push	{r7}
 81009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81009a6:	bf00      	nop
 81009a8:	46bd      	mov	sp, r7
 81009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009ae:	4770      	bx	lr

081009b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81009b0:	b580      	push	{r7, lr}
 81009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81009b4:	4802      	ldr	r0, [pc, #8]	; (81009c0 <TIM2_IRQHandler+0x10>)
 81009b6:	f002 fb44 	bl	8103042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81009ba:	bf00      	nop
 81009bc:	bd80      	pop	{r7, pc}
 81009be:	bf00      	nop
 81009c0:	10004c84 	.word	0x10004c84

081009c4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 81009c4:	b580      	push	{r7, lr}
 81009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 81009c8:	4802      	ldr	r0, [pc, #8]	; (81009d4 <I2C2_EV_IRQHandler+0x10>)
 81009ca:	f000 fe30 	bl	810162e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 81009ce:	bf00      	nop
 81009d0:	bd80      	pop	{r7, pc}
 81009d2:	bf00      	nop
 81009d4:	10004ba0 	.word	0x10004ba0

081009d8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 81009d8:	b580      	push	{r7, lr}
 81009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 81009dc:	4802      	ldr	r0, [pc, #8]	; (81009e8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 81009de:	f002 fb30 	bl	8103042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 81009e2:	bf00      	nop
 81009e4:	bd80      	pop	{r7, pc}
 81009e6:	bf00      	nop
 81009e8:	10004c38 	.word	0x10004c38

081009ec <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 81009ec:	b480      	push	{r7}
 81009ee:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 81009f0:	bf00      	nop
 81009f2:	46bd      	mov	sp, r7
 81009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009f8:	4770      	bx	lr

081009fa <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 81009fa:	b580      	push	{r7, lr}
 81009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 81009fe:	f000 fd6d 	bl	81014dc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100a02:	bf00      	nop
 8100a04:	bd80      	pop	{r7, pc}

08100a06 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8100a06:	b480      	push	{r7}
 8100a08:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8100a0a:	bf00      	nop
 8100a0c:	46bd      	mov	sp, r7
 8100a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a12:	4770      	bx	lr

08100a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8100a14:	b480      	push	{r7}
 8100a16:	af00      	add	r7, sp, #0
	return 1;
 8100a18:	2301      	movs	r3, #1
}
 8100a1a:	4618      	mov	r0, r3
 8100a1c:	46bd      	mov	sp, r7
 8100a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a22:	4770      	bx	lr

08100a24 <_kill>:

int _kill(int pid, int sig)
{
 8100a24:	b580      	push	{r7, lr}
 8100a26:	b082      	sub	sp, #8
 8100a28:	af00      	add	r7, sp, #0
 8100a2a:	6078      	str	r0, [r7, #4]
 8100a2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8100a2e:	f008 f8a9 	bl	8108b84 <__errno>
 8100a32:	4603      	mov	r3, r0
 8100a34:	2216      	movs	r2, #22
 8100a36:	601a      	str	r2, [r3, #0]
	return -1;
 8100a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100a3c:	4618      	mov	r0, r3
 8100a3e:	3708      	adds	r7, #8
 8100a40:	46bd      	mov	sp, r7
 8100a42:	bd80      	pop	{r7, pc}

08100a44 <_exit>:

void _exit (int status)
{
 8100a44:	b580      	push	{r7, lr}
 8100a46:	b082      	sub	sp, #8
 8100a48:	af00      	add	r7, sp, #0
 8100a4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8100a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8100a50:	6878      	ldr	r0, [r7, #4]
 8100a52:	f7ff ffe7 	bl	8100a24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8100a56:	e7fe      	b.n	8100a56 <_exit+0x12>

08100a58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100a58:	b580      	push	{r7, lr}
 8100a5a:	b086      	sub	sp, #24
 8100a5c:	af00      	add	r7, sp, #0
 8100a5e:	60f8      	str	r0, [r7, #12]
 8100a60:	60b9      	str	r1, [r7, #8]
 8100a62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a64:	2300      	movs	r3, #0
 8100a66:	617b      	str	r3, [r7, #20]
 8100a68:	e00a      	b.n	8100a80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8100a6a:	f3af 8000 	nop.w
 8100a6e:	4601      	mov	r1, r0
 8100a70:	68bb      	ldr	r3, [r7, #8]
 8100a72:	1c5a      	adds	r2, r3, #1
 8100a74:	60ba      	str	r2, [r7, #8]
 8100a76:	b2ca      	uxtb	r2, r1
 8100a78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a7a:	697b      	ldr	r3, [r7, #20]
 8100a7c:	3301      	adds	r3, #1
 8100a7e:	617b      	str	r3, [r7, #20]
 8100a80:	697a      	ldr	r2, [r7, #20]
 8100a82:	687b      	ldr	r3, [r7, #4]
 8100a84:	429a      	cmp	r2, r3
 8100a86:	dbf0      	blt.n	8100a6a <_read+0x12>
	}

return len;
 8100a88:	687b      	ldr	r3, [r7, #4]
}
 8100a8a:	4618      	mov	r0, r3
 8100a8c:	3718      	adds	r7, #24
 8100a8e:	46bd      	mov	sp, r7
 8100a90:	bd80      	pop	{r7, pc}

08100a92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100a92:	b580      	push	{r7, lr}
 8100a94:	b086      	sub	sp, #24
 8100a96:	af00      	add	r7, sp, #0
 8100a98:	60f8      	str	r0, [r7, #12]
 8100a9a:	60b9      	str	r1, [r7, #8]
 8100a9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a9e:	2300      	movs	r3, #0
 8100aa0:	617b      	str	r3, [r7, #20]
 8100aa2:	e009      	b.n	8100ab8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8100aa4:	68bb      	ldr	r3, [r7, #8]
 8100aa6:	1c5a      	adds	r2, r3, #1
 8100aa8:	60ba      	str	r2, [r7, #8]
 8100aaa:	781b      	ldrb	r3, [r3, #0]
 8100aac:	4618      	mov	r0, r3
 8100aae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100ab2:	697b      	ldr	r3, [r7, #20]
 8100ab4:	3301      	adds	r3, #1
 8100ab6:	617b      	str	r3, [r7, #20]
 8100ab8:	697a      	ldr	r2, [r7, #20]
 8100aba:	687b      	ldr	r3, [r7, #4]
 8100abc:	429a      	cmp	r2, r3
 8100abe:	dbf1      	blt.n	8100aa4 <_write+0x12>
	}
	return len;
 8100ac0:	687b      	ldr	r3, [r7, #4]
}
 8100ac2:	4618      	mov	r0, r3
 8100ac4:	3718      	adds	r7, #24
 8100ac6:	46bd      	mov	sp, r7
 8100ac8:	bd80      	pop	{r7, pc}

08100aca <_close>:

int _close(int file)
{
 8100aca:	b480      	push	{r7}
 8100acc:	b083      	sub	sp, #12
 8100ace:	af00      	add	r7, sp, #0
 8100ad0:	6078      	str	r0, [r7, #4]
	return -1;
 8100ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100ad6:	4618      	mov	r0, r3
 8100ad8:	370c      	adds	r7, #12
 8100ada:	46bd      	mov	sp, r7
 8100adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ae0:	4770      	bx	lr

08100ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8100ae2:	b480      	push	{r7}
 8100ae4:	b083      	sub	sp, #12
 8100ae6:	af00      	add	r7, sp, #0
 8100ae8:	6078      	str	r0, [r7, #4]
 8100aea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8100aec:	683b      	ldr	r3, [r7, #0]
 8100aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8100af2:	605a      	str	r2, [r3, #4]
	return 0;
 8100af4:	2300      	movs	r3, #0
}
 8100af6:	4618      	mov	r0, r3
 8100af8:	370c      	adds	r7, #12
 8100afa:	46bd      	mov	sp, r7
 8100afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b00:	4770      	bx	lr

08100b02 <_isatty>:

int _isatty(int file)
{
 8100b02:	b480      	push	{r7}
 8100b04:	b083      	sub	sp, #12
 8100b06:	af00      	add	r7, sp, #0
 8100b08:	6078      	str	r0, [r7, #4]
	return 1;
 8100b0a:	2301      	movs	r3, #1
}
 8100b0c:	4618      	mov	r0, r3
 8100b0e:	370c      	adds	r7, #12
 8100b10:	46bd      	mov	sp, r7
 8100b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b16:	4770      	bx	lr

08100b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100b18:	b480      	push	{r7}
 8100b1a:	b085      	sub	sp, #20
 8100b1c:	af00      	add	r7, sp, #0
 8100b1e:	60f8      	str	r0, [r7, #12]
 8100b20:	60b9      	str	r1, [r7, #8]
 8100b22:	607a      	str	r2, [r7, #4]
	return 0;
 8100b24:	2300      	movs	r3, #0
}
 8100b26:	4618      	mov	r0, r3
 8100b28:	3714      	adds	r7, #20
 8100b2a:	46bd      	mov	sp, r7
 8100b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b30:	4770      	bx	lr
	...

08100b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100b34:	b580      	push	{r7, lr}
 8100b36:	b086      	sub	sp, #24
 8100b38:	af00      	add	r7, sp, #0
 8100b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100b3c:	4a14      	ldr	r2, [pc, #80]	; (8100b90 <_sbrk+0x5c>)
 8100b3e:	4b15      	ldr	r3, [pc, #84]	; (8100b94 <_sbrk+0x60>)
 8100b40:	1ad3      	subs	r3, r2, r3
 8100b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100b44:	697b      	ldr	r3, [r7, #20]
 8100b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100b48:	4b13      	ldr	r3, [pc, #76]	; (8100b98 <_sbrk+0x64>)
 8100b4a:	681b      	ldr	r3, [r3, #0]
 8100b4c:	2b00      	cmp	r3, #0
 8100b4e:	d102      	bne.n	8100b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100b50:	4b11      	ldr	r3, [pc, #68]	; (8100b98 <_sbrk+0x64>)
 8100b52:	4a12      	ldr	r2, [pc, #72]	; (8100b9c <_sbrk+0x68>)
 8100b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100b56:	4b10      	ldr	r3, [pc, #64]	; (8100b98 <_sbrk+0x64>)
 8100b58:	681a      	ldr	r2, [r3, #0]
 8100b5a:	687b      	ldr	r3, [r7, #4]
 8100b5c:	4413      	add	r3, r2
 8100b5e:	693a      	ldr	r2, [r7, #16]
 8100b60:	429a      	cmp	r2, r3
 8100b62:	d207      	bcs.n	8100b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100b64:	f008 f80e 	bl	8108b84 <__errno>
 8100b68:	4603      	mov	r3, r0
 8100b6a:	220c      	movs	r2, #12
 8100b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8100b72:	e009      	b.n	8100b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8100b74:	4b08      	ldr	r3, [pc, #32]	; (8100b98 <_sbrk+0x64>)
 8100b76:	681b      	ldr	r3, [r3, #0]
 8100b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100b7a:	4b07      	ldr	r3, [pc, #28]	; (8100b98 <_sbrk+0x64>)
 8100b7c:	681a      	ldr	r2, [r3, #0]
 8100b7e:	687b      	ldr	r3, [r7, #4]
 8100b80:	4413      	add	r3, r2
 8100b82:	4a05      	ldr	r2, [pc, #20]	; (8100b98 <_sbrk+0x64>)
 8100b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100b86:	68fb      	ldr	r3, [r7, #12]
}
 8100b88:	4618      	mov	r0, r3
 8100b8a:	3718      	adds	r7, #24
 8100b8c:	46bd      	mov	sp, r7
 8100b8e:	bd80      	pop	{r7, pc}
 8100b90:	10048000 	.word	0x10048000
 8100b94:	00000400 	.word	0x00000400
 8100b98:	10000140 	.word	0x10000140
 8100b9c:	10004d48 	.word	0x10004d48

08100ba0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8100ba0:	b580      	push	{r7, lr}
 8100ba2:	b08a      	sub	sp, #40	; 0x28
 8100ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100ba6:	f107 031c 	add.w	r3, r7, #28
 8100baa:	2200      	movs	r2, #0
 8100bac:	601a      	str	r2, [r3, #0]
 8100bae:	605a      	str	r2, [r3, #4]
 8100bb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100bb2:	463b      	mov	r3, r7
 8100bb4:	2200      	movs	r2, #0
 8100bb6:	601a      	str	r2, [r3, #0]
 8100bb8:	605a      	str	r2, [r3, #4]
 8100bba:	609a      	str	r2, [r3, #8]
 8100bbc:	60da      	str	r2, [r3, #12]
 8100bbe:	611a      	str	r2, [r3, #16]
 8100bc0:	615a      	str	r2, [r3, #20]
 8100bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8100bc4:	4b28      	ldr	r3, [pc, #160]	; (8100c68 <MX_TIM2_Init+0xc8>)
 8100bc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100bca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 8100bcc:	4b26      	ldr	r3, [pc, #152]	; (8100c68 <MX_TIM2_Init+0xc8>)
 8100bce:	224b      	movs	r2, #75	; 0x4b
 8100bd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100bd2:	4b25      	ldr	r3, [pc, #148]	; (8100c68 <MX_TIM2_Init+0xc8>)
 8100bd4:	2200      	movs	r2, #0
 8100bd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8100bd8:	4b23      	ldr	r3, [pc, #140]	; (8100c68 <MX_TIM2_Init+0xc8>)
 8100bda:	f644 6220 	movw	r2, #20000	; 0x4e20
 8100bde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100be0:	4b21      	ldr	r3, [pc, #132]	; (8100c68 <MX_TIM2_Init+0xc8>)
 8100be2:	2200      	movs	r2, #0
 8100be4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8100be6:	4b20      	ldr	r3, [pc, #128]	; (8100c68 <MX_TIM2_Init+0xc8>)
 8100be8:	2280      	movs	r2, #128	; 0x80
 8100bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8100bec:	481e      	ldr	r0, [pc, #120]	; (8100c68 <MX_TIM2_Init+0xc8>)
 8100bee:	f002 f9d1 	bl	8102f94 <HAL_TIM_PWM_Init>
 8100bf2:	4603      	mov	r3, r0
 8100bf4:	2b00      	cmp	r3, #0
 8100bf6:	d001      	beq.n	8100bfc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8100bf8:	f7ff fe1c 	bl	8100834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100bfc:	2300      	movs	r3, #0
 8100bfe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100c00:	2300      	movs	r3, #0
 8100c02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8100c04:	f107 031c 	add.w	r3, r7, #28
 8100c08:	4619      	mov	r1, r3
 8100c0a:	4817      	ldr	r0, [pc, #92]	; (8100c68 <MX_TIM2_Init+0xc8>)
 8100c0c:	f002 ffd8 	bl	8103bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8100c10:	4603      	mov	r3, r0
 8100c12:	2b00      	cmp	r3, #0
 8100c14:	d001      	beq.n	8100c1a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8100c16:	f7ff fe0d 	bl	8100834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8100c1a:	2360      	movs	r3, #96	; 0x60
 8100c1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8100c1e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8100c22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100c24:	2300      	movs	r3, #0
 8100c26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100c28:	2300      	movs	r3, #0
 8100c2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100c2c:	463b      	mov	r3, r7
 8100c2e:	2200      	movs	r2, #0
 8100c30:	4619      	mov	r1, r3
 8100c32:	480d      	ldr	r0, [pc, #52]	; (8100c68 <MX_TIM2_Init+0xc8>)
 8100c34:	f002 fb24 	bl	8103280 <HAL_TIM_PWM_ConfigChannel>
 8100c38:	4603      	mov	r3, r0
 8100c3a:	2b00      	cmp	r3, #0
 8100c3c:	d001      	beq.n	8100c42 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8100c3e:	f7ff fdf9 	bl	8100834 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100c42:	463b      	mov	r3, r7
 8100c44:	2204      	movs	r2, #4
 8100c46:	4619      	mov	r1, r3
 8100c48:	4807      	ldr	r0, [pc, #28]	; (8100c68 <MX_TIM2_Init+0xc8>)
 8100c4a:	f002 fb19 	bl	8103280 <HAL_TIM_PWM_ConfigChannel>
 8100c4e:	4603      	mov	r3, r0
 8100c50:	2b00      	cmp	r3, #0
 8100c52:	d001      	beq.n	8100c58 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8100c54:	f7ff fdee 	bl	8100834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8100c58:	4803      	ldr	r0, [pc, #12]	; (8100c68 <MX_TIM2_Init+0xc8>)
 8100c5a:	f000 f82d 	bl	8100cb8 <HAL_TIM_MspPostInit>

}
 8100c5e:	bf00      	nop
 8100c60:	3728      	adds	r7, #40	; 0x28
 8100c62:	46bd      	mov	sp, r7
 8100c64:	bd80      	pop	{r7, pc}
 8100c66:	bf00      	nop
 8100c68:	10004c84 	.word	0x10004c84

08100c6c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8100c6c:	b580      	push	{r7, lr}
 8100c6e:	b084      	sub	sp, #16
 8100c70:	af00      	add	r7, sp, #0
 8100c72:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8100c74:	687b      	ldr	r3, [r7, #4]
 8100c76:	681b      	ldr	r3, [r3, #0]
 8100c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8100c7c:	d116      	bne.n	8100cac <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8100c7e:	4b0d      	ldr	r3, [pc, #52]	; (8100cb4 <HAL_TIM_PWM_MspInit+0x48>)
 8100c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100c84:	4a0b      	ldr	r2, [pc, #44]	; (8100cb4 <HAL_TIM_PWM_MspInit+0x48>)
 8100c86:	f043 0301 	orr.w	r3, r3, #1
 8100c8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100c8e:	4b09      	ldr	r3, [pc, #36]	; (8100cb4 <HAL_TIM_PWM_MspInit+0x48>)
 8100c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100c94:	f003 0301 	and.w	r3, r3, #1
 8100c98:	60fb      	str	r3, [r7, #12]
 8100c9a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8100c9c:	2200      	movs	r2, #0
 8100c9e:	2105      	movs	r1, #5
 8100ca0:	201c      	movs	r0, #28
 8100ca2:	f000 f9e1 	bl	8101068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8100ca6:	201c      	movs	r0, #28
 8100ca8:	f000 f9f8 	bl	810109c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8100cac:	bf00      	nop
 8100cae:	3710      	adds	r7, #16
 8100cb0:	46bd      	mov	sp, r7
 8100cb2:	bd80      	pop	{r7, pc}
 8100cb4:	58024400 	.word	0x58024400

08100cb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8100cb8:	b580      	push	{r7, lr}
 8100cba:	b08a      	sub	sp, #40	; 0x28
 8100cbc:	af00      	add	r7, sp, #0
 8100cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100cc0:	f107 0314 	add.w	r3, r7, #20
 8100cc4:	2200      	movs	r2, #0
 8100cc6:	601a      	str	r2, [r3, #0]
 8100cc8:	605a      	str	r2, [r3, #4]
 8100cca:	609a      	str	r2, [r3, #8]
 8100ccc:	60da      	str	r2, [r3, #12]
 8100cce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8100cd0:	687b      	ldr	r3, [r7, #4]
 8100cd2:	681b      	ldr	r3, [r3, #0]
 8100cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8100cd8:	d13d      	bne.n	8100d56 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100cda:	4b21      	ldr	r3, [pc, #132]	; (8100d60 <HAL_TIM_MspPostInit+0xa8>)
 8100cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ce0:	4a1f      	ldr	r2, [pc, #124]	; (8100d60 <HAL_TIM_MspPostInit+0xa8>)
 8100ce2:	f043 0301 	orr.w	r3, r3, #1
 8100ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cea:	4b1d      	ldr	r3, [pc, #116]	; (8100d60 <HAL_TIM_MspPostInit+0xa8>)
 8100cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cf0:	f003 0301 	and.w	r3, r3, #1
 8100cf4:	613b      	str	r3, [r7, #16]
 8100cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100cf8:	4b19      	ldr	r3, [pc, #100]	; (8100d60 <HAL_TIM_MspPostInit+0xa8>)
 8100cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cfe:	4a18      	ldr	r2, [pc, #96]	; (8100d60 <HAL_TIM_MspPostInit+0xa8>)
 8100d00:	f043 0302 	orr.w	r3, r3, #2
 8100d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d08:	4b15      	ldr	r3, [pc, #84]	; (8100d60 <HAL_TIM_MspPostInit+0xa8>)
 8100d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d0e:	f003 0302 	and.w	r3, r3, #2
 8100d12:	60fb      	str	r3, [r7, #12]
 8100d14:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_CH1___Gimbal_Pin;
 8100d16:	2301      	movs	r3, #1
 8100d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d1a:	2302      	movs	r3, #2
 8100d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d1e:	2300      	movs	r3, #0
 8100d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d22:	2300      	movs	r3, #0
 8100d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8100d26:	2301      	movs	r3, #1
 8100d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1___Gimbal_GPIO_Port, &GPIO_InitStruct);
 8100d2a:	f107 0314 	add.w	r3, r7, #20
 8100d2e:	4619      	mov	r1, r3
 8100d30:	480c      	ldr	r0, [pc, #48]	; (8100d64 <HAL_TIM_MspPostInit+0xac>)
 8100d32:	f000 f9e3 	bl	81010fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM2_CH2___Gimbal_Pin;
 8100d36:	2308      	movs	r3, #8
 8100d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d3a:	2302      	movs	r3, #2
 8100d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d3e:	2300      	movs	r3, #0
 8100d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d42:	2300      	movs	r3, #0
 8100d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8100d46:	2301      	movs	r3, #1
 8100d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH2___Gimbal_GPIO_Port, &GPIO_InitStruct);
 8100d4a:	f107 0314 	add.w	r3, r7, #20
 8100d4e:	4619      	mov	r1, r3
 8100d50:	4805      	ldr	r0, [pc, #20]	; (8100d68 <HAL_TIM_MspPostInit+0xb0>)
 8100d52:	f000 f9d3 	bl	81010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8100d56:	bf00      	nop
 8100d58:	3728      	adds	r7, #40	; 0x28
 8100d5a:	46bd      	mov	sp, r7
 8100d5c:	bd80      	pop	{r7, pc}
 8100d5e:	bf00      	nop
 8100d60:	58024400 	.word	0x58024400
 8100d64:	58020000 	.word	0x58020000
 8100d68:	58020400 	.word	0x58020400

08100d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100da4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100d70:	f7ff fb48 	bl	8100404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100d74:	480c      	ldr	r0, [pc, #48]	; (8100da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100d76:	490d      	ldr	r1, [pc, #52]	; (8100dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100d78:	4a0d      	ldr	r2, [pc, #52]	; (8100db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100d7c:	e002      	b.n	8100d84 <LoopCopyDataInit>

08100d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100d82:	3304      	adds	r3, #4

08100d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100d88:	d3f9      	bcc.n	8100d7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100d8a:	4a0a      	ldr	r2, [pc, #40]	; (8100db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100d8c:	4c0a      	ldr	r4, [pc, #40]	; (8100db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100d90:	e001      	b.n	8100d96 <LoopFillZerobss>

08100d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100d94:	3204      	adds	r2, #4

08100d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100d98:	d3fb      	bcc.n	8100d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100d9a:	f008 f801 	bl	8108da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100d9e:	f7ff fcab 	bl	81006f8 <main>
  bx  lr
 8100da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100da4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100da8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100dac:	10000120 	.word	0x10000120
  ldr r2, =_sidata
 8100db0:	0810a01c 	.word	0x0810a01c
  ldr r2, =_sbss
 8100db4:	10000120 	.word	0x10000120
  ldr r4, =_ebss
 8100db8:	10004d44 	.word	0x10004d44

08100dbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100dbc:	e7fe      	b.n	8100dbc <ADC3_IRQHandler>
	...

08100dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100dc0:	b580      	push	{r7, lr}
 8100dc2:	b082      	sub	sp, #8
 8100dc4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100dc6:	4b28      	ldr	r3, [pc, #160]	; (8100e68 <HAL_Init+0xa8>)
 8100dc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100dcc:	4a26      	ldr	r2, [pc, #152]	; (8100e68 <HAL_Init+0xa8>)
 8100dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100dd2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100dd6:	4b24      	ldr	r3, [pc, #144]	; (8100e68 <HAL_Init+0xa8>)
 8100dd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100de0:	603b      	str	r3, [r7, #0]
 8100de2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100de4:	4b21      	ldr	r3, [pc, #132]	; (8100e6c <HAL_Init+0xac>)
 8100de6:	681b      	ldr	r3, [r3, #0]
 8100de8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100dec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100df0:	4a1e      	ldr	r2, [pc, #120]	; (8100e6c <HAL_Init+0xac>)
 8100df2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100df6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100df8:	4b1c      	ldr	r3, [pc, #112]	; (8100e6c <HAL_Init+0xac>)
 8100dfa:	681b      	ldr	r3, [r3, #0]
 8100dfc:	4a1b      	ldr	r2, [pc, #108]	; (8100e6c <HAL_Init+0xac>)
 8100dfe:	f043 0301 	orr.w	r3, r3, #1
 8100e02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100e04:	2003      	movs	r0, #3
 8100e06:	f000 f924 	bl	8101052 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100e0a:	f000 fd49 	bl	81018a0 <HAL_RCC_GetSysClockFreq>
 8100e0e:	4602      	mov	r2, r0
 8100e10:	4b15      	ldr	r3, [pc, #84]	; (8100e68 <HAL_Init+0xa8>)
 8100e12:	699b      	ldr	r3, [r3, #24]
 8100e14:	0a1b      	lsrs	r3, r3, #8
 8100e16:	f003 030f 	and.w	r3, r3, #15
 8100e1a:	4915      	ldr	r1, [pc, #84]	; (8100e70 <HAL_Init+0xb0>)
 8100e1c:	5ccb      	ldrb	r3, [r1, r3]
 8100e1e:	f003 031f 	and.w	r3, r3, #31
 8100e22:	fa22 f303 	lsr.w	r3, r2, r3
 8100e26:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100e28:	4b0f      	ldr	r3, [pc, #60]	; (8100e68 <HAL_Init+0xa8>)
 8100e2a:	699b      	ldr	r3, [r3, #24]
 8100e2c:	f003 030f 	and.w	r3, r3, #15
 8100e30:	4a0f      	ldr	r2, [pc, #60]	; (8100e70 <HAL_Init+0xb0>)
 8100e32:	5cd3      	ldrb	r3, [r2, r3]
 8100e34:	f003 031f 	and.w	r3, r3, #31
 8100e38:	687a      	ldr	r2, [r7, #4]
 8100e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8100e3e:	4a0d      	ldr	r2, [pc, #52]	; (8100e74 <HAL_Init+0xb4>)
 8100e40:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100e42:	4b0c      	ldr	r3, [pc, #48]	; (8100e74 <HAL_Init+0xb4>)
 8100e44:	681b      	ldr	r3, [r3, #0]
 8100e46:	4a0c      	ldr	r2, [pc, #48]	; (8100e78 <HAL_Init+0xb8>)
 8100e48:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100e4a:	200f      	movs	r0, #15
 8100e4c:	f7ff fd2e 	bl	81008ac <HAL_InitTick>
 8100e50:	4603      	mov	r3, r0
 8100e52:	2b00      	cmp	r3, #0
 8100e54:	d001      	beq.n	8100e5a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100e56:	2301      	movs	r3, #1
 8100e58:	e002      	b.n	8100e60 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100e5a:	f7ff fcf1 	bl	8100840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100e5e:	2300      	movs	r3, #0
}
 8100e60:	4618      	mov	r0, r3
 8100e62:	3708      	adds	r7, #8
 8100e64:	46bd      	mov	sp, r7
 8100e66:	bd80      	pop	{r7, pc}
 8100e68:	58024400 	.word	0x58024400
 8100e6c:	40024400 	.word	0x40024400
 8100e70:	08109eb8 	.word	0x08109eb8
 8100e74:	10000004 	.word	0x10000004
 8100e78:	10000000 	.word	0x10000000

08100e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100e7c:	b480      	push	{r7}
 8100e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100e80:	4b06      	ldr	r3, [pc, #24]	; (8100e9c <HAL_IncTick+0x20>)
 8100e82:	781b      	ldrb	r3, [r3, #0]
 8100e84:	461a      	mov	r2, r3
 8100e86:	4b06      	ldr	r3, [pc, #24]	; (8100ea0 <HAL_IncTick+0x24>)
 8100e88:	681b      	ldr	r3, [r3, #0]
 8100e8a:	4413      	add	r3, r2
 8100e8c:	4a04      	ldr	r2, [pc, #16]	; (8100ea0 <HAL_IncTick+0x24>)
 8100e8e:	6013      	str	r3, [r2, #0]
}
 8100e90:	bf00      	nop
 8100e92:	46bd      	mov	sp, r7
 8100e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e98:	4770      	bx	lr
 8100e9a:	bf00      	nop
 8100e9c:	1000000c 	.word	0x1000000c
 8100ea0:	10004cd0 	.word	0x10004cd0

08100ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100ea4:	b480      	push	{r7}
 8100ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8100ea8:	4b03      	ldr	r3, [pc, #12]	; (8100eb8 <HAL_GetTick+0x14>)
 8100eaa:	681b      	ldr	r3, [r3, #0]
}
 8100eac:	4618      	mov	r0, r3
 8100eae:	46bd      	mov	sp, r7
 8100eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100eb4:	4770      	bx	lr
 8100eb6:	bf00      	nop
 8100eb8:	10004cd0 	.word	0x10004cd0

08100ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ebc:	b480      	push	{r7}
 8100ebe:	b085      	sub	sp, #20
 8100ec0:	af00      	add	r7, sp, #0
 8100ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100ec4:	687b      	ldr	r3, [r7, #4]
 8100ec6:	f003 0307 	and.w	r3, r3, #7
 8100eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100ecc:	4b0c      	ldr	r3, [pc, #48]	; (8100f00 <__NVIC_SetPriorityGrouping+0x44>)
 8100ece:	68db      	ldr	r3, [r3, #12]
 8100ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100ed2:	68ba      	ldr	r2, [r7, #8]
 8100ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100ed8:	4013      	ands	r3, r2
 8100eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100edc:	68fb      	ldr	r3, [r7, #12]
 8100ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100ee0:	68bb      	ldr	r3, [r7, #8]
 8100ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100eee:	4a04      	ldr	r2, [pc, #16]	; (8100f00 <__NVIC_SetPriorityGrouping+0x44>)
 8100ef0:	68bb      	ldr	r3, [r7, #8]
 8100ef2:	60d3      	str	r3, [r2, #12]
}
 8100ef4:	bf00      	nop
 8100ef6:	3714      	adds	r7, #20
 8100ef8:	46bd      	mov	sp, r7
 8100efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100efe:	4770      	bx	lr
 8100f00:	e000ed00 	.word	0xe000ed00

08100f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100f04:	b480      	push	{r7}
 8100f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100f08:	4b04      	ldr	r3, [pc, #16]	; (8100f1c <__NVIC_GetPriorityGrouping+0x18>)
 8100f0a:	68db      	ldr	r3, [r3, #12]
 8100f0c:	0a1b      	lsrs	r3, r3, #8
 8100f0e:	f003 0307 	and.w	r3, r3, #7
}
 8100f12:	4618      	mov	r0, r3
 8100f14:	46bd      	mov	sp, r7
 8100f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f1a:	4770      	bx	lr
 8100f1c:	e000ed00 	.word	0xe000ed00

08100f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100f20:	b480      	push	{r7}
 8100f22:	b083      	sub	sp, #12
 8100f24:	af00      	add	r7, sp, #0
 8100f26:	4603      	mov	r3, r0
 8100f28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100f2e:	2b00      	cmp	r3, #0
 8100f30:	db0b      	blt.n	8100f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100f32:	88fb      	ldrh	r3, [r7, #6]
 8100f34:	f003 021f 	and.w	r2, r3, #31
 8100f38:	4907      	ldr	r1, [pc, #28]	; (8100f58 <__NVIC_EnableIRQ+0x38>)
 8100f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100f3e:	095b      	lsrs	r3, r3, #5
 8100f40:	2001      	movs	r0, #1
 8100f42:	fa00 f202 	lsl.w	r2, r0, r2
 8100f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100f4a:	bf00      	nop
 8100f4c:	370c      	adds	r7, #12
 8100f4e:	46bd      	mov	sp, r7
 8100f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f54:	4770      	bx	lr
 8100f56:	bf00      	nop
 8100f58:	e000e100 	.word	0xe000e100

08100f5c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8100f5c:	b480      	push	{r7}
 8100f5e:	b083      	sub	sp, #12
 8100f60:	af00      	add	r7, sp, #0
 8100f62:	4603      	mov	r3, r0
 8100f64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100f6a:	2b00      	cmp	r3, #0
 8100f6c:	db0c      	blt.n	8100f88 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100f6e:	88fb      	ldrh	r3, [r7, #6]
 8100f70:	f003 021f 	and.w	r2, r3, #31
 8100f74:	4907      	ldr	r1, [pc, #28]	; (8100f94 <__NVIC_ClearPendingIRQ+0x38>)
 8100f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100f7a:	095b      	lsrs	r3, r3, #5
 8100f7c:	2001      	movs	r0, #1
 8100f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8100f82:	3360      	adds	r3, #96	; 0x60
 8100f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8100f88:	bf00      	nop
 8100f8a:	370c      	adds	r7, #12
 8100f8c:	46bd      	mov	sp, r7
 8100f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f92:	4770      	bx	lr
 8100f94:	e000e100 	.word	0xe000e100

08100f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100f98:	b480      	push	{r7}
 8100f9a:	b083      	sub	sp, #12
 8100f9c:	af00      	add	r7, sp, #0
 8100f9e:	4603      	mov	r3, r0
 8100fa0:	6039      	str	r1, [r7, #0]
 8100fa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100fa8:	2b00      	cmp	r3, #0
 8100faa:	db0a      	blt.n	8100fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100fac:	683b      	ldr	r3, [r7, #0]
 8100fae:	b2da      	uxtb	r2, r3
 8100fb0:	490c      	ldr	r1, [pc, #48]	; (8100fe4 <__NVIC_SetPriority+0x4c>)
 8100fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100fb6:	0112      	lsls	r2, r2, #4
 8100fb8:	b2d2      	uxtb	r2, r2
 8100fba:	440b      	add	r3, r1
 8100fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100fc0:	e00a      	b.n	8100fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100fc2:	683b      	ldr	r3, [r7, #0]
 8100fc4:	b2da      	uxtb	r2, r3
 8100fc6:	4908      	ldr	r1, [pc, #32]	; (8100fe8 <__NVIC_SetPriority+0x50>)
 8100fc8:	88fb      	ldrh	r3, [r7, #6]
 8100fca:	f003 030f 	and.w	r3, r3, #15
 8100fce:	3b04      	subs	r3, #4
 8100fd0:	0112      	lsls	r2, r2, #4
 8100fd2:	b2d2      	uxtb	r2, r2
 8100fd4:	440b      	add	r3, r1
 8100fd6:	761a      	strb	r2, [r3, #24]
}
 8100fd8:	bf00      	nop
 8100fda:	370c      	adds	r7, #12
 8100fdc:	46bd      	mov	sp, r7
 8100fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fe2:	4770      	bx	lr
 8100fe4:	e000e100 	.word	0xe000e100
 8100fe8:	e000ed00 	.word	0xe000ed00

08100fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100fec:	b480      	push	{r7}
 8100fee:	b089      	sub	sp, #36	; 0x24
 8100ff0:	af00      	add	r7, sp, #0
 8100ff2:	60f8      	str	r0, [r7, #12]
 8100ff4:	60b9      	str	r1, [r7, #8]
 8100ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100ff8:	68fb      	ldr	r3, [r7, #12]
 8100ffa:	f003 0307 	and.w	r3, r3, #7
 8100ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101000:	69fb      	ldr	r3, [r7, #28]
 8101002:	f1c3 0307 	rsb	r3, r3, #7
 8101006:	2b04      	cmp	r3, #4
 8101008:	bf28      	it	cs
 810100a:	2304      	movcs	r3, #4
 810100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810100e:	69fb      	ldr	r3, [r7, #28]
 8101010:	3304      	adds	r3, #4
 8101012:	2b06      	cmp	r3, #6
 8101014:	d902      	bls.n	810101c <NVIC_EncodePriority+0x30>
 8101016:	69fb      	ldr	r3, [r7, #28]
 8101018:	3b03      	subs	r3, #3
 810101a:	e000      	b.n	810101e <NVIC_EncodePriority+0x32>
 810101c:	2300      	movs	r3, #0
 810101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101020:	f04f 32ff 	mov.w	r2, #4294967295
 8101024:	69bb      	ldr	r3, [r7, #24]
 8101026:	fa02 f303 	lsl.w	r3, r2, r3
 810102a:	43da      	mvns	r2, r3
 810102c:	68bb      	ldr	r3, [r7, #8]
 810102e:	401a      	ands	r2, r3
 8101030:	697b      	ldr	r3, [r7, #20]
 8101032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101034:	f04f 31ff 	mov.w	r1, #4294967295
 8101038:	697b      	ldr	r3, [r7, #20]
 810103a:	fa01 f303 	lsl.w	r3, r1, r3
 810103e:	43d9      	mvns	r1, r3
 8101040:	687b      	ldr	r3, [r7, #4]
 8101042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101044:	4313      	orrs	r3, r2
         );
}
 8101046:	4618      	mov	r0, r3
 8101048:	3724      	adds	r7, #36	; 0x24
 810104a:	46bd      	mov	sp, r7
 810104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101050:	4770      	bx	lr

08101052 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101052:	b580      	push	{r7, lr}
 8101054:	b082      	sub	sp, #8
 8101056:	af00      	add	r7, sp, #0
 8101058:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810105a:	6878      	ldr	r0, [r7, #4]
 810105c:	f7ff ff2e 	bl	8100ebc <__NVIC_SetPriorityGrouping>
}
 8101060:	bf00      	nop
 8101062:	3708      	adds	r7, #8
 8101064:	46bd      	mov	sp, r7
 8101066:	bd80      	pop	{r7, pc}

08101068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101068:	b580      	push	{r7, lr}
 810106a:	b086      	sub	sp, #24
 810106c:	af00      	add	r7, sp, #0
 810106e:	4603      	mov	r3, r0
 8101070:	60b9      	str	r1, [r7, #8]
 8101072:	607a      	str	r2, [r7, #4]
 8101074:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101076:	f7ff ff45 	bl	8100f04 <__NVIC_GetPriorityGrouping>
 810107a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810107c:	687a      	ldr	r2, [r7, #4]
 810107e:	68b9      	ldr	r1, [r7, #8]
 8101080:	6978      	ldr	r0, [r7, #20]
 8101082:	f7ff ffb3 	bl	8100fec <NVIC_EncodePriority>
 8101086:	4602      	mov	r2, r0
 8101088:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810108c:	4611      	mov	r1, r2
 810108e:	4618      	mov	r0, r3
 8101090:	f7ff ff82 	bl	8100f98 <__NVIC_SetPriority>
}
 8101094:	bf00      	nop
 8101096:	3718      	adds	r7, #24
 8101098:	46bd      	mov	sp, r7
 810109a:	bd80      	pop	{r7, pc}

0810109c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810109c:	b580      	push	{r7, lr}
 810109e:	b082      	sub	sp, #8
 81010a0:	af00      	add	r7, sp, #0
 81010a2:	4603      	mov	r3, r0
 81010a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81010a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81010aa:	4618      	mov	r0, r3
 81010ac:	f7ff ff38 	bl	8100f20 <__NVIC_EnableIRQ>
}
 81010b0:	bf00      	nop
 81010b2:	3708      	adds	r7, #8
 81010b4:	46bd      	mov	sp, r7
 81010b6:	bd80      	pop	{r7, pc}

081010b8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 81010b8:	b580      	push	{r7, lr}
 81010ba:	b082      	sub	sp, #8
 81010bc:	af00      	add	r7, sp, #0
 81010be:	4603      	mov	r3, r0
 81010c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 81010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81010c6:	4618      	mov	r0, r3
 81010c8:	f7ff ff48 	bl	8100f5c <__NVIC_ClearPendingIRQ>
}
 81010cc:	bf00      	nop
 81010ce:	3708      	adds	r7, #8
 81010d0:	46bd      	mov	sp, r7
 81010d2:	bd80      	pop	{r7, pc}

081010d4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81010d4:	b480      	push	{r7}
 81010d6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81010d8:	4b07      	ldr	r3, [pc, #28]	; (81010f8 <HAL_GetCurrentCPUID+0x24>)
 81010da:	681b      	ldr	r3, [r3, #0]
 81010dc:	091b      	lsrs	r3, r3, #4
 81010de:	f003 030f 	and.w	r3, r3, #15
 81010e2:	2b07      	cmp	r3, #7
 81010e4:	d101      	bne.n	81010ea <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81010e6:	2303      	movs	r3, #3
 81010e8:	e000      	b.n	81010ec <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81010ea:	2301      	movs	r3, #1
  }
}
 81010ec:	4618      	mov	r0, r3
 81010ee:	46bd      	mov	sp, r7
 81010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010f4:	4770      	bx	lr
 81010f6:	bf00      	nop
 81010f8:	e000ed00 	.word	0xe000ed00

081010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81010fc:	b480      	push	{r7}
 81010fe:	b089      	sub	sp, #36	; 0x24
 8101100:	af00      	add	r7, sp, #0
 8101102:	6078      	str	r0, [r7, #4]
 8101104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101106:	2300      	movs	r3, #0
 8101108:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810110a:	4b89      	ldr	r3, [pc, #548]	; (8101330 <HAL_GPIO_Init+0x234>)
 810110c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810110e:	e194      	b.n	810143a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101110:	683b      	ldr	r3, [r7, #0]
 8101112:	681a      	ldr	r2, [r3, #0]
 8101114:	2101      	movs	r1, #1
 8101116:	69fb      	ldr	r3, [r7, #28]
 8101118:	fa01 f303 	lsl.w	r3, r1, r3
 810111c:	4013      	ands	r3, r2
 810111e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101120:	693b      	ldr	r3, [r7, #16]
 8101122:	2b00      	cmp	r3, #0
 8101124:	f000 8186 	beq.w	8101434 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101128:	683b      	ldr	r3, [r7, #0]
 810112a:	685b      	ldr	r3, [r3, #4]
 810112c:	2b01      	cmp	r3, #1
 810112e:	d00b      	beq.n	8101148 <HAL_GPIO_Init+0x4c>
 8101130:	683b      	ldr	r3, [r7, #0]
 8101132:	685b      	ldr	r3, [r3, #4]
 8101134:	2b02      	cmp	r3, #2
 8101136:	d007      	beq.n	8101148 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101138:	683b      	ldr	r3, [r7, #0]
 810113a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810113c:	2b11      	cmp	r3, #17
 810113e:	d003      	beq.n	8101148 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101140:	683b      	ldr	r3, [r7, #0]
 8101142:	685b      	ldr	r3, [r3, #4]
 8101144:	2b12      	cmp	r3, #18
 8101146:	d130      	bne.n	81011aa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101148:	687b      	ldr	r3, [r7, #4]
 810114a:	689b      	ldr	r3, [r3, #8]
 810114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810114e:	69fb      	ldr	r3, [r7, #28]
 8101150:	005b      	lsls	r3, r3, #1
 8101152:	2203      	movs	r2, #3
 8101154:	fa02 f303 	lsl.w	r3, r2, r3
 8101158:	43db      	mvns	r3, r3
 810115a:	69ba      	ldr	r2, [r7, #24]
 810115c:	4013      	ands	r3, r2
 810115e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101160:	683b      	ldr	r3, [r7, #0]
 8101162:	68da      	ldr	r2, [r3, #12]
 8101164:	69fb      	ldr	r3, [r7, #28]
 8101166:	005b      	lsls	r3, r3, #1
 8101168:	fa02 f303 	lsl.w	r3, r2, r3
 810116c:	69ba      	ldr	r2, [r7, #24]
 810116e:	4313      	orrs	r3, r2
 8101170:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101172:	687b      	ldr	r3, [r7, #4]
 8101174:	69ba      	ldr	r2, [r7, #24]
 8101176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101178:	687b      	ldr	r3, [r7, #4]
 810117a:	685b      	ldr	r3, [r3, #4]
 810117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810117e:	2201      	movs	r2, #1
 8101180:	69fb      	ldr	r3, [r7, #28]
 8101182:	fa02 f303 	lsl.w	r3, r2, r3
 8101186:	43db      	mvns	r3, r3
 8101188:	69ba      	ldr	r2, [r7, #24]
 810118a:	4013      	ands	r3, r2
 810118c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810118e:	683b      	ldr	r3, [r7, #0]
 8101190:	685b      	ldr	r3, [r3, #4]
 8101192:	091b      	lsrs	r3, r3, #4
 8101194:	f003 0201 	and.w	r2, r3, #1
 8101198:	69fb      	ldr	r3, [r7, #28]
 810119a:	fa02 f303 	lsl.w	r3, r2, r3
 810119e:	69ba      	ldr	r2, [r7, #24]
 81011a0:	4313      	orrs	r3, r2
 81011a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81011a4:	687b      	ldr	r3, [r7, #4]
 81011a6:	69ba      	ldr	r2, [r7, #24]
 81011a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81011aa:	687b      	ldr	r3, [r7, #4]
 81011ac:	68db      	ldr	r3, [r3, #12]
 81011ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81011b0:	69fb      	ldr	r3, [r7, #28]
 81011b2:	005b      	lsls	r3, r3, #1
 81011b4:	2203      	movs	r2, #3
 81011b6:	fa02 f303 	lsl.w	r3, r2, r3
 81011ba:	43db      	mvns	r3, r3
 81011bc:	69ba      	ldr	r2, [r7, #24]
 81011be:	4013      	ands	r3, r2
 81011c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81011c2:	683b      	ldr	r3, [r7, #0]
 81011c4:	689a      	ldr	r2, [r3, #8]
 81011c6:	69fb      	ldr	r3, [r7, #28]
 81011c8:	005b      	lsls	r3, r3, #1
 81011ca:	fa02 f303 	lsl.w	r3, r2, r3
 81011ce:	69ba      	ldr	r2, [r7, #24]
 81011d0:	4313      	orrs	r3, r2
 81011d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81011d4:	687b      	ldr	r3, [r7, #4]
 81011d6:	69ba      	ldr	r2, [r7, #24]
 81011d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81011da:	683b      	ldr	r3, [r7, #0]
 81011dc:	685b      	ldr	r3, [r3, #4]
 81011de:	2b02      	cmp	r3, #2
 81011e0:	d003      	beq.n	81011ea <HAL_GPIO_Init+0xee>
 81011e2:	683b      	ldr	r3, [r7, #0]
 81011e4:	685b      	ldr	r3, [r3, #4]
 81011e6:	2b12      	cmp	r3, #18
 81011e8:	d123      	bne.n	8101232 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81011ea:	69fb      	ldr	r3, [r7, #28]
 81011ec:	08da      	lsrs	r2, r3, #3
 81011ee:	687b      	ldr	r3, [r7, #4]
 81011f0:	3208      	adds	r2, #8
 81011f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81011f8:	69fb      	ldr	r3, [r7, #28]
 81011fa:	f003 0307 	and.w	r3, r3, #7
 81011fe:	009b      	lsls	r3, r3, #2
 8101200:	220f      	movs	r2, #15
 8101202:	fa02 f303 	lsl.w	r3, r2, r3
 8101206:	43db      	mvns	r3, r3
 8101208:	69ba      	ldr	r2, [r7, #24]
 810120a:	4013      	ands	r3, r2
 810120c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810120e:	683b      	ldr	r3, [r7, #0]
 8101210:	691a      	ldr	r2, [r3, #16]
 8101212:	69fb      	ldr	r3, [r7, #28]
 8101214:	f003 0307 	and.w	r3, r3, #7
 8101218:	009b      	lsls	r3, r3, #2
 810121a:	fa02 f303 	lsl.w	r3, r2, r3
 810121e:	69ba      	ldr	r2, [r7, #24]
 8101220:	4313      	orrs	r3, r2
 8101222:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101224:	69fb      	ldr	r3, [r7, #28]
 8101226:	08da      	lsrs	r2, r3, #3
 8101228:	687b      	ldr	r3, [r7, #4]
 810122a:	3208      	adds	r2, #8
 810122c:	69b9      	ldr	r1, [r7, #24]
 810122e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101232:	687b      	ldr	r3, [r7, #4]
 8101234:	681b      	ldr	r3, [r3, #0]
 8101236:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101238:	69fb      	ldr	r3, [r7, #28]
 810123a:	005b      	lsls	r3, r3, #1
 810123c:	2203      	movs	r2, #3
 810123e:	fa02 f303 	lsl.w	r3, r2, r3
 8101242:	43db      	mvns	r3, r3
 8101244:	69ba      	ldr	r2, [r7, #24]
 8101246:	4013      	ands	r3, r2
 8101248:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810124a:	683b      	ldr	r3, [r7, #0]
 810124c:	685b      	ldr	r3, [r3, #4]
 810124e:	f003 0203 	and.w	r2, r3, #3
 8101252:	69fb      	ldr	r3, [r7, #28]
 8101254:	005b      	lsls	r3, r3, #1
 8101256:	fa02 f303 	lsl.w	r3, r2, r3
 810125a:	69ba      	ldr	r2, [r7, #24]
 810125c:	4313      	orrs	r3, r2
 810125e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101260:	687b      	ldr	r3, [r7, #4]
 8101262:	69ba      	ldr	r2, [r7, #24]
 8101264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8101266:	683b      	ldr	r3, [r7, #0]
 8101268:	685b      	ldr	r3, [r3, #4]
 810126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810126e:	2b00      	cmp	r3, #0
 8101270:	f000 80e0 	beq.w	8101434 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101274:	4b2f      	ldr	r3, [pc, #188]	; (8101334 <HAL_GPIO_Init+0x238>)
 8101276:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810127a:	4a2e      	ldr	r2, [pc, #184]	; (8101334 <HAL_GPIO_Init+0x238>)
 810127c:	f043 0302 	orr.w	r3, r3, #2
 8101280:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101284:	4b2b      	ldr	r3, [pc, #172]	; (8101334 <HAL_GPIO_Init+0x238>)
 8101286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810128a:	f003 0302 	and.w	r3, r3, #2
 810128e:	60fb      	str	r3, [r7, #12]
 8101290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101292:	4a29      	ldr	r2, [pc, #164]	; (8101338 <HAL_GPIO_Init+0x23c>)
 8101294:	69fb      	ldr	r3, [r7, #28]
 8101296:	089b      	lsrs	r3, r3, #2
 8101298:	3302      	adds	r3, #2
 810129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81012a0:	69fb      	ldr	r3, [r7, #28]
 81012a2:	f003 0303 	and.w	r3, r3, #3
 81012a6:	009b      	lsls	r3, r3, #2
 81012a8:	220f      	movs	r2, #15
 81012aa:	fa02 f303 	lsl.w	r3, r2, r3
 81012ae:	43db      	mvns	r3, r3
 81012b0:	69ba      	ldr	r2, [r7, #24]
 81012b2:	4013      	ands	r3, r2
 81012b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81012b6:	687b      	ldr	r3, [r7, #4]
 81012b8:	4a20      	ldr	r2, [pc, #128]	; (810133c <HAL_GPIO_Init+0x240>)
 81012ba:	4293      	cmp	r3, r2
 81012bc:	d052      	beq.n	8101364 <HAL_GPIO_Init+0x268>
 81012be:	687b      	ldr	r3, [r7, #4]
 81012c0:	4a1f      	ldr	r2, [pc, #124]	; (8101340 <HAL_GPIO_Init+0x244>)
 81012c2:	4293      	cmp	r3, r2
 81012c4:	d031      	beq.n	810132a <HAL_GPIO_Init+0x22e>
 81012c6:	687b      	ldr	r3, [r7, #4]
 81012c8:	4a1e      	ldr	r2, [pc, #120]	; (8101344 <HAL_GPIO_Init+0x248>)
 81012ca:	4293      	cmp	r3, r2
 81012cc:	d02b      	beq.n	8101326 <HAL_GPIO_Init+0x22a>
 81012ce:	687b      	ldr	r3, [r7, #4]
 81012d0:	4a1d      	ldr	r2, [pc, #116]	; (8101348 <HAL_GPIO_Init+0x24c>)
 81012d2:	4293      	cmp	r3, r2
 81012d4:	d025      	beq.n	8101322 <HAL_GPIO_Init+0x226>
 81012d6:	687b      	ldr	r3, [r7, #4]
 81012d8:	4a1c      	ldr	r2, [pc, #112]	; (810134c <HAL_GPIO_Init+0x250>)
 81012da:	4293      	cmp	r3, r2
 81012dc:	d01f      	beq.n	810131e <HAL_GPIO_Init+0x222>
 81012de:	687b      	ldr	r3, [r7, #4]
 81012e0:	4a1b      	ldr	r2, [pc, #108]	; (8101350 <HAL_GPIO_Init+0x254>)
 81012e2:	4293      	cmp	r3, r2
 81012e4:	d019      	beq.n	810131a <HAL_GPIO_Init+0x21e>
 81012e6:	687b      	ldr	r3, [r7, #4]
 81012e8:	4a1a      	ldr	r2, [pc, #104]	; (8101354 <HAL_GPIO_Init+0x258>)
 81012ea:	4293      	cmp	r3, r2
 81012ec:	d013      	beq.n	8101316 <HAL_GPIO_Init+0x21a>
 81012ee:	687b      	ldr	r3, [r7, #4]
 81012f0:	4a19      	ldr	r2, [pc, #100]	; (8101358 <HAL_GPIO_Init+0x25c>)
 81012f2:	4293      	cmp	r3, r2
 81012f4:	d00d      	beq.n	8101312 <HAL_GPIO_Init+0x216>
 81012f6:	687b      	ldr	r3, [r7, #4]
 81012f8:	4a18      	ldr	r2, [pc, #96]	; (810135c <HAL_GPIO_Init+0x260>)
 81012fa:	4293      	cmp	r3, r2
 81012fc:	d007      	beq.n	810130e <HAL_GPIO_Init+0x212>
 81012fe:	687b      	ldr	r3, [r7, #4]
 8101300:	4a17      	ldr	r2, [pc, #92]	; (8101360 <HAL_GPIO_Init+0x264>)
 8101302:	4293      	cmp	r3, r2
 8101304:	d101      	bne.n	810130a <HAL_GPIO_Init+0x20e>
 8101306:	2309      	movs	r3, #9
 8101308:	e02d      	b.n	8101366 <HAL_GPIO_Init+0x26a>
 810130a:	230a      	movs	r3, #10
 810130c:	e02b      	b.n	8101366 <HAL_GPIO_Init+0x26a>
 810130e:	2308      	movs	r3, #8
 8101310:	e029      	b.n	8101366 <HAL_GPIO_Init+0x26a>
 8101312:	2307      	movs	r3, #7
 8101314:	e027      	b.n	8101366 <HAL_GPIO_Init+0x26a>
 8101316:	2306      	movs	r3, #6
 8101318:	e025      	b.n	8101366 <HAL_GPIO_Init+0x26a>
 810131a:	2305      	movs	r3, #5
 810131c:	e023      	b.n	8101366 <HAL_GPIO_Init+0x26a>
 810131e:	2304      	movs	r3, #4
 8101320:	e021      	b.n	8101366 <HAL_GPIO_Init+0x26a>
 8101322:	2303      	movs	r3, #3
 8101324:	e01f      	b.n	8101366 <HAL_GPIO_Init+0x26a>
 8101326:	2302      	movs	r3, #2
 8101328:	e01d      	b.n	8101366 <HAL_GPIO_Init+0x26a>
 810132a:	2301      	movs	r3, #1
 810132c:	e01b      	b.n	8101366 <HAL_GPIO_Init+0x26a>
 810132e:	bf00      	nop
 8101330:	580000c0 	.word	0x580000c0
 8101334:	58024400 	.word	0x58024400
 8101338:	58000400 	.word	0x58000400
 810133c:	58020000 	.word	0x58020000
 8101340:	58020400 	.word	0x58020400
 8101344:	58020800 	.word	0x58020800
 8101348:	58020c00 	.word	0x58020c00
 810134c:	58021000 	.word	0x58021000
 8101350:	58021400 	.word	0x58021400
 8101354:	58021800 	.word	0x58021800
 8101358:	58021c00 	.word	0x58021c00
 810135c:	58022000 	.word	0x58022000
 8101360:	58022400 	.word	0x58022400
 8101364:	2300      	movs	r3, #0
 8101366:	69fa      	ldr	r2, [r7, #28]
 8101368:	f002 0203 	and.w	r2, r2, #3
 810136c:	0092      	lsls	r2, r2, #2
 810136e:	4093      	lsls	r3, r2
 8101370:	69ba      	ldr	r2, [r7, #24]
 8101372:	4313      	orrs	r3, r2
 8101374:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101376:	4938      	ldr	r1, [pc, #224]	; (8101458 <HAL_GPIO_Init+0x35c>)
 8101378:	69fb      	ldr	r3, [r7, #28]
 810137a:	089b      	lsrs	r3, r3, #2
 810137c:	3302      	adds	r3, #2
 810137e:	69ba      	ldr	r2, [r7, #24]
 8101380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101384:	697b      	ldr	r3, [r7, #20]
 8101386:	681b      	ldr	r3, [r3, #0]
 8101388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810138a:	693b      	ldr	r3, [r7, #16]
 810138c:	43db      	mvns	r3, r3
 810138e:	69ba      	ldr	r2, [r7, #24]
 8101390:	4013      	ands	r3, r2
 8101392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8101394:	683b      	ldr	r3, [r7, #0]
 8101396:	685b      	ldr	r3, [r3, #4]
 8101398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810139c:	2b00      	cmp	r3, #0
 810139e:	d003      	beq.n	81013a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81013a0:	69ba      	ldr	r2, [r7, #24]
 81013a2:	693b      	ldr	r3, [r7, #16]
 81013a4:	4313      	orrs	r3, r2
 81013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81013a8:	697b      	ldr	r3, [r7, #20]
 81013aa:	69ba      	ldr	r2, [r7, #24]
 81013ac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81013ae:	697b      	ldr	r3, [r7, #20]
 81013b0:	685b      	ldr	r3, [r3, #4]
 81013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81013b4:	693b      	ldr	r3, [r7, #16]
 81013b6:	43db      	mvns	r3, r3
 81013b8:	69ba      	ldr	r2, [r7, #24]
 81013ba:	4013      	ands	r3, r2
 81013bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81013be:	683b      	ldr	r3, [r7, #0]
 81013c0:	685b      	ldr	r3, [r3, #4]
 81013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81013c6:	2b00      	cmp	r3, #0
 81013c8:	d003      	beq.n	81013d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81013ca:	69ba      	ldr	r2, [r7, #24]
 81013cc:	693b      	ldr	r3, [r7, #16]
 81013ce:	4313      	orrs	r3, r2
 81013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81013d2:	697b      	ldr	r3, [r7, #20]
 81013d4:	69ba      	ldr	r2, [r7, #24]
 81013d6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81013d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81013dc:	681b      	ldr	r3, [r3, #0]
 81013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81013e0:	693b      	ldr	r3, [r7, #16]
 81013e2:	43db      	mvns	r3, r3
 81013e4:	69ba      	ldr	r2, [r7, #24]
 81013e6:	4013      	ands	r3, r2
 81013e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81013ea:	683b      	ldr	r3, [r7, #0]
 81013ec:	685b      	ldr	r3, [r3, #4]
 81013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81013f2:	2b00      	cmp	r3, #0
 81013f4:	d003      	beq.n	81013fe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81013f6:	69ba      	ldr	r2, [r7, #24]
 81013f8:	693b      	ldr	r3, [r7, #16]
 81013fa:	4313      	orrs	r3, r2
 81013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81013fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101402:	69bb      	ldr	r3, [r7, #24]
 8101404:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810140a:	685b      	ldr	r3, [r3, #4]
 810140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810140e:	693b      	ldr	r3, [r7, #16]
 8101410:	43db      	mvns	r3, r3
 8101412:	69ba      	ldr	r2, [r7, #24]
 8101414:	4013      	ands	r3, r2
 8101416:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8101418:	683b      	ldr	r3, [r7, #0]
 810141a:	685b      	ldr	r3, [r3, #4]
 810141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101420:	2b00      	cmp	r3, #0
 8101422:	d003      	beq.n	810142c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8101424:	69ba      	ldr	r2, [r7, #24]
 8101426:	693b      	ldr	r3, [r7, #16]
 8101428:	4313      	orrs	r3, r2
 810142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810142c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101430:	69bb      	ldr	r3, [r7, #24]
 8101432:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8101434:	69fb      	ldr	r3, [r7, #28]
 8101436:	3301      	adds	r3, #1
 8101438:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810143a:	683b      	ldr	r3, [r7, #0]
 810143c:	681a      	ldr	r2, [r3, #0]
 810143e:	69fb      	ldr	r3, [r7, #28]
 8101440:	fa22 f303 	lsr.w	r3, r2, r3
 8101444:	2b00      	cmp	r3, #0
 8101446:	f47f ae63 	bne.w	8101110 <HAL_GPIO_Init+0x14>
  }
}
 810144a:	bf00      	nop
 810144c:	bf00      	nop
 810144e:	3724      	adds	r7, #36	; 0x24
 8101450:	46bd      	mov	sp, r7
 8101452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101456:	4770      	bx	lr
 8101458:	58000400 	.word	0x58000400

0810145c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 810145c:	b480      	push	{r7}
 810145e:	b083      	sub	sp, #12
 8101460:	af00      	add	r7, sp, #0
 8101462:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8101464:	4a08      	ldr	r2, [pc, #32]	; (8101488 <HAL_HSEM_FastTake+0x2c>)
 8101466:	687b      	ldr	r3, [r7, #4]
 8101468:	3320      	adds	r3, #32
 810146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810146e:	4a07      	ldr	r2, [pc, #28]	; (810148c <HAL_HSEM_FastTake+0x30>)
 8101470:	4293      	cmp	r3, r2
 8101472:	d101      	bne.n	8101478 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8101474:	2300      	movs	r3, #0
 8101476:	e000      	b.n	810147a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8101478:	2301      	movs	r3, #1
}
 810147a:	4618      	mov	r0, r3
 810147c:	370c      	adds	r7, #12
 810147e:	46bd      	mov	sp, r7
 8101480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101484:	4770      	bx	lr
 8101486:	bf00      	nop
 8101488:	58026400 	.word	0x58026400
 810148c:	80000100 	.word	0x80000100

08101490 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8101490:	b480      	push	{r7}
 8101492:	b083      	sub	sp, #12
 8101494:	af00      	add	r7, sp, #0
 8101496:	6078      	str	r0, [r7, #4]
 8101498:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810149a:	4906      	ldr	r1, [pc, #24]	; (81014b4 <HAL_HSEM_Release+0x24>)
 810149c:	683b      	ldr	r3, [r7, #0]
 810149e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81014a2:	687b      	ldr	r3, [r7, #4]
 81014a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81014a8:	bf00      	nop
 81014aa:	370c      	adds	r7, #12
 81014ac:	46bd      	mov	sp, r7
 81014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014b2:	4770      	bx	lr
 81014b4:	58026400 	.word	0x58026400

081014b8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81014b8:	b480      	push	{r7}
 81014ba:	b083      	sub	sp, #12
 81014bc:	af00      	add	r7, sp, #0
 81014be:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81014c0:	4b05      	ldr	r3, [pc, #20]	; (81014d8 <HAL_HSEM_ActivateNotification+0x20>)
 81014c2:	681a      	ldr	r2, [r3, #0]
 81014c4:	4904      	ldr	r1, [pc, #16]	; (81014d8 <HAL_HSEM_ActivateNotification+0x20>)
 81014c6:	687b      	ldr	r3, [r7, #4]
 81014c8:	4313      	orrs	r3, r2
 81014ca:	600b      	str	r3, [r1, #0]
#endif
}
 81014cc:	bf00      	nop
 81014ce:	370c      	adds	r7, #12
 81014d0:	46bd      	mov	sp, r7
 81014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014d6:	4770      	bx	lr
 81014d8:	58026510 	.word	0x58026510

081014dc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81014dc:	b580      	push	{r7, lr}
 81014de:	b082      	sub	sp, #8
 81014e0:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81014e2:	4b0a      	ldr	r3, [pc, #40]	; (810150c <HAL_HSEM_IRQHandler+0x30>)
 81014e4:	68db      	ldr	r3, [r3, #12]
 81014e6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81014e8:	4b08      	ldr	r3, [pc, #32]	; (810150c <HAL_HSEM_IRQHandler+0x30>)
 81014ea:	681a      	ldr	r2, [r3, #0]
 81014ec:	687b      	ldr	r3, [r7, #4]
 81014ee:	43db      	mvns	r3, r3
 81014f0:	4906      	ldr	r1, [pc, #24]	; (810150c <HAL_HSEM_IRQHandler+0x30>)
 81014f2:	4013      	ands	r3, r2
 81014f4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81014f6:	4a05      	ldr	r2, [pc, #20]	; (810150c <HAL_HSEM_IRQHandler+0x30>)
 81014f8:	687b      	ldr	r3, [r7, #4]
 81014fa:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81014fc:	6878      	ldr	r0, [r7, #4]
 81014fe:	f007 f935 	bl	810876c <HAL_HSEM_FreeCallback>
}
 8101502:	bf00      	nop
 8101504:	3708      	adds	r7, #8
 8101506:	46bd      	mov	sp, r7
 8101508:	bd80      	pop	{r7, pc}
 810150a:	bf00      	nop
 810150c:	58026510 	.word	0x58026510

08101510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8101510:	b580      	push	{r7, lr}
 8101512:	b082      	sub	sp, #8
 8101514:	af00      	add	r7, sp, #0
 8101516:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8101518:	687b      	ldr	r3, [r7, #4]
 810151a:	2b00      	cmp	r3, #0
 810151c:	d101      	bne.n	8101522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810151e:	2301      	movs	r3, #1
 8101520:	e081      	b.n	8101626 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8101522:	687b      	ldr	r3, [r7, #4]
 8101524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101528:	b2db      	uxtb	r3, r3
 810152a:	2b00      	cmp	r3, #0
 810152c:	d106      	bne.n	810153c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810152e:	687b      	ldr	r3, [r7, #4]
 8101530:	2200      	movs	r2, #0
 8101532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8101536:	6878      	ldr	r0, [r7, #4]
 8101538:	f7ff f850 	bl	81005dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810153c:	687b      	ldr	r3, [r7, #4]
 810153e:	2224      	movs	r2, #36	; 0x24
 8101540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101544:	687b      	ldr	r3, [r7, #4]
 8101546:	681b      	ldr	r3, [r3, #0]
 8101548:	681a      	ldr	r2, [r3, #0]
 810154a:	687b      	ldr	r3, [r7, #4]
 810154c:	681b      	ldr	r3, [r3, #0]
 810154e:	f022 0201 	bic.w	r2, r2, #1
 8101552:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8101554:	687b      	ldr	r3, [r7, #4]
 8101556:	685a      	ldr	r2, [r3, #4]
 8101558:	687b      	ldr	r3, [r7, #4]
 810155a:	681b      	ldr	r3, [r3, #0]
 810155c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8101560:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8101562:	687b      	ldr	r3, [r7, #4]
 8101564:	681b      	ldr	r3, [r3, #0]
 8101566:	689a      	ldr	r2, [r3, #8]
 8101568:	687b      	ldr	r3, [r7, #4]
 810156a:	681b      	ldr	r3, [r3, #0]
 810156c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8101570:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8101572:	687b      	ldr	r3, [r7, #4]
 8101574:	68db      	ldr	r3, [r3, #12]
 8101576:	2b01      	cmp	r3, #1
 8101578:	d107      	bne.n	810158a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810157a:	687b      	ldr	r3, [r7, #4]
 810157c:	689a      	ldr	r2, [r3, #8]
 810157e:	687b      	ldr	r3, [r7, #4]
 8101580:	681b      	ldr	r3, [r3, #0]
 8101582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8101586:	609a      	str	r2, [r3, #8]
 8101588:	e006      	b.n	8101598 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810158a:	687b      	ldr	r3, [r7, #4]
 810158c:	689a      	ldr	r2, [r3, #8]
 810158e:	687b      	ldr	r3, [r7, #4]
 8101590:	681b      	ldr	r3, [r3, #0]
 8101592:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8101596:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8101598:	687b      	ldr	r3, [r7, #4]
 810159a:	68db      	ldr	r3, [r3, #12]
 810159c:	2b02      	cmp	r3, #2
 810159e:	d104      	bne.n	81015aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81015a0:	687b      	ldr	r3, [r7, #4]
 81015a2:	681b      	ldr	r3, [r3, #0]
 81015a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81015a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81015aa:	687b      	ldr	r3, [r7, #4]
 81015ac:	681b      	ldr	r3, [r3, #0]
 81015ae:	685b      	ldr	r3, [r3, #4]
 81015b0:	687a      	ldr	r2, [r7, #4]
 81015b2:	6812      	ldr	r2, [r2, #0]
 81015b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81015b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81015bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81015be:	687b      	ldr	r3, [r7, #4]
 81015c0:	681b      	ldr	r3, [r3, #0]
 81015c2:	68da      	ldr	r2, [r3, #12]
 81015c4:	687b      	ldr	r3, [r7, #4]
 81015c6:	681b      	ldr	r3, [r3, #0]
 81015c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81015cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81015ce:	687b      	ldr	r3, [r7, #4]
 81015d0:	691a      	ldr	r2, [r3, #16]
 81015d2:	687b      	ldr	r3, [r7, #4]
 81015d4:	695b      	ldr	r3, [r3, #20]
 81015d6:	ea42 0103 	orr.w	r1, r2, r3
 81015da:	687b      	ldr	r3, [r7, #4]
 81015dc:	699b      	ldr	r3, [r3, #24]
 81015de:	021a      	lsls	r2, r3, #8
 81015e0:	687b      	ldr	r3, [r7, #4]
 81015e2:	681b      	ldr	r3, [r3, #0]
 81015e4:	430a      	orrs	r2, r1
 81015e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81015e8:	687b      	ldr	r3, [r7, #4]
 81015ea:	69d9      	ldr	r1, [r3, #28]
 81015ec:	687b      	ldr	r3, [r7, #4]
 81015ee:	6a1a      	ldr	r2, [r3, #32]
 81015f0:	687b      	ldr	r3, [r7, #4]
 81015f2:	681b      	ldr	r3, [r3, #0]
 81015f4:	430a      	orrs	r2, r1
 81015f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81015f8:	687b      	ldr	r3, [r7, #4]
 81015fa:	681b      	ldr	r3, [r3, #0]
 81015fc:	681a      	ldr	r2, [r3, #0]
 81015fe:	687b      	ldr	r3, [r7, #4]
 8101600:	681b      	ldr	r3, [r3, #0]
 8101602:	f042 0201 	orr.w	r2, r2, #1
 8101606:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101608:	687b      	ldr	r3, [r7, #4]
 810160a:	2200      	movs	r2, #0
 810160c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810160e:	687b      	ldr	r3, [r7, #4]
 8101610:	2220      	movs	r2, #32
 8101612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8101616:	687b      	ldr	r3, [r7, #4]
 8101618:	2200      	movs	r2, #0
 810161a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810161c:	687b      	ldr	r3, [r7, #4]
 810161e:	2200      	movs	r2, #0
 8101620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8101624:	2300      	movs	r3, #0
}
 8101626:	4618      	mov	r0, r3
 8101628:	3708      	adds	r7, #8
 810162a:	46bd      	mov	sp, r7
 810162c:	bd80      	pop	{r7, pc}

0810162e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 810162e:	b580      	push	{r7, lr}
 8101630:	b084      	sub	sp, #16
 8101632:	af00      	add	r7, sp, #0
 8101634:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8101636:	687b      	ldr	r3, [r7, #4]
 8101638:	681b      	ldr	r3, [r3, #0]
 810163a:	699b      	ldr	r3, [r3, #24]
 810163c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 810163e:	687b      	ldr	r3, [r7, #4]
 8101640:	681b      	ldr	r3, [r3, #0]
 8101642:	681b      	ldr	r3, [r3, #0]
 8101644:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8101646:	687b      	ldr	r3, [r7, #4]
 8101648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810164a:	2b00      	cmp	r3, #0
 810164c:	d005      	beq.n	810165a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 810164e:	687b      	ldr	r3, [r7, #4]
 8101650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101652:	68ba      	ldr	r2, [r7, #8]
 8101654:	68f9      	ldr	r1, [r7, #12]
 8101656:	6878      	ldr	r0, [r7, #4]
 8101658:	4798      	blx	r3
  }
}
 810165a:	bf00      	nop
 810165c:	3710      	adds	r7, #16
 810165e:	46bd      	mov	sp, r7
 8101660:	bd80      	pop	{r7, pc}

08101662 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8101662:	b480      	push	{r7}
 8101664:	b083      	sub	sp, #12
 8101666:	af00      	add	r7, sp, #0
 8101668:	6078      	str	r0, [r7, #4]
 810166a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810166c:	687b      	ldr	r3, [r7, #4]
 810166e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101672:	b2db      	uxtb	r3, r3
 8101674:	2b20      	cmp	r3, #32
 8101676:	d138      	bne.n	81016ea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101678:	687b      	ldr	r3, [r7, #4]
 810167a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810167e:	2b01      	cmp	r3, #1
 8101680:	d101      	bne.n	8101686 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8101682:	2302      	movs	r3, #2
 8101684:	e032      	b.n	81016ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8101686:	687b      	ldr	r3, [r7, #4]
 8101688:	2201      	movs	r2, #1
 810168a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810168e:	687b      	ldr	r3, [r7, #4]
 8101690:	2224      	movs	r2, #36	; 0x24
 8101692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101696:	687b      	ldr	r3, [r7, #4]
 8101698:	681b      	ldr	r3, [r3, #0]
 810169a:	681a      	ldr	r2, [r3, #0]
 810169c:	687b      	ldr	r3, [r7, #4]
 810169e:	681b      	ldr	r3, [r3, #0]
 81016a0:	f022 0201 	bic.w	r2, r2, #1
 81016a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	681b      	ldr	r3, [r3, #0]
 81016aa:	681a      	ldr	r2, [r3, #0]
 81016ac:	687b      	ldr	r3, [r7, #4]
 81016ae:	681b      	ldr	r3, [r3, #0]
 81016b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81016b4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81016b6:	687b      	ldr	r3, [r7, #4]
 81016b8:	681b      	ldr	r3, [r3, #0]
 81016ba:	6819      	ldr	r1, [r3, #0]
 81016bc:	687b      	ldr	r3, [r7, #4]
 81016be:	681b      	ldr	r3, [r3, #0]
 81016c0:	683a      	ldr	r2, [r7, #0]
 81016c2:	430a      	orrs	r2, r1
 81016c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81016c6:	687b      	ldr	r3, [r7, #4]
 81016c8:	681b      	ldr	r3, [r3, #0]
 81016ca:	681a      	ldr	r2, [r3, #0]
 81016cc:	687b      	ldr	r3, [r7, #4]
 81016ce:	681b      	ldr	r3, [r3, #0]
 81016d0:	f042 0201 	orr.w	r2, r2, #1
 81016d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81016d6:	687b      	ldr	r3, [r7, #4]
 81016d8:	2220      	movs	r2, #32
 81016da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81016de:	687b      	ldr	r3, [r7, #4]
 81016e0:	2200      	movs	r2, #0
 81016e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81016e6:	2300      	movs	r3, #0
 81016e8:	e000      	b.n	81016ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81016ea:	2302      	movs	r3, #2
  }
}
 81016ec:	4618      	mov	r0, r3
 81016ee:	370c      	adds	r7, #12
 81016f0:	46bd      	mov	sp, r7
 81016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016f6:	4770      	bx	lr

081016f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81016f8:	b480      	push	{r7}
 81016fa:	b085      	sub	sp, #20
 81016fc:	af00      	add	r7, sp, #0
 81016fe:	6078      	str	r0, [r7, #4]
 8101700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101702:	687b      	ldr	r3, [r7, #4]
 8101704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101708:	b2db      	uxtb	r3, r3
 810170a:	2b20      	cmp	r3, #32
 810170c:	d139      	bne.n	8101782 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810170e:	687b      	ldr	r3, [r7, #4]
 8101710:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101714:	2b01      	cmp	r3, #1
 8101716:	d101      	bne.n	810171c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8101718:	2302      	movs	r3, #2
 810171a:	e033      	b.n	8101784 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	2201      	movs	r2, #1
 8101720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101724:	687b      	ldr	r3, [r7, #4]
 8101726:	2224      	movs	r2, #36	; 0x24
 8101728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810172c:	687b      	ldr	r3, [r7, #4]
 810172e:	681b      	ldr	r3, [r3, #0]
 8101730:	681a      	ldr	r2, [r3, #0]
 8101732:	687b      	ldr	r3, [r7, #4]
 8101734:	681b      	ldr	r3, [r3, #0]
 8101736:	f022 0201 	bic.w	r2, r2, #1
 810173a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810173c:	687b      	ldr	r3, [r7, #4]
 810173e:	681b      	ldr	r3, [r3, #0]
 8101740:	681b      	ldr	r3, [r3, #0]
 8101742:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8101744:	68fb      	ldr	r3, [r7, #12]
 8101746:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810174a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810174c:	683b      	ldr	r3, [r7, #0]
 810174e:	021b      	lsls	r3, r3, #8
 8101750:	68fa      	ldr	r2, [r7, #12]
 8101752:	4313      	orrs	r3, r2
 8101754:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8101756:	687b      	ldr	r3, [r7, #4]
 8101758:	681b      	ldr	r3, [r3, #0]
 810175a:	68fa      	ldr	r2, [r7, #12]
 810175c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810175e:	687b      	ldr	r3, [r7, #4]
 8101760:	681b      	ldr	r3, [r3, #0]
 8101762:	681a      	ldr	r2, [r3, #0]
 8101764:	687b      	ldr	r3, [r7, #4]
 8101766:	681b      	ldr	r3, [r3, #0]
 8101768:	f042 0201 	orr.w	r2, r2, #1
 810176c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810176e:	687b      	ldr	r3, [r7, #4]
 8101770:	2220      	movs	r2, #32
 8101772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101776:	687b      	ldr	r3, [r7, #4]
 8101778:	2200      	movs	r2, #0
 810177a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810177e:	2300      	movs	r3, #0
 8101780:	e000      	b.n	8101784 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8101782:	2302      	movs	r3, #2
  }
}
 8101784:	4618      	mov	r0, r3
 8101786:	3714      	adds	r7, #20
 8101788:	46bd      	mov	sp, r7
 810178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810178e:	4770      	bx	lr

08101790 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101790:	b580      	push	{r7, lr}
 8101792:	b084      	sub	sp, #16
 8101794:	af00      	add	r7, sp, #0
 8101796:	60f8      	str	r0, [r7, #12]
 8101798:	460b      	mov	r3, r1
 810179a:	607a      	str	r2, [r7, #4]
 810179c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810179e:	4b37      	ldr	r3, [pc, #220]	; (810187c <HAL_PWREx_EnterSTOPMode+0xec>)
 81017a0:	681b      	ldr	r3, [r3, #0]
 81017a2:	f023 0201 	bic.w	r2, r3, #1
 81017a6:	4935      	ldr	r1, [pc, #212]	; (810187c <HAL_PWREx_EnterSTOPMode+0xec>)
 81017a8:	68fb      	ldr	r3, [r7, #12]
 81017aa:	4313      	orrs	r3, r2
 81017ac:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81017ae:	687b      	ldr	r3, [r7, #4]
 81017b0:	2b00      	cmp	r3, #0
 81017b2:	d123      	bne.n	81017fc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81017b4:	f7ff fc8e 	bl	81010d4 <HAL_GetCurrentCPUID>
 81017b8:	4603      	mov	r3, r0
 81017ba:	2b03      	cmp	r3, #3
 81017bc:	d158      	bne.n	8101870 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81017be:	4b2f      	ldr	r3, [pc, #188]	; (810187c <HAL_PWREx_EnterSTOPMode+0xec>)
 81017c0:	691b      	ldr	r3, [r3, #16]
 81017c2:	4a2e      	ldr	r2, [pc, #184]	; (810187c <HAL_PWREx_EnterSTOPMode+0xec>)
 81017c4:	f023 0301 	bic.w	r3, r3, #1
 81017c8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81017ca:	4b2d      	ldr	r3, [pc, #180]	; (8101880 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81017cc:	691b      	ldr	r3, [r3, #16]
 81017ce:	4a2c      	ldr	r2, [pc, #176]	; (8101880 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81017d0:	f043 0304 	orr.w	r3, r3, #4
 81017d4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81017d6:	f3bf 8f4f 	dsb	sy
}
 81017da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81017dc:	f3bf 8f6f 	isb	sy
}
 81017e0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81017e2:	7afb      	ldrb	r3, [r7, #11]
 81017e4:	2b01      	cmp	r3, #1
 81017e6:	d101      	bne.n	81017ec <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81017e8:	bf30      	wfi
 81017ea:	e000      	b.n	81017ee <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81017ec:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81017ee:	4b24      	ldr	r3, [pc, #144]	; (8101880 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81017f0:	691b      	ldr	r3, [r3, #16]
 81017f2:	4a23      	ldr	r2, [pc, #140]	; (8101880 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81017f4:	f023 0304 	bic.w	r3, r3, #4
 81017f8:	6113      	str	r3, [r2, #16]
 81017fa:	e03c      	b.n	8101876 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81017fc:	687b      	ldr	r3, [r7, #4]
 81017fe:	2b01      	cmp	r3, #1
 8101800:	d123      	bne.n	810184a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101802:	f7ff fc67 	bl	81010d4 <HAL_GetCurrentCPUID>
 8101806:	4603      	mov	r3, r0
 8101808:	2b01      	cmp	r3, #1
 810180a:	d133      	bne.n	8101874 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810180c:	4b1b      	ldr	r3, [pc, #108]	; (810187c <HAL_PWREx_EnterSTOPMode+0xec>)
 810180e:	695b      	ldr	r3, [r3, #20]
 8101810:	4a1a      	ldr	r2, [pc, #104]	; (810187c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101812:	f023 0302 	bic.w	r3, r3, #2
 8101816:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101818:	4b19      	ldr	r3, [pc, #100]	; (8101880 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810181a:	691b      	ldr	r3, [r3, #16]
 810181c:	4a18      	ldr	r2, [pc, #96]	; (8101880 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810181e:	f043 0304 	orr.w	r3, r3, #4
 8101822:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101824:	f3bf 8f4f 	dsb	sy
}
 8101828:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810182a:	f3bf 8f6f 	isb	sy
}
 810182e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101830:	7afb      	ldrb	r3, [r7, #11]
 8101832:	2b01      	cmp	r3, #1
 8101834:	d101      	bne.n	810183a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101836:	bf30      	wfi
 8101838:	e000      	b.n	810183c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810183a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810183c:	4b10      	ldr	r3, [pc, #64]	; (8101880 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810183e:	691b      	ldr	r3, [r3, #16]
 8101840:	4a0f      	ldr	r2, [pc, #60]	; (8101880 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101842:	f023 0304 	bic.w	r3, r3, #4
 8101846:	6113      	str	r3, [r2, #16]
 8101848:	e015      	b.n	8101876 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810184a:	f7ff fc43 	bl	81010d4 <HAL_GetCurrentCPUID>
 810184e:	4603      	mov	r3, r0
 8101850:	2b03      	cmp	r3, #3
 8101852:	d106      	bne.n	8101862 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101854:	4b09      	ldr	r3, [pc, #36]	; (810187c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101856:	691b      	ldr	r3, [r3, #16]
 8101858:	4a08      	ldr	r2, [pc, #32]	; (810187c <HAL_PWREx_EnterSTOPMode+0xec>)
 810185a:	f023 0304 	bic.w	r3, r3, #4
 810185e:	6113      	str	r3, [r2, #16]
 8101860:	e009      	b.n	8101876 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101862:	4b06      	ldr	r3, [pc, #24]	; (810187c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101864:	695b      	ldr	r3, [r3, #20]
 8101866:	4a05      	ldr	r2, [pc, #20]	; (810187c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101868:	f023 0304 	bic.w	r3, r3, #4
 810186c:	6153      	str	r3, [r2, #20]
 810186e:	e002      	b.n	8101876 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101870:	bf00      	nop
 8101872:	e000      	b.n	8101876 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101874:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101876:	3710      	adds	r7, #16
 8101878:	46bd      	mov	sp, r7
 810187a:	bd80      	pop	{r7, pc}
 810187c:	58024800 	.word	0x58024800
 8101880:	e000ed00 	.word	0xe000ed00

08101884 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101884:	b580      	push	{r7, lr}
 8101886:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101888:	f7ff fc24 	bl	81010d4 <HAL_GetCurrentCPUID>
 810188c:	4603      	mov	r3, r0
 810188e:	2b03      	cmp	r3, #3
 8101890:	d101      	bne.n	8101896 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101892:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101894:	e001      	b.n	810189a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101896:	bf40      	sev
    __WFE ();
 8101898:	bf20      	wfe
}
 810189a:	bf00      	nop
 810189c:	bd80      	pop	{r7, pc}
	...

081018a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81018a0:	b480      	push	{r7}
 81018a2:	b089      	sub	sp, #36	; 0x24
 81018a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81018a6:	4bb3      	ldr	r3, [pc, #716]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018a8:	691b      	ldr	r3, [r3, #16]
 81018aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81018ae:	2b18      	cmp	r3, #24
 81018b0:	f200 8155 	bhi.w	8101b5e <HAL_RCC_GetSysClockFreq+0x2be>
 81018b4:	a201      	add	r2, pc, #4	; (adr r2, 81018bc <HAL_RCC_GetSysClockFreq+0x1c>)
 81018b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81018ba:	bf00      	nop
 81018bc:	08101921 	.word	0x08101921
 81018c0:	08101b5f 	.word	0x08101b5f
 81018c4:	08101b5f 	.word	0x08101b5f
 81018c8:	08101b5f 	.word	0x08101b5f
 81018cc:	08101b5f 	.word	0x08101b5f
 81018d0:	08101b5f 	.word	0x08101b5f
 81018d4:	08101b5f 	.word	0x08101b5f
 81018d8:	08101b5f 	.word	0x08101b5f
 81018dc:	08101947 	.word	0x08101947
 81018e0:	08101b5f 	.word	0x08101b5f
 81018e4:	08101b5f 	.word	0x08101b5f
 81018e8:	08101b5f 	.word	0x08101b5f
 81018ec:	08101b5f 	.word	0x08101b5f
 81018f0:	08101b5f 	.word	0x08101b5f
 81018f4:	08101b5f 	.word	0x08101b5f
 81018f8:	08101b5f 	.word	0x08101b5f
 81018fc:	0810194d 	.word	0x0810194d
 8101900:	08101b5f 	.word	0x08101b5f
 8101904:	08101b5f 	.word	0x08101b5f
 8101908:	08101b5f 	.word	0x08101b5f
 810190c:	08101b5f 	.word	0x08101b5f
 8101910:	08101b5f 	.word	0x08101b5f
 8101914:	08101b5f 	.word	0x08101b5f
 8101918:	08101b5f 	.word	0x08101b5f
 810191c:	08101953 	.word	0x08101953
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101920:	4b94      	ldr	r3, [pc, #592]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101922:	681b      	ldr	r3, [r3, #0]
 8101924:	f003 0320 	and.w	r3, r3, #32
 8101928:	2b00      	cmp	r3, #0
 810192a:	d009      	beq.n	8101940 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810192c:	4b91      	ldr	r3, [pc, #580]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810192e:	681b      	ldr	r3, [r3, #0]
 8101930:	08db      	lsrs	r3, r3, #3
 8101932:	f003 0303 	and.w	r3, r3, #3
 8101936:	4a90      	ldr	r2, [pc, #576]	; (8101b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101938:	fa22 f303 	lsr.w	r3, r2, r3
 810193c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810193e:	e111      	b.n	8101b64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101940:	4b8d      	ldr	r3, [pc, #564]	; (8101b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101942:	61bb      	str	r3, [r7, #24]
    break;
 8101944:	e10e      	b.n	8101b64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101946:	4b8d      	ldr	r3, [pc, #564]	; (8101b7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101948:	61bb      	str	r3, [r7, #24]
    break;
 810194a:	e10b      	b.n	8101b64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810194c:	4b8c      	ldr	r3, [pc, #560]	; (8101b80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810194e:	61bb      	str	r3, [r7, #24]
    break;
 8101950:	e108      	b.n	8101b64 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101952:	4b88      	ldr	r3, [pc, #544]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101956:	f003 0303 	and.w	r3, r3, #3
 810195a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810195c:	4b85      	ldr	r3, [pc, #532]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101960:	091b      	lsrs	r3, r3, #4
 8101962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101966:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101968:	4b82      	ldr	r3, [pc, #520]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810196c:	f003 0301 	and.w	r3, r3, #1
 8101970:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8101972:	4b80      	ldr	r3, [pc, #512]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101976:	08db      	lsrs	r3, r3, #3
 8101978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810197c:	68fa      	ldr	r2, [r7, #12]
 810197e:	fb02 f303 	mul.w	r3, r2, r3
 8101982:	ee07 3a90 	vmov	s15, r3
 8101986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810198a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810198e:	693b      	ldr	r3, [r7, #16]
 8101990:	2b00      	cmp	r3, #0
 8101992:	f000 80e1 	beq.w	8101b58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101996:	697b      	ldr	r3, [r7, #20]
 8101998:	2b02      	cmp	r3, #2
 810199a:	f000 8083 	beq.w	8101aa4 <HAL_RCC_GetSysClockFreq+0x204>
 810199e:	697b      	ldr	r3, [r7, #20]
 81019a0:	2b02      	cmp	r3, #2
 81019a2:	f200 80a1 	bhi.w	8101ae8 <HAL_RCC_GetSysClockFreq+0x248>
 81019a6:	697b      	ldr	r3, [r7, #20]
 81019a8:	2b00      	cmp	r3, #0
 81019aa:	d003      	beq.n	81019b4 <HAL_RCC_GetSysClockFreq+0x114>
 81019ac:	697b      	ldr	r3, [r7, #20]
 81019ae:	2b01      	cmp	r3, #1
 81019b0:	d056      	beq.n	8101a60 <HAL_RCC_GetSysClockFreq+0x1c0>
 81019b2:	e099      	b.n	8101ae8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81019b4:	4b6f      	ldr	r3, [pc, #444]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019b6:	681b      	ldr	r3, [r3, #0]
 81019b8:	f003 0320 	and.w	r3, r3, #32
 81019bc:	2b00      	cmp	r3, #0
 81019be:	d02d      	beq.n	8101a1c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81019c0:	4b6c      	ldr	r3, [pc, #432]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019c2:	681b      	ldr	r3, [r3, #0]
 81019c4:	08db      	lsrs	r3, r3, #3
 81019c6:	f003 0303 	and.w	r3, r3, #3
 81019ca:	4a6b      	ldr	r2, [pc, #428]	; (8101b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81019cc:	fa22 f303 	lsr.w	r3, r2, r3
 81019d0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81019d2:	687b      	ldr	r3, [r7, #4]
 81019d4:	ee07 3a90 	vmov	s15, r3
 81019d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81019dc:	693b      	ldr	r3, [r7, #16]
 81019de:	ee07 3a90 	vmov	s15, r3
 81019e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81019e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81019ea:	4b62      	ldr	r3, [pc, #392]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81019ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81019f2:	ee07 3a90 	vmov	s15, r3
 81019f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81019fa:	ed97 6a02 	vldr	s12, [r7, #8]
 81019fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101a1a:	e087      	b.n	8101b2c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101a1c:	693b      	ldr	r3, [r7, #16]
 8101a1e:	ee07 3a90 	vmov	s15, r3
 8101a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a26:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101b88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101a2e:	4b51      	ldr	r3, [pc, #324]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101a36:	ee07 3a90 	vmov	s15, r3
 8101a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101a42:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101a5e:	e065      	b.n	8101b2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101a60:	693b      	ldr	r3, [r7, #16]
 8101a62:	ee07 3a90 	vmov	s15, r3
 8101a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101b8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8101a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101a72:	4b40      	ldr	r3, [pc, #256]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101a7a:	ee07 3a90 	vmov	s15, r3
 8101a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8101a86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101aa2:	e043      	b.n	8101b2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101aa4:	693b      	ldr	r3, [r7, #16]
 8101aa6:	ee07 3a90 	vmov	s15, r3
 8101aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101aae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101b90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101ab6:	4b2f      	ldr	r3, [pc, #188]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101abe:	ee07 3a90 	vmov	s15, r3
 8101ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8101aca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101ae6:	e021      	b.n	8101b2c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101ae8:	693b      	ldr	r3, [r7, #16]
 8101aea:	ee07 3a90 	vmov	s15, r3
 8101aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101af2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101b8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8101af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101afa:	4b1e      	ldr	r3, [pc, #120]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101b02:	ee07 3a90 	vmov	s15, r3
 8101b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8101b0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101b2a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101b2c:	4b11      	ldr	r3, [pc, #68]	; (8101b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101b30:	0a5b      	lsrs	r3, r3, #9
 8101b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101b36:	3301      	adds	r3, #1
 8101b38:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101b3a:	683b      	ldr	r3, [r7, #0]
 8101b3c:	ee07 3a90 	vmov	s15, r3
 8101b40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101b44:	edd7 6a07 	vldr	s13, [r7, #28]
 8101b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101b50:	ee17 3a90 	vmov	r3, s15
 8101b54:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101b56:	e005      	b.n	8101b64 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101b58:	2300      	movs	r3, #0
 8101b5a:	61bb      	str	r3, [r7, #24]
    break;
 8101b5c:	e002      	b.n	8101b64 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8101b5e:	4b07      	ldr	r3, [pc, #28]	; (8101b7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101b60:	61bb      	str	r3, [r7, #24]
    break;
 8101b62:	bf00      	nop
  }

  return sysclockfreq;
 8101b64:	69bb      	ldr	r3, [r7, #24]
}
 8101b66:	4618      	mov	r0, r3
 8101b68:	3724      	adds	r7, #36	; 0x24
 8101b6a:	46bd      	mov	sp, r7
 8101b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b70:	4770      	bx	lr
 8101b72:	bf00      	nop
 8101b74:	58024400 	.word	0x58024400
 8101b78:	03d09000 	.word	0x03d09000
 8101b7c:	003d0900 	.word	0x003d0900
 8101b80:	007a1200 	.word	0x007a1200
 8101b84:	46000000 	.word	0x46000000
 8101b88:	4c742400 	.word	0x4c742400
 8101b8c:	4a742400 	.word	0x4a742400
 8101b90:	4af42400 	.word	0x4af42400

08101b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101b94:	b580      	push	{r7, lr}
 8101b96:	b082      	sub	sp, #8
 8101b98:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101b9a:	f7ff fe81 	bl	81018a0 <HAL_RCC_GetSysClockFreq>
 8101b9e:	4602      	mov	r2, r0
 8101ba0:	4b11      	ldr	r3, [pc, #68]	; (8101be8 <HAL_RCC_GetHCLKFreq+0x54>)
 8101ba2:	699b      	ldr	r3, [r3, #24]
 8101ba4:	0a1b      	lsrs	r3, r3, #8
 8101ba6:	f003 030f 	and.w	r3, r3, #15
 8101baa:	4910      	ldr	r1, [pc, #64]	; (8101bec <HAL_RCC_GetHCLKFreq+0x58>)
 8101bac:	5ccb      	ldrb	r3, [r1, r3]
 8101bae:	f003 031f 	and.w	r3, r3, #31
 8101bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8101bb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101bb8:	4b0b      	ldr	r3, [pc, #44]	; (8101be8 <HAL_RCC_GetHCLKFreq+0x54>)
 8101bba:	699b      	ldr	r3, [r3, #24]
 8101bbc:	f003 030f 	and.w	r3, r3, #15
 8101bc0:	4a0a      	ldr	r2, [pc, #40]	; (8101bec <HAL_RCC_GetHCLKFreq+0x58>)
 8101bc2:	5cd3      	ldrb	r3, [r2, r3]
 8101bc4:	f003 031f 	and.w	r3, r3, #31
 8101bc8:	687a      	ldr	r2, [r7, #4]
 8101bca:	fa22 f303 	lsr.w	r3, r2, r3
 8101bce:	4a08      	ldr	r2, [pc, #32]	; (8101bf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101bd0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101bd2:	4b07      	ldr	r3, [pc, #28]	; (8101bf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101bd4:	681b      	ldr	r3, [r3, #0]
 8101bd6:	4a07      	ldr	r2, [pc, #28]	; (8101bf4 <HAL_RCC_GetHCLKFreq+0x60>)
 8101bd8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8101bda:	4b05      	ldr	r3, [pc, #20]	; (8101bf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101bdc:	681b      	ldr	r3, [r3, #0]
}
 8101bde:	4618      	mov	r0, r3
 8101be0:	3708      	adds	r7, #8
 8101be2:	46bd      	mov	sp, r7
 8101be4:	bd80      	pop	{r7, pc}
 8101be6:	bf00      	nop
 8101be8:	58024400 	.word	0x58024400
 8101bec:	08109eb8 	.word	0x08109eb8
 8101bf0:	10000004 	.word	0x10000004
 8101bf4:	10000000 	.word	0x10000000

08101bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101bf8:	b580      	push	{r7, lr}
 8101bfa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101bfc:	f7ff ffca 	bl	8101b94 <HAL_RCC_GetHCLKFreq>
 8101c00:	4602      	mov	r2, r0
 8101c02:	4b06      	ldr	r3, [pc, #24]	; (8101c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8101c04:	69db      	ldr	r3, [r3, #28]
 8101c06:	091b      	lsrs	r3, r3, #4
 8101c08:	f003 0307 	and.w	r3, r3, #7
 8101c0c:	4904      	ldr	r1, [pc, #16]	; (8101c20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8101c0e:	5ccb      	ldrb	r3, [r1, r3]
 8101c10:	f003 031f 	and.w	r3, r3, #31
 8101c14:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101c18:	4618      	mov	r0, r3
 8101c1a:	bd80      	pop	{r7, pc}
 8101c1c:	58024400 	.word	0x58024400
 8101c20:	08109eb8 	.word	0x08109eb8

08101c24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8101c24:	b480      	push	{r7}
 8101c26:	b083      	sub	sp, #12
 8101c28:	af00      	add	r7, sp, #0
 8101c2a:	6078      	str	r0, [r7, #4]
 8101c2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8101c2e:	687b      	ldr	r3, [r7, #4]
 8101c30:	223f      	movs	r2, #63	; 0x3f
 8101c32:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8101c34:	4b1a      	ldr	r3, [pc, #104]	; (8101ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8101c36:	691b      	ldr	r3, [r3, #16]
 8101c38:	f003 0207 	and.w	r2, r3, #7
 8101c3c:	687b      	ldr	r3, [r7, #4]
 8101c3e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8101c40:	4b17      	ldr	r3, [pc, #92]	; (8101ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8101c42:	699b      	ldr	r3, [r3, #24]
 8101c44:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8101c48:	687b      	ldr	r3, [r7, #4]
 8101c4a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8101c4c:	4b14      	ldr	r3, [pc, #80]	; (8101ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8101c4e:	699b      	ldr	r3, [r3, #24]
 8101c50:	f003 020f 	and.w	r2, r3, #15
 8101c54:	687b      	ldr	r3, [r7, #4]
 8101c56:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8101c58:	4b11      	ldr	r3, [pc, #68]	; (8101ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8101c5a:	699b      	ldr	r3, [r3, #24]
 8101c5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101c60:	687b      	ldr	r3, [r7, #4]
 8101c62:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8101c64:	4b0e      	ldr	r3, [pc, #56]	; (8101ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8101c66:	69db      	ldr	r3, [r3, #28]
 8101c68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101c6c:	687b      	ldr	r3, [r7, #4]
 8101c6e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8101c70:	4b0b      	ldr	r3, [pc, #44]	; (8101ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8101c72:	69db      	ldr	r3, [r3, #28]
 8101c74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8101c78:	687b      	ldr	r3, [r7, #4]
 8101c7a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8101c7c:	4b08      	ldr	r3, [pc, #32]	; (8101ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8101c7e:	6a1b      	ldr	r3, [r3, #32]
 8101c80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101c84:	687b      	ldr	r3, [r7, #4]
 8101c86:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8101c88:	4b06      	ldr	r3, [pc, #24]	; (8101ca4 <HAL_RCC_GetClockConfig+0x80>)
 8101c8a:	681b      	ldr	r3, [r3, #0]
 8101c8c:	f003 020f 	and.w	r2, r3, #15
 8101c90:	683b      	ldr	r3, [r7, #0]
 8101c92:	601a      	str	r2, [r3, #0]
}
 8101c94:	bf00      	nop
 8101c96:	370c      	adds	r7, #12
 8101c98:	46bd      	mov	sp, r7
 8101c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c9e:	4770      	bx	lr
 8101ca0:	58024400 	.word	0x58024400
 8101ca4:	52002000 	.word	0x52002000

08101ca8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101ca8:	b580      	push	{r7, lr}
 8101caa:	b086      	sub	sp, #24
 8101cac:	af00      	add	r7, sp, #0
 8101cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101cb0:	2300      	movs	r3, #0
 8101cb2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101cb4:	2300      	movs	r3, #0
 8101cb6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101cb8:	687b      	ldr	r3, [r7, #4]
 8101cba:	681b      	ldr	r3, [r3, #0]
 8101cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101cc0:	2b00      	cmp	r3, #0
 8101cc2:	d03f      	beq.n	8101d44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8101cc4:	687b      	ldr	r3, [r7, #4]
 8101cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101cc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101ccc:	d02a      	beq.n	8101d24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8101cce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101cd2:	d824      	bhi.n	8101d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101cd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101cd8:	d018      	beq.n	8101d0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101cda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101cde:	d81e      	bhi.n	8101d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101ce0:	2b00      	cmp	r3, #0
 8101ce2:	d003      	beq.n	8101cec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8101ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101ce8:	d007      	beq.n	8101cfa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8101cea:	e018      	b.n	8101d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101cec:	4bab      	ldr	r3, [pc, #684]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101cf0:	4aaa      	ldr	r2, [pc, #680]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101cf8:	e015      	b.n	8101d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101cfa:	687b      	ldr	r3, [r7, #4]
 8101cfc:	3304      	adds	r3, #4
 8101cfe:	2102      	movs	r1, #2
 8101d00:	4618      	mov	r0, r3
 8101d02:	f000 ff11 	bl	8102b28 <RCCEx_PLL2_Config>
 8101d06:	4603      	mov	r3, r0
 8101d08:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101d0a:	e00c      	b.n	8101d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101d0c:	687b      	ldr	r3, [r7, #4]
 8101d0e:	3324      	adds	r3, #36	; 0x24
 8101d10:	2102      	movs	r1, #2
 8101d12:	4618      	mov	r0, r3
 8101d14:	f000 ffba 	bl	8102c8c <RCCEx_PLL3_Config>
 8101d18:	4603      	mov	r3, r0
 8101d1a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101d1c:	e003      	b.n	8101d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101d1e:	2301      	movs	r3, #1
 8101d20:	75fb      	strb	r3, [r7, #23]
      break;
 8101d22:	e000      	b.n	8101d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8101d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101d26:	7dfb      	ldrb	r3, [r7, #23]
 8101d28:	2b00      	cmp	r3, #0
 8101d2a:	d109      	bne.n	8101d40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101d2c:	4b9b      	ldr	r3, [pc, #620]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101d30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101d38:	4998      	ldr	r1, [pc, #608]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101d3a:	4313      	orrs	r3, r2
 8101d3c:	650b      	str	r3, [r1, #80]	; 0x50
 8101d3e:	e001      	b.n	8101d44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d40:	7dfb      	ldrb	r3, [r7, #23]
 8101d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101d44:	687b      	ldr	r3, [r7, #4]
 8101d46:	681b      	ldr	r3, [r3, #0]
 8101d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101d4c:	2b00      	cmp	r3, #0
 8101d4e:	d03d      	beq.n	8101dcc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8101d50:	687b      	ldr	r3, [r7, #4]
 8101d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101d54:	2b04      	cmp	r3, #4
 8101d56:	d826      	bhi.n	8101da6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8101d58:	a201      	add	r2, pc, #4	; (adr r2, 8101d60 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8101d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101d5e:	bf00      	nop
 8101d60:	08101d75 	.word	0x08101d75
 8101d64:	08101d83 	.word	0x08101d83
 8101d68:	08101d95 	.word	0x08101d95
 8101d6c:	08101dad 	.word	0x08101dad
 8101d70:	08101dad 	.word	0x08101dad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101d74:	4b89      	ldr	r3, [pc, #548]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101d78:	4a88      	ldr	r2, [pc, #544]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101d80:	e015      	b.n	8101dae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101d82:	687b      	ldr	r3, [r7, #4]
 8101d84:	3304      	adds	r3, #4
 8101d86:	2100      	movs	r1, #0
 8101d88:	4618      	mov	r0, r3
 8101d8a:	f000 fecd 	bl	8102b28 <RCCEx_PLL2_Config>
 8101d8e:	4603      	mov	r3, r0
 8101d90:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101d92:	e00c      	b.n	8101dae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	3324      	adds	r3, #36	; 0x24
 8101d98:	2100      	movs	r1, #0
 8101d9a:	4618      	mov	r0, r3
 8101d9c:	f000 ff76 	bl	8102c8c <RCCEx_PLL3_Config>
 8101da0:	4603      	mov	r3, r0
 8101da2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101da4:	e003      	b.n	8101dae <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101da6:	2301      	movs	r3, #1
 8101da8:	75fb      	strb	r3, [r7, #23]
      break;
 8101daa:	e000      	b.n	8101dae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8101dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101dae:	7dfb      	ldrb	r3, [r7, #23]
 8101db0:	2b00      	cmp	r3, #0
 8101db2:	d109      	bne.n	8101dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101db4:	4b79      	ldr	r3, [pc, #484]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101db8:	f023 0207 	bic.w	r2, r3, #7
 8101dbc:	687b      	ldr	r3, [r7, #4]
 8101dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101dc0:	4976      	ldr	r1, [pc, #472]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101dc2:	4313      	orrs	r3, r2
 8101dc4:	650b      	str	r3, [r1, #80]	; 0x50
 8101dc6:	e001      	b.n	8101dcc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101dc8:	7dfb      	ldrb	r3, [r7, #23]
 8101dca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101dcc:	687b      	ldr	r3, [r7, #4]
 8101dce:	681b      	ldr	r3, [r3, #0]
 8101dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101dd4:	2b00      	cmp	r3, #0
 8101dd6:	d042      	beq.n	8101e5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8101dd8:	687b      	ldr	r3, [r7, #4]
 8101dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101de0:	d02b      	beq.n	8101e3a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8101de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101de6:	d825      	bhi.n	8101e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101de8:	2bc0      	cmp	r3, #192	; 0xc0
 8101dea:	d028      	beq.n	8101e3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8101dec:	2bc0      	cmp	r3, #192	; 0xc0
 8101dee:	d821      	bhi.n	8101e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101df0:	2b80      	cmp	r3, #128	; 0x80
 8101df2:	d016      	beq.n	8101e22 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8101df4:	2b80      	cmp	r3, #128	; 0x80
 8101df6:	d81d      	bhi.n	8101e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101df8:	2b00      	cmp	r3, #0
 8101dfa:	d002      	beq.n	8101e02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8101dfc:	2b40      	cmp	r3, #64	; 0x40
 8101dfe:	d007      	beq.n	8101e10 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8101e00:	e018      	b.n	8101e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101e02:	4b66      	ldr	r3, [pc, #408]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101e06:	4a65      	ldr	r2, [pc, #404]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101e0e:	e017      	b.n	8101e40 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101e10:	687b      	ldr	r3, [r7, #4]
 8101e12:	3304      	adds	r3, #4
 8101e14:	2100      	movs	r1, #0
 8101e16:	4618      	mov	r0, r3
 8101e18:	f000 fe86 	bl	8102b28 <RCCEx_PLL2_Config>
 8101e1c:	4603      	mov	r3, r0
 8101e1e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101e20:	e00e      	b.n	8101e40 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101e22:	687b      	ldr	r3, [r7, #4]
 8101e24:	3324      	adds	r3, #36	; 0x24
 8101e26:	2100      	movs	r1, #0
 8101e28:	4618      	mov	r0, r3
 8101e2a:	f000 ff2f 	bl	8102c8c <RCCEx_PLL3_Config>
 8101e2e:	4603      	mov	r3, r0
 8101e30:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101e32:	e005      	b.n	8101e40 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101e34:	2301      	movs	r3, #1
 8101e36:	75fb      	strb	r3, [r7, #23]
      break;
 8101e38:	e002      	b.n	8101e40 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8101e3a:	bf00      	nop
 8101e3c:	e000      	b.n	8101e40 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8101e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101e40:	7dfb      	ldrb	r3, [r7, #23]
 8101e42:	2b00      	cmp	r3, #0
 8101e44:	d109      	bne.n	8101e5a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101e46:	4b55      	ldr	r3, [pc, #340]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101e4a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8101e4e:	687b      	ldr	r3, [r7, #4]
 8101e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101e52:	4952      	ldr	r1, [pc, #328]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101e54:	4313      	orrs	r3, r2
 8101e56:	650b      	str	r3, [r1, #80]	; 0x50
 8101e58:	e001      	b.n	8101e5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e5a:	7dfb      	ldrb	r3, [r7, #23]
 8101e5c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8101e5e:	687b      	ldr	r3, [r7, #4]
 8101e60:	681b      	ldr	r3, [r3, #0]
 8101e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101e66:	2b00      	cmp	r3, #0
 8101e68:	d049      	beq.n	8101efe <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101e70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101e74:	d030      	beq.n	8101ed8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8101e76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101e7a:	d82a      	bhi.n	8101ed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101e7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101e80:	d02c      	beq.n	8101edc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8101e82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101e86:	d824      	bhi.n	8101ed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101e8c:	d018      	beq.n	8101ec0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8101e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101e92:	d81e      	bhi.n	8101ed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101e94:	2b00      	cmp	r3, #0
 8101e96:	d003      	beq.n	8101ea0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8101e98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101e9c:	d007      	beq.n	8101eae <HAL_RCCEx_PeriphCLKConfig+0x206>
 8101e9e:	e018      	b.n	8101ed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101ea0:	4b3e      	ldr	r3, [pc, #248]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101ea4:	4a3d      	ldr	r2, [pc, #244]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101eac:	e017      	b.n	8101ede <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101eae:	687b      	ldr	r3, [r7, #4]
 8101eb0:	3304      	adds	r3, #4
 8101eb2:	2100      	movs	r1, #0
 8101eb4:	4618      	mov	r0, r3
 8101eb6:	f000 fe37 	bl	8102b28 <RCCEx_PLL2_Config>
 8101eba:	4603      	mov	r3, r0
 8101ebc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8101ebe:	e00e      	b.n	8101ede <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	3324      	adds	r3, #36	; 0x24
 8101ec4:	2100      	movs	r1, #0
 8101ec6:	4618      	mov	r0, r3
 8101ec8:	f000 fee0 	bl	8102c8c <RCCEx_PLL3_Config>
 8101ecc:	4603      	mov	r3, r0
 8101ece:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101ed0:	e005      	b.n	8101ede <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101ed2:	2301      	movs	r3, #1
 8101ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8101ed6:	e002      	b.n	8101ede <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101ed8:	bf00      	nop
 8101eda:	e000      	b.n	8101ede <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101ede:	7dfb      	ldrb	r3, [r7, #23]
 8101ee0:	2b00      	cmp	r3, #0
 8101ee2:	d10a      	bne.n	8101efa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101ee4:	4b2d      	ldr	r3, [pc, #180]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101ee8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8101eec:	687b      	ldr	r3, [r7, #4]
 8101eee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101ef2:	492a      	ldr	r1, [pc, #168]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101ef4:	4313      	orrs	r3, r2
 8101ef6:	658b      	str	r3, [r1, #88]	; 0x58
 8101ef8:	e001      	b.n	8101efe <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101efa:	7dfb      	ldrb	r3, [r7, #23]
 8101efc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	681b      	ldr	r3, [r3, #0]
 8101f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8101f06:	2b00      	cmp	r3, #0
 8101f08:	d04c      	beq.n	8101fa4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101f10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101f14:	d030      	beq.n	8101f78 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8101f16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101f1a:	d82a      	bhi.n	8101f72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101f1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101f20:	d02c      	beq.n	8101f7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8101f22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101f26:	d824      	bhi.n	8101f72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101f28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101f2c:	d018      	beq.n	8101f60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8101f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101f32:	d81e      	bhi.n	8101f72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101f34:	2b00      	cmp	r3, #0
 8101f36:	d003      	beq.n	8101f40 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8101f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101f3c:	d007      	beq.n	8101f4e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8101f3e:	e018      	b.n	8101f72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101f40:	4b16      	ldr	r3, [pc, #88]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101f44:	4a15      	ldr	r2, [pc, #84]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101f4c:	e017      	b.n	8101f7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	3304      	adds	r3, #4
 8101f52:	2100      	movs	r1, #0
 8101f54:	4618      	mov	r0, r3
 8101f56:	f000 fde7 	bl	8102b28 <RCCEx_PLL2_Config>
 8101f5a:	4603      	mov	r3, r0
 8101f5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8101f5e:	e00e      	b.n	8101f7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	3324      	adds	r3, #36	; 0x24
 8101f64:	2100      	movs	r1, #0
 8101f66:	4618      	mov	r0, r3
 8101f68:	f000 fe90 	bl	8102c8c <RCCEx_PLL3_Config>
 8101f6c:	4603      	mov	r3, r0
 8101f6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101f70:	e005      	b.n	8101f7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101f72:	2301      	movs	r3, #1
 8101f74:	75fb      	strb	r3, [r7, #23]
      break;
 8101f76:	e002      	b.n	8101f7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8101f78:	bf00      	nop
 8101f7a:	e000      	b.n	8101f7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8101f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f7e:	7dfb      	ldrb	r3, [r7, #23]
 8101f80:	2b00      	cmp	r3, #0
 8101f82:	d10d      	bne.n	8101fa0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101f84:	4b05      	ldr	r3, [pc, #20]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101f88:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8101f8c:	687b      	ldr	r3, [r7, #4]
 8101f8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101f92:	4902      	ldr	r1, [pc, #8]	; (8101f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101f94:	4313      	orrs	r3, r2
 8101f96:	658b      	str	r3, [r1, #88]	; 0x58
 8101f98:	e004      	b.n	8101fa4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8101f9a:	bf00      	nop
 8101f9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101fa0:	7dfb      	ldrb	r3, [r7, #23]
 8101fa2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	681b      	ldr	r3, [r3, #0]
 8101fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101fac:	2b00      	cmp	r3, #0
 8101fae:	d032      	beq.n	8102016 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8101fb0:	687b      	ldr	r3, [r7, #4]
 8101fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101fb4:	2b30      	cmp	r3, #48	; 0x30
 8101fb6:	d01c      	beq.n	8101ff2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8101fb8:	2b30      	cmp	r3, #48	; 0x30
 8101fba:	d817      	bhi.n	8101fec <HAL_RCCEx_PeriphCLKConfig+0x344>
 8101fbc:	2b20      	cmp	r3, #32
 8101fbe:	d00c      	beq.n	8101fda <HAL_RCCEx_PeriphCLKConfig+0x332>
 8101fc0:	2b20      	cmp	r3, #32
 8101fc2:	d813      	bhi.n	8101fec <HAL_RCCEx_PeriphCLKConfig+0x344>
 8101fc4:	2b00      	cmp	r3, #0
 8101fc6:	d016      	beq.n	8101ff6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8101fc8:	2b10      	cmp	r3, #16
 8101fca:	d10f      	bne.n	8101fec <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101fcc:	4baf      	ldr	r3, [pc, #700]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101fd0:	4aae      	ldr	r2, [pc, #696]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8101fd8:	e00e      	b.n	8101ff8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	3304      	adds	r3, #4
 8101fde:	2102      	movs	r1, #2
 8101fe0:	4618      	mov	r0, r3
 8101fe2:	f000 fda1 	bl	8102b28 <RCCEx_PLL2_Config>
 8101fe6:	4603      	mov	r3, r0
 8101fe8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8101fea:	e005      	b.n	8101ff8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101fec:	2301      	movs	r3, #1
 8101fee:	75fb      	strb	r3, [r7, #23]
      break;
 8101ff0:	e002      	b.n	8101ff8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8101ff2:	bf00      	nop
 8101ff4:	e000      	b.n	8101ff8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8101ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101ff8:	7dfb      	ldrb	r3, [r7, #23]
 8101ffa:	2b00      	cmp	r3, #0
 8101ffc:	d109      	bne.n	8102012 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101ffe:	4ba3      	ldr	r3, [pc, #652]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102002:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810200a:	49a0      	ldr	r1, [pc, #640]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810200c:	4313      	orrs	r3, r2
 810200e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102010:	e001      	b.n	8102016 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102012:	7dfb      	ldrb	r3, [r7, #23]
 8102014:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	681b      	ldr	r3, [r3, #0]
 810201a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810201e:	2b00      	cmp	r3, #0
 8102020:	d047      	beq.n	81020b2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102026:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810202a:	d030      	beq.n	810208e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 810202c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102030:	d82a      	bhi.n	8102088 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8102032:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102036:	d02c      	beq.n	8102092 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8102038:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810203c:	d824      	bhi.n	8102088 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810203e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102042:	d018      	beq.n	8102076 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8102044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102048:	d81e      	bhi.n	8102088 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810204a:	2b00      	cmp	r3, #0
 810204c:	d003      	beq.n	8102056 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 810204e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102052:	d007      	beq.n	8102064 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8102054:	e018      	b.n	8102088 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102056:	4b8d      	ldr	r3, [pc, #564]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810205a:	4a8c      	ldr	r2, [pc, #560]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810205c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102060:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102062:	e017      	b.n	8102094 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102064:	687b      	ldr	r3, [r7, #4]
 8102066:	3304      	adds	r3, #4
 8102068:	2100      	movs	r1, #0
 810206a:	4618      	mov	r0, r3
 810206c:	f000 fd5c 	bl	8102b28 <RCCEx_PLL2_Config>
 8102070:	4603      	mov	r3, r0
 8102072:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102074:	e00e      	b.n	8102094 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	3324      	adds	r3, #36	; 0x24
 810207a:	2100      	movs	r1, #0
 810207c:	4618      	mov	r0, r3
 810207e:	f000 fe05 	bl	8102c8c <RCCEx_PLL3_Config>
 8102082:	4603      	mov	r3, r0
 8102084:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102086:	e005      	b.n	8102094 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102088:	2301      	movs	r3, #1
 810208a:	75fb      	strb	r3, [r7, #23]
      break;
 810208c:	e002      	b.n	8102094 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810208e:	bf00      	nop
 8102090:	e000      	b.n	8102094 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8102092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102094:	7dfb      	ldrb	r3, [r7, #23]
 8102096:	2b00      	cmp	r3, #0
 8102098:	d109      	bne.n	81020ae <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810209a:	4b7c      	ldr	r3, [pc, #496]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810209c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810209e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81020a2:	687b      	ldr	r3, [r7, #4]
 81020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81020a6:	4979      	ldr	r1, [pc, #484]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81020a8:	4313      	orrs	r3, r2
 81020aa:	650b      	str	r3, [r1, #80]	; 0x50
 81020ac:	e001      	b.n	81020b2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020ae:	7dfb      	ldrb	r3, [r7, #23]
 81020b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81020b2:	687b      	ldr	r3, [r7, #4]
 81020b4:	681b      	ldr	r3, [r3, #0]
 81020b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81020ba:	2b00      	cmp	r3, #0
 81020bc:	d049      	beq.n	8102152 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81020be:	687b      	ldr	r3, [r7, #4]
 81020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81020c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81020c6:	d02e      	beq.n	8102126 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81020c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81020cc:	d828      	bhi.n	8102120 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81020ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81020d2:	d02a      	beq.n	810212a <HAL_RCCEx_PeriphCLKConfig+0x482>
 81020d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81020d8:	d822      	bhi.n	8102120 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81020da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81020de:	d026      	beq.n	810212e <HAL_RCCEx_PeriphCLKConfig+0x486>
 81020e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81020e4:	d81c      	bhi.n	8102120 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81020e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81020ea:	d010      	beq.n	810210e <HAL_RCCEx_PeriphCLKConfig+0x466>
 81020ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81020f0:	d816      	bhi.n	8102120 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81020f2:	2b00      	cmp	r3, #0
 81020f4:	d01d      	beq.n	8102132 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 81020f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81020fa:	d111      	bne.n	8102120 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81020fc:	687b      	ldr	r3, [r7, #4]
 81020fe:	3304      	adds	r3, #4
 8102100:	2101      	movs	r1, #1
 8102102:	4618      	mov	r0, r3
 8102104:	f000 fd10 	bl	8102b28 <RCCEx_PLL2_Config>
 8102108:	4603      	mov	r3, r0
 810210a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810210c:	e012      	b.n	8102134 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810210e:	687b      	ldr	r3, [r7, #4]
 8102110:	3324      	adds	r3, #36	; 0x24
 8102112:	2101      	movs	r1, #1
 8102114:	4618      	mov	r0, r3
 8102116:	f000 fdb9 	bl	8102c8c <RCCEx_PLL3_Config>
 810211a:	4603      	mov	r3, r0
 810211c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810211e:	e009      	b.n	8102134 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102120:	2301      	movs	r3, #1
 8102122:	75fb      	strb	r3, [r7, #23]
      break;
 8102124:	e006      	b.n	8102134 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102126:	bf00      	nop
 8102128:	e004      	b.n	8102134 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810212a:	bf00      	nop
 810212c:	e002      	b.n	8102134 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810212e:	bf00      	nop
 8102130:	e000      	b.n	8102134 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102134:	7dfb      	ldrb	r3, [r7, #23]
 8102136:	2b00      	cmp	r3, #0
 8102138:	d109      	bne.n	810214e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810213a:	4b54      	ldr	r3, [pc, #336]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810213c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810213e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8102142:	687b      	ldr	r3, [r7, #4]
 8102144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102146:	4951      	ldr	r1, [pc, #324]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102148:	4313      	orrs	r3, r2
 810214a:	650b      	str	r3, [r1, #80]	; 0x50
 810214c:	e001      	b.n	8102152 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810214e:	7dfb      	ldrb	r3, [r7, #23]
 8102150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102152:	687b      	ldr	r3, [r7, #4]
 8102154:	681b      	ldr	r3, [r3, #0]
 8102156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810215a:	2b00      	cmp	r3, #0
 810215c:	d04b      	beq.n	81021f6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810215e:	687b      	ldr	r3, [r7, #4]
 8102160:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102168:	d02e      	beq.n	81021c8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 810216a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810216e:	d828      	bhi.n	81021c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102174:	d02a      	beq.n	81021cc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8102176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810217a:	d822      	bhi.n	81021c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810217c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102180:	d026      	beq.n	81021d0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8102182:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102186:	d81c      	bhi.n	81021c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810218c:	d010      	beq.n	81021b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 810218e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102192:	d816      	bhi.n	81021c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102194:	2b00      	cmp	r3, #0
 8102196:	d01d      	beq.n	81021d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8102198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810219c:	d111      	bne.n	81021c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810219e:	687b      	ldr	r3, [r7, #4]
 81021a0:	3304      	adds	r3, #4
 81021a2:	2101      	movs	r1, #1
 81021a4:	4618      	mov	r0, r3
 81021a6:	f000 fcbf 	bl	8102b28 <RCCEx_PLL2_Config>
 81021aa:	4603      	mov	r3, r0
 81021ac:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81021ae:	e012      	b.n	81021d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81021b0:	687b      	ldr	r3, [r7, #4]
 81021b2:	3324      	adds	r3, #36	; 0x24
 81021b4:	2101      	movs	r1, #1
 81021b6:	4618      	mov	r0, r3
 81021b8:	f000 fd68 	bl	8102c8c <RCCEx_PLL3_Config>
 81021bc:	4603      	mov	r3, r0
 81021be:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81021c0:	e009      	b.n	81021d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81021c2:	2301      	movs	r3, #1
 81021c4:	75fb      	strb	r3, [r7, #23]
      break;
 81021c6:	e006      	b.n	81021d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81021c8:	bf00      	nop
 81021ca:	e004      	b.n	81021d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81021cc:	bf00      	nop
 81021ce:	e002      	b.n	81021d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81021d0:	bf00      	nop
 81021d2:	e000      	b.n	81021d6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81021d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81021d6:	7dfb      	ldrb	r3, [r7, #23]
 81021d8:	2b00      	cmp	r3, #0
 81021da:	d10a      	bne.n	81021f2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81021dc:	4b2b      	ldr	r3, [pc, #172]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81021e0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81021e4:	687b      	ldr	r3, [r7, #4]
 81021e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81021ea:	4928      	ldr	r1, [pc, #160]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81021ec:	4313      	orrs	r3, r2
 81021ee:	658b      	str	r3, [r1, #88]	; 0x58
 81021f0:	e001      	b.n	81021f6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021f2:	7dfb      	ldrb	r3, [r7, #23]
 81021f4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81021f6:	687b      	ldr	r3, [r7, #4]
 81021f8:	681b      	ldr	r3, [r3, #0]
 81021fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81021fe:	2b00      	cmp	r3, #0
 8102200:	d02f      	beq.n	8102262 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8102202:	687b      	ldr	r3, [r7, #4]
 8102204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810220a:	d00e      	beq.n	810222a <HAL_RCCEx_PeriphCLKConfig+0x582>
 810220c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102210:	d814      	bhi.n	810223c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8102212:	2b00      	cmp	r3, #0
 8102214:	d015      	beq.n	8102242 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810221a:	d10f      	bne.n	810223c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810221c:	4b1b      	ldr	r3, [pc, #108]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102220:	4a1a      	ldr	r2, [pc, #104]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102226:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8102228:	e00c      	b.n	8102244 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810222a:	687b      	ldr	r3, [r7, #4]
 810222c:	3304      	adds	r3, #4
 810222e:	2101      	movs	r1, #1
 8102230:	4618      	mov	r0, r3
 8102232:	f000 fc79 	bl	8102b28 <RCCEx_PLL2_Config>
 8102236:	4603      	mov	r3, r0
 8102238:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810223a:	e003      	b.n	8102244 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810223c:	2301      	movs	r3, #1
 810223e:	75fb      	strb	r3, [r7, #23]
      break;
 8102240:	e000      	b.n	8102244 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8102242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102244:	7dfb      	ldrb	r3, [r7, #23]
 8102246:	2b00      	cmp	r3, #0
 8102248:	d109      	bne.n	810225e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810224a:	4b10      	ldr	r3, [pc, #64]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810224c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810224e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102256:	490d      	ldr	r1, [pc, #52]	; (810228c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102258:	4313      	orrs	r3, r2
 810225a:	650b      	str	r3, [r1, #80]	; 0x50
 810225c:	e001      	b.n	8102262 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810225e:	7dfb      	ldrb	r3, [r7, #23]
 8102260:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102262:	687b      	ldr	r3, [r7, #4]
 8102264:	681b      	ldr	r3, [r3, #0]
 8102266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810226a:	2b00      	cmp	r3, #0
 810226c:	d033      	beq.n	81022d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102272:	2b03      	cmp	r3, #3
 8102274:	d81c      	bhi.n	81022b0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8102276:	a201      	add	r2, pc, #4	; (adr r2, 810227c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8102278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810227c:	081022b7 	.word	0x081022b7
 8102280:	08102291 	.word	0x08102291
 8102284:	0810229f 	.word	0x0810229f
 8102288:	081022b7 	.word	0x081022b7
 810228c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102290:	4bb9      	ldr	r3, [pc, #740]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102294:	4ab8      	ldr	r2, [pc, #736]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810229a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 810229c:	e00c      	b.n	81022b8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810229e:	687b      	ldr	r3, [r7, #4]
 81022a0:	3304      	adds	r3, #4
 81022a2:	2102      	movs	r1, #2
 81022a4:	4618      	mov	r0, r3
 81022a6:	f000 fc3f 	bl	8102b28 <RCCEx_PLL2_Config>
 81022aa:	4603      	mov	r3, r0
 81022ac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81022ae:	e003      	b.n	81022b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81022b0:	2301      	movs	r3, #1
 81022b2:	75fb      	strb	r3, [r7, #23]
      break;
 81022b4:	e000      	b.n	81022b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81022b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81022b8:	7dfb      	ldrb	r3, [r7, #23]
 81022ba:	2b00      	cmp	r3, #0
 81022bc:	d109      	bne.n	81022d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81022be:	4bae      	ldr	r3, [pc, #696]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81022c2:	f023 0203 	bic.w	r2, r3, #3
 81022c6:	687b      	ldr	r3, [r7, #4]
 81022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81022ca:	49ab      	ldr	r1, [pc, #684]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81022cc:	4313      	orrs	r3, r2
 81022ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 81022d0:	e001      	b.n	81022d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022d2:	7dfb      	ldrb	r3, [r7, #23]
 81022d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81022d6:	687b      	ldr	r3, [r7, #4]
 81022d8:	681b      	ldr	r3, [r3, #0]
 81022da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81022de:	2b00      	cmp	r3, #0
 81022e0:	f000 8088 	beq.w	81023f4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81022e4:	4ba5      	ldr	r3, [pc, #660]	; (810257c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81022e6:	681b      	ldr	r3, [r3, #0]
 81022e8:	4aa4      	ldr	r2, [pc, #656]	; (810257c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81022ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81022f0:	f7fe fdd8 	bl	8100ea4 <HAL_GetTick>
 81022f4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81022f6:	e009      	b.n	810230c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81022f8:	f7fe fdd4 	bl	8100ea4 <HAL_GetTick>
 81022fc:	4602      	mov	r2, r0
 81022fe:	693b      	ldr	r3, [r7, #16]
 8102300:	1ad3      	subs	r3, r2, r3
 8102302:	2b64      	cmp	r3, #100	; 0x64
 8102304:	d902      	bls.n	810230c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8102306:	2303      	movs	r3, #3
 8102308:	75fb      	strb	r3, [r7, #23]
        break;
 810230a:	e005      	b.n	8102318 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810230c:	4b9b      	ldr	r3, [pc, #620]	; (810257c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810230e:	681b      	ldr	r3, [r3, #0]
 8102310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102314:	2b00      	cmp	r3, #0
 8102316:	d0ef      	beq.n	81022f8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8102318:	7dfb      	ldrb	r3, [r7, #23]
 810231a:	2b00      	cmp	r3, #0
 810231c:	d168      	bne.n	81023f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810231e:	4b96      	ldr	r3, [pc, #600]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102320:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102322:	687b      	ldr	r3, [r7, #4]
 8102324:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102328:	4053      	eors	r3, r2
 810232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810232e:	2b00      	cmp	r3, #0
 8102330:	d013      	beq.n	810235a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102332:	4b91      	ldr	r3, [pc, #580]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810233a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810233c:	4b8e      	ldr	r3, [pc, #568]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102340:	4a8d      	ldr	r2, [pc, #564]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8102346:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8102348:	4b8b      	ldr	r3, [pc, #556]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810234c:	4a8a      	ldr	r2, [pc, #552]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810234e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102352:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8102354:	4a88      	ldr	r2, [pc, #544]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102356:	68fb      	ldr	r3, [r7, #12]
 8102358:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810235a:	687b      	ldr	r3, [r7, #4]
 810235c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102364:	d115      	bne.n	8102392 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102366:	f7fe fd9d 	bl	8100ea4 <HAL_GetTick>
 810236a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810236c:	e00b      	b.n	8102386 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810236e:	f7fe fd99 	bl	8100ea4 <HAL_GetTick>
 8102372:	4602      	mov	r2, r0
 8102374:	693b      	ldr	r3, [r7, #16]
 8102376:	1ad3      	subs	r3, r2, r3
 8102378:	f241 3288 	movw	r2, #5000	; 0x1388
 810237c:	4293      	cmp	r3, r2
 810237e:	d902      	bls.n	8102386 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8102380:	2303      	movs	r3, #3
 8102382:	75fb      	strb	r3, [r7, #23]
            break;
 8102384:	e005      	b.n	8102392 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102386:	4b7c      	ldr	r3, [pc, #496]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810238a:	f003 0302 	and.w	r3, r3, #2
 810238e:	2b00      	cmp	r3, #0
 8102390:	d0ed      	beq.n	810236e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8102392:	7dfb      	ldrb	r3, [r7, #23]
 8102394:	2b00      	cmp	r3, #0
 8102396:	d128      	bne.n	81023ea <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810239e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81023a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81023a6:	d10f      	bne.n	81023c8 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81023a8:	4b73      	ldr	r3, [pc, #460]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81023aa:	691b      	ldr	r3, [r3, #16]
 81023ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81023b0:	687b      	ldr	r3, [r7, #4]
 81023b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81023b6:	091b      	lsrs	r3, r3, #4
 81023b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81023bc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81023c0:	496d      	ldr	r1, [pc, #436]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81023c2:	4313      	orrs	r3, r2
 81023c4:	610b      	str	r3, [r1, #16]
 81023c6:	e005      	b.n	81023d4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81023c8:	4b6b      	ldr	r3, [pc, #428]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81023ca:	691b      	ldr	r3, [r3, #16]
 81023cc:	4a6a      	ldr	r2, [pc, #424]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81023ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81023d2:	6113      	str	r3, [r2, #16]
 81023d4:	4b68      	ldr	r3, [pc, #416]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81023d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81023de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81023e2:	4965      	ldr	r1, [pc, #404]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81023e4:	4313      	orrs	r3, r2
 81023e6:	670b      	str	r3, [r1, #112]	; 0x70
 81023e8:	e004      	b.n	81023f4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81023ea:	7dfb      	ldrb	r3, [r7, #23]
 81023ec:	75bb      	strb	r3, [r7, #22]
 81023ee:	e001      	b.n	81023f4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023f0:	7dfb      	ldrb	r3, [r7, #23]
 81023f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81023f4:	687b      	ldr	r3, [r7, #4]
 81023f6:	681b      	ldr	r3, [r3, #0]
 81023f8:	f003 0301 	and.w	r3, r3, #1
 81023fc:	2b00      	cmp	r3, #0
 81023fe:	d07e      	beq.n	81024fe <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8102400:	687b      	ldr	r3, [r7, #4]
 8102402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8102404:	2b28      	cmp	r3, #40	; 0x28
 8102406:	d867      	bhi.n	81024d8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8102408:	a201      	add	r2, pc, #4	; (adr r2, 8102410 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810240a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810240e:	bf00      	nop
 8102410:	081024df 	.word	0x081024df
 8102414:	081024d9 	.word	0x081024d9
 8102418:	081024d9 	.word	0x081024d9
 810241c:	081024d9 	.word	0x081024d9
 8102420:	081024d9 	.word	0x081024d9
 8102424:	081024d9 	.word	0x081024d9
 8102428:	081024d9 	.word	0x081024d9
 810242c:	081024d9 	.word	0x081024d9
 8102430:	081024b5 	.word	0x081024b5
 8102434:	081024d9 	.word	0x081024d9
 8102438:	081024d9 	.word	0x081024d9
 810243c:	081024d9 	.word	0x081024d9
 8102440:	081024d9 	.word	0x081024d9
 8102444:	081024d9 	.word	0x081024d9
 8102448:	081024d9 	.word	0x081024d9
 810244c:	081024d9 	.word	0x081024d9
 8102450:	081024c7 	.word	0x081024c7
 8102454:	081024d9 	.word	0x081024d9
 8102458:	081024d9 	.word	0x081024d9
 810245c:	081024d9 	.word	0x081024d9
 8102460:	081024d9 	.word	0x081024d9
 8102464:	081024d9 	.word	0x081024d9
 8102468:	081024d9 	.word	0x081024d9
 810246c:	081024d9 	.word	0x081024d9
 8102470:	081024df 	.word	0x081024df
 8102474:	081024d9 	.word	0x081024d9
 8102478:	081024d9 	.word	0x081024d9
 810247c:	081024d9 	.word	0x081024d9
 8102480:	081024d9 	.word	0x081024d9
 8102484:	081024d9 	.word	0x081024d9
 8102488:	081024d9 	.word	0x081024d9
 810248c:	081024d9 	.word	0x081024d9
 8102490:	081024df 	.word	0x081024df
 8102494:	081024d9 	.word	0x081024d9
 8102498:	081024d9 	.word	0x081024d9
 810249c:	081024d9 	.word	0x081024d9
 81024a0:	081024d9 	.word	0x081024d9
 81024a4:	081024d9 	.word	0x081024d9
 81024a8:	081024d9 	.word	0x081024d9
 81024ac:	081024d9 	.word	0x081024d9
 81024b0:	081024df 	.word	0x081024df
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	3304      	adds	r3, #4
 81024b8:	2101      	movs	r1, #1
 81024ba:	4618      	mov	r0, r3
 81024bc:	f000 fb34 	bl	8102b28 <RCCEx_PLL2_Config>
 81024c0:	4603      	mov	r3, r0
 81024c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81024c4:	e00c      	b.n	81024e0 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81024c6:	687b      	ldr	r3, [r7, #4]
 81024c8:	3324      	adds	r3, #36	; 0x24
 81024ca:	2101      	movs	r1, #1
 81024cc:	4618      	mov	r0, r3
 81024ce:	f000 fbdd 	bl	8102c8c <RCCEx_PLL3_Config>
 81024d2:	4603      	mov	r3, r0
 81024d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81024d6:	e003      	b.n	81024e0 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81024d8:	2301      	movs	r3, #1
 81024da:	75fb      	strb	r3, [r7, #23]
      break;
 81024dc:	e000      	b.n	81024e0 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 81024de:	bf00      	nop
    }

    if(ret == HAL_OK)
 81024e0:	7dfb      	ldrb	r3, [r7, #23]
 81024e2:	2b00      	cmp	r3, #0
 81024e4:	d109      	bne.n	81024fa <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81024e6:	4b24      	ldr	r3, [pc, #144]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024ea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81024f2:	4921      	ldr	r1, [pc, #132]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81024f4:	4313      	orrs	r3, r2
 81024f6:	654b      	str	r3, [r1, #84]	; 0x54
 81024f8:	e001      	b.n	81024fe <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024fa:	7dfb      	ldrb	r3, [r7, #23]
 81024fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81024fe:	687b      	ldr	r3, [r7, #4]
 8102500:	681b      	ldr	r3, [r3, #0]
 8102502:	f003 0302 	and.w	r3, r3, #2
 8102506:	2b00      	cmp	r3, #0
 8102508:	d03c      	beq.n	8102584 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810250a:	687b      	ldr	r3, [r7, #4]
 810250c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810250e:	2b05      	cmp	r3, #5
 8102510:	d820      	bhi.n	8102554 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8102512:	a201      	add	r2, pc, #4	; (adr r2, 8102518 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8102514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102518:	0810255b 	.word	0x0810255b
 810251c:	08102531 	.word	0x08102531
 8102520:	08102543 	.word	0x08102543
 8102524:	0810255b 	.word	0x0810255b
 8102528:	0810255b 	.word	0x0810255b
 810252c:	0810255b 	.word	0x0810255b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102530:	687b      	ldr	r3, [r7, #4]
 8102532:	3304      	adds	r3, #4
 8102534:	2101      	movs	r1, #1
 8102536:	4618      	mov	r0, r3
 8102538:	f000 faf6 	bl	8102b28 <RCCEx_PLL2_Config>
 810253c:	4603      	mov	r3, r0
 810253e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102540:	e00c      	b.n	810255c <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	3324      	adds	r3, #36	; 0x24
 8102546:	2101      	movs	r1, #1
 8102548:	4618      	mov	r0, r3
 810254a:	f000 fb9f 	bl	8102c8c <RCCEx_PLL3_Config>
 810254e:	4603      	mov	r3, r0
 8102550:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102552:	e003      	b.n	810255c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102554:	2301      	movs	r3, #1
 8102556:	75fb      	strb	r3, [r7, #23]
      break;
 8102558:	e000      	b.n	810255c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 810255a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810255c:	7dfb      	ldrb	r3, [r7, #23]
 810255e:	2b00      	cmp	r3, #0
 8102560:	d10e      	bne.n	8102580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102562:	4b05      	ldr	r3, [pc, #20]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102566:	f023 0207 	bic.w	r2, r3, #7
 810256a:	687b      	ldr	r3, [r7, #4]
 810256c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810256e:	4902      	ldr	r1, [pc, #8]	; (8102578 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102570:	4313      	orrs	r3, r2
 8102572:	654b      	str	r3, [r1, #84]	; 0x54
 8102574:	e006      	b.n	8102584 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8102576:	bf00      	nop
 8102578:	58024400 	.word	0x58024400
 810257c:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102580:	7dfb      	ldrb	r3, [r7, #23]
 8102582:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	681b      	ldr	r3, [r3, #0]
 8102588:	f003 0304 	and.w	r3, r3, #4
 810258c:	2b00      	cmp	r3, #0
 810258e:	d039      	beq.n	8102604 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102596:	2b05      	cmp	r3, #5
 8102598:	d820      	bhi.n	81025dc <HAL_RCCEx_PeriphCLKConfig+0x934>
 810259a:	a201      	add	r2, pc, #4	; (adr r2, 81025a0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 810259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81025a0:	081025e3 	.word	0x081025e3
 81025a4:	081025b9 	.word	0x081025b9
 81025a8:	081025cb 	.word	0x081025cb
 81025ac:	081025e3 	.word	0x081025e3
 81025b0:	081025e3 	.word	0x081025e3
 81025b4:	081025e3 	.word	0x081025e3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	3304      	adds	r3, #4
 81025bc:	2101      	movs	r1, #1
 81025be:	4618      	mov	r0, r3
 81025c0:	f000 fab2 	bl	8102b28 <RCCEx_PLL2_Config>
 81025c4:	4603      	mov	r3, r0
 81025c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81025c8:	e00c      	b.n	81025e4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	3324      	adds	r3, #36	; 0x24
 81025ce:	2101      	movs	r1, #1
 81025d0:	4618      	mov	r0, r3
 81025d2:	f000 fb5b 	bl	8102c8c <RCCEx_PLL3_Config>
 81025d6:	4603      	mov	r3, r0
 81025d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81025da:	e003      	b.n	81025e4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81025dc:	2301      	movs	r3, #1
 81025de:	75fb      	strb	r3, [r7, #23]
      break;
 81025e0:	e000      	b.n	81025e4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 81025e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81025e4:	7dfb      	ldrb	r3, [r7, #23]
 81025e6:	2b00      	cmp	r3, #0
 81025e8:	d10a      	bne.n	8102600 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81025ea:	4bb7      	ldr	r3, [pc, #732]	; (81028c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81025ee:	f023 0207 	bic.w	r2, r3, #7
 81025f2:	687b      	ldr	r3, [r7, #4]
 81025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81025f8:	49b3      	ldr	r1, [pc, #716]	; (81028c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81025fa:	4313      	orrs	r3, r2
 81025fc:	658b      	str	r3, [r1, #88]	; 0x58
 81025fe:	e001      	b.n	8102604 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102600:	7dfb      	ldrb	r3, [r7, #23]
 8102602:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	681b      	ldr	r3, [r3, #0]
 8102608:	f003 0320 	and.w	r3, r3, #32
 810260c:	2b00      	cmp	r3, #0
 810260e:	d04b      	beq.n	81026a8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810261a:	d02e      	beq.n	810267a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 810261c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102620:	d828      	bhi.n	8102674 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102626:	d02a      	beq.n	810267e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8102628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810262c:	d822      	bhi.n	8102674 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810262e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102632:	d026      	beq.n	8102682 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8102634:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102638:	d81c      	bhi.n	8102674 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810263a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810263e:	d010      	beq.n	8102662 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8102640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102644:	d816      	bhi.n	8102674 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102646:	2b00      	cmp	r3, #0
 8102648:	d01d      	beq.n	8102686 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810264a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810264e:	d111      	bne.n	8102674 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102650:	687b      	ldr	r3, [r7, #4]
 8102652:	3304      	adds	r3, #4
 8102654:	2100      	movs	r1, #0
 8102656:	4618      	mov	r0, r3
 8102658:	f000 fa66 	bl	8102b28 <RCCEx_PLL2_Config>
 810265c:	4603      	mov	r3, r0
 810265e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102660:	e012      	b.n	8102688 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	3324      	adds	r3, #36	; 0x24
 8102666:	2102      	movs	r1, #2
 8102668:	4618      	mov	r0, r3
 810266a:	f000 fb0f 	bl	8102c8c <RCCEx_PLL3_Config>
 810266e:	4603      	mov	r3, r0
 8102670:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102672:	e009      	b.n	8102688 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102674:	2301      	movs	r3, #1
 8102676:	75fb      	strb	r3, [r7, #23]
      break;
 8102678:	e006      	b.n	8102688 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810267a:	bf00      	nop
 810267c:	e004      	b.n	8102688 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810267e:	bf00      	nop
 8102680:	e002      	b.n	8102688 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102682:	bf00      	nop
 8102684:	e000      	b.n	8102688 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102688:	7dfb      	ldrb	r3, [r7, #23]
 810268a:	2b00      	cmp	r3, #0
 810268c:	d10a      	bne.n	81026a4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810268e:	4b8e      	ldr	r3, [pc, #568]	; (81028c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102692:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102696:	687b      	ldr	r3, [r7, #4]
 8102698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810269c:	498a      	ldr	r1, [pc, #552]	; (81028c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810269e:	4313      	orrs	r3, r2
 81026a0:	654b      	str	r3, [r1, #84]	; 0x54
 81026a2:	e001      	b.n	81026a8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026a4:	7dfb      	ldrb	r3, [r7, #23]
 81026a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81026a8:	687b      	ldr	r3, [r7, #4]
 81026aa:	681b      	ldr	r3, [r3, #0]
 81026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81026b0:	2b00      	cmp	r3, #0
 81026b2:	d04b      	beq.n	810274c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81026ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81026be:	d02e      	beq.n	810271e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81026c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81026c4:	d828      	bhi.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81026c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81026ca:	d02a      	beq.n	8102722 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81026cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81026d0:	d822      	bhi.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81026d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81026d6:	d026      	beq.n	8102726 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81026d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81026dc:	d81c      	bhi.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81026de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81026e2:	d010      	beq.n	8102706 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 81026e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81026e8:	d816      	bhi.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81026ea:	2b00      	cmp	r3, #0
 81026ec:	d01d      	beq.n	810272a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81026ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81026f2:	d111      	bne.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81026f4:	687b      	ldr	r3, [r7, #4]
 81026f6:	3304      	adds	r3, #4
 81026f8:	2100      	movs	r1, #0
 81026fa:	4618      	mov	r0, r3
 81026fc:	f000 fa14 	bl	8102b28 <RCCEx_PLL2_Config>
 8102700:	4603      	mov	r3, r0
 8102702:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102704:	e012      	b.n	810272c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	3324      	adds	r3, #36	; 0x24
 810270a:	2102      	movs	r1, #2
 810270c:	4618      	mov	r0, r3
 810270e:	f000 fabd 	bl	8102c8c <RCCEx_PLL3_Config>
 8102712:	4603      	mov	r3, r0
 8102714:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102716:	e009      	b.n	810272c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102718:	2301      	movs	r3, #1
 810271a:	75fb      	strb	r3, [r7, #23]
      break;
 810271c:	e006      	b.n	810272c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810271e:	bf00      	nop
 8102720:	e004      	b.n	810272c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102722:	bf00      	nop
 8102724:	e002      	b.n	810272c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102726:	bf00      	nop
 8102728:	e000      	b.n	810272c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810272a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810272c:	7dfb      	ldrb	r3, [r7, #23]
 810272e:	2b00      	cmp	r3, #0
 8102730:	d10a      	bne.n	8102748 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102732:	4b65      	ldr	r3, [pc, #404]	; (81028c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102736:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810273a:	687b      	ldr	r3, [r7, #4]
 810273c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102740:	4961      	ldr	r1, [pc, #388]	; (81028c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102742:	4313      	orrs	r3, r2
 8102744:	658b      	str	r3, [r1, #88]	; 0x58
 8102746:	e001      	b.n	810274c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102748:	7dfb      	ldrb	r3, [r7, #23]
 810274a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810274c:	687b      	ldr	r3, [r7, #4]
 810274e:	681b      	ldr	r3, [r3, #0]
 8102750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102754:	2b00      	cmp	r3, #0
 8102756:	d04b      	beq.n	81027f0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810275e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102762:	d02e      	beq.n	81027c2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8102764:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102768:	d828      	bhi.n	81027bc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810276a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810276e:	d02a      	beq.n	81027c6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8102770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102774:	d822      	bhi.n	81027bc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102776:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810277a:	d026      	beq.n	81027ca <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810277c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102780:	d81c      	bhi.n	81027bc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102786:	d010      	beq.n	81027aa <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8102788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810278c:	d816      	bhi.n	81027bc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810278e:	2b00      	cmp	r3, #0
 8102790:	d01d      	beq.n	81027ce <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8102792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102796:	d111      	bne.n	81027bc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	3304      	adds	r3, #4
 810279c:	2100      	movs	r1, #0
 810279e:	4618      	mov	r0, r3
 81027a0:	f000 f9c2 	bl	8102b28 <RCCEx_PLL2_Config>
 81027a4:	4603      	mov	r3, r0
 81027a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81027a8:	e012      	b.n	81027d0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	3324      	adds	r3, #36	; 0x24
 81027ae:	2102      	movs	r1, #2
 81027b0:	4618      	mov	r0, r3
 81027b2:	f000 fa6b 	bl	8102c8c <RCCEx_PLL3_Config>
 81027b6:	4603      	mov	r3, r0
 81027b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81027ba:	e009      	b.n	81027d0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81027bc:	2301      	movs	r3, #1
 81027be:	75fb      	strb	r3, [r7, #23]
      break;
 81027c0:	e006      	b.n	81027d0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81027c2:	bf00      	nop
 81027c4:	e004      	b.n	81027d0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81027c6:	bf00      	nop
 81027c8:	e002      	b.n	81027d0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81027ca:	bf00      	nop
 81027cc:	e000      	b.n	81027d0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81027ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 81027d0:	7dfb      	ldrb	r3, [r7, #23]
 81027d2:	2b00      	cmp	r3, #0
 81027d4:	d10a      	bne.n	81027ec <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81027d6:	4b3c      	ldr	r3, [pc, #240]	; (81028c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81027da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81027de:	687b      	ldr	r3, [r7, #4]
 81027e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81027e4:	4938      	ldr	r1, [pc, #224]	; (81028c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81027e6:	4313      	orrs	r3, r2
 81027e8:	658b      	str	r3, [r1, #88]	; 0x58
 81027ea:	e001      	b.n	81027f0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027ec:	7dfb      	ldrb	r3, [r7, #23]
 81027ee:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81027f0:	687b      	ldr	r3, [r7, #4]
 81027f2:	681b      	ldr	r3, [r3, #0]
 81027f4:	f003 0308 	and.w	r3, r3, #8
 81027f8:	2b00      	cmp	r3, #0
 81027fa:	d01a      	beq.n	8102832 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102806:	d10a      	bne.n	810281e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	3324      	adds	r3, #36	; 0x24
 810280c:	2102      	movs	r1, #2
 810280e:	4618      	mov	r0, r3
 8102810:	f000 fa3c 	bl	8102c8c <RCCEx_PLL3_Config>
 8102814:	4603      	mov	r3, r0
 8102816:	2b00      	cmp	r3, #0
 8102818:	d001      	beq.n	810281e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 810281a:	2301      	movs	r3, #1
 810281c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810281e:	4b2a      	ldr	r3, [pc, #168]	; (81028c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102822:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810282c:	4926      	ldr	r1, [pc, #152]	; (81028c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810282e:	4313      	orrs	r3, r2
 8102830:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	681b      	ldr	r3, [r3, #0]
 8102836:	f003 0310 	and.w	r3, r3, #16
 810283a:	2b00      	cmp	r3, #0
 810283c:	d01a      	beq.n	8102874 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810283e:	687b      	ldr	r3, [r7, #4]
 8102840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102848:	d10a      	bne.n	8102860 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810284a:	687b      	ldr	r3, [r7, #4]
 810284c:	3324      	adds	r3, #36	; 0x24
 810284e:	2102      	movs	r1, #2
 8102850:	4618      	mov	r0, r3
 8102852:	f000 fa1b 	bl	8102c8c <RCCEx_PLL3_Config>
 8102856:	4603      	mov	r3, r0
 8102858:	2b00      	cmp	r3, #0
 810285a:	d001      	beq.n	8102860 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 810285c:	2301      	movs	r3, #1
 810285e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102860:	4b19      	ldr	r3, [pc, #100]	; (81028c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102868:	687b      	ldr	r3, [r7, #4]
 810286a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810286e:	4916      	ldr	r1, [pc, #88]	; (81028c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102870:	4313      	orrs	r3, r2
 8102872:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	681b      	ldr	r3, [r3, #0]
 8102878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810287c:	2b00      	cmp	r3, #0
 810287e:	d036      	beq.n	81028ee <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8102880:	687b      	ldr	r3, [r7, #4]
 8102882:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810288a:	d01f      	beq.n	81028cc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 810288c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102890:	d817      	bhi.n	81028c2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8102892:	2b00      	cmp	r3, #0
 8102894:	d003      	beq.n	810289e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8102896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810289a:	d009      	beq.n	81028b0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 810289c:	e011      	b.n	81028c2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810289e:	687b      	ldr	r3, [r7, #4]
 81028a0:	3304      	adds	r3, #4
 81028a2:	2100      	movs	r1, #0
 81028a4:	4618      	mov	r0, r3
 81028a6:	f000 f93f 	bl	8102b28 <RCCEx_PLL2_Config>
 81028aa:	4603      	mov	r3, r0
 81028ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81028ae:	e00e      	b.n	81028ce <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	3324      	adds	r3, #36	; 0x24
 81028b4:	2102      	movs	r1, #2
 81028b6:	4618      	mov	r0, r3
 81028b8:	f000 f9e8 	bl	8102c8c <RCCEx_PLL3_Config>
 81028bc:	4603      	mov	r3, r0
 81028be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81028c0:	e005      	b.n	81028ce <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81028c2:	2301      	movs	r3, #1
 81028c4:	75fb      	strb	r3, [r7, #23]
      break;
 81028c6:	e002      	b.n	81028ce <HAL_RCCEx_PeriphCLKConfig+0xc26>
 81028c8:	58024400 	.word	0x58024400
      break;
 81028cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81028ce:	7dfb      	ldrb	r3, [r7, #23]
 81028d0:	2b00      	cmp	r3, #0
 81028d2:	d10a      	bne.n	81028ea <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81028d4:	4b93      	ldr	r3, [pc, #588]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81028d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81028e2:	4990      	ldr	r1, [pc, #576]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81028e4:	4313      	orrs	r3, r2
 81028e6:	658b      	str	r3, [r1, #88]	; 0x58
 81028e8:	e001      	b.n	81028ee <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028ea:	7dfb      	ldrb	r3, [r7, #23]
 81028ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81028ee:	687b      	ldr	r3, [r7, #4]
 81028f0:	681b      	ldr	r3, [r3, #0]
 81028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81028f6:	2b00      	cmp	r3, #0
 81028f8:	d033      	beq.n	8102962 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81028fa:	687b      	ldr	r3, [r7, #4]
 81028fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102904:	d01c      	beq.n	8102940 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8102906:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810290a:	d816      	bhi.n	810293a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 810290c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102910:	d003      	beq.n	810291a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8102912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102916:	d007      	beq.n	8102928 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8102918:	e00f      	b.n	810293a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810291a:	4b82      	ldr	r3, [pc, #520]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810291e:	4a81      	ldr	r2, [pc, #516]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102924:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8102926:	e00c      	b.n	8102942 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102928:	687b      	ldr	r3, [r7, #4]
 810292a:	3324      	adds	r3, #36	; 0x24
 810292c:	2101      	movs	r1, #1
 810292e:	4618      	mov	r0, r3
 8102930:	f000 f9ac 	bl	8102c8c <RCCEx_PLL3_Config>
 8102934:	4603      	mov	r3, r0
 8102936:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8102938:	e003      	b.n	8102942 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810293a:	2301      	movs	r3, #1
 810293c:	75fb      	strb	r3, [r7, #23]
      break;
 810293e:	e000      	b.n	8102942 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8102940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102942:	7dfb      	ldrb	r3, [r7, #23]
 8102944:	2b00      	cmp	r3, #0
 8102946:	d10a      	bne.n	810295e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102948:	4b76      	ldr	r3, [pc, #472]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810294c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102950:	687b      	ldr	r3, [r7, #4]
 8102952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102956:	4973      	ldr	r1, [pc, #460]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102958:	4313      	orrs	r3, r2
 810295a:	654b      	str	r3, [r1, #84]	; 0x54
 810295c:	e001      	b.n	8102962 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810295e:	7dfb      	ldrb	r3, [r7, #23]
 8102960:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102962:	687b      	ldr	r3, [r7, #4]
 8102964:	681b      	ldr	r3, [r3, #0]
 8102966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810296a:	2b00      	cmp	r3, #0
 810296c:	d029      	beq.n	81029c2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810296e:	687b      	ldr	r3, [r7, #4]
 8102970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102972:	2b00      	cmp	r3, #0
 8102974:	d003      	beq.n	810297e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8102976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810297a:	d007      	beq.n	810298c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 810297c:	e00f      	b.n	810299e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810297e:	4b69      	ldr	r3, [pc, #420]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102982:	4a68      	ldr	r2, [pc, #416]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102988:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810298a:	e00b      	b.n	81029a4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810298c:	687b      	ldr	r3, [r7, #4]
 810298e:	3304      	adds	r3, #4
 8102990:	2102      	movs	r1, #2
 8102992:	4618      	mov	r0, r3
 8102994:	f000 f8c8 	bl	8102b28 <RCCEx_PLL2_Config>
 8102998:	4603      	mov	r3, r0
 810299a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810299c:	e002      	b.n	81029a4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 810299e:	2301      	movs	r3, #1
 81029a0:	75fb      	strb	r3, [r7, #23]
      break;
 81029a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81029a4:	7dfb      	ldrb	r3, [r7, #23]
 81029a6:	2b00      	cmp	r3, #0
 81029a8:	d109      	bne.n	81029be <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81029aa:	4b5e      	ldr	r3, [pc, #376]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81029ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81029b2:	687b      	ldr	r3, [r7, #4]
 81029b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81029b6:	495b      	ldr	r1, [pc, #364]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81029b8:	4313      	orrs	r3, r2
 81029ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 81029bc:	e001      	b.n	81029c2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81029be:	7dfb      	ldrb	r3, [r7, #23]
 81029c0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81029c2:	687b      	ldr	r3, [r7, #4]
 81029c4:	681b      	ldr	r3, [r3, #0]
 81029c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81029ca:	2b00      	cmp	r3, #0
 81029cc:	d00a      	beq.n	81029e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81029ce:	687b      	ldr	r3, [r7, #4]
 81029d0:	3324      	adds	r3, #36	; 0x24
 81029d2:	2102      	movs	r1, #2
 81029d4:	4618      	mov	r0, r3
 81029d6:	f000 f959 	bl	8102c8c <RCCEx_PLL3_Config>
 81029da:	4603      	mov	r3, r0
 81029dc:	2b00      	cmp	r3, #0
 81029de:	d001      	beq.n	81029e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81029e0:	2301      	movs	r3, #1
 81029e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81029e4:	687b      	ldr	r3, [r7, #4]
 81029e6:	681b      	ldr	r3, [r3, #0]
 81029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81029ec:	2b00      	cmp	r3, #0
 81029ee:	d030      	beq.n	8102a52 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81029f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81029f8:	d017      	beq.n	8102a2a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 81029fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81029fe:	d811      	bhi.n	8102a24 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8102a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102a04:	d013      	beq.n	8102a2e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8102a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102a0a:	d80b      	bhi.n	8102a24 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8102a0c:	2b00      	cmp	r3, #0
 8102a0e:	d010      	beq.n	8102a32 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8102a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102a14:	d106      	bne.n	8102a24 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102a16:	4b43      	ldr	r3, [pc, #268]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a1a:	4a42      	ldr	r2, [pc, #264]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102a20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8102a22:	e007      	b.n	8102a34 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102a24:	2301      	movs	r3, #1
 8102a26:	75fb      	strb	r3, [r7, #23]
      break;
 8102a28:	e004      	b.n	8102a34 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102a2a:	bf00      	nop
 8102a2c:	e002      	b.n	8102a34 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102a2e:	bf00      	nop
 8102a30:	e000      	b.n	8102a34 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102a34:	7dfb      	ldrb	r3, [r7, #23]
 8102a36:	2b00      	cmp	r3, #0
 8102a38:	d109      	bne.n	8102a4e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102a3a:	4b3a      	ldr	r3, [pc, #232]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102a46:	4937      	ldr	r1, [pc, #220]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a48:	4313      	orrs	r3, r2
 8102a4a:	654b      	str	r3, [r1, #84]	; 0x54
 8102a4c:	e001      	b.n	8102a52 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a4e:	7dfb      	ldrb	r3, [r7, #23]
 8102a50:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	681b      	ldr	r3, [r3, #0]
 8102a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102a5a:	2b00      	cmp	r3, #0
 8102a5c:	d008      	beq.n	8102a70 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102a5e:	4b31      	ldr	r3, [pc, #196]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102a62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102a6a:	492e      	ldr	r1, [pc, #184]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a6c:	4313      	orrs	r3, r2
 8102a6e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102a70:	687b      	ldr	r3, [r7, #4]
 8102a72:	681b      	ldr	r3, [r3, #0]
 8102a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102a78:	2b00      	cmp	r3, #0
 8102a7a:	d009      	beq.n	8102a90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102a7c:	4b29      	ldr	r3, [pc, #164]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a7e:	691b      	ldr	r3, [r3, #16]
 8102a80:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8102a84:	687b      	ldr	r3, [r7, #4]
 8102a86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8102a8a:	4926      	ldr	r1, [pc, #152]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a8c:	4313      	orrs	r3, r2
 8102a8e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102a98:	2b00      	cmp	r3, #0
 8102a9a:	d008      	beq.n	8102aae <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102a9c:	4b21      	ldr	r3, [pc, #132]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102aa0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102aa8:	491e      	ldr	r1, [pc, #120]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102aaa:	4313      	orrs	r3, r2
 8102aac:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	681b      	ldr	r3, [r3, #0]
 8102ab2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8102ab6:	2b00      	cmp	r3, #0
 8102ab8:	d00d      	beq.n	8102ad6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102aba:	4b1a      	ldr	r3, [pc, #104]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102abc:	691b      	ldr	r3, [r3, #16]
 8102abe:	4a19      	ldr	r2, [pc, #100]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ac0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102ac4:	6113      	str	r3, [r2, #16]
 8102ac6:	4b17      	ldr	r3, [pc, #92]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ac8:	691a      	ldr	r2, [r3, #16]
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8102ad0:	4914      	ldr	r1, [pc, #80]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ad2:	4313      	orrs	r3, r2
 8102ad4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102ad6:	687b      	ldr	r3, [r7, #4]
 8102ad8:	681b      	ldr	r3, [r3, #0]
 8102ada:	2b00      	cmp	r3, #0
 8102adc:	da08      	bge.n	8102af0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102ade:	4b11      	ldr	r3, [pc, #68]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102ae2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102aea:	490e      	ldr	r1, [pc, #56]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102aec:	4313      	orrs	r3, r2
 8102aee:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102af0:	687b      	ldr	r3, [r7, #4]
 8102af2:	681b      	ldr	r3, [r3, #0]
 8102af4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102af8:	2b00      	cmp	r3, #0
 8102afa:	d009      	beq.n	8102b10 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102afc:	4b09      	ldr	r3, [pc, #36]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8102b04:	687b      	ldr	r3, [r7, #4]
 8102b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8102b0a:	4906      	ldr	r1, [pc, #24]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102b0c:	4313      	orrs	r3, r2
 8102b0e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8102b10:	7dbb      	ldrb	r3, [r7, #22]
 8102b12:	2b00      	cmp	r3, #0
 8102b14:	d101      	bne.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8102b16:	2300      	movs	r3, #0
 8102b18:	e000      	b.n	8102b1c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8102b1a:	2301      	movs	r3, #1
}
 8102b1c:	4618      	mov	r0, r3
 8102b1e:	3718      	adds	r7, #24
 8102b20:	46bd      	mov	sp, r7
 8102b22:	bd80      	pop	{r7, pc}
 8102b24:	58024400 	.word	0x58024400

08102b28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102b28:	b580      	push	{r7, lr}
 8102b2a:	b084      	sub	sp, #16
 8102b2c:	af00      	add	r7, sp, #0
 8102b2e:	6078      	str	r0, [r7, #4]
 8102b30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102b32:	2300      	movs	r3, #0
 8102b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102b36:	4b54      	ldr	r3, [pc, #336]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102b3a:	f003 0303 	and.w	r3, r3, #3
 8102b3e:	2b03      	cmp	r3, #3
 8102b40:	d101      	bne.n	8102b46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102b42:	2301      	movs	r3, #1
 8102b44:	e09b      	b.n	8102c7e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102b46:	4b50      	ldr	r3, [pc, #320]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102b48:	681b      	ldr	r3, [r3, #0]
 8102b4a:	4a4f      	ldr	r2, [pc, #316]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102b4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8102b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102b52:	f7fe f9a7 	bl	8100ea4 <HAL_GetTick>
 8102b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102b58:	e008      	b.n	8102b6c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102b5a:	f7fe f9a3 	bl	8100ea4 <HAL_GetTick>
 8102b5e:	4602      	mov	r2, r0
 8102b60:	68bb      	ldr	r3, [r7, #8]
 8102b62:	1ad3      	subs	r3, r2, r3
 8102b64:	2b02      	cmp	r3, #2
 8102b66:	d901      	bls.n	8102b6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102b68:	2303      	movs	r3, #3
 8102b6a:	e088      	b.n	8102c7e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102b6c:	4b46      	ldr	r3, [pc, #280]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102b6e:	681b      	ldr	r3, [r3, #0]
 8102b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102b74:	2b00      	cmp	r3, #0
 8102b76:	d1f0      	bne.n	8102b5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102b78:	4b43      	ldr	r3, [pc, #268]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102b7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8102b80:	687b      	ldr	r3, [r7, #4]
 8102b82:	681b      	ldr	r3, [r3, #0]
 8102b84:	031b      	lsls	r3, r3, #12
 8102b86:	4940      	ldr	r1, [pc, #256]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102b88:	4313      	orrs	r3, r2
 8102b8a:	628b      	str	r3, [r1, #40]	; 0x28
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	685b      	ldr	r3, [r3, #4]
 8102b90:	3b01      	subs	r3, #1
 8102b92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102b96:	687b      	ldr	r3, [r7, #4]
 8102b98:	689b      	ldr	r3, [r3, #8]
 8102b9a:	3b01      	subs	r3, #1
 8102b9c:	025b      	lsls	r3, r3, #9
 8102b9e:	b29b      	uxth	r3, r3
 8102ba0:	431a      	orrs	r2, r3
 8102ba2:	687b      	ldr	r3, [r7, #4]
 8102ba4:	68db      	ldr	r3, [r3, #12]
 8102ba6:	3b01      	subs	r3, #1
 8102ba8:	041b      	lsls	r3, r3, #16
 8102baa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102bae:	431a      	orrs	r2, r3
 8102bb0:	687b      	ldr	r3, [r7, #4]
 8102bb2:	691b      	ldr	r3, [r3, #16]
 8102bb4:	3b01      	subs	r3, #1
 8102bb6:	061b      	lsls	r3, r3, #24
 8102bb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102bbc:	4932      	ldr	r1, [pc, #200]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102bbe:	4313      	orrs	r3, r2
 8102bc0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102bc2:	4b31      	ldr	r3, [pc, #196]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8102bca:	687b      	ldr	r3, [r7, #4]
 8102bcc:	695b      	ldr	r3, [r3, #20]
 8102bce:	492e      	ldr	r1, [pc, #184]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102bd0:	4313      	orrs	r3, r2
 8102bd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102bd4:	4b2c      	ldr	r3, [pc, #176]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bd8:	f023 0220 	bic.w	r2, r3, #32
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	699b      	ldr	r3, [r3, #24]
 8102be0:	4929      	ldr	r1, [pc, #164]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102be2:	4313      	orrs	r3, r2
 8102be4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102be6:	4b28      	ldr	r3, [pc, #160]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bea:	4a27      	ldr	r2, [pc, #156]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102bec:	f023 0310 	bic.w	r3, r3, #16
 8102bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102bf2:	4b25      	ldr	r3, [pc, #148]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102bfa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102bfe:	687a      	ldr	r2, [r7, #4]
 8102c00:	69d2      	ldr	r2, [r2, #28]
 8102c02:	00d2      	lsls	r2, r2, #3
 8102c04:	4920      	ldr	r1, [pc, #128]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102c06:	4313      	orrs	r3, r2
 8102c08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102c0a:	4b1f      	ldr	r3, [pc, #124]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c0e:	4a1e      	ldr	r2, [pc, #120]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102c10:	f043 0310 	orr.w	r3, r3, #16
 8102c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102c16:	683b      	ldr	r3, [r7, #0]
 8102c18:	2b00      	cmp	r3, #0
 8102c1a:	d106      	bne.n	8102c2a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102c1c:	4b1a      	ldr	r3, [pc, #104]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c20:	4a19      	ldr	r2, [pc, #100]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8102c26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102c28:	e00f      	b.n	8102c4a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102c2a:	683b      	ldr	r3, [r7, #0]
 8102c2c:	2b01      	cmp	r3, #1
 8102c2e:	d106      	bne.n	8102c3e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8102c30:	4b15      	ldr	r3, [pc, #84]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c34:	4a14      	ldr	r2, [pc, #80]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102c3c:	e005      	b.n	8102c4a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8102c3e:	4b12      	ldr	r3, [pc, #72]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c42:	4a11      	ldr	r2, [pc, #68]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102c48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8102c4a:	4b0f      	ldr	r3, [pc, #60]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102c4c:	681b      	ldr	r3, [r3, #0]
 8102c4e:	4a0e      	ldr	r2, [pc, #56]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102c50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8102c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102c56:	f7fe f925 	bl	8100ea4 <HAL_GetTick>
 8102c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102c5c:	e008      	b.n	8102c70 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102c5e:	f7fe f921 	bl	8100ea4 <HAL_GetTick>
 8102c62:	4602      	mov	r2, r0
 8102c64:	68bb      	ldr	r3, [r7, #8]
 8102c66:	1ad3      	subs	r3, r2, r3
 8102c68:	2b02      	cmp	r3, #2
 8102c6a:	d901      	bls.n	8102c70 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102c6c:	2303      	movs	r3, #3
 8102c6e:	e006      	b.n	8102c7e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102c70:	4b05      	ldr	r3, [pc, #20]	; (8102c88 <RCCEx_PLL2_Config+0x160>)
 8102c72:	681b      	ldr	r3, [r3, #0]
 8102c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102c78:	2b00      	cmp	r3, #0
 8102c7a:	d0f0      	beq.n	8102c5e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8102c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8102c7e:	4618      	mov	r0, r3
 8102c80:	3710      	adds	r7, #16
 8102c82:	46bd      	mov	sp, r7
 8102c84:	bd80      	pop	{r7, pc}
 8102c86:	bf00      	nop
 8102c88:	58024400 	.word	0x58024400

08102c8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8102c8c:	b580      	push	{r7, lr}
 8102c8e:	b084      	sub	sp, #16
 8102c90:	af00      	add	r7, sp, #0
 8102c92:	6078      	str	r0, [r7, #4]
 8102c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102c96:	2300      	movs	r3, #0
 8102c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102c9a:	4b54      	ldr	r3, [pc, #336]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c9e:	f003 0303 	and.w	r3, r3, #3
 8102ca2:	2b03      	cmp	r3, #3
 8102ca4:	d101      	bne.n	8102caa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8102ca6:	2301      	movs	r3, #1
 8102ca8:	e09b      	b.n	8102de2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8102caa:	4b50      	ldr	r3, [pc, #320]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102cac:	681b      	ldr	r3, [r3, #0]
 8102cae:	4a4f      	ldr	r2, [pc, #316]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102cb6:	f7fe f8f5 	bl	8100ea4 <HAL_GetTick>
 8102cba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102cbc:	e008      	b.n	8102cd0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102cbe:	f7fe f8f1 	bl	8100ea4 <HAL_GetTick>
 8102cc2:	4602      	mov	r2, r0
 8102cc4:	68bb      	ldr	r3, [r7, #8]
 8102cc6:	1ad3      	subs	r3, r2, r3
 8102cc8:	2b02      	cmp	r3, #2
 8102cca:	d901      	bls.n	8102cd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102ccc:	2303      	movs	r3, #3
 8102cce:	e088      	b.n	8102de2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102cd0:	4b46      	ldr	r3, [pc, #280]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102cd2:	681b      	ldr	r3, [r3, #0]
 8102cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102cd8:	2b00      	cmp	r3, #0
 8102cda:	d1f0      	bne.n	8102cbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8102cdc:	4b43      	ldr	r3, [pc, #268]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102ce0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8102ce4:	687b      	ldr	r3, [r7, #4]
 8102ce6:	681b      	ldr	r3, [r3, #0]
 8102ce8:	051b      	lsls	r3, r3, #20
 8102cea:	4940      	ldr	r1, [pc, #256]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102cec:	4313      	orrs	r3, r2
 8102cee:	628b      	str	r3, [r1, #40]	; 0x28
 8102cf0:	687b      	ldr	r3, [r7, #4]
 8102cf2:	685b      	ldr	r3, [r3, #4]
 8102cf4:	3b01      	subs	r3, #1
 8102cf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	689b      	ldr	r3, [r3, #8]
 8102cfe:	3b01      	subs	r3, #1
 8102d00:	025b      	lsls	r3, r3, #9
 8102d02:	b29b      	uxth	r3, r3
 8102d04:	431a      	orrs	r2, r3
 8102d06:	687b      	ldr	r3, [r7, #4]
 8102d08:	68db      	ldr	r3, [r3, #12]
 8102d0a:	3b01      	subs	r3, #1
 8102d0c:	041b      	lsls	r3, r3, #16
 8102d0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102d12:	431a      	orrs	r2, r3
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	691b      	ldr	r3, [r3, #16]
 8102d18:	3b01      	subs	r3, #1
 8102d1a:	061b      	lsls	r3, r3, #24
 8102d1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102d20:	4932      	ldr	r1, [pc, #200]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d22:	4313      	orrs	r3, r2
 8102d24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8102d26:	4b31      	ldr	r3, [pc, #196]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	695b      	ldr	r3, [r3, #20]
 8102d32:	492e      	ldr	r1, [pc, #184]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d34:	4313      	orrs	r3, r2
 8102d36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8102d38:	4b2c      	ldr	r3, [pc, #176]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	699b      	ldr	r3, [r3, #24]
 8102d44:	4929      	ldr	r1, [pc, #164]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d46:	4313      	orrs	r3, r2
 8102d48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8102d4a:	4b28      	ldr	r3, [pc, #160]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d4e:	4a27      	ldr	r2, [pc, #156]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102d54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8102d56:	4b25      	ldr	r3, [pc, #148]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102d5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102d62:	687a      	ldr	r2, [r7, #4]
 8102d64:	69d2      	ldr	r2, [r2, #28]
 8102d66:	00d2      	lsls	r2, r2, #3
 8102d68:	4920      	ldr	r1, [pc, #128]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d6a:	4313      	orrs	r3, r2
 8102d6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8102d6e:	4b1f      	ldr	r3, [pc, #124]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d72:	4a1e      	ldr	r2, [pc, #120]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102d78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102d7a:	683b      	ldr	r3, [r7, #0]
 8102d7c:	2b00      	cmp	r3, #0
 8102d7e:	d106      	bne.n	8102d8e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8102d80:	4b1a      	ldr	r3, [pc, #104]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d84:	4a19      	ldr	r2, [pc, #100]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102d8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102d8c:	e00f      	b.n	8102dae <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102d8e:	683b      	ldr	r3, [r7, #0]
 8102d90:	2b01      	cmp	r3, #1
 8102d92:	d106      	bne.n	8102da2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8102d94:	4b15      	ldr	r3, [pc, #84]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d98:	4a14      	ldr	r2, [pc, #80]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102d9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102d9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102da0:	e005      	b.n	8102dae <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8102da2:	4b12      	ldr	r3, [pc, #72]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102da6:	4a11      	ldr	r2, [pc, #68]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102da8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102dac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8102dae:	4b0f      	ldr	r3, [pc, #60]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102db0:	681b      	ldr	r3, [r3, #0]
 8102db2:	4a0e      	ldr	r2, [pc, #56]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102db8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102dba:	f7fe f873 	bl	8100ea4 <HAL_GetTick>
 8102dbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102dc0:	e008      	b.n	8102dd4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102dc2:	f7fe f86f 	bl	8100ea4 <HAL_GetTick>
 8102dc6:	4602      	mov	r2, r0
 8102dc8:	68bb      	ldr	r3, [r7, #8]
 8102dca:	1ad3      	subs	r3, r2, r3
 8102dcc:	2b02      	cmp	r3, #2
 8102dce:	d901      	bls.n	8102dd4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102dd0:	2303      	movs	r3, #3
 8102dd2:	e006      	b.n	8102de2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102dd4:	4b05      	ldr	r3, [pc, #20]	; (8102dec <RCCEx_PLL3_Config+0x160>)
 8102dd6:	681b      	ldr	r3, [r3, #0]
 8102dd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102ddc:	2b00      	cmp	r3, #0
 8102dde:	d0f0      	beq.n	8102dc2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8102de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8102de2:	4618      	mov	r0, r3
 8102de4:	3710      	adds	r7, #16
 8102de6:	46bd      	mov	sp, r7
 8102de8:	bd80      	pop	{r7, pc}
 8102dea:	bf00      	nop
 8102dec:	58024400 	.word	0x58024400

08102df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8102df0:	b580      	push	{r7, lr}
 8102df2:	b082      	sub	sp, #8
 8102df4:	af00      	add	r7, sp, #0
 8102df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8102df8:	687b      	ldr	r3, [r7, #4]
 8102dfa:	2b00      	cmp	r3, #0
 8102dfc:	d101      	bne.n	8102e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8102dfe:	2301      	movs	r3, #1
 8102e00:	e049      	b.n	8102e96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8102e02:	687b      	ldr	r3, [r7, #4]
 8102e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8102e08:	b2db      	uxtb	r3, r3
 8102e0a:	2b00      	cmp	r3, #0
 8102e0c:	d106      	bne.n	8102e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8102e0e:	687b      	ldr	r3, [r7, #4]
 8102e10:	2200      	movs	r2, #0
 8102e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8102e16:	6878      	ldr	r0, [r7, #4]
 8102e18:	f000 f841 	bl	8102e9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	2202      	movs	r2, #2
 8102e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8102e24:	687b      	ldr	r3, [r7, #4]
 8102e26:	681a      	ldr	r2, [r3, #0]
 8102e28:	687b      	ldr	r3, [r7, #4]
 8102e2a:	3304      	adds	r3, #4
 8102e2c:	4619      	mov	r1, r3
 8102e2e:	4610      	mov	r0, r2
 8102e30:	f000 fb5e 	bl	81034f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8102e34:	687b      	ldr	r3, [r7, #4]
 8102e36:	2201      	movs	r2, #1
 8102e38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	2201      	movs	r2, #1
 8102e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	2201      	movs	r2, #1
 8102e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8102e4c:	687b      	ldr	r3, [r7, #4]
 8102e4e:	2201      	movs	r2, #1
 8102e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8102e54:	687b      	ldr	r3, [r7, #4]
 8102e56:	2201      	movs	r2, #1
 8102e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	2201      	movs	r2, #1
 8102e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8102e64:	687b      	ldr	r3, [r7, #4]
 8102e66:	2201      	movs	r2, #1
 8102e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8102e6c:	687b      	ldr	r3, [r7, #4]
 8102e6e:	2201      	movs	r2, #1
 8102e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102e74:	687b      	ldr	r3, [r7, #4]
 8102e76:	2201      	movs	r2, #1
 8102e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102e7c:	687b      	ldr	r3, [r7, #4]
 8102e7e:	2201      	movs	r2, #1
 8102e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8102e84:	687b      	ldr	r3, [r7, #4]
 8102e86:	2201      	movs	r2, #1
 8102e88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8102e8c:	687b      	ldr	r3, [r7, #4]
 8102e8e:	2201      	movs	r2, #1
 8102e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8102e94:	2300      	movs	r3, #0
}
 8102e96:	4618      	mov	r0, r3
 8102e98:	3708      	adds	r7, #8
 8102e9a:	46bd      	mov	sp, r7
 8102e9c:	bd80      	pop	{r7, pc}

08102e9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8102e9e:	b480      	push	{r7}
 8102ea0:	b083      	sub	sp, #12
 8102ea2:	af00      	add	r7, sp, #0
 8102ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8102ea6:	bf00      	nop
 8102ea8:	370c      	adds	r7, #12
 8102eaa:	46bd      	mov	sp, r7
 8102eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eb0:	4770      	bx	lr
	...

08102eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8102eb4:	b480      	push	{r7}
 8102eb6:	b085      	sub	sp, #20
 8102eb8:	af00      	add	r7, sp, #0
 8102eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8102ec2:	b2db      	uxtb	r3, r3
 8102ec4:	2b01      	cmp	r3, #1
 8102ec6:	d001      	beq.n	8102ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8102ec8:	2301      	movs	r3, #1
 8102eca:	e04f      	b.n	8102f6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102ecc:	687b      	ldr	r3, [r7, #4]
 8102ece:	2202      	movs	r2, #2
 8102ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	681b      	ldr	r3, [r3, #0]
 8102ed8:	68da      	ldr	r2, [r3, #12]
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	681b      	ldr	r3, [r3, #0]
 8102ede:	f042 0201 	orr.w	r2, r2, #1
 8102ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	681b      	ldr	r3, [r3, #0]
 8102ee8:	4a23      	ldr	r2, [pc, #140]	; (8102f78 <HAL_TIM_Base_Start_IT+0xc4>)
 8102eea:	4293      	cmp	r3, r2
 8102eec:	d01d      	beq.n	8102f2a <HAL_TIM_Base_Start_IT+0x76>
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	681b      	ldr	r3, [r3, #0]
 8102ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102ef6:	d018      	beq.n	8102f2a <HAL_TIM_Base_Start_IT+0x76>
 8102ef8:	687b      	ldr	r3, [r7, #4]
 8102efa:	681b      	ldr	r3, [r3, #0]
 8102efc:	4a1f      	ldr	r2, [pc, #124]	; (8102f7c <HAL_TIM_Base_Start_IT+0xc8>)
 8102efe:	4293      	cmp	r3, r2
 8102f00:	d013      	beq.n	8102f2a <HAL_TIM_Base_Start_IT+0x76>
 8102f02:	687b      	ldr	r3, [r7, #4]
 8102f04:	681b      	ldr	r3, [r3, #0]
 8102f06:	4a1e      	ldr	r2, [pc, #120]	; (8102f80 <HAL_TIM_Base_Start_IT+0xcc>)
 8102f08:	4293      	cmp	r3, r2
 8102f0a:	d00e      	beq.n	8102f2a <HAL_TIM_Base_Start_IT+0x76>
 8102f0c:	687b      	ldr	r3, [r7, #4]
 8102f0e:	681b      	ldr	r3, [r3, #0]
 8102f10:	4a1c      	ldr	r2, [pc, #112]	; (8102f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8102f12:	4293      	cmp	r3, r2
 8102f14:	d009      	beq.n	8102f2a <HAL_TIM_Base_Start_IT+0x76>
 8102f16:	687b      	ldr	r3, [r7, #4]
 8102f18:	681b      	ldr	r3, [r3, #0]
 8102f1a:	4a1b      	ldr	r2, [pc, #108]	; (8102f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8102f1c:	4293      	cmp	r3, r2
 8102f1e:	d004      	beq.n	8102f2a <HAL_TIM_Base_Start_IT+0x76>
 8102f20:	687b      	ldr	r3, [r7, #4]
 8102f22:	681b      	ldr	r3, [r3, #0]
 8102f24:	4a19      	ldr	r2, [pc, #100]	; (8102f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8102f26:	4293      	cmp	r3, r2
 8102f28:	d115      	bne.n	8102f56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8102f2a:	687b      	ldr	r3, [r7, #4]
 8102f2c:	681b      	ldr	r3, [r3, #0]
 8102f2e:	689a      	ldr	r2, [r3, #8]
 8102f30:	4b17      	ldr	r3, [pc, #92]	; (8102f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8102f32:	4013      	ands	r3, r2
 8102f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102f36:	68fb      	ldr	r3, [r7, #12]
 8102f38:	2b06      	cmp	r3, #6
 8102f3a:	d015      	beq.n	8102f68 <HAL_TIM_Base_Start_IT+0xb4>
 8102f3c:	68fb      	ldr	r3, [r7, #12]
 8102f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102f42:	d011      	beq.n	8102f68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	681b      	ldr	r3, [r3, #0]
 8102f48:	681a      	ldr	r2, [r3, #0]
 8102f4a:	687b      	ldr	r3, [r7, #4]
 8102f4c:	681b      	ldr	r3, [r3, #0]
 8102f4e:	f042 0201 	orr.w	r2, r2, #1
 8102f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102f54:	e008      	b.n	8102f68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8102f56:	687b      	ldr	r3, [r7, #4]
 8102f58:	681b      	ldr	r3, [r3, #0]
 8102f5a:	681a      	ldr	r2, [r3, #0]
 8102f5c:	687b      	ldr	r3, [r7, #4]
 8102f5e:	681b      	ldr	r3, [r3, #0]
 8102f60:	f042 0201 	orr.w	r2, r2, #1
 8102f64:	601a      	str	r2, [r3, #0]
 8102f66:	e000      	b.n	8102f6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102f68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8102f6a:	2300      	movs	r3, #0
}
 8102f6c:	4618      	mov	r0, r3
 8102f6e:	3714      	adds	r7, #20
 8102f70:	46bd      	mov	sp, r7
 8102f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f76:	4770      	bx	lr
 8102f78:	40010000 	.word	0x40010000
 8102f7c:	40000400 	.word	0x40000400
 8102f80:	40000800 	.word	0x40000800
 8102f84:	40000c00 	.word	0x40000c00
 8102f88:	40010400 	.word	0x40010400
 8102f8c:	40001800 	.word	0x40001800
 8102f90:	00010007 	.word	0x00010007

08102f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8102f94:	b580      	push	{r7, lr}
 8102f96:	b082      	sub	sp, #8
 8102f98:	af00      	add	r7, sp, #0
 8102f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	2b00      	cmp	r3, #0
 8102fa0:	d101      	bne.n	8102fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8102fa2:	2301      	movs	r3, #1
 8102fa4:	e049      	b.n	810303a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8102fac:	b2db      	uxtb	r3, r3
 8102fae:	2b00      	cmp	r3, #0
 8102fb0:	d106      	bne.n	8102fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8102fb2:	687b      	ldr	r3, [r7, #4]
 8102fb4:	2200      	movs	r2, #0
 8102fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8102fba:	6878      	ldr	r0, [r7, #4]
 8102fbc:	f7fd fe56 	bl	8100c6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	2202      	movs	r2, #2
 8102fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	681a      	ldr	r2, [r3, #0]
 8102fcc:	687b      	ldr	r3, [r7, #4]
 8102fce:	3304      	adds	r3, #4
 8102fd0:	4619      	mov	r1, r3
 8102fd2:	4610      	mov	r0, r2
 8102fd4:	f000 fa8c 	bl	81034f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8102fd8:	687b      	ldr	r3, [r7, #4]
 8102fda:	2201      	movs	r2, #1
 8102fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	2201      	movs	r2, #1
 8102fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8102fe8:	687b      	ldr	r3, [r7, #4]
 8102fea:	2201      	movs	r2, #1
 8102fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	2201      	movs	r2, #1
 8102ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	2201      	movs	r2, #1
 8102ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103000:	687b      	ldr	r3, [r7, #4]
 8103002:	2201      	movs	r2, #1
 8103004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103008:	687b      	ldr	r3, [r7, #4]
 810300a:	2201      	movs	r2, #1
 810300c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103010:	687b      	ldr	r3, [r7, #4]
 8103012:	2201      	movs	r2, #1
 8103014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	2201      	movs	r2, #1
 810301c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	2201      	movs	r2, #1
 8103024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	2201      	movs	r2, #1
 810302c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103030:	687b      	ldr	r3, [r7, #4]
 8103032:	2201      	movs	r2, #1
 8103034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103038:	2300      	movs	r3, #0
}
 810303a:	4618      	mov	r0, r3
 810303c:	3708      	adds	r7, #8
 810303e:	46bd      	mov	sp, r7
 8103040:	bd80      	pop	{r7, pc}

08103042 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8103042:	b580      	push	{r7, lr}
 8103044:	b082      	sub	sp, #8
 8103046:	af00      	add	r7, sp, #0
 8103048:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	681b      	ldr	r3, [r3, #0]
 810304e:	691b      	ldr	r3, [r3, #16]
 8103050:	f003 0302 	and.w	r3, r3, #2
 8103054:	2b02      	cmp	r3, #2
 8103056:	d122      	bne.n	810309e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8103058:	687b      	ldr	r3, [r7, #4]
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	68db      	ldr	r3, [r3, #12]
 810305e:	f003 0302 	and.w	r3, r3, #2
 8103062:	2b02      	cmp	r3, #2
 8103064:	d11b      	bne.n	810309e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	681b      	ldr	r3, [r3, #0]
 810306a:	f06f 0202 	mvn.w	r2, #2
 810306e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	2201      	movs	r2, #1
 8103074:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8103076:	687b      	ldr	r3, [r7, #4]
 8103078:	681b      	ldr	r3, [r3, #0]
 810307a:	699b      	ldr	r3, [r3, #24]
 810307c:	f003 0303 	and.w	r3, r3, #3
 8103080:	2b00      	cmp	r3, #0
 8103082:	d003      	beq.n	810308c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8103084:	6878      	ldr	r0, [r7, #4]
 8103086:	f000 fa15 	bl	81034b4 <HAL_TIM_IC_CaptureCallback>
 810308a:	e005      	b.n	8103098 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810308c:	6878      	ldr	r0, [r7, #4]
 810308e:	f000 fa07 	bl	81034a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103092:	6878      	ldr	r0, [r7, #4]
 8103094:	f000 fa18 	bl	81034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103098:	687b      	ldr	r3, [r7, #4]
 810309a:	2200      	movs	r2, #0
 810309c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810309e:	687b      	ldr	r3, [r7, #4]
 81030a0:	681b      	ldr	r3, [r3, #0]
 81030a2:	691b      	ldr	r3, [r3, #16]
 81030a4:	f003 0304 	and.w	r3, r3, #4
 81030a8:	2b04      	cmp	r3, #4
 81030aa:	d122      	bne.n	81030f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	681b      	ldr	r3, [r3, #0]
 81030b0:	68db      	ldr	r3, [r3, #12]
 81030b2:	f003 0304 	and.w	r3, r3, #4
 81030b6:	2b04      	cmp	r3, #4
 81030b8:	d11b      	bne.n	81030f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	681b      	ldr	r3, [r3, #0]
 81030be:	f06f 0204 	mvn.w	r2, #4
 81030c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	2202      	movs	r2, #2
 81030c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	681b      	ldr	r3, [r3, #0]
 81030ce:	699b      	ldr	r3, [r3, #24]
 81030d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81030d4:	2b00      	cmp	r3, #0
 81030d6:	d003      	beq.n	81030e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81030d8:	6878      	ldr	r0, [r7, #4]
 81030da:	f000 f9eb 	bl	81034b4 <HAL_TIM_IC_CaptureCallback>
 81030de:	e005      	b.n	81030ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81030e0:	6878      	ldr	r0, [r7, #4]
 81030e2:	f000 f9dd 	bl	81034a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81030e6:	6878      	ldr	r0, [r7, #4]
 81030e8:	f000 f9ee 	bl	81034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	2200      	movs	r2, #0
 81030f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81030f2:	687b      	ldr	r3, [r7, #4]
 81030f4:	681b      	ldr	r3, [r3, #0]
 81030f6:	691b      	ldr	r3, [r3, #16]
 81030f8:	f003 0308 	and.w	r3, r3, #8
 81030fc:	2b08      	cmp	r3, #8
 81030fe:	d122      	bne.n	8103146 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	68db      	ldr	r3, [r3, #12]
 8103106:	f003 0308 	and.w	r3, r3, #8
 810310a:	2b08      	cmp	r3, #8
 810310c:	d11b      	bne.n	8103146 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810310e:	687b      	ldr	r3, [r7, #4]
 8103110:	681b      	ldr	r3, [r3, #0]
 8103112:	f06f 0208 	mvn.w	r2, #8
 8103116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	2204      	movs	r2, #4
 810311c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	681b      	ldr	r3, [r3, #0]
 8103122:	69db      	ldr	r3, [r3, #28]
 8103124:	f003 0303 	and.w	r3, r3, #3
 8103128:	2b00      	cmp	r3, #0
 810312a:	d003      	beq.n	8103134 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810312c:	6878      	ldr	r0, [r7, #4]
 810312e:	f000 f9c1 	bl	81034b4 <HAL_TIM_IC_CaptureCallback>
 8103132:	e005      	b.n	8103140 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103134:	6878      	ldr	r0, [r7, #4]
 8103136:	f000 f9b3 	bl	81034a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810313a:	6878      	ldr	r0, [r7, #4]
 810313c:	f000 f9c4 	bl	81034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103140:	687b      	ldr	r3, [r7, #4]
 8103142:	2200      	movs	r2, #0
 8103144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8103146:	687b      	ldr	r3, [r7, #4]
 8103148:	681b      	ldr	r3, [r3, #0]
 810314a:	691b      	ldr	r3, [r3, #16]
 810314c:	f003 0310 	and.w	r3, r3, #16
 8103150:	2b10      	cmp	r3, #16
 8103152:	d122      	bne.n	810319a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	681b      	ldr	r3, [r3, #0]
 8103158:	68db      	ldr	r3, [r3, #12]
 810315a:	f003 0310 	and.w	r3, r3, #16
 810315e:	2b10      	cmp	r3, #16
 8103160:	d11b      	bne.n	810319a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	681b      	ldr	r3, [r3, #0]
 8103166:	f06f 0210 	mvn.w	r2, #16
 810316a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	2208      	movs	r2, #8
 8103170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	69db      	ldr	r3, [r3, #28]
 8103178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810317c:	2b00      	cmp	r3, #0
 810317e:	d003      	beq.n	8103188 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103180:	6878      	ldr	r0, [r7, #4]
 8103182:	f000 f997 	bl	81034b4 <HAL_TIM_IC_CaptureCallback>
 8103186:	e005      	b.n	8103194 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103188:	6878      	ldr	r0, [r7, #4]
 810318a:	f000 f989 	bl	81034a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810318e:	6878      	ldr	r0, [r7, #4]
 8103190:	f000 f99a 	bl	81034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103194:	687b      	ldr	r3, [r7, #4]
 8103196:	2200      	movs	r2, #0
 8103198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810319a:	687b      	ldr	r3, [r7, #4]
 810319c:	681b      	ldr	r3, [r3, #0]
 810319e:	691b      	ldr	r3, [r3, #16]
 81031a0:	f003 0301 	and.w	r3, r3, #1
 81031a4:	2b01      	cmp	r3, #1
 81031a6:	d10e      	bne.n	81031c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	681b      	ldr	r3, [r3, #0]
 81031ac:	68db      	ldr	r3, [r3, #12]
 81031ae:	f003 0301 	and.w	r3, r3, #1
 81031b2:	2b01      	cmp	r3, #1
 81031b4:	d107      	bne.n	81031c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	681b      	ldr	r3, [r3, #0]
 81031ba:	f06f 0201 	mvn.w	r2, #1
 81031be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81031c0:	6878      	ldr	r0, [r7, #4]
 81031c2:	f7fd fb25 	bl	8100810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81031c6:	687b      	ldr	r3, [r7, #4]
 81031c8:	681b      	ldr	r3, [r3, #0]
 81031ca:	691b      	ldr	r3, [r3, #16]
 81031cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81031d0:	2b80      	cmp	r3, #128	; 0x80
 81031d2:	d10e      	bne.n	81031f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	681b      	ldr	r3, [r3, #0]
 81031d8:	68db      	ldr	r3, [r3, #12]
 81031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81031de:	2b80      	cmp	r3, #128	; 0x80
 81031e0:	d107      	bne.n	81031f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81031e2:	687b      	ldr	r3, [r7, #4]
 81031e4:	681b      	ldr	r3, [r3, #0]
 81031e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81031ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81031ec:	6878      	ldr	r0, [r7, #4]
 81031ee:	f000 fd79 	bl	8103ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	681b      	ldr	r3, [r3, #0]
 81031f6:	691b      	ldr	r3, [r3, #16]
 81031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81031fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103200:	d10e      	bne.n	8103220 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	681b      	ldr	r3, [r3, #0]
 8103206:	68db      	ldr	r3, [r3, #12]
 8103208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810320c:	2b80      	cmp	r3, #128	; 0x80
 810320e:	d107      	bne.n	8103220 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8103210:	687b      	ldr	r3, [r7, #4]
 8103212:	681b      	ldr	r3, [r3, #0]
 8103214:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8103218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810321a:	6878      	ldr	r0, [r7, #4]
 810321c:	f000 fd6c 	bl	8103cf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	681b      	ldr	r3, [r3, #0]
 8103224:	691b      	ldr	r3, [r3, #16]
 8103226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810322a:	2b40      	cmp	r3, #64	; 0x40
 810322c:	d10e      	bne.n	810324c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810322e:	687b      	ldr	r3, [r7, #4]
 8103230:	681b      	ldr	r3, [r3, #0]
 8103232:	68db      	ldr	r3, [r3, #12]
 8103234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103238:	2b40      	cmp	r3, #64	; 0x40
 810323a:	d107      	bne.n	810324c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	681b      	ldr	r3, [r3, #0]
 8103240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8103244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8103246:	6878      	ldr	r0, [r7, #4]
 8103248:	f000 f948 	bl	81034dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810324c:	687b      	ldr	r3, [r7, #4]
 810324e:	681b      	ldr	r3, [r3, #0]
 8103250:	691b      	ldr	r3, [r3, #16]
 8103252:	f003 0320 	and.w	r3, r3, #32
 8103256:	2b20      	cmp	r3, #32
 8103258:	d10e      	bne.n	8103278 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	681b      	ldr	r3, [r3, #0]
 810325e:	68db      	ldr	r3, [r3, #12]
 8103260:	f003 0320 	and.w	r3, r3, #32
 8103264:	2b20      	cmp	r3, #32
 8103266:	d107      	bne.n	8103278 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	681b      	ldr	r3, [r3, #0]
 810326c:	f06f 0220 	mvn.w	r2, #32
 8103270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8103272:	6878      	ldr	r0, [r7, #4]
 8103274:	f000 fd2c 	bl	8103cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8103278:	bf00      	nop
 810327a:	3708      	adds	r7, #8
 810327c:	46bd      	mov	sp, r7
 810327e:	bd80      	pop	{r7, pc}

08103280 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8103280:	b580      	push	{r7, lr}
 8103282:	b084      	sub	sp, #16
 8103284:	af00      	add	r7, sp, #0
 8103286:	60f8      	str	r0, [r7, #12]
 8103288:	60b9      	str	r1, [r7, #8]
 810328a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810328c:	68fb      	ldr	r3, [r7, #12]
 810328e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8103292:	2b01      	cmp	r3, #1
 8103294:	d101      	bne.n	810329a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8103296:	2302      	movs	r3, #2
 8103298:	e0fd      	b.n	8103496 <HAL_TIM_PWM_ConfigChannel+0x216>
 810329a:	68fb      	ldr	r3, [r7, #12]
 810329c:	2201      	movs	r2, #1
 810329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	2b14      	cmp	r3, #20
 81032a6:	f200 80f0 	bhi.w	810348a <HAL_TIM_PWM_ConfigChannel+0x20a>
 81032aa:	a201      	add	r2, pc, #4	; (adr r2, 81032b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 81032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032b0:	08103305 	.word	0x08103305
 81032b4:	0810348b 	.word	0x0810348b
 81032b8:	0810348b 	.word	0x0810348b
 81032bc:	0810348b 	.word	0x0810348b
 81032c0:	08103345 	.word	0x08103345
 81032c4:	0810348b 	.word	0x0810348b
 81032c8:	0810348b 	.word	0x0810348b
 81032cc:	0810348b 	.word	0x0810348b
 81032d0:	08103387 	.word	0x08103387
 81032d4:	0810348b 	.word	0x0810348b
 81032d8:	0810348b 	.word	0x0810348b
 81032dc:	0810348b 	.word	0x0810348b
 81032e0:	081033c7 	.word	0x081033c7
 81032e4:	0810348b 	.word	0x0810348b
 81032e8:	0810348b 	.word	0x0810348b
 81032ec:	0810348b 	.word	0x0810348b
 81032f0:	08103409 	.word	0x08103409
 81032f4:	0810348b 	.word	0x0810348b
 81032f8:	0810348b 	.word	0x0810348b
 81032fc:	0810348b 	.word	0x0810348b
 8103300:	08103449 	.word	0x08103449
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8103304:	68fb      	ldr	r3, [r7, #12]
 8103306:	681b      	ldr	r3, [r3, #0]
 8103308:	68b9      	ldr	r1, [r7, #8]
 810330a:	4618      	mov	r0, r3
 810330c:	f000 f98a 	bl	8103624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8103310:	68fb      	ldr	r3, [r7, #12]
 8103312:	681b      	ldr	r3, [r3, #0]
 8103314:	699a      	ldr	r2, [r3, #24]
 8103316:	68fb      	ldr	r3, [r7, #12]
 8103318:	681b      	ldr	r3, [r3, #0]
 810331a:	f042 0208 	orr.w	r2, r2, #8
 810331e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8103320:	68fb      	ldr	r3, [r7, #12]
 8103322:	681b      	ldr	r3, [r3, #0]
 8103324:	699a      	ldr	r2, [r3, #24]
 8103326:	68fb      	ldr	r3, [r7, #12]
 8103328:	681b      	ldr	r3, [r3, #0]
 810332a:	f022 0204 	bic.w	r2, r2, #4
 810332e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8103330:	68fb      	ldr	r3, [r7, #12]
 8103332:	681b      	ldr	r3, [r3, #0]
 8103334:	6999      	ldr	r1, [r3, #24]
 8103336:	68bb      	ldr	r3, [r7, #8]
 8103338:	691a      	ldr	r2, [r3, #16]
 810333a:	68fb      	ldr	r3, [r7, #12]
 810333c:	681b      	ldr	r3, [r3, #0]
 810333e:	430a      	orrs	r2, r1
 8103340:	619a      	str	r2, [r3, #24]
      break;
 8103342:	e0a3      	b.n	810348c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8103344:	68fb      	ldr	r3, [r7, #12]
 8103346:	681b      	ldr	r3, [r3, #0]
 8103348:	68b9      	ldr	r1, [r7, #8]
 810334a:	4618      	mov	r0, r3
 810334c:	f000 f9fa 	bl	8103744 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8103350:	68fb      	ldr	r3, [r7, #12]
 8103352:	681b      	ldr	r3, [r3, #0]
 8103354:	699a      	ldr	r2, [r3, #24]
 8103356:	68fb      	ldr	r3, [r7, #12]
 8103358:	681b      	ldr	r3, [r3, #0]
 810335a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810335e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8103360:	68fb      	ldr	r3, [r7, #12]
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	699a      	ldr	r2, [r3, #24]
 8103366:	68fb      	ldr	r3, [r7, #12]
 8103368:	681b      	ldr	r3, [r3, #0]
 810336a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810336e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8103370:	68fb      	ldr	r3, [r7, #12]
 8103372:	681b      	ldr	r3, [r3, #0]
 8103374:	6999      	ldr	r1, [r3, #24]
 8103376:	68bb      	ldr	r3, [r7, #8]
 8103378:	691b      	ldr	r3, [r3, #16]
 810337a:	021a      	lsls	r2, r3, #8
 810337c:	68fb      	ldr	r3, [r7, #12]
 810337e:	681b      	ldr	r3, [r3, #0]
 8103380:	430a      	orrs	r2, r1
 8103382:	619a      	str	r2, [r3, #24]
      break;
 8103384:	e082      	b.n	810348c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8103386:	68fb      	ldr	r3, [r7, #12]
 8103388:	681b      	ldr	r3, [r3, #0]
 810338a:	68b9      	ldr	r1, [r7, #8]
 810338c:	4618      	mov	r0, r3
 810338e:	f000 fa63 	bl	8103858 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8103392:	68fb      	ldr	r3, [r7, #12]
 8103394:	681b      	ldr	r3, [r3, #0]
 8103396:	69da      	ldr	r2, [r3, #28]
 8103398:	68fb      	ldr	r3, [r7, #12]
 810339a:	681b      	ldr	r3, [r3, #0]
 810339c:	f042 0208 	orr.w	r2, r2, #8
 81033a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81033a2:	68fb      	ldr	r3, [r7, #12]
 81033a4:	681b      	ldr	r3, [r3, #0]
 81033a6:	69da      	ldr	r2, [r3, #28]
 81033a8:	68fb      	ldr	r3, [r7, #12]
 81033aa:	681b      	ldr	r3, [r3, #0]
 81033ac:	f022 0204 	bic.w	r2, r2, #4
 81033b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81033b2:	68fb      	ldr	r3, [r7, #12]
 81033b4:	681b      	ldr	r3, [r3, #0]
 81033b6:	69d9      	ldr	r1, [r3, #28]
 81033b8:	68bb      	ldr	r3, [r7, #8]
 81033ba:	691a      	ldr	r2, [r3, #16]
 81033bc:	68fb      	ldr	r3, [r7, #12]
 81033be:	681b      	ldr	r3, [r3, #0]
 81033c0:	430a      	orrs	r2, r1
 81033c2:	61da      	str	r2, [r3, #28]
      break;
 81033c4:	e062      	b.n	810348c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81033c6:	68fb      	ldr	r3, [r7, #12]
 81033c8:	681b      	ldr	r3, [r3, #0]
 81033ca:	68b9      	ldr	r1, [r7, #8]
 81033cc:	4618      	mov	r0, r3
 81033ce:	f000 fac9 	bl	8103964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81033d2:	68fb      	ldr	r3, [r7, #12]
 81033d4:	681b      	ldr	r3, [r3, #0]
 81033d6:	69da      	ldr	r2, [r3, #28]
 81033d8:	68fb      	ldr	r3, [r7, #12]
 81033da:	681b      	ldr	r3, [r3, #0]
 81033dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81033e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81033e2:	68fb      	ldr	r3, [r7, #12]
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	69da      	ldr	r2, [r3, #28]
 81033e8:	68fb      	ldr	r3, [r7, #12]
 81033ea:	681b      	ldr	r3, [r3, #0]
 81033ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81033f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81033f2:	68fb      	ldr	r3, [r7, #12]
 81033f4:	681b      	ldr	r3, [r3, #0]
 81033f6:	69d9      	ldr	r1, [r3, #28]
 81033f8:	68bb      	ldr	r3, [r7, #8]
 81033fa:	691b      	ldr	r3, [r3, #16]
 81033fc:	021a      	lsls	r2, r3, #8
 81033fe:	68fb      	ldr	r3, [r7, #12]
 8103400:	681b      	ldr	r3, [r3, #0]
 8103402:	430a      	orrs	r2, r1
 8103404:	61da      	str	r2, [r3, #28]
      break;
 8103406:	e041      	b.n	810348c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8103408:	68fb      	ldr	r3, [r7, #12]
 810340a:	681b      	ldr	r3, [r3, #0]
 810340c:	68b9      	ldr	r1, [r7, #8]
 810340e:	4618      	mov	r0, r3
 8103410:	f000 fb10 	bl	8103a34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8103414:	68fb      	ldr	r3, [r7, #12]
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810341a:	68fb      	ldr	r3, [r7, #12]
 810341c:	681b      	ldr	r3, [r3, #0]
 810341e:	f042 0208 	orr.w	r2, r2, #8
 8103422:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8103424:	68fb      	ldr	r3, [r7, #12]
 8103426:	681b      	ldr	r3, [r3, #0]
 8103428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810342a:	68fb      	ldr	r3, [r7, #12]
 810342c:	681b      	ldr	r3, [r3, #0]
 810342e:	f022 0204 	bic.w	r2, r2, #4
 8103432:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8103434:	68fb      	ldr	r3, [r7, #12]
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810343a:	68bb      	ldr	r3, [r7, #8]
 810343c:	691a      	ldr	r2, [r3, #16]
 810343e:	68fb      	ldr	r3, [r7, #12]
 8103440:	681b      	ldr	r3, [r3, #0]
 8103442:	430a      	orrs	r2, r1
 8103444:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8103446:	e021      	b.n	810348c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8103448:	68fb      	ldr	r3, [r7, #12]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	68b9      	ldr	r1, [r7, #8]
 810344e:	4618      	mov	r0, r3
 8103450:	f000 fb52 	bl	8103af8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8103454:	68fb      	ldr	r3, [r7, #12]
 8103456:	681b      	ldr	r3, [r3, #0]
 8103458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810345a:	68fb      	ldr	r3, [r7, #12]
 810345c:	681b      	ldr	r3, [r3, #0]
 810345e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103462:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8103464:	68fb      	ldr	r3, [r7, #12]
 8103466:	681b      	ldr	r3, [r3, #0]
 8103468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810346a:	68fb      	ldr	r3, [r7, #12]
 810346c:	681b      	ldr	r3, [r3, #0]
 810346e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8103472:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8103474:	68fb      	ldr	r3, [r7, #12]
 8103476:	681b      	ldr	r3, [r3, #0]
 8103478:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810347a:	68bb      	ldr	r3, [r7, #8]
 810347c:	691b      	ldr	r3, [r3, #16]
 810347e:	021a      	lsls	r2, r3, #8
 8103480:	68fb      	ldr	r3, [r7, #12]
 8103482:	681b      	ldr	r3, [r3, #0]
 8103484:	430a      	orrs	r2, r1
 8103486:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8103488:	e000      	b.n	810348c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 810348a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810348c:	68fb      	ldr	r3, [r7, #12]
 810348e:	2200      	movs	r2, #0
 8103490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8103494:	2300      	movs	r3, #0
}
 8103496:	4618      	mov	r0, r3
 8103498:	3710      	adds	r7, #16
 810349a:	46bd      	mov	sp, r7
 810349c:	bd80      	pop	{r7, pc}
 810349e:	bf00      	nop

081034a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81034a0:	b480      	push	{r7}
 81034a2:	b083      	sub	sp, #12
 81034a4:	af00      	add	r7, sp, #0
 81034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81034a8:	bf00      	nop
 81034aa:	370c      	adds	r7, #12
 81034ac:	46bd      	mov	sp, r7
 81034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034b2:	4770      	bx	lr

081034b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81034b4:	b480      	push	{r7}
 81034b6:	b083      	sub	sp, #12
 81034b8:	af00      	add	r7, sp, #0
 81034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81034bc:	bf00      	nop
 81034be:	370c      	adds	r7, #12
 81034c0:	46bd      	mov	sp, r7
 81034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034c6:	4770      	bx	lr

081034c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81034c8:	b480      	push	{r7}
 81034ca:	b083      	sub	sp, #12
 81034cc:	af00      	add	r7, sp, #0
 81034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81034d0:	bf00      	nop
 81034d2:	370c      	adds	r7, #12
 81034d4:	46bd      	mov	sp, r7
 81034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034da:	4770      	bx	lr

081034dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81034dc:	b480      	push	{r7}
 81034de:	b083      	sub	sp, #12
 81034e0:	af00      	add	r7, sp, #0
 81034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81034e4:	bf00      	nop
 81034e6:	370c      	adds	r7, #12
 81034e8:	46bd      	mov	sp, r7
 81034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034ee:	4770      	bx	lr

081034f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81034f0:	b480      	push	{r7}
 81034f2:	b085      	sub	sp, #20
 81034f4:	af00      	add	r7, sp, #0
 81034f6:	6078      	str	r0, [r7, #4]
 81034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	681b      	ldr	r3, [r3, #0]
 81034fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	4a40      	ldr	r2, [pc, #256]	; (8103604 <TIM_Base_SetConfig+0x114>)
 8103504:	4293      	cmp	r3, r2
 8103506:	d013      	beq.n	8103530 <TIM_Base_SetConfig+0x40>
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810350e:	d00f      	beq.n	8103530 <TIM_Base_SetConfig+0x40>
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	4a3d      	ldr	r2, [pc, #244]	; (8103608 <TIM_Base_SetConfig+0x118>)
 8103514:	4293      	cmp	r3, r2
 8103516:	d00b      	beq.n	8103530 <TIM_Base_SetConfig+0x40>
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	4a3c      	ldr	r2, [pc, #240]	; (810360c <TIM_Base_SetConfig+0x11c>)
 810351c:	4293      	cmp	r3, r2
 810351e:	d007      	beq.n	8103530 <TIM_Base_SetConfig+0x40>
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	4a3b      	ldr	r2, [pc, #236]	; (8103610 <TIM_Base_SetConfig+0x120>)
 8103524:	4293      	cmp	r3, r2
 8103526:	d003      	beq.n	8103530 <TIM_Base_SetConfig+0x40>
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	4a3a      	ldr	r2, [pc, #232]	; (8103614 <TIM_Base_SetConfig+0x124>)
 810352c:	4293      	cmp	r3, r2
 810352e:	d108      	bne.n	8103542 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8103530:	68fb      	ldr	r3, [r7, #12]
 8103532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8103538:	683b      	ldr	r3, [r7, #0]
 810353a:	685b      	ldr	r3, [r3, #4]
 810353c:	68fa      	ldr	r2, [r7, #12]
 810353e:	4313      	orrs	r3, r2
 8103540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8103542:	687b      	ldr	r3, [r7, #4]
 8103544:	4a2f      	ldr	r2, [pc, #188]	; (8103604 <TIM_Base_SetConfig+0x114>)
 8103546:	4293      	cmp	r3, r2
 8103548:	d01f      	beq.n	810358a <TIM_Base_SetConfig+0x9a>
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103550:	d01b      	beq.n	810358a <TIM_Base_SetConfig+0x9a>
 8103552:	687b      	ldr	r3, [r7, #4]
 8103554:	4a2c      	ldr	r2, [pc, #176]	; (8103608 <TIM_Base_SetConfig+0x118>)
 8103556:	4293      	cmp	r3, r2
 8103558:	d017      	beq.n	810358a <TIM_Base_SetConfig+0x9a>
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	4a2b      	ldr	r2, [pc, #172]	; (810360c <TIM_Base_SetConfig+0x11c>)
 810355e:	4293      	cmp	r3, r2
 8103560:	d013      	beq.n	810358a <TIM_Base_SetConfig+0x9a>
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	4a2a      	ldr	r2, [pc, #168]	; (8103610 <TIM_Base_SetConfig+0x120>)
 8103566:	4293      	cmp	r3, r2
 8103568:	d00f      	beq.n	810358a <TIM_Base_SetConfig+0x9a>
 810356a:	687b      	ldr	r3, [r7, #4]
 810356c:	4a29      	ldr	r2, [pc, #164]	; (8103614 <TIM_Base_SetConfig+0x124>)
 810356e:	4293      	cmp	r3, r2
 8103570:	d00b      	beq.n	810358a <TIM_Base_SetConfig+0x9a>
 8103572:	687b      	ldr	r3, [r7, #4]
 8103574:	4a28      	ldr	r2, [pc, #160]	; (8103618 <TIM_Base_SetConfig+0x128>)
 8103576:	4293      	cmp	r3, r2
 8103578:	d007      	beq.n	810358a <TIM_Base_SetConfig+0x9a>
 810357a:	687b      	ldr	r3, [r7, #4]
 810357c:	4a27      	ldr	r2, [pc, #156]	; (810361c <TIM_Base_SetConfig+0x12c>)
 810357e:	4293      	cmp	r3, r2
 8103580:	d003      	beq.n	810358a <TIM_Base_SetConfig+0x9a>
 8103582:	687b      	ldr	r3, [r7, #4]
 8103584:	4a26      	ldr	r2, [pc, #152]	; (8103620 <TIM_Base_SetConfig+0x130>)
 8103586:	4293      	cmp	r3, r2
 8103588:	d108      	bne.n	810359c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810358a:	68fb      	ldr	r3, [r7, #12]
 810358c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8103592:	683b      	ldr	r3, [r7, #0]
 8103594:	68db      	ldr	r3, [r3, #12]
 8103596:	68fa      	ldr	r2, [r7, #12]
 8103598:	4313      	orrs	r3, r2
 810359a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810359c:	68fb      	ldr	r3, [r7, #12]
 810359e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81035a2:	683b      	ldr	r3, [r7, #0]
 81035a4:	695b      	ldr	r3, [r3, #20]
 81035a6:	4313      	orrs	r3, r2
 81035a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81035aa:	687b      	ldr	r3, [r7, #4]
 81035ac:	68fa      	ldr	r2, [r7, #12]
 81035ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81035b0:	683b      	ldr	r3, [r7, #0]
 81035b2:	689a      	ldr	r2, [r3, #8]
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81035b8:	683b      	ldr	r3, [r7, #0]
 81035ba:	681a      	ldr	r2, [r3, #0]
 81035bc:	687b      	ldr	r3, [r7, #4]
 81035be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81035c0:	687b      	ldr	r3, [r7, #4]
 81035c2:	4a10      	ldr	r2, [pc, #64]	; (8103604 <TIM_Base_SetConfig+0x114>)
 81035c4:	4293      	cmp	r3, r2
 81035c6:	d00f      	beq.n	81035e8 <TIM_Base_SetConfig+0xf8>
 81035c8:	687b      	ldr	r3, [r7, #4]
 81035ca:	4a12      	ldr	r2, [pc, #72]	; (8103614 <TIM_Base_SetConfig+0x124>)
 81035cc:	4293      	cmp	r3, r2
 81035ce:	d00b      	beq.n	81035e8 <TIM_Base_SetConfig+0xf8>
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	4a11      	ldr	r2, [pc, #68]	; (8103618 <TIM_Base_SetConfig+0x128>)
 81035d4:	4293      	cmp	r3, r2
 81035d6:	d007      	beq.n	81035e8 <TIM_Base_SetConfig+0xf8>
 81035d8:	687b      	ldr	r3, [r7, #4]
 81035da:	4a10      	ldr	r2, [pc, #64]	; (810361c <TIM_Base_SetConfig+0x12c>)
 81035dc:	4293      	cmp	r3, r2
 81035de:	d003      	beq.n	81035e8 <TIM_Base_SetConfig+0xf8>
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	4a0f      	ldr	r2, [pc, #60]	; (8103620 <TIM_Base_SetConfig+0x130>)
 81035e4:	4293      	cmp	r3, r2
 81035e6:	d103      	bne.n	81035f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81035e8:	683b      	ldr	r3, [r7, #0]
 81035ea:	691a      	ldr	r2, [r3, #16]
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81035f0:	687b      	ldr	r3, [r7, #4]
 81035f2:	2201      	movs	r2, #1
 81035f4:	615a      	str	r2, [r3, #20]
}
 81035f6:	bf00      	nop
 81035f8:	3714      	adds	r7, #20
 81035fa:	46bd      	mov	sp, r7
 81035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103600:	4770      	bx	lr
 8103602:	bf00      	nop
 8103604:	40010000 	.word	0x40010000
 8103608:	40000400 	.word	0x40000400
 810360c:	40000800 	.word	0x40000800
 8103610:	40000c00 	.word	0x40000c00
 8103614:	40010400 	.word	0x40010400
 8103618:	40014000 	.word	0x40014000
 810361c:	40014400 	.word	0x40014400
 8103620:	40014800 	.word	0x40014800

08103624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8103624:	b480      	push	{r7}
 8103626:	b087      	sub	sp, #28
 8103628:	af00      	add	r7, sp, #0
 810362a:	6078      	str	r0, [r7, #4]
 810362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	6a1b      	ldr	r3, [r3, #32]
 8103632:	f023 0201 	bic.w	r2, r3, #1
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810363a:	687b      	ldr	r3, [r7, #4]
 810363c:	6a1b      	ldr	r3, [r3, #32]
 810363e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103640:	687b      	ldr	r3, [r7, #4]
 8103642:	685b      	ldr	r3, [r3, #4]
 8103644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8103646:	687b      	ldr	r3, [r7, #4]
 8103648:	699b      	ldr	r3, [r3, #24]
 810364a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810364c:	68fb      	ldr	r3, [r7, #12]
 810364e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8103658:	68fb      	ldr	r3, [r7, #12]
 810365a:	f023 0303 	bic.w	r3, r3, #3
 810365e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8103660:	683b      	ldr	r3, [r7, #0]
 8103662:	681b      	ldr	r3, [r3, #0]
 8103664:	68fa      	ldr	r2, [r7, #12]
 8103666:	4313      	orrs	r3, r2
 8103668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810366a:	697b      	ldr	r3, [r7, #20]
 810366c:	f023 0302 	bic.w	r3, r3, #2
 8103670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8103672:	683b      	ldr	r3, [r7, #0]
 8103674:	689b      	ldr	r3, [r3, #8]
 8103676:	697a      	ldr	r2, [r7, #20]
 8103678:	4313      	orrs	r3, r2
 810367a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	4a2c      	ldr	r2, [pc, #176]	; (8103730 <TIM_OC1_SetConfig+0x10c>)
 8103680:	4293      	cmp	r3, r2
 8103682:	d00f      	beq.n	81036a4 <TIM_OC1_SetConfig+0x80>
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	4a2b      	ldr	r2, [pc, #172]	; (8103734 <TIM_OC1_SetConfig+0x110>)
 8103688:	4293      	cmp	r3, r2
 810368a:	d00b      	beq.n	81036a4 <TIM_OC1_SetConfig+0x80>
 810368c:	687b      	ldr	r3, [r7, #4]
 810368e:	4a2a      	ldr	r2, [pc, #168]	; (8103738 <TIM_OC1_SetConfig+0x114>)
 8103690:	4293      	cmp	r3, r2
 8103692:	d007      	beq.n	81036a4 <TIM_OC1_SetConfig+0x80>
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	4a29      	ldr	r2, [pc, #164]	; (810373c <TIM_OC1_SetConfig+0x118>)
 8103698:	4293      	cmp	r3, r2
 810369a:	d003      	beq.n	81036a4 <TIM_OC1_SetConfig+0x80>
 810369c:	687b      	ldr	r3, [r7, #4]
 810369e:	4a28      	ldr	r2, [pc, #160]	; (8103740 <TIM_OC1_SetConfig+0x11c>)
 81036a0:	4293      	cmp	r3, r2
 81036a2:	d10c      	bne.n	81036be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 81036a4:	697b      	ldr	r3, [r7, #20]
 81036a6:	f023 0308 	bic.w	r3, r3, #8
 81036aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 81036ac:	683b      	ldr	r3, [r7, #0]
 81036ae:	68db      	ldr	r3, [r3, #12]
 81036b0:	697a      	ldr	r2, [r7, #20]
 81036b2:	4313      	orrs	r3, r2
 81036b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 81036b6:	697b      	ldr	r3, [r7, #20]
 81036b8:	f023 0304 	bic.w	r3, r3, #4
 81036bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	4a1b      	ldr	r2, [pc, #108]	; (8103730 <TIM_OC1_SetConfig+0x10c>)
 81036c2:	4293      	cmp	r3, r2
 81036c4:	d00f      	beq.n	81036e6 <TIM_OC1_SetConfig+0xc2>
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	4a1a      	ldr	r2, [pc, #104]	; (8103734 <TIM_OC1_SetConfig+0x110>)
 81036ca:	4293      	cmp	r3, r2
 81036cc:	d00b      	beq.n	81036e6 <TIM_OC1_SetConfig+0xc2>
 81036ce:	687b      	ldr	r3, [r7, #4]
 81036d0:	4a19      	ldr	r2, [pc, #100]	; (8103738 <TIM_OC1_SetConfig+0x114>)
 81036d2:	4293      	cmp	r3, r2
 81036d4:	d007      	beq.n	81036e6 <TIM_OC1_SetConfig+0xc2>
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	4a18      	ldr	r2, [pc, #96]	; (810373c <TIM_OC1_SetConfig+0x118>)
 81036da:	4293      	cmp	r3, r2
 81036dc:	d003      	beq.n	81036e6 <TIM_OC1_SetConfig+0xc2>
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	4a17      	ldr	r2, [pc, #92]	; (8103740 <TIM_OC1_SetConfig+0x11c>)
 81036e2:	4293      	cmp	r3, r2
 81036e4:	d111      	bne.n	810370a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81036e6:	693b      	ldr	r3, [r7, #16]
 81036e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81036ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81036ee:	693b      	ldr	r3, [r7, #16]
 81036f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81036f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81036f6:	683b      	ldr	r3, [r7, #0]
 81036f8:	695b      	ldr	r3, [r3, #20]
 81036fa:	693a      	ldr	r2, [r7, #16]
 81036fc:	4313      	orrs	r3, r2
 81036fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8103700:	683b      	ldr	r3, [r7, #0]
 8103702:	699b      	ldr	r3, [r3, #24]
 8103704:	693a      	ldr	r2, [r7, #16]
 8103706:	4313      	orrs	r3, r2
 8103708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810370a:	687b      	ldr	r3, [r7, #4]
 810370c:	693a      	ldr	r2, [r7, #16]
 810370e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	68fa      	ldr	r2, [r7, #12]
 8103714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8103716:	683b      	ldr	r3, [r7, #0]
 8103718:	685a      	ldr	r2, [r3, #4]
 810371a:	687b      	ldr	r3, [r7, #4]
 810371c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810371e:	687b      	ldr	r3, [r7, #4]
 8103720:	697a      	ldr	r2, [r7, #20]
 8103722:	621a      	str	r2, [r3, #32]
}
 8103724:	bf00      	nop
 8103726:	371c      	adds	r7, #28
 8103728:	46bd      	mov	sp, r7
 810372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810372e:	4770      	bx	lr
 8103730:	40010000 	.word	0x40010000
 8103734:	40010400 	.word	0x40010400
 8103738:	40014000 	.word	0x40014000
 810373c:	40014400 	.word	0x40014400
 8103740:	40014800 	.word	0x40014800

08103744 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8103744:	b480      	push	{r7}
 8103746:	b087      	sub	sp, #28
 8103748:	af00      	add	r7, sp, #0
 810374a:	6078      	str	r0, [r7, #4]
 810374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810374e:	687b      	ldr	r3, [r7, #4]
 8103750:	6a1b      	ldr	r3, [r3, #32]
 8103752:	f023 0210 	bic.w	r2, r3, #16
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810375a:	687b      	ldr	r3, [r7, #4]
 810375c:	6a1b      	ldr	r3, [r3, #32]
 810375e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103760:	687b      	ldr	r3, [r7, #4]
 8103762:	685b      	ldr	r3, [r3, #4]
 8103764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8103766:	687b      	ldr	r3, [r7, #4]
 8103768:	699b      	ldr	r3, [r3, #24]
 810376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810376c:	68fb      	ldr	r3, [r7, #12]
 810376e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8103772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8103776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8103778:	68fb      	ldr	r3, [r7, #12]
 810377a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810377e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8103780:	683b      	ldr	r3, [r7, #0]
 8103782:	681b      	ldr	r3, [r3, #0]
 8103784:	021b      	lsls	r3, r3, #8
 8103786:	68fa      	ldr	r2, [r7, #12]
 8103788:	4313      	orrs	r3, r2
 810378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810378c:	697b      	ldr	r3, [r7, #20]
 810378e:	f023 0320 	bic.w	r3, r3, #32
 8103792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8103794:	683b      	ldr	r3, [r7, #0]
 8103796:	689b      	ldr	r3, [r3, #8]
 8103798:	011b      	lsls	r3, r3, #4
 810379a:	697a      	ldr	r2, [r7, #20]
 810379c:	4313      	orrs	r3, r2
 810379e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	4a28      	ldr	r2, [pc, #160]	; (8103844 <TIM_OC2_SetConfig+0x100>)
 81037a4:	4293      	cmp	r3, r2
 81037a6:	d003      	beq.n	81037b0 <TIM_OC2_SetConfig+0x6c>
 81037a8:	687b      	ldr	r3, [r7, #4]
 81037aa:	4a27      	ldr	r2, [pc, #156]	; (8103848 <TIM_OC2_SetConfig+0x104>)
 81037ac:	4293      	cmp	r3, r2
 81037ae:	d10d      	bne.n	81037cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 81037b0:	697b      	ldr	r3, [r7, #20]
 81037b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81037b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 81037b8:	683b      	ldr	r3, [r7, #0]
 81037ba:	68db      	ldr	r3, [r3, #12]
 81037bc:	011b      	lsls	r3, r3, #4
 81037be:	697a      	ldr	r2, [r7, #20]
 81037c0:	4313      	orrs	r3, r2
 81037c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 81037c4:	697b      	ldr	r3, [r7, #20]
 81037c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81037ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	4a1d      	ldr	r2, [pc, #116]	; (8103844 <TIM_OC2_SetConfig+0x100>)
 81037d0:	4293      	cmp	r3, r2
 81037d2:	d00f      	beq.n	81037f4 <TIM_OC2_SetConfig+0xb0>
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	4a1c      	ldr	r2, [pc, #112]	; (8103848 <TIM_OC2_SetConfig+0x104>)
 81037d8:	4293      	cmp	r3, r2
 81037da:	d00b      	beq.n	81037f4 <TIM_OC2_SetConfig+0xb0>
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	4a1b      	ldr	r2, [pc, #108]	; (810384c <TIM_OC2_SetConfig+0x108>)
 81037e0:	4293      	cmp	r3, r2
 81037e2:	d007      	beq.n	81037f4 <TIM_OC2_SetConfig+0xb0>
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	4a1a      	ldr	r2, [pc, #104]	; (8103850 <TIM_OC2_SetConfig+0x10c>)
 81037e8:	4293      	cmp	r3, r2
 81037ea:	d003      	beq.n	81037f4 <TIM_OC2_SetConfig+0xb0>
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	4a19      	ldr	r2, [pc, #100]	; (8103854 <TIM_OC2_SetConfig+0x110>)
 81037f0:	4293      	cmp	r3, r2
 81037f2:	d113      	bne.n	810381c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81037f4:	693b      	ldr	r3, [r7, #16]
 81037f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81037fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81037fc:	693b      	ldr	r3, [r7, #16]
 81037fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8103802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8103804:	683b      	ldr	r3, [r7, #0]
 8103806:	695b      	ldr	r3, [r3, #20]
 8103808:	009b      	lsls	r3, r3, #2
 810380a:	693a      	ldr	r2, [r7, #16]
 810380c:	4313      	orrs	r3, r2
 810380e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8103810:	683b      	ldr	r3, [r7, #0]
 8103812:	699b      	ldr	r3, [r3, #24]
 8103814:	009b      	lsls	r3, r3, #2
 8103816:	693a      	ldr	r2, [r7, #16]
 8103818:	4313      	orrs	r3, r2
 810381a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	693a      	ldr	r2, [r7, #16]
 8103820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	68fa      	ldr	r2, [r7, #12]
 8103826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8103828:	683b      	ldr	r3, [r7, #0]
 810382a:	685a      	ldr	r2, [r3, #4]
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	697a      	ldr	r2, [r7, #20]
 8103834:	621a      	str	r2, [r3, #32]
}
 8103836:	bf00      	nop
 8103838:	371c      	adds	r7, #28
 810383a:	46bd      	mov	sp, r7
 810383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103840:	4770      	bx	lr
 8103842:	bf00      	nop
 8103844:	40010000 	.word	0x40010000
 8103848:	40010400 	.word	0x40010400
 810384c:	40014000 	.word	0x40014000
 8103850:	40014400 	.word	0x40014400
 8103854:	40014800 	.word	0x40014800

08103858 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8103858:	b480      	push	{r7}
 810385a:	b087      	sub	sp, #28
 810385c:	af00      	add	r7, sp, #0
 810385e:	6078      	str	r0, [r7, #4]
 8103860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	6a1b      	ldr	r3, [r3, #32]
 8103866:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810386e:	687b      	ldr	r3, [r7, #4]
 8103870:	6a1b      	ldr	r3, [r3, #32]
 8103872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103874:	687b      	ldr	r3, [r7, #4]
 8103876:	685b      	ldr	r3, [r3, #4]
 8103878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	69db      	ldr	r3, [r3, #28]
 810387e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8103880:	68fb      	ldr	r3, [r7, #12]
 8103882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8103888:	68fb      	ldr	r3, [r7, #12]
 810388a:	f023 0303 	bic.w	r3, r3, #3
 810388e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8103890:	683b      	ldr	r3, [r7, #0]
 8103892:	681b      	ldr	r3, [r3, #0]
 8103894:	68fa      	ldr	r2, [r7, #12]
 8103896:	4313      	orrs	r3, r2
 8103898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810389a:	697b      	ldr	r3, [r7, #20]
 810389c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81038a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 81038a2:	683b      	ldr	r3, [r7, #0]
 81038a4:	689b      	ldr	r3, [r3, #8]
 81038a6:	021b      	lsls	r3, r3, #8
 81038a8:	697a      	ldr	r2, [r7, #20]
 81038aa:	4313      	orrs	r3, r2
 81038ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 81038ae:	687b      	ldr	r3, [r7, #4]
 81038b0:	4a27      	ldr	r2, [pc, #156]	; (8103950 <TIM_OC3_SetConfig+0xf8>)
 81038b2:	4293      	cmp	r3, r2
 81038b4:	d003      	beq.n	81038be <TIM_OC3_SetConfig+0x66>
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	4a26      	ldr	r2, [pc, #152]	; (8103954 <TIM_OC3_SetConfig+0xfc>)
 81038ba:	4293      	cmp	r3, r2
 81038bc:	d10d      	bne.n	81038da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 81038be:	697b      	ldr	r3, [r7, #20]
 81038c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81038c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81038c6:	683b      	ldr	r3, [r7, #0]
 81038c8:	68db      	ldr	r3, [r3, #12]
 81038ca:	021b      	lsls	r3, r3, #8
 81038cc:	697a      	ldr	r2, [r7, #20]
 81038ce:	4313      	orrs	r3, r2
 81038d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81038d2:	697b      	ldr	r3, [r7, #20]
 81038d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81038d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	4a1c      	ldr	r2, [pc, #112]	; (8103950 <TIM_OC3_SetConfig+0xf8>)
 81038de:	4293      	cmp	r3, r2
 81038e0:	d00f      	beq.n	8103902 <TIM_OC3_SetConfig+0xaa>
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	4a1b      	ldr	r2, [pc, #108]	; (8103954 <TIM_OC3_SetConfig+0xfc>)
 81038e6:	4293      	cmp	r3, r2
 81038e8:	d00b      	beq.n	8103902 <TIM_OC3_SetConfig+0xaa>
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	4a1a      	ldr	r2, [pc, #104]	; (8103958 <TIM_OC3_SetConfig+0x100>)
 81038ee:	4293      	cmp	r3, r2
 81038f0:	d007      	beq.n	8103902 <TIM_OC3_SetConfig+0xaa>
 81038f2:	687b      	ldr	r3, [r7, #4]
 81038f4:	4a19      	ldr	r2, [pc, #100]	; (810395c <TIM_OC3_SetConfig+0x104>)
 81038f6:	4293      	cmp	r3, r2
 81038f8:	d003      	beq.n	8103902 <TIM_OC3_SetConfig+0xaa>
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	4a18      	ldr	r2, [pc, #96]	; (8103960 <TIM_OC3_SetConfig+0x108>)
 81038fe:	4293      	cmp	r3, r2
 8103900:	d113      	bne.n	810392a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8103902:	693b      	ldr	r3, [r7, #16]
 8103904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8103908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810390a:	693b      	ldr	r3, [r7, #16]
 810390c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8103910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8103912:	683b      	ldr	r3, [r7, #0]
 8103914:	695b      	ldr	r3, [r3, #20]
 8103916:	011b      	lsls	r3, r3, #4
 8103918:	693a      	ldr	r2, [r7, #16]
 810391a:	4313      	orrs	r3, r2
 810391c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810391e:	683b      	ldr	r3, [r7, #0]
 8103920:	699b      	ldr	r3, [r3, #24]
 8103922:	011b      	lsls	r3, r3, #4
 8103924:	693a      	ldr	r2, [r7, #16]
 8103926:	4313      	orrs	r3, r2
 8103928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810392a:	687b      	ldr	r3, [r7, #4]
 810392c:	693a      	ldr	r2, [r7, #16]
 810392e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	68fa      	ldr	r2, [r7, #12]
 8103934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8103936:	683b      	ldr	r3, [r7, #0]
 8103938:	685a      	ldr	r2, [r3, #4]
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810393e:	687b      	ldr	r3, [r7, #4]
 8103940:	697a      	ldr	r2, [r7, #20]
 8103942:	621a      	str	r2, [r3, #32]
}
 8103944:	bf00      	nop
 8103946:	371c      	adds	r7, #28
 8103948:	46bd      	mov	sp, r7
 810394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810394e:	4770      	bx	lr
 8103950:	40010000 	.word	0x40010000
 8103954:	40010400 	.word	0x40010400
 8103958:	40014000 	.word	0x40014000
 810395c:	40014400 	.word	0x40014400
 8103960:	40014800 	.word	0x40014800

08103964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8103964:	b480      	push	{r7}
 8103966:	b087      	sub	sp, #28
 8103968:	af00      	add	r7, sp, #0
 810396a:	6078      	str	r0, [r7, #4]
 810396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	6a1b      	ldr	r3, [r3, #32]
 8103972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8103976:	687b      	ldr	r3, [r7, #4]
 8103978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	6a1b      	ldr	r3, [r3, #32]
 810397e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103980:	687b      	ldr	r3, [r7, #4]
 8103982:	685b      	ldr	r3, [r3, #4]
 8103984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8103986:	687b      	ldr	r3, [r7, #4]
 8103988:	69db      	ldr	r3, [r3, #28]
 810398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810398c:	68fb      	ldr	r3, [r7, #12]
 810398e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8103992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8103994:	68fb      	ldr	r3, [r7, #12]
 8103996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810399a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810399c:	683b      	ldr	r3, [r7, #0]
 810399e:	681b      	ldr	r3, [r3, #0]
 81039a0:	021b      	lsls	r3, r3, #8
 81039a2:	68fa      	ldr	r2, [r7, #12]
 81039a4:	4313      	orrs	r3, r2
 81039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 81039a8:	693b      	ldr	r3, [r7, #16]
 81039aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81039ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81039b0:	683b      	ldr	r3, [r7, #0]
 81039b2:	689b      	ldr	r3, [r3, #8]
 81039b4:	031b      	lsls	r3, r3, #12
 81039b6:	693a      	ldr	r2, [r7, #16]
 81039b8:	4313      	orrs	r3, r2
 81039ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81039bc:	687b      	ldr	r3, [r7, #4]
 81039be:	4a18      	ldr	r2, [pc, #96]	; (8103a20 <TIM_OC4_SetConfig+0xbc>)
 81039c0:	4293      	cmp	r3, r2
 81039c2:	d00f      	beq.n	81039e4 <TIM_OC4_SetConfig+0x80>
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	4a17      	ldr	r2, [pc, #92]	; (8103a24 <TIM_OC4_SetConfig+0xc0>)
 81039c8:	4293      	cmp	r3, r2
 81039ca:	d00b      	beq.n	81039e4 <TIM_OC4_SetConfig+0x80>
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	4a16      	ldr	r2, [pc, #88]	; (8103a28 <TIM_OC4_SetConfig+0xc4>)
 81039d0:	4293      	cmp	r3, r2
 81039d2:	d007      	beq.n	81039e4 <TIM_OC4_SetConfig+0x80>
 81039d4:	687b      	ldr	r3, [r7, #4]
 81039d6:	4a15      	ldr	r2, [pc, #84]	; (8103a2c <TIM_OC4_SetConfig+0xc8>)
 81039d8:	4293      	cmp	r3, r2
 81039da:	d003      	beq.n	81039e4 <TIM_OC4_SetConfig+0x80>
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	4a14      	ldr	r2, [pc, #80]	; (8103a30 <TIM_OC4_SetConfig+0xcc>)
 81039e0:	4293      	cmp	r3, r2
 81039e2:	d109      	bne.n	81039f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81039e4:	697b      	ldr	r3, [r7, #20]
 81039e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81039ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81039ec:	683b      	ldr	r3, [r7, #0]
 81039ee:	695b      	ldr	r3, [r3, #20]
 81039f0:	019b      	lsls	r3, r3, #6
 81039f2:	697a      	ldr	r2, [r7, #20]
 81039f4:	4313      	orrs	r3, r2
 81039f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81039f8:	687b      	ldr	r3, [r7, #4]
 81039fa:	697a      	ldr	r2, [r7, #20]
 81039fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	68fa      	ldr	r2, [r7, #12]
 8103a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8103a04:	683b      	ldr	r3, [r7, #0]
 8103a06:	685a      	ldr	r2, [r3, #4]
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	693a      	ldr	r2, [r7, #16]
 8103a10:	621a      	str	r2, [r3, #32]
}
 8103a12:	bf00      	nop
 8103a14:	371c      	adds	r7, #28
 8103a16:	46bd      	mov	sp, r7
 8103a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a1c:	4770      	bx	lr
 8103a1e:	bf00      	nop
 8103a20:	40010000 	.word	0x40010000
 8103a24:	40010400 	.word	0x40010400
 8103a28:	40014000 	.word	0x40014000
 8103a2c:	40014400 	.word	0x40014400
 8103a30:	40014800 	.word	0x40014800

08103a34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8103a34:	b480      	push	{r7}
 8103a36:	b087      	sub	sp, #28
 8103a38:	af00      	add	r7, sp, #0
 8103a3a:	6078      	str	r0, [r7, #4]
 8103a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	6a1b      	ldr	r3, [r3, #32]
 8103a42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103a4a:	687b      	ldr	r3, [r7, #4]
 8103a4c:	6a1b      	ldr	r3, [r3, #32]
 8103a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	685b      	ldr	r3, [r3, #4]
 8103a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8103a56:	687b      	ldr	r3, [r7, #4]
 8103a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8103a5c:	68fb      	ldr	r3, [r7, #12]
 8103a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8103a64:	683b      	ldr	r3, [r7, #0]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	68fa      	ldr	r2, [r7, #12]
 8103a6a:	4313      	orrs	r3, r2
 8103a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8103a6e:	693b      	ldr	r3, [r7, #16]
 8103a70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8103a74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8103a76:	683b      	ldr	r3, [r7, #0]
 8103a78:	689b      	ldr	r3, [r3, #8]
 8103a7a:	041b      	lsls	r3, r3, #16
 8103a7c:	693a      	ldr	r2, [r7, #16]
 8103a7e:	4313      	orrs	r3, r2
 8103a80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	4a17      	ldr	r2, [pc, #92]	; (8103ae4 <TIM_OC5_SetConfig+0xb0>)
 8103a86:	4293      	cmp	r3, r2
 8103a88:	d00f      	beq.n	8103aaa <TIM_OC5_SetConfig+0x76>
 8103a8a:	687b      	ldr	r3, [r7, #4]
 8103a8c:	4a16      	ldr	r2, [pc, #88]	; (8103ae8 <TIM_OC5_SetConfig+0xb4>)
 8103a8e:	4293      	cmp	r3, r2
 8103a90:	d00b      	beq.n	8103aaa <TIM_OC5_SetConfig+0x76>
 8103a92:	687b      	ldr	r3, [r7, #4]
 8103a94:	4a15      	ldr	r2, [pc, #84]	; (8103aec <TIM_OC5_SetConfig+0xb8>)
 8103a96:	4293      	cmp	r3, r2
 8103a98:	d007      	beq.n	8103aaa <TIM_OC5_SetConfig+0x76>
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	4a14      	ldr	r2, [pc, #80]	; (8103af0 <TIM_OC5_SetConfig+0xbc>)
 8103a9e:	4293      	cmp	r3, r2
 8103aa0:	d003      	beq.n	8103aaa <TIM_OC5_SetConfig+0x76>
 8103aa2:	687b      	ldr	r3, [r7, #4]
 8103aa4:	4a13      	ldr	r2, [pc, #76]	; (8103af4 <TIM_OC5_SetConfig+0xc0>)
 8103aa6:	4293      	cmp	r3, r2
 8103aa8:	d109      	bne.n	8103abe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8103aaa:	697b      	ldr	r3, [r7, #20]
 8103aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8103ab2:	683b      	ldr	r3, [r7, #0]
 8103ab4:	695b      	ldr	r3, [r3, #20]
 8103ab6:	021b      	lsls	r3, r3, #8
 8103ab8:	697a      	ldr	r2, [r7, #20]
 8103aba:	4313      	orrs	r3, r2
 8103abc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	697a      	ldr	r2, [r7, #20]
 8103ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	68fa      	ldr	r2, [r7, #12]
 8103ac8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8103aca:	683b      	ldr	r3, [r7, #0]
 8103acc:	685a      	ldr	r2, [r3, #4]
 8103ace:	687b      	ldr	r3, [r7, #4]
 8103ad0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	693a      	ldr	r2, [r7, #16]
 8103ad6:	621a      	str	r2, [r3, #32]
}
 8103ad8:	bf00      	nop
 8103ada:	371c      	adds	r7, #28
 8103adc:	46bd      	mov	sp, r7
 8103ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ae2:	4770      	bx	lr
 8103ae4:	40010000 	.word	0x40010000
 8103ae8:	40010400 	.word	0x40010400
 8103aec:	40014000 	.word	0x40014000
 8103af0:	40014400 	.word	0x40014400
 8103af4:	40014800 	.word	0x40014800

08103af8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8103af8:	b480      	push	{r7}
 8103afa:	b087      	sub	sp, #28
 8103afc:	af00      	add	r7, sp, #0
 8103afe:	6078      	str	r0, [r7, #4]
 8103b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	6a1b      	ldr	r3, [r3, #32]
 8103b06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8103b0a:	687b      	ldr	r3, [r7, #4]
 8103b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	6a1b      	ldr	r3, [r3, #32]
 8103b12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103b14:	687b      	ldr	r3, [r7, #4]
 8103b16:	685b      	ldr	r3, [r3, #4]
 8103b18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8103b20:	68fb      	ldr	r3, [r7, #12]
 8103b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8103b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8103b28:	683b      	ldr	r3, [r7, #0]
 8103b2a:	681b      	ldr	r3, [r3, #0]
 8103b2c:	021b      	lsls	r3, r3, #8
 8103b2e:	68fa      	ldr	r2, [r7, #12]
 8103b30:	4313      	orrs	r3, r2
 8103b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8103b34:	693b      	ldr	r3, [r7, #16]
 8103b36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8103b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8103b3c:	683b      	ldr	r3, [r7, #0]
 8103b3e:	689b      	ldr	r3, [r3, #8]
 8103b40:	051b      	lsls	r3, r3, #20
 8103b42:	693a      	ldr	r2, [r7, #16]
 8103b44:	4313      	orrs	r3, r2
 8103b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103b48:	687b      	ldr	r3, [r7, #4]
 8103b4a:	4a18      	ldr	r2, [pc, #96]	; (8103bac <TIM_OC6_SetConfig+0xb4>)
 8103b4c:	4293      	cmp	r3, r2
 8103b4e:	d00f      	beq.n	8103b70 <TIM_OC6_SetConfig+0x78>
 8103b50:	687b      	ldr	r3, [r7, #4]
 8103b52:	4a17      	ldr	r2, [pc, #92]	; (8103bb0 <TIM_OC6_SetConfig+0xb8>)
 8103b54:	4293      	cmp	r3, r2
 8103b56:	d00b      	beq.n	8103b70 <TIM_OC6_SetConfig+0x78>
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	4a16      	ldr	r2, [pc, #88]	; (8103bb4 <TIM_OC6_SetConfig+0xbc>)
 8103b5c:	4293      	cmp	r3, r2
 8103b5e:	d007      	beq.n	8103b70 <TIM_OC6_SetConfig+0x78>
 8103b60:	687b      	ldr	r3, [r7, #4]
 8103b62:	4a15      	ldr	r2, [pc, #84]	; (8103bb8 <TIM_OC6_SetConfig+0xc0>)
 8103b64:	4293      	cmp	r3, r2
 8103b66:	d003      	beq.n	8103b70 <TIM_OC6_SetConfig+0x78>
 8103b68:	687b      	ldr	r3, [r7, #4]
 8103b6a:	4a14      	ldr	r2, [pc, #80]	; (8103bbc <TIM_OC6_SetConfig+0xc4>)
 8103b6c:	4293      	cmp	r3, r2
 8103b6e:	d109      	bne.n	8103b84 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8103b70:	697b      	ldr	r3, [r7, #20]
 8103b72:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8103b76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8103b78:	683b      	ldr	r3, [r7, #0]
 8103b7a:	695b      	ldr	r3, [r3, #20]
 8103b7c:	029b      	lsls	r3, r3, #10
 8103b7e:	697a      	ldr	r2, [r7, #20]
 8103b80:	4313      	orrs	r3, r2
 8103b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103b84:	687b      	ldr	r3, [r7, #4]
 8103b86:	697a      	ldr	r2, [r7, #20]
 8103b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	68fa      	ldr	r2, [r7, #12]
 8103b8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8103b90:	683b      	ldr	r3, [r7, #0]
 8103b92:	685a      	ldr	r2, [r3, #4]
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	693a      	ldr	r2, [r7, #16]
 8103b9c:	621a      	str	r2, [r3, #32]
}
 8103b9e:	bf00      	nop
 8103ba0:	371c      	adds	r7, #28
 8103ba2:	46bd      	mov	sp, r7
 8103ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ba8:	4770      	bx	lr
 8103baa:	bf00      	nop
 8103bac:	40010000 	.word	0x40010000
 8103bb0:	40010400 	.word	0x40010400
 8103bb4:	40014000 	.word	0x40014000
 8103bb8:	40014400 	.word	0x40014400
 8103bbc:	40014800 	.word	0x40014800

08103bc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8103bc0:	b480      	push	{r7}
 8103bc2:	b085      	sub	sp, #20
 8103bc4:	af00      	add	r7, sp, #0
 8103bc6:	6078      	str	r0, [r7, #4]
 8103bc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8103bd0:	2b01      	cmp	r3, #1
 8103bd2:	d101      	bne.n	8103bd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8103bd4:	2302      	movs	r3, #2
 8103bd6:	e068      	b.n	8103caa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	2201      	movs	r2, #1
 8103bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	2202      	movs	r2, #2
 8103be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	681b      	ldr	r3, [r3, #0]
 8103bec:	685b      	ldr	r3, [r3, #4]
 8103bee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	681b      	ldr	r3, [r3, #0]
 8103bf4:	689b      	ldr	r3, [r3, #8]
 8103bf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	681b      	ldr	r3, [r3, #0]
 8103bfc:	4a2e      	ldr	r2, [pc, #184]	; (8103cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8103bfe:	4293      	cmp	r3, r2
 8103c00:	d004      	beq.n	8103c0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	681b      	ldr	r3, [r3, #0]
 8103c06:	4a2d      	ldr	r2, [pc, #180]	; (8103cbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8103c08:	4293      	cmp	r3, r2
 8103c0a:	d108      	bne.n	8103c1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8103c0c:	68fb      	ldr	r3, [r7, #12]
 8103c0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8103c12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8103c14:	683b      	ldr	r3, [r7, #0]
 8103c16:	685b      	ldr	r3, [r3, #4]
 8103c18:	68fa      	ldr	r2, [r7, #12]
 8103c1a:	4313      	orrs	r3, r2
 8103c1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8103c1e:	68fb      	ldr	r3, [r7, #12]
 8103c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103c24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8103c26:	683b      	ldr	r3, [r7, #0]
 8103c28:	681b      	ldr	r3, [r3, #0]
 8103c2a:	68fa      	ldr	r2, [r7, #12]
 8103c2c:	4313      	orrs	r3, r2
 8103c2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8103c30:	687b      	ldr	r3, [r7, #4]
 8103c32:	681b      	ldr	r3, [r3, #0]
 8103c34:	68fa      	ldr	r2, [r7, #12]
 8103c36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	681b      	ldr	r3, [r3, #0]
 8103c3c:	4a1e      	ldr	r2, [pc, #120]	; (8103cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8103c3e:	4293      	cmp	r3, r2
 8103c40:	d01d      	beq.n	8103c7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	681b      	ldr	r3, [r3, #0]
 8103c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103c4a:	d018      	beq.n	8103c7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	681b      	ldr	r3, [r3, #0]
 8103c50:	4a1b      	ldr	r2, [pc, #108]	; (8103cc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8103c52:	4293      	cmp	r3, r2
 8103c54:	d013      	beq.n	8103c7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	681b      	ldr	r3, [r3, #0]
 8103c5a:	4a1a      	ldr	r2, [pc, #104]	; (8103cc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8103c5c:	4293      	cmp	r3, r2
 8103c5e:	d00e      	beq.n	8103c7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8103c60:	687b      	ldr	r3, [r7, #4]
 8103c62:	681b      	ldr	r3, [r3, #0]
 8103c64:	4a18      	ldr	r2, [pc, #96]	; (8103cc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8103c66:	4293      	cmp	r3, r2
 8103c68:	d009      	beq.n	8103c7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	681b      	ldr	r3, [r3, #0]
 8103c6e:	4a13      	ldr	r2, [pc, #76]	; (8103cbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8103c70:	4293      	cmp	r3, r2
 8103c72:	d004      	beq.n	8103c7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8103c74:	687b      	ldr	r3, [r7, #4]
 8103c76:	681b      	ldr	r3, [r3, #0]
 8103c78:	4a14      	ldr	r2, [pc, #80]	; (8103ccc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8103c7a:	4293      	cmp	r3, r2
 8103c7c:	d10c      	bne.n	8103c98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8103c7e:	68bb      	ldr	r3, [r7, #8]
 8103c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8103c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8103c86:	683b      	ldr	r3, [r7, #0]
 8103c88:	689b      	ldr	r3, [r3, #8]
 8103c8a:	68ba      	ldr	r2, [r7, #8]
 8103c8c:	4313      	orrs	r3, r2
 8103c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	681b      	ldr	r3, [r3, #0]
 8103c94:	68ba      	ldr	r2, [r7, #8]
 8103c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	2201      	movs	r2, #1
 8103c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	2200      	movs	r2, #0
 8103ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8103ca8:	2300      	movs	r3, #0
}
 8103caa:	4618      	mov	r0, r3
 8103cac:	3714      	adds	r7, #20
 8103cae:	46bd      	mov	sp, r7
 8103cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cb4:	4770      	bx	lr
 8103cb6:	bf00      	nop
 8103cb8:	40010000 	.word	0x40010000
 8103cbc:	40010400 	.word	0x40010400
 8103cc0:	40000400 	.word	0x40000400
 8103cc4:	40000800 	.word	0x40000800
 8103cc8:	40000c00 	.word	0x40000c00
 8103ccc:	40001800 	.word	0x40001800

08103cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8103cd0:	b480      	push	{r7}
 8103cd2:	b083      	sub	sp, #12
 8103cd4:	af00      	add	r7, sp, #0
 8103cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8103cd8:	bf00      	nop
 8103cda:	370c      	adds	r7, #12
 8103cdc:	46bd      	mov	sp, r7
 8103cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ce2:	4770      	bx	lr

08103ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8103ce4:	b480      	push	{r7}
 8103ce6:	b083      	sub	sp, #12
 8103ce8:	af00      	add	r7, sp, #0
 8103cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8103cec:	bf00      	nop
 8103cee:	370c      	adds	r7, #12
 8103cf0:	46bd      	mov	sp, r7
 8103cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cf6:	4770      	bx	lr

08103cf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8103cf8:	b480      	push	{r7}
 8103cfa:	b083      	sub	sp, #12
 8103cfc:	af00      	add	r7, sp, #0
 8103cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8103d00:	bf00      	nop
 8103d02:	370c      	adds	r7, #12
 8103d04:	46bd      	mov	sp, r7
 8103d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d0a:	4770      	bx	lr

08103d0c <__NVIC_SetPriority>:
{
 8103d0c:	b480      	push	{r7}
 8103d0e:	b083      	sub	sp, #12
 8103d10:	af00      	add	r7, sp, #0
 8103d12:	4603      	mov	r3, r0
 8103d14:	6039      	str	r1, [r7, #0]
 8103d16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103d1c:	2b00      	cmp	r3, #0
 8103d1e:	db0a      	blt.n	8103d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103d20:	683b      	ldr	r3, [r7, #0]
 8103d22:	b2da      	uxtb	r2, r3
 8103d24:	490c      	ldr	r1, [pc, #48]	; (8103d58 <__NVIC_SetPriority+0x4c>)
 8103d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103d2a:	0112      	lsls	r2, r2, #4
 8103d2c:	b2d2      	uxtb	r2, r2
 8103d2e:	440b      	add	r3, r1
 8103d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8103d34:	e00a      	b.n	8103d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103d36:	683b      	ldr	r3, [r7, #0]
 8103d38:	b2da      	uxtb	r2, r3
 8103d3a:	4908      	ldr	r1, [pc, #32]	; (8103d5c <__NVIC_SetPriority+0x50>)
 8103d3c:	88fb      	ldrh	r3, [r7, #6]
 8103d3e:	f003 030f 	and.w	r3, r3, #15
 8103d42:	3b04      	subs	r3, #4
 8103d44:	0112      	lsls	r2, r2, #4
 8103d46:	b2d2      	uxtb	r2, r2
 8103d48:	440b      	add	r3, r1
 8103d4a:	761a      	strb	r2, [r3, #24]
}
 8103d4c:	bf00      	nop
 8103d4e:	370c      	adds	r7, #12
 8103d50:	46bd      	mov	sp, r7
 8103d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d56:	4770      	bx	lr
 8103d58:	e000e100 	.word	0xe000e100
 8103d5c:	e000ed00 	.word	0xe000ed00

08103d60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8103d60:	b580      	push	{r7, lr}
 8103d62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8103d64:	4b05      	ldr	r3, [pc, #20]	; (8103d7c <SysTick_Handler+0x1c>)
 8103d66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8103d68:	f001 ffd2 	bl	8105d10 <xTaskGetSchedulerState>
 8103d6c:	4603      	mov	r3, r0
 8103d6e:	2b01      	cmp	r3, #1
 8103d70:	d001      	beq.n	8103d76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8103d72:	f000 fc09 	bl	8104588 <xPortSysTickHandler>
  }
}
 8103d76:	bf00      	nop
 8103d78:	bd80      	pop	{r7, pc}
 8103d7a:	bf00      	nop
 8103d7c:	e000e010 	.word	0xe000e010

08103d80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8103d80:	b580      	push	{r7, lr}
 8103d82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8103d84:	2100      	movs	r1, #0
 8103d86:	f06f 0004 	mvn.w	r0, #4
 8103d8a:	f7ff ffbf 	bl	8103d0c <__NVIC_SetPriority>
#endif
}
 8103d8e:	bf00      	nop
 8103d90:	bd80      	pop	{r7, pc}
	...

08103d94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8103d94:	b480      	push	{r7}
 8103d96:	b083      	sub	sp, #12
 8103d98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8103d9a:	f3ef 8305 	mrs	r3, IPSR
 8103d9e:	603b      	str	r3, [r7, #0]
  return(result);
 8103da0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8103da2:	2b00      	cmp	r3, #0
 8103da4:	d003      	beq.n	8103dae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8103da6:	f06f 0305 	mvn.w	r3, #5
 8103daa:	607b      	str	r3, [r7, #4]
 8103dac:	e00c      	b.n	8103dc8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8103dae:	4b0a      	ldr	r3, [pc, #40]	; (8103dd8 <osKernelInitialize+0x44>)
 8103db0:	681b      	ldr	r3, [r3, #0]
 8103db2:	2b00      	cmp	r3, #0
 8103db4:	d105      	bne.n	8103dc2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8103db6:	4b08      	ldr	r3, [pc, #32]	; (8103dd8 <osKernelInitialize+0x44>)
 8103db8:	2201      	movs	r2, #1
 8103dba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8103dbc:	2300      	movs	r3, #0
 8103dbe:	607b      	str	r3, [r7, #4]
 8103dc0:	e002      	b.n	8103dc8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8103dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8103dc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8103dc8:	687b      	ldr	r3, [r7, #4]
}
 8103dca:	4618      	mov	r0, r3
 8103dcc:	370c      	adds	r7, #12
 8103dce:	46bd      	mov	sp, r7
 8103dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dd4:	4770      	bx	lr
 8103dd6:	bf00      	nop
 8103dd8:	10000144 	.word	0x10000144

08103ddc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8103ddc:	b580      	push	{r7, lr}
 8103dde:	b082      	sub	sp, #8
 8103de0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8103de2:	f3ef 8305 	mrs	r3, IPSR
 8103de6:	603b      	str	r3, [r7, #0]
  return(result);
 8103de8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8103dea:	2b00      	cmp	r3, #0
 8103dec:	d003      	beq.n	8103df6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8103dee:	f06f 0305 	mvn.w	r3, #5
 8103df2:	607b      	str	r3, [r7, #4]
 8103df4:	e010      	b.n	8103e18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8103df6:	4b0b      	ldr	r3, [pc, #44]	; (8103e24 <osKernelStart+0x48>)
 8103df8:	681b      	ldr	r3, [r3, #0]
 8103dfa:	2b01      	cmp	r3, #1
 8103dfc:	d109      	bne.n	8103e12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8103dfe:	f7ff ffbf 	bl	8103d80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8103e02:	4b08      	ldr	r3, [pc, #32]	; (8103e24 <osKernelStart+0x48>)
 8103e04:	2202      	movs	r2, #2
 8103e06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8103e08:	f001 fb26 	bl	8105458 <vTaskStartScheduler>
      stat = osOK;
 8103e0c:	2300      	movs	r3, #0
 8103e0e:	607b      	str	r3, [r7, #4]
 8103e10:	e002      	b.n	8103e18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8103e12:	f04f 33ff 	mov.w	r3, #4294967295
 8103e16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8103e18:	687b      	ldr	r3, [r7, #4]
}
 8103e1a:	4618      	mov	r0, r3
 8103e1c:	3708      	adds	r7, #8
 8103e1e:	46bd      	mov	sp, r7
 8103e20:	bd80      	pop	{r7, pc}
 8103e22:	bf00      	nop
 8103e24:	10000144 	.word	0x10000144

08103e28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8103e28:	b580      	push	{r7, lr}
 8103e2a:	b08e      	sub	sp, #56	; 0x38
 8103e2c:	af04      	add	r7, sp, #16
 8103e2e:	60f8      	str	r0, [r7, #12]
 8103e30:	60b9      	str	r1, [r7, #8]
 8103e32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8103e34:	2300      	movs	r3, #0
 8103e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8103e38:	f3ef 8305 	mrs	r3, IPSR
 8103e3c:	617b      	str	r3, [r7, #20]
  return(result);
 8103e3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8103e40:	2b00      	cmp	r3, #0
 8103e42:	d17e      	bne.n	8103f42 <osThreadNew+0x11a>
 8103e44:	68fb      	ldr	r3, [r7, #12]
 8103e46:	2b00      	cmp	r3, #0
 8103e48:	d07b      	beq.n	8103f42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8103e4a:	2380      	movs	r3, #128	; 0x80
 8103e4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8103e4e:	2318      	movs	r3, #24
 8103e50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8103e52:	2300      	movs	r3, #0
 8103e54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8103e56:	f04f 33ff 	mov.w	r3, #4294967295
 8103e5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8103e5c:	687b      	ldr	r3, [r7, #4]
 8103e5e:	2b00      	cmp	r3, #0
 8103e60:	d045      	beq.n	8103eee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	681b      	ldr	r3, [r3, #0]
 8103e66:	2b00      	cmp	r3, #0
 8103e68:	d002      	beq.n	8103e70 <osThreadNew+0x48>
        name = attr->name;
 8103e6a:	687b      	ldr	r3, [r7, #4]
 8103e6c:	681b      	ldr	r3, [r3, #0]
 8103e6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8103e70:	687b      	ldr	r3, [r7, #4]
 8103e72:	699b      	ldr	r3, [r3, #24]
 8103e74:	2b00      	cmp	r3, #0
 8103e76:	d002      	beq.n	8103e7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8103e78:	687b      	ldr	r3, [r7, #4]
 8103e7a:	699b      	ldr	r3, [r3, #24]
 8103e7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8103e7e:	69fb      	ldr	r3, [r7, #28]
 8103e80:	2b00      	cmp	r3, #0
 8103e82:	d008      	beq.n	8103e96 <osThreadNew+0x6e>
 8103e84:	69fb      	ldr	r3, [r7, #28]
 8103e86:	2b38      	cmp	r3, #56	; 0x38
 8103e88:	d805      	bhi.n	8103e96 <osThreadNew+0x6e>
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	685b      	ldr	r3, [r3, #4]
 8103e8e:	f003 0301 	and.w	r3, r3, #1
 8103e92:	2b00      	cmp	r3, #0
 8103e94:	d001      	beq.n	8103e9a <osThreadNew+0x72>
        return (NULL);
 8103e96:	2300      	movs	r3, #0
 8103e98:	e054      	b.n	8103f44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	695b      	ldr	r3, [r3, #20]
 8103e9e:	2b00      	cmp	r3, #0
 8103ea0:	d003      	beq.n	8103eaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8103ea2:	687b      	ldr	r3, [r7, #4]
 8103ea4:	695b      	ldr	r3, [r3, #20]
 8103ea6:	089b      	lsrs	r3, r3, #2
 8103ea8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8103eaa:	687b      	ldr	r3, [r7, #4]
 8103eac:	689b      	ldr	r3, [r3, #8]
 8103eae:	2b00      	cmp	r3, #0
 8103eb0:	d00e      	beq.n	8103ed0 <osThreadNew+0xa8>
 8103eb2:	687b      	ldr	r3, [r7, #4]
 8103eb4:	68db      	ldr	r3, [r3, #12]
 8103eb6:	2bbb      	cmp	r3, #187	; 0xbb
 8103eb8:	d90a      	bls.n	8103ed0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8103ebe:	2b00      	cmp	r3, #0
 8103ec0:	d006      	beq.n	8103ed0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8103ec2:	687b      	ldr	r3, [r7, #4]
 8103ec4:	695b      	ldr	r3, [r3, #20]
 8103ec6:	2b00      	cmp	r3, #0
 8103ec8:	d002      	beq.n	8103ed0 <osThreadNew+0xa8>
        mem = 1;
 8103eca:	2301      	movs	r3, #1
 8103ecc:	61bb      	str	r3, [r7, #24]
 8103ece:	e010      	b.n	8103ef2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8103ed0:	687b      	ldr	r3, [r7, #4]
 8103ed2:	689b      	ldr	r3, [r3, #8]
 8103ed4:	2b00      	cmp	r3, #0
 8103ed6:	d10c      	bne.n	8103ef2 <osThreadNew+0xca>
 8103ed8:	687b      	ldr	r3, [r7, #4]
 8103eda:	68db      	ldr	r3, [r3, #12]
 8103edc:	2b00      	cmp	r3, #0
 8103ede:	d108      	bne.n	8103ef2 <osThreadNew+0xca>
 8103ee0:	687b      	ldr	r3, [r7, #4]
 8103ee2:	691b      	ldr	r3, [r3, #16]
 8103ee4:	2b00      	cmp	r3, #0
 8103ee6:	d104      	bne.n	8103ef2 <osThreadNew+0xca>
          mem = 0;
 8103ee8:	2300      	movs	r3, #0
 8103eea:	61bb      	str	r3, [r7, #24]
 8103eec:	e001      	b.n	8103ef2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8103eee:	2300      	movs	r3, #0
 8103ef0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8103ef2:	69bb      	ldr	r3, [r7, #24]
 8103ef4:	2b01      	cmp	r3, #1
 8103ef6:	d110      	bne.n	8103f1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8103efc:	687a      	ldr	r2, [r7, #4]
 8103efe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8103f00:	9202      	str	r2, [sp, #8]
 8103f02:	9301      	str	r3, [sp, #4]
 8103f04:	69fb      	ldr	r3, [r7, #28]
 8103f06:	9300      	str	r3, [sp, #0]
 8103f08:	68bb      	ldr	r3, [r7, #8]
 8103f0a:	6a3a      	ldr	r2, [r7, #32]
 8103f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8103f0e:	68f8      	ldr	r0, [r7, #12]
 8103f10:	f001 f8b6 	bl	8105080 <xTaskCreateStatic>
 8103f14:	4603      	mov	r3, r0
 8103f16:	613b      	str	r3, [r7, #16]
 8103f18:	e013      	b.n	8103f42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8103f1a:	69bb      	ldr	r3, [r7, #24]
 8103f1c:	2b00      	cmp	r3, #0
 8103f1e:	d110      	bne.n	8103f42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8103f20:	6a3b      	ldr	r3, [r7, #32]
 8103f22:	b29a      	uxth	r2, r3
 8103f24:	f107 0310 	add.w	r3, r7, #16
 8103f28:	9301      	str	r3, [sp, #4]
 8103f2a:	69fb      	ldr	r3, [r7, #28]
 8103f2c:	9300      	str	r3, [sp, #0]
 8103f2e:	68bb      	ldr	r3, [r7, #8]
 8103f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8103f32:	68f8      	ldr	r0, [r7, #12]
 8103f34:	f001 f901 	bl	810513a <xTaskCreate>
 8103f38:	4603      	mov	r3, r0
 8103f3a:	2b01      	cmp	r3, #1
 8103f3c:	d001      	beq.n	8103f42 <osThreadNew+0x11a>
            hTask = NULL;
 8103f3e:	2300      	movs	r3, #0
 8103f40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8103f42:	693b      	ldr	r3, [r7, #16]
}
 8103f44:	4618      	mov	r0, r3
 8103f46:	3728      	adds	r7, #40	; 0x28
 8103f48:	46bd      	mov	sp, r7
 8103f4a:	bd80      	pop	{r7, pc}

08103f4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8103f4c:	b580      	push	{r7, lr}
 8103f4e:	b084      	sub	sp, #16
 8103f50:	af00      	add	r7, sp, #0
 8103f52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8103f54:	f3ef 8305 	mrs	r3, IPSR
 8103f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8103f5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8103f5c:	2b00      	cmp	r3, #0
 8103f5e:	d003      	beq.n	8103f68 <osDelay+0x1c>
    stat = osErrorISR;
 8103f60:	f06f 0305 	mvn.w	r3, #5
 8103f64:	60fb      	str	r3, [r7, #12]
 8103f66:	e007      	b.n	8103f78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8103f68:	2300      	movs	r3, #0
 8103f6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8103f6c:	687b      	ldr	r3, [r7, #4]
 8103f6e:	2b00      	cmp	r3, #0
 8103f70:	d002      	beq.n	8103f78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8103f72:	6878      	ldr	r0, [r7, #4]
 8103f74:	f001 fa3c 	bl	81053f0 <vTaskDelay>
    }
  }

  return (stat);
 8103f78:	68fb      	ldr	r3, [r7, #12]
}
 8103f7a:	4618      	mov	r0, r3
 8103f7c:	3710      	adds	r7, #16
 8103f7e:	46bd      	mov	sp, r7
 8103f80:	bd80      	pop	{r7, pc}
	...

08103f84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8103f84:	b480      	push	{r7}
 8103f86:	b085      	sub	sp, #20
 8103f88:	af00      	add	r7, sp, #0
 8103f8a:	60f8      	str	r0, [r7, #12]
 8103f8c:	60b9      	str	r1, [r7, #8]
 8103f8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8103f90:	68fb      	ldr	r3, [r7, #12]
 8103f92:	4a07      	ldr	r2, [pc, #28]	; (8103fb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8103f94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8103f96:	68bb      	ldr	r3, [r7, #8]
 8103f98:	4a06      	ldr	r2, [pc, #24]	; (8103fb4 <vApplicationGetIdleTaskMemory+0x30>)
 8103f9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	2280      	movs	r2, #128	; 0x80
 8103fa0:	601a      	str	r2, [r3, #0]
}
 8103fa2:	bf00      	nop
 8103fa4:	3714      	adds	r7, #20
 8103fa6:	46bd      	mov	sp, r7
 8103fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fac:	4770      	bx	lr
 8103fae:	bf00      	nop
 8103fb0:	10000148 	.word	0x10000148
 8103fb4:	10000204 	.word	0x10000204

08103fb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8103fb8:	b480      	push	{r7}
 8103fba:	b085      	sub	sp, #20
 8103fbc:	af00      	add	r7, sp, #0
 8103fbe:	60f8      	str	r0, [r7, #12]
 8103fc0:	60b9      	str	r1, [r7, #8]
 8103fc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8103fc4:	68fb      	ldr	r3, [r7, #12]
 8103fc6:	4a07      	ldr	r2, [pc, #28]	; (8103fe4 <vApplicationGetTimerTaskMemory+0x2c>)
 8103fc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8103fca:	68bb      	ldr	r3, [r7, #8]
 8103fcc:	4a06      	ldr	r2, [pc, #24]	; (8103fe8 <vApplicationGetTimerTaskMemory+0x30>)
 8103fce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8103fd0:	687b      	ldr	r3, [r7, #4]
 8103fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103fd6:	601a      	str	r2, [r3, #0]
}
 8103fd8:	bf00      	nop
 8103fda:	3714      	adds	r7, #20
 8103fdc:	46bd      	mov	sp, r7
 8103fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fe2:	4770      	bx	lr
 8103fe4:	10000404 	.word	0x10000404
 8103fe8:	100004c0 	.word	0x100004c0

08103fec <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8103fec:	b580      	push	{r7, lr}
 8103fee:	b084      	sub	sp, #16
 8103ff0:	af00      	add	r7, sp, #0
 8103ff2:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8103ff4:	2300      	movs	r3, #0
 8103ff6:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8103ff8:	687b      	ldr	r3, [r7, #4]
 8103ffa:	f003 0307 	and.w	r3, r3, #7
 8103ffe:	2b00      	cmp	r3, #0
 8104000:	d004      	beq.n	810400c <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	f023 0307 	bic.w	r3, r3, #7
 8104008:	3308      	adds	r3, #8
 810400a:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 810400c:	f001 fa94 	bl	8105538 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8104010:	4b16      	ldr	r3, [pc, #88]	; (810406c <pvPortMalloc+0x80>)
 8104012:	681b      	ldr	r3, [r3, #0]
 8104014:	2b00      	cmp	r3, #0
 8104016:	d105      	bne.n	8104024 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8104018:	4b15      	ldr	r3, [pc, #84]	; (8104070 <pvPortMalloc+0x84>)
 810401a:	f023 0307 	bic.w	r3, r3, #7
 810401e:	461a      	mov	r2, r3
 8104020:	4b12      	ldr	r3, [pc, #72]	; (810406c <pvPortMalloc+0x80>)
 8104022:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8104024:	4b13      	ldr	r3, [pc, #76]	; (8104074 <pvPortMalloc+0x88>)
 8104026:	681a      	ldr	r2, [r3, #0]
 8104028:	687b      	ldr	r3, [r7, #4]
 810402a:	4413      	add	r3, r2
 810402c:	f643 32f7 	movw	r2, #15351	; 0x3bf7
 8104030:	4293      	cmp	r3, r2
 8104032:	d813      	bhi.n	810405c <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8104034:	4b0f      	ldr	r3, [pc, #60]	; (8104074 <pvPortMalloc+0x88>)
 8104036:	681a      	ldr	r2, [r3, #0]
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	441a      	add	r2, r3
 810403c:	4b0d      	ldr	r3, [pc, #52]	; (8104074 <pvPortMalloc+0x88>)
 810403e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8104040:	429a      	cmp	r2, r3
 8104042:	d90b      	bls.n	810405c <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8104044:	4b09      	ldr	r3, [pc, #36]	; (810406c <pvPortMalloc+0x80>)
 8104046:	681a      	ldr	r2, [r3, #0]
 8104048:	4b0a      	ldr	r3, [pc, #40]	; (8104074 <pvPortMalloc+0x88>)
 810404a:	681b      	ldr	r3, [r3, #0]
 810404c:	4413      	add	r3, r2
 810404e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8104050:	4b08      	ldr	r3, [pc, #32]	; (8104074 <pvPortMalloc+0x88>)
 8104052:	681a      	ldr	r2, [r3, #0]
 8104054:	687b      	ldr	r3, [r7, #4]
 8104056:	4413      	add	r3, r2
 8104058:	4a06      	ldr	r2, [pc, #24]	; (8104074 <pvPortMalloc+0x88>)
 810405a:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810405c:	f001 fa7a 	bl	8105554 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8104060:	68fb      	ldr	r3, [r7, #12]
}
 8104062:	4618      	mov	r0, r3
 8104064:	3710      	adds	r7, #16
 8104066:	46bd      	mov	sp, r7
 8104068:	bd80      	pop	{r7, pc}
 810406a:	bf00      	nop
 810406c:	100044c4 	.word	0x100044c4
 8104070:	100008c8 	.word	0x100008c8
 8104074:	100044c0 	.word	0x100044c0

08104078 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8104078:	b480      	push	{r7}
 810407a:	b085      	sub	sp, #20
 810407c:	af00      	add	r7, sp, #0
 810407e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8104080:	687b      	ldr	r3, [r7, #4]
 8104082:	2b00      	cmp	r3, #0
 8104084:	d00a      	beq.n	810409c <vPortFree+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8104086:	f04f 0350 	mov.w	r3, #80	; 0x50
 810408a:	f383 8811 	msr	BASEPRI, r3
 810408e:	f3bf 8f6f 	isb	sy
 8104092:	f3bf 8f4f 	dsb	sy
 8104096:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8104098:	bf00      	nop
 810409a:	e7fe      	b.n	810409a <vPortFree+0x22>
}
 810409c:	bf00      	nop
 810409e:	3714      	adds	r7, #20
 81040a0:	46bd      	mov	sp, r7
 81040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040a6:	4770      	bx	lr

081040a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 81040a8:	b480      	push	{r7}
 81040aa:	b083      	sub	sp, #12
 81040ac:	af00      	add	r7, sp, #0
 81040ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	f103 0208 	add.w	r2, r3, #8
 81040b6:	687b      	ldr	r3, [r7, #4]
 81040b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	f04f 32ff 	mov.w	r2, #4294967295
 81040c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81040c2:	687b      	ldr	r3, [r7, #4]
 81040c4:	f103 0208 	add.w	r2, r3, #8
 81040c8:	687b      	ldr	r3, [r7, #4]
 81040ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81040cc:	687b      	ldr	r3, [r7, #4]
 81040ce:	f103 0208 	add.w	r2, r3, #8
 81040d2:	687b      	ldr	r3, [r7, #4]
 81040d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	2200      	movs	r2, #0
 81040da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 81040dc:	bf00      	nop
 81040de:	370c      	adds	r7, #12
 81040e0:	46bd      	mov	sp, r7
 81040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040e6:	4770      	bx	lr

081040e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81040e8:	b480      	push	{r7}
 81040ea:	b083      	sub	sp, #12
 81040ec:	af00      	add	r7, sp, #0
 81040ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	2200      	movs	r2, #0
 81040f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81040f6:	bf00      	nop
 81040f8:	370c      	adds	r7, #12
 81040fa:	46bd      	mov	sp, r7
 81040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104100:	4770      	bx	lr

08104102 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8104102:	b480      	push	{r7}
 8104104:	b085      	sub	sp, #20
 8104106:	af00      	add	r7, sp, #0
 8104108:	6078      	str	r0, [r7, #4]
 810410a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	685b      	ldr	r3, [r3, #4]
 8104110:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8104112:	683b      	ldr	r3, [r7, #0]
 8104114:	68fa      	ldr	r2, [r7, #12]
 8104116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8104118:	68fb      	ldr	r3, [r7, #12]
 810411a:	689a      	ldr	r2, [r3, #8]
 810411c:	683b      	ldr	r3, [r7, #0]
 810411e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8104120:	68fb      	ldr	r3, [r7, #12]
 8104122:	689b      	ldr	r3, [r3, #8]
 8104124:	683a      	ldr	r2, [r7, #0]
 8104126:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8104128:	68fb      	ldr	r3, [r7, #12]
 810412a:	683a      	ldr	r2, [r7, #0]
 810412c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810412e:	683b      	ldr	r3, [r7, #0]
 8104130:	687a      	ldr	r2, [r7, #4]
 8104132:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	681b      	ldr	r3, [r3, #0]
 8104138:	1c5a      	adds	r2, r3, #1
 810413a:	687b      	ldr	r3, [r7, #4]
 810413c:	601a      	str	r2, [r3, #0]
}
 810413e:	bf00      	nop
 8104140:	3714      	adds	r7, #20
 8104142:	46bd      	mov	sp, r7
 8104144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104148:	4770      	bx	lr

0810414a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810414a:	b480      	push	{r7}
 810414c:	b085      	sub	sp, #20
 810414e:	af00      	add	r7, sp, #0
 8104150:	6078      	str	r0, [r7, #4]
 8104152:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8104154:	683b      	ldr	r3, [r7, #0]
 8104156:	681b      	ldr	r3, [r3, #0]
 8104158:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810415a:	68bb      	ldr	r3, [r7, #8]
 810415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104160:	d103      	bne.n	810416a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8104162:	687b      	ldr	r3, [r7, #4]
 8104164:	691b      	ldr	r3, [r3, #16]
 8104166:	60fb      	str	r3, [r7, #12]
 8104168:	e00c      	b.n	8104184 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810416a:	687b      	ldr	r3, [r7, #4]
 810416c:	3308      	adds	r3, #8
 810416e:	60fb      	str	r3, [r7, #12]
 8104170:	e002      	b.n	8104178 <vListInsert+0x2e>
 8104172:	68fb      	ldr	r3, [r7, #12]
 8104174:	685b      	ldr	r3, [r3, #4]
 8104176:	60fb      	str	r3, [r7, #12]
 8104178:	68fb      	ldr	r3, [r7, #12]
 810417a:	685b      	ldr	r3, [r3, #4]
 810417c:	681b      	ldr	r3, [r3, #0]
 810417e:	68ba      	ldr	r2, [r7, #8]
 8104180:	429a      	cmp	r2, r3
 8104182:	d2f6      	bcs.n	8104172 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8104184:	68fb      	ldr	r3, [r7, #12]
 8104186:	685a      	ldr	r2, [r3, #4]
 8104188:	683b      	ldr	r3, [r7, #0]
 810418a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810418c:	683b      	ldr	r3, [r7, #0]
 810418e:	685b      	ldr	r3, [r3, #4]
 8104190:	683a      	ldr	r2, [r7, #0]
 8104192:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8104194:	683b      	ldr	r3, [r7, #0]
 8104196:	68fa      	ldr	r2, [r7, #12]
 8104198:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810419a:	68fb      	ldr	r3, [r7, #12]
 810419c:	683a      	ldr	r2, [r7, #0]
 810419e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 81041a0:	683b      	ldr	r3, [r7, #0]
 81041a2:	687a      	ldr	r2, [r7, #4]
 81041a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	681b      	ldr	r3, [r3, #0]
 81041aa:	1c5a      	adds	r2, r3, #1
 81041ac:	687b      	ldr	r3, [r7, #4]
 81041ae:	601a      	str	r2, [r3, #0]
}
 81041b0:	bf00      	nop
 81041b2:	3714      	adds	r7, #20
 81041b4:	46bd      	mov	sp, r7
 81041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041ba:	4770      	bx	lr

081041bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 81041bc:	b480      	push	{r7}
 81041be:	b085      	sub	sp, #20
 81041c0:	af00      	add	r7, sp, #0
 81041c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	691b      	ldr	r3, [r3, #16]
 81041c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 81041ca:	687b      	ldr	r3, [r7, #4]
 81041cc:	685b      	ldr	r3, [r3, #4]
 81041ce:	687a      	ldr	r2, [r7, #4]
 81041d0:	6892      	ldr	r2, [r2, #8]
 81041d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 81041d4:	687b      	ldr	r3, [r7, #4]
 81041d6:	689b      	ldr	r3, [r3, #8]
 81041d8:	687a      	ldr	r2, [r7, #4]
 81041da:	6852      	ldr	r2, [r2, #4]
 81041dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 81041de:	68fb      	ldr	r3, [r7, #12]
 81041e0:	685b      	ldr	r3, [r3, #4]
 81041e2:	687a      	ldr	r2, [r7, #4]
 81041e4:	429a      	cmp	r2, r3
 81041e6:	d103      	bne.n	81041f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81041e8:	687b      	ldr	r3, [r7, #4]
 81041ea:	689a      	ldr	r2, [r3, #8]
 81041ec:	68fb      	ldr	r3, [r7, #12]
 81041ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	2200      	movs	r2, #0
 81041f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81041f6:	68fb      	ldr	r3, [r7, #12]
 81041f8:	681b      	ldr	r3, [r3, #0]
 81041fa:	1e5a      	subs	r2, r3, #1
 81041fc:	68fb      	ldr	r3, [r7, #12]
 81041fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8104200:	68fb      	ldr	r3, [r7, #12]
 8104202:	681b      	ldr	r3, [r3, #0]
}
 8104204:	4618      	mov	r0, r3
 8104206:	3714      	adds	r7, #20
 8104208:	46bd      	mov	sp, r7
 810420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810420e:	4770      	bx	lr

08104210 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8104210:	b480      	push	{r7}
 8104212:	b085      	sub	sp, #20
 8104214:	af00      	add	r7, sp, #0
 8104216:	60f8      	str	r0, [r7, #12]
 8104218:	60b9      	str	r1, [r7, #8]
 810421a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810421c:	68fb      	ldr	r3, [r7, #12]
 810421e:	3b04      	subs	r3, #4
 8104220:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8104222:	68fb      	ldr	r3, [r7, #12]
 8104224:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8104228:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810422a:	68fb      	ldr	r3, [r7, #12]
 810422c:	3b04      	subs	r3, #4
 810422e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8104230:	68bb      	ldr	r3, [r7, #8]
 8104232:	f023 0201 	bic.w	r2, r3, #1
 8104236:	68fb      	ldr	r3, [r7, #12]
 8104238:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810423a:	68fb      	ldr	r3, [r7, #12]
 810423c:	3b04      	subs	r3, #4
 810423e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8104240:	4a0c      	ldr	r2, [pc, #48]	; (8104274 <pxPortInitialiseStack+0x64>)
 8104242:	68fb      	ldr	r3, [r7, #12]
 8104244:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8104246:	68fb      	ldr	r3, [r7, #12]
 8104248:	3b14      	subs	r3, #20
 810424a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810424c:	687a      	ldr	r2, [r7, #4]
 810424e:	68fb      	ldr	r3, [r7, #12]
 8104250:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8104252:	68fb      	ldr	r3, [r7, #12]
 8104254:	3b04      	subs	r3, #4
 8104256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8104258:	68fb      	ldr	r3, [r7, #12]
 810425a:	f06f 0202 	mvn.w	r2, #2
 810425e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8104260:	68fb      	ldr	r3, [r7, #12]
 8104262:	3b20      	subs	r3, #32
 8104264:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8104266:	68fb      	ldr	r3, [r7, #12]
}
 8104268:	4618      	mov	r0, r3
 810426a:	3714      	adds	r7, #20
 810426c:	46bd      	mov	sp, r7
 810426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104272:	4770      	bx	lr
 8104274:	08104279 	.word	0x08104279

08104278 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8104278:	b480      	push	{r7}
 810427a:	b085      	sub	sp, #20
 810427c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810427e:	2300      	movs	r3, #0
 8104280:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8104282:	4b12      	ldr	r3, [pc, #72]	; (81042cc <prvTaskExitError+0x54>)
 8104284:	681b      	ldr	r3, [r3, #0]
 8104286:	f1b3 3fff 	cmp.w	r3, #4294967295
 810428a:	d00a      	beq.n	81042a2 <prvTaskExitError+0x2a>
	__asm volatile
 810428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104290:	f383 8811 	msr	BASEPRI, r3
 8104294:	f3bf 8f6f 	isb	sy
 8104298:	f3bf 8f4f 	dsb	sy
 810429c:	60fb      	str	r3, [r7, #12]
}
 810429e:	bf00      	nop
 81042a0:	e7fe      	b.n	81042a0 <prvTaskExitError+0x28>
	__asm volatile
 81042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81042a6:	f383 8811 	msr	BASEPRI, r3
 81042aa:	f3bf 8f6f 	isb	sy
 81042ae:	f3bf 8f4f 	dsb	sy
 81042b2:	60bb      	str	r3, [r7, #8]
}
 81042b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 81042b6:	bf00      	nop
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	2b00      	cmp	r3, #0
 81042bc:	d0fc      	beq.n	81042b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 81042be:	bf00      	nop
 81042c0:	bf00      	nop
 81042c2:	3714      	adds	r7, #20
 81042c4:	46bd      	mov	sp, r7
 81042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042ca:	4770      	bx	lr
 81042cc:	10000010 	.word	0x10000010

081042d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 81042d0:	4b07      	ldr	r3, [pc, #28]	; (81042f0 <pxCurrentTCBConst2>)
 81042d2:	6819      	ldr	r1, [r3, #0]
 81042d4:	6808      	ldr	r0, [r1, #0]
 81042d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81042da:	f380 8809 	msr	PSP, r0
 81042de:	f3bf 8f6f 	isb	sy
 81042e2:	f04f 0000 	mov.w	r0, #0
 81042e6:	f380 8811 	msr	BASEPRI, r0
 81042ea:	4770      	bx	lr
 81042ec:	f3af 8000 	nop.w

081042f0 <pxCurrentTCBConst2>:
 81042f0:	100044d0 	.word	0x100044d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81042f4:	bf00      	nop
 81042f6:	bf00      	nop

081042f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81042f8:	4808      	ldr	r0, [pc, #32]	; (810431c <prvPortStartFirstTask+0x24>)
 81042fa:	6800      	ldr	r0, [r0, #0]
 81042fc:	6800      	ldr	r0, [r0, #0]
 81042fe:	f380 8808 	msr	MSP, r0
 8104302:	f04f 0000 	mov.w	r0, #0
 8104306:	f380 8814 	msr	CONTROL, r0
 810430a:	b662      	cpsie	i
 810430c:	b661      	cpsie	f
 810430e:	f3bf 8f4f 	dsb	sy
 8104312:	f3bf 8f6f 	isb	sy
 8104316:	df00      	svc	0
 8104318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810431a:	bf00      	nop
 810431c:	e000ed08 	.word	0xe000ed08

08104320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8104320:	b580      	push	{r7, lr}
 8104322:	b086      	sub	sp, #24
 8104324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8104326:	4b46      	ldr	r3, [pc, #280]	; (8104440 <xPortStartScheduler+0x120>)
 8104328:	681b      	ldr	r3, [r3, #0]
 810432a:	4a46      	ldr	r2, [pc, #280]	; (8104444 <xPortStartScheduler+0x124>)
 810432c:	4293      	cmp	r3, r2
 810432e:	d10a      	bne.n	8104346 <xPortStartScheduler+0x26>
	__asm volatile
 8104330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104334:	f383 8811 	msr	BASEPRI, r3
 8104338:	f3bf 8f6f 	isb	sy
 810433c:	f3bf 8f4f 	dsb	sy
 8104340:	613b      	str	r3, [r7, #16]
}
 8104342:	bf00      	nop
 8104344:	e7fe      	b.n	8104344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8104346:	4b3e      	ldr	r3, [pc, #248]	; (8104440 <xPortStartScheduler+0x120>)
 8104348:	681b      	ldr	r3, [r3, #0]
 810434a:	4a3f      	ldr	r2, [pc, #252]	; (8104448 <xPortStartScheduler+0x128>)
 810434c:	4293      	cmp	r3, r2
 810434e:	d10a      	bne.n	8104366 <xPortStartScheduler+0x46>
	__asm volatile
 8104350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104354:	f383 8811 	msr	BASEPRI, r3
 8104358:	f3bf 8f6f 	isb	sy
 810435c:	f3bf 8f4f 	dsb	sy
 8104360:	60fb      	str	r3, [r7, #12]
}
 8104362:	bf00      	nop
 8104364:	e7fe      	b.n	8104364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8104366:	4b39      	ldr	r3, [pc, #228]	; (810444c <xPortStartScheduler+0x12c>)
 8104368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810436a:	697b      	ldr	r3, [r7, #20]
 810436c:	781b      	ldrb	r3, [r3, #0]
 810436e:	b2db      	uxtb	r3, r3
 8104370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8104372:	697b      	ldr	r3, [r7, #20]
 8104374:	22ff      	movs	r2, #255	; 0xff
 8104376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8104378:	697b      	ldr	r3, [r7, #20]
 810437a:	781b      	ldrb	r3, [r3, #0]
 810437c:	b2db      	uxtb	r3, r3
 810437e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8104380:	78fb      	ldrb	r3, [r7, #3]
 8104382:	b2db      	uxtb	r3, r3
 8104384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8104388:	b2da      	uxtb	r2, r3
 810438a:	4b31      	ldr	r3, [pc, #196]	; (8104450 <xPortStartScheduler+0x130>)
 810438c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810438e:	4b31      	ldr	r3, [pc, #196]	; (8104454 <xPortStartScheduler+0x134>)
 8104390:	2207      	movs	r2, #7
 8104392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8104394:	e009      	b.n	81043aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8104396:	4b2f      	ldr	r3, [pc, #188]	; (8104454 <xPortStartScheduler+0x134>)
 8104398:	681b      	ldr	r3, [r3, #0]
 810439a:	3b01      	subs	r3, #1
 810439c:	4a2d      	ldr	r2, [pc, #180]	; (8104454 <xPortStartScheduler+0x134>)
 810439e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 81043a0:	78fb      	ldrb	r3, [r7, #3]
 81043a2:	b2db      	uxtb	r3, r3
 81043a4:	005b      	lsls	r3, r3, #1
 81043a6:	b2db      	uxtb	r3, r3
 81043a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81043aa:	78fb      	ldrb	r3, [r7, #3]
 81043ac:	b2db      	uxtb	r3, r3
 81043ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81043b2:	2b80      	cmp	r3, #128	; 0x80
 81043b4:	d0ef      	beq.n	8104396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 81043b6:	4b27      	ldr	r3, [pc, #156]	; (8104454 <xPortStartScheduler+0x134>)
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	f1c3 0307 	rsb	r3, r3, #7
 81043be:	2b04      	cmp	r3, #4
 81043c0:	d00a      	beq.n	81043d8 <xPortStartScheduler+0xb8>
	__asm volatile
 81043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81043c6:	f383 8811 	msr	BASEPRI, r3
 81043ca:	f3bf 8f6f 	isb	sy
 81043ce:	f3bf 8f4f 	dsb	sy
 81043d2:	60bb      	str	r3, [r7, #8]
}
 81043d4:	bf00      	nop
 81043d6:	e7fe      	b.n	81043d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 81043d8:	4b1e      	ldr	r3, [pc, #120]	; (8104454 <xPortStartScheduler+0x134>)
 81043da:	681b      	ldr	r3, [r3, #0]
 81043dc:	021b      	lsls	r3, r3, #8
 81043de:	4a1d      	ldr	r2, [pc, #116]	; (8104454 <xPortStartScheduler+0x134>)
 81043e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 81043e2:	4b1c      	ldr	r3, [pc, #112]	; (8104454 <xPortStartScheduler+0x134>)
 81043e4:	681b      	ldr	r3, [r3, #0]
 81043e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81043ea:	4a1a      	ldr	r2, [pc, #104]	; (8104454 <xPortStartScheduler+0x134>)
 81043ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 81043ee:	687b      	ldr	r3, [r7, #4]
 81043f0:	b2da      	uxtb	r2, r3
 81043f2:	697b      	ldr	r3, [r7, #20]
 81043f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 81043f6:	4b18      	ldr	r3, [pc, #96]	; (8104458 <xPortStartScheduler+0x138>)
 81043f8:	681b      	ldr	r3, [r3, #0]
 81043fa:	4a17      	ldr	r2, [pc, #92]	; (8104458 <xPortStartScheduler+0x138>)
 81043fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8104400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8104402:	4b15      	ldr	r3, [pc, #84]	; (8104458 <xPortStartScheduler+0x138>)
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	4a14      	ldr	r2, [pc, #80]	; (8104458 <xPortStartScheduler+0x138>)
 8104408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 810440c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810440e:	f000 f8dd 	bl	81045cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8104412:	4b12      	ldr	r3, [pc, #72]	; (810445c <xPortStartScheduler+0x13c>)
 8104414:	2200      	movs	r2, #0
 8104416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8104418:	f000 f8fc 	bl	8104614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810441c:	4b10      	ldr	r3, [pc, #64]	; (8104460 <xPortStartScheduler+0x140>)
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	4a0f      	ldr	r2, [pc, #60]	; (8104460 <xPortStartScheduler+0x140>)
 8104422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8104426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8104428:	f7ff ff66 	bl	81042f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810442c:	f001 f9fa 	bl	8105824 <vTaskSwitchContext>
	prvTaskExitError();
 8104430:	f7ff ff22 	bl	8104278 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8104434:	2300      	movs	r3, #0
}
 8104436:	4618      	mov	r0, r3
 8104438:	3718      	adds	r7, #24
 810443a:	46bd      	mov	sp, r7
 810443c:	bd80      	pop	{r7, pc}
 810443e:	bf00      	nop
 8104440:	e000ed00 	.word	0xe000ed00
 8104444:	410fc271 	.word	0x410fc271
 8104448:	410fc270 	.word	0x410fc270
 810444c:	e000e400 	.word	0xe000e400
 8104450:	100044c8 	.word	0x100044c8
 8104454:	100044cc 	.word	0x100044cc
 8104458:	e000ed20 	.word	0xe000ed20
 810445c:	10000010 	.word	0x10000010
 8104460:	e000ef34 	.word	0xe000ef34

08104464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8104464:	b480      	push	{r7}
 8104466:	b083      	sub	sp, #12
 8104468:	af00      	add	r7, sp, #0
	__asm volatile
 810446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810446e:	f383 8811 	msr	BASEPRI, r3
 8104472:	f3bf 8f6f 	isb	sy
 8104476:	f3bf 8f4f 	dsb	sy
 810447a:	607b      	str	r3, [r7, #4]
}
 810447c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810447e:	4b0f      	ldr	r3, [pc, #60]	; (81044bc <vPortEnterCritical+0x58>)
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	3301      	adds	r3, #1
 8104484:	4a0d      	ldr	r2, [pc, #52]	; (81044bc <vPortEnterCritical+0x58>)
 8104486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8104488:	4b0c      	ldr	r3, [pc, #48]	; (81044bc <vPortEnterCritical+0x58>)
 810448a:	681b      	ldr	r3, [r3, #0]
 810448c:	2b01      	cmp	r3, #1
 810448e:	d10f      	bne.n	81044b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8104490:	4b0b      	ldr	r3, [pc, #44]	; (81044c0 <vPortEnterCritical+0x5c>)
 8104492:	681b      	ldr	r3, [r3, #0]
 8104494:	b2db      	uxtb	r3, r3
 8104496:	2b00      	cmp	r3, #0
 8104498:	d00a      	beq.n	81044b0 <vPortEnterCritical+0x4c>
	__asm volatile
 810449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810449e:	f383 8811 	msr	BASEPRI, r3
 81044a2:	f3bf 8f6f 	isb	sy
 81044a6:	f3bf 8f4f 	dsb	sy
 81044aa:	603b      	str	r3, [r7, #0]
}
 81044ac:	bf00      	nop
 81044ae:	e7fe      	b.n	81044ae <vPortEnterCritical+0x4a>
	}
}
 81044b0:	bf00      	nop
 81044b2:	370c      	adds	r7, #12
 81044b4:	46bd      	mov	sp, r7
 81044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044ba:	4770      	bx	lr
 81044bc:	10000010 	.word	0x10000010
 81044c0:	e000ed04 	.word	0xe000ed04

081044c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 81044c4:	b480      	push	{r7}
 81044c6:	b083      	sub	sp, #12
 81044c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 81044ca:	4b12      	ldr	r3, [pc, #72]	; (8104514 <vPortExitCritical+0x50>)
 81044cc:	681b      	ldr	r3, [r3, #0]
 81044ce:	2b00      	cmp	r3, #0
 81044d0:	d10a      	bne.n	81044e8 <vPortExitCritical+0x24>
	__asm volatile
 81044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81044d6:	f383 8811 	msr	BASEPRI, r3
 81044da:	f3bf 8f6f 	isb	sy
 81044de:	f3bf 8f4f 	dsb	sy
 81044e2:	607b      	str	r3, [r7, #4]
}
 81044e4:	bf00      	nop
 81044e6:	e7fe      	b.n	81044e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 81044e8:	4b0a      	ldr	r3, [pc, #40]	; (8104514 <vPortExitCritical+0x50>)
 81044ea:	681b      	ldr	r3, [r3, #0]
 81044ec:	3b01      	subs	r3, #1
 81044ee:	4a09      	ldr	r2, [pc, #36]	; (8104514 <vPortExitCritical+0x50>)
 81044f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 81044f2:	4b08      	ldr	r3, [pc, #32]	; (8104514 <vPortExitCritical+0x50>)
 81044f4:	681b      	ldr	r3, [r3, #0]
 81044f6:	2b00      	cmp	r3, #0
 81044f8:	d105      	bne.n	8104506 <vPortExitCritical+0x42>
 81044fa:	2300      	movs	r3, #0
 81044fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81044fe:	683b      	ldr	r3, [r7, #0]
 8104500:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8104504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8104506:	bf00      	nop
 8104508:	370c      	adds	r7, #12
 810450a:	46bd      	mov	sp, r7
 810450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104510:	4770      	bx	lr
 8104512:	bf00      	nop
 8104514:	10000010 	.word	0x10000010
	...

08104520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8104520:	f3ef 8009 	mrs	r0, PSP
 8104524:	f3bf 8f6f 	isb	sy
 8104528:	4b15      	ldr	r3, [pc, #84]	; (8104580 <pxCurrentTCBConst>)
 810452a:	681a      	ldr	r2, [r3, #0]
 810452c:	f01e 0f10 	tst.w	lr, #16
 8104530:	bf08      	it	eq
 8104532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8104536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810453a:	6010      	str	r0, [r2, #0]
 810453c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8104540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8104544:	f380 8811 	msr	BASEPRI, r0
 8104548:	f3bf 8f4f 	dsb	sy
 810454c:	f3bf 8f6f 	isb	sy
 8104550:	f001 f968 	bl	8105824 <vTaskSwitchContext>
 8104554:	f04f 0000 	mov.w	r0, #0
 8104558:	f380 8811 	msr	BASEPRI, r0
 810455c:	bc09      	pop	{r0, r3}
 810455e:	6819      	ldr	r1, [r3, #0]
 8104560:	6808      	ldr	r0, [r1, #0]
 8104562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104566:	f01e 0f10 	tst.w	lr, #16
 810456a:	bf08      	it	eq
 810456c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8104570:	f380 8809 	msr	PSP, r0
 8104574:	f3bf 8f6f 	isb	sy
 8104578:	4770      	bx	lr
 810457a:	bf00      	nop
 810457c:	f3af 8000 	nop.w

08104580 <pxCurrentTCBConst>:
 8104580:	100044d0 	.word	0x100044d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8104584:	bf00      	nop
 8104586:	bf00      	nop

08104588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8104588:	b580      	push	{r7, lr}
 810458a:	b082      	sub	sp, #8
 810458c:	af00      	add	r7, sp, #0
	__asm volatile
 810458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104592:	f383 8811 	msr	BASEPRI, r3
 8104596:	f3bf 8f6f 	isb	sy
 810459a:	f3bf 8f4f 	dsb	sy
 810459e:	607b      	str	r3, [r7, #4]
}
 81045a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 81045a2:	f001 f885 	bl	81056b0 <xTaskIncrementTick>
 81045a6:	4603      	mov	r3, r0
 81045a8:	2b00      	cmp	r3, #0
 81045aa:	d003      	beq.n	81045b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 81045ac:	4b06      	ldr	r3, [pc, #24]	; (81045c8 <xPortSysTickHandler+0x40>)
 81045ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81045b2:	601a      	str	r2, [r3, #0]
 81045b4:	2300      	movs	r3, #0
 81045b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 81045b8:	683b      	ldr	r3, [r7, #0]
 81045ba:	f383 8811 	msr	BASEPRI, r3
}
 81045be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 81045c0:	bf00      	nop
 81045c2:	3708      	adds	r7, #8
 81045c4:	46bd      	mov	sp, r7
 81045c6:	bd80      	pop	{r7, pc}
 81045c8:	e000ed04 	.word	0xe000ed04

081045cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 81045cc:	b480      	push	{r7}
 81045ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 81045d0:	4b0b      	ldr	r3, [pc, #44]	; (8104600 <vPortSetupTimerInterrupt+0x34>)
 81045d2:	2200      	movs	r2, #0
 81045d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 81045d6:	4b0b      	ldr	r3, [pc, #44]	; (8104604 <vPortSetupTimerInterrupt+0x38>)
 81045d8:	2200      	movs	r2, #0
 81045da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 81045dc:	4b0a      	ldr	r3, [pc, #40]	; (8104608 <vPortSetupTimerInterrupt+0x3c>)
 81045de:	681b      	ldr	r3, [r3, #0]
 81045e0:	4a0a      	ldr	r2, [pc, #40]	; (810460c <vPortSetupTimerInterrupt+0x40>)
 81045e2:	fba2 2303 	umull	r2, r3, r2, r3
 81045e6:	099b      	lsrs	r3, r3, #6
 81045e8:	4a09      	ldr	r2, [pc, #36]	; (8104610 <vPortSetupTimerInterrupt+0x44>)
 81045ea:	3b01      	subs	r3, #1
 81045ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 81045ee:	4b04      	ldr	r3, [pc, #16]	; (8104600 <vPortSetupTimerInterrupt+0x34>)
 81045f0:	2207      	movs	r2, #7
 81045f2:	601a      	str	r2, [r3, #0]
}
 81045f4:	bf00      	nop
 81045f6:	46bd      	mov	sp, r7
 81045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045fc:	4770      	bx	lr
 81045fe:	bf00      	nop
 8104600:	e000e010 	.word	0xe000e010
 8104604:	e000e018 	.word	0xe000e018
 8104608:	10000004 	.word	0x10000004
 810460c:	10624dd3 	.word	0x10624dd3
 8104610:	e000e014 	.word	0xe000e014

08104614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8104614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8104624 <vPortEnableVFP+0x10>
 8104618:	6801      	ldr	r1, [r0, #0]
 810461a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810461e:	6001      	str	r1, [r0, #0]
 8104620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8104622:	bf00      	nop
 8104624:	e000ed88 	.word	0xe000ed88

08104628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8104628:	b480      	push	{r7}
 810462a:	b085      	sub	sp, #20
 810462c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810462e:	f3ef 8305 	mrs	r3, IPSR
 8104632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8104634:	68fb      	ldr	r3, [r7, #12]
 8104636:	2b0f      	cmp	r3, #15
 8104638:	d914      	bls.n	8104664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810463a:	4a17      	ldr	r2, [pc, #92]	; (8104698 <vPortValidateInterruptPriority+0x70>)
 810463c:	68fb      	ldr	r3, [r7, #12]
 810463e:	4413      	add	r3, r2
 8104640:	781b      	ldrb	r3, [r3, #0]
 8104642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8104644:	4b15      	ldr	r3, [pc, #84]	; (810469c <vPortValidateInterruptPriority+0x74>)
 8104646:	781b      	ldrb	r3, [r3, #0]
 8104648:	7afa      	ldrb	r2, [r7, #11]
 810464a:	429a      	cmp	r2, r3
 810464c:	d20a      	bcs.n	8104664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 810464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104652:	f383 8811 	msr	BASEPRI, r3
 8104656:	f3bf 8f6f 	isb	sy
 810465a:	f3bf 8f4f 	dsb	sy
 810465e:	607b      	str	r3, [r7, #4]
}
 8104660:	bf00      	nop
 8104662:	e7fe      	b.n	8104662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8104664:	4b0e      	ldr	r3, [pc, #56]	; (81046a0 <vPortValidateInterruptPriority+0x78>)
 8104666:	681b      	ldr	r3, [r3, #0]
 8104668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810466c:	4b0d      	ldr	r3, [pc, #52]	; (81046a4 <vPortValidateInterruptPriority+0x7c>)
 810466e:	681b      	ldr	r3, [r3, #0]
 8104670:	429a      	cmp	r2, r3
 8104672:	d90a      	bls.n	810468a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8104674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104678:	f383 8811 	msr	BASEPRI, r3
 810467c:	f3bf 8f6f 	isb	sy
 8104680:	f3bf 8f4f 	dsb	sy
 8104684:	603b      	str	r3, [r7, #0]
}
 8104686:	bf00      	nop
 8104688:	e7fe      	b.n	8104688 <vPortValidateInterruptPriority+0x60>
	}
 810468a:	bf00      	nop
 810468c:	3714      	adds	r7, #20
 810468e:	46bd      	mov	sp, r7
 8104690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104694:	4770      	bx	lr
 8104696:	bf00      	nop
 8104698:	e000e3f0 	.word	0xe000e3f0
 810469c:	100044c8 	.word	0x100044c8
 81046a0:	e000ed0c 	.word	0xe000ed0c
 81046a4:	100044cc 	.word	0x100044cc

081046a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 81046a8:	b580      	push	{r7, lr}
 81046aa:	b084      	sub	sp, #16
 81046ac:	af00      	add	r7, sp, #0
 81046ae:	6078      	str	r0, [r7, #4]
 81046b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 81046b6:	68fb      	ldr	r3, [r7, #12]
 81046b8:	2b00      	cmp	r3, #0
 81046ba:	d10a      	bne.n	81046d2 <xQueueGenericReset+0x2a>
	__asm volatile
 81046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81046c0:	f383 8811 	msr	BASEPRI, r3
 81046c4:	f3bf 8f6f 	isb	sy
 81046c8:	f3bf 8f4f 	dsb	sy
 81046cc:	60bb      	str	r3, [r7, #8]
}
 81046ce:	bf00      	nop
 81046d0:	e7fe      	b.n	81046d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 81046d2:	f7ff fec7 	bl	8104464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81046d6:	68fb      	ldr	r3, [r7, #12]
 81046d8:	681a      	ldr	r2, [r3, #0]
 81046da:	68fb      	ldr	r3, [r7, #12]
 81046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81046de:	68f9      	ldr	r1, [r7, #12]
 81046e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 81046e2:	fb01 f303 	mul.w	r3, r1, r3
 81046e6:	441a      	add	r2, r3
 81046e8:	68fb      	ldr	r3, [r7, #12]
 81046ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 81046ec:	68fb      	ldr	r3, [r7, #12]
 81046ee:	2200      	movs	r2, #0
 81046f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 81046f2:	68fb      	ldr	r3, [r7, #12]
 81046f4:	681a      	ldr	r2, [r3, #0]
 81046f6:	68fb      	ldr	r3, [r7, #12]
 81046f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81046fa:	68fb      	ldr	r3, [r7, #12]
 81046fc:	681a      	ldr	r2, [r3, #0]
 81046fe:	68fb      	ldr	r3, [r7, #12]
 8104700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104702:	3b01      	subs	r3, #1
 8104704:	68f9      	ldr	r1, [r7, #12]
 8104706:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8104708:	fb01 f303 	mul.w	r3, r1, r3
 810470c:	441a      	add	r2, r3
 810470e:	68fb      	ldr	r3, [r7, #12]
 8104710:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8104712:	68fb      	ldr	r3, [r7, #12]
 8104714:	22ff      	movs	r2, #255	; 0xff
 8104716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810471a:	68fb      	ldr	r3, [r7, #12]
 810471c:	22ff      	movs	r2, #255	; 0xff
 810471e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8104722:	683b      	ldr	r3, [r7, #0]
 8104724:	2b00      	cmp	r3, #0
 8104726:	d114      	bne.n	8104752 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8104728:	68fb      	ldr	r3, [r7, #12]
 810472a:	691b      	ldr	r3, [r3, #16]
 810472c:	2b00      	cmp	r3, #0
 810472e:	d01a      	beq.n	8104766 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8104730:	68fb      	ldr	r3, [r7, #12]
 8104732:	3310      	adds	r3, #16
 8104734:	4618      	mov	r0, r3
 8104736:	f001 f929 	bl	810598c <xTaskRemoveFromEventList>
 810473a:	4603      	mov	r3, r0
 810473c:	2b00      	cmp	r3, #0
 810473e:	d012      	beq.n	8104766 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8104740:	4b0c      	ldr	r3, [pc, #48]	; (8104774 <xQueueGenericReset+0xcc>)
 8104742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104746:	601a      	str	r2, [r3, #0]
 8104748:	f3bf 8f4f 	dsb	sy
 810474c:	f3bf 8f6f 	isb	sy
 8104750:	e009      	b.n	8104766 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8104752:	68fb      	ldr	r3, [r7, #12]
 8104754:	3310      	adds	r3, #16
 8104756:	4618      	mov	r0, r3
 8104758:	f7ff fca6 	bl	81040a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810475c:	68fb      	ldr	r3, [r7, #12]
 810475e:	3324      	adds	r3, #36	; 0x24
 8104760:	4618      	mov	r0, r3
 8104762:	f7ff fca1 	bl	81040a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8104766:	f7ff fead 	bl	81044c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810476a:	2301      	movs	r3, #1
}
 810476c:	4618      	mov	r0, r3
 810476e:	3710      	adds	r7, #16
 8104770:	46bd      	mov	sp, r7
 8104772:	bd80      	pop	{r7, pc}
 8104774:	e000ed04 	.word	0xe000ed04

08104778 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8104778:	b580      	push	{r7, lr}
 810477a:	b08e      	sub	sp, #56	; 0x38
 810477c:	af02      	add	r7, sp, #8
 810477e:	60f8      	str	r0, [r7, #12]
 8104780:	60b9      	str	r1, [r7, #8]
 8104782:	607a      	str	r2, [r7, #4]
 8104784:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8104786:	68fb      	ldr	r3, [r7, #12]
 8104788:	2b00      	cmp	r3, #0
 810478a:	d10a      	bne.n	81047a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 810478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104790:	f383 8811 	msr	BASEPRI, r3
 8104794:	f3bf 8f6f 	isb	sy
 8104798:	f3bf 8f4f 	dsb	sy
 810479c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810479e:	bf00      	nop
 81047a0:	e7fe      	b.n	81047a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 81047a2:	683b      	ldr	r3, [r7, #0]
 81047a4:	2b00      	cmp	r3, #0
 81047a6:	d10a      	bne.n	81047be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 81047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81047ac:	f383 8811 	msr	BASEPRI, r3
 81047b0:	f3bf 8f6f 	isb	sy
 81047b4:	f3bf 8f4f 	dsb	sy
 81047b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 81047ba:	bf00      	nop
 81047bc:	e7fe      	b.n	81047bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	2b00      	cmp	r3, #0
 81047c2:	d002      	beq.n	81047ca <xQueueGenericCreateStatic+0x52>
 81047c4:	68bb      	ldr	r3, [r7, #8]
 81047c6:	2b00      	cmp	r3, #0
 81047c8:	d001      	beq.n	81047ce <xQueueGenericCreateStatic+0x56>
 81047ca:	2301      	movs	r3, #1
 81047cc:	e000      	b.n	81047d0 <xQueueGenericCreateStatic+0x58>
 81047ce:	2300      	movs	r3, #0
 81047d0:	2b00      	cmp	r3, #0
 81047d2:	d10a      	bne.n	81047ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 81047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81047d8:	f383 8811 	msr	BASEPRI, r3
 81047dc:	f3bf 8f6f 	isb	sy
 81047e0:	f3bf 8f4f 	dsb	sy
 81047e4:	623b      	str	r3, [r7, #32]
}
 81047e6:	bf00      	nop
 81047e8:	e7fe      	b.n	81047e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 81047ea:	687b      	ldr	r3, [r7, #4]
 81047ec:	2b00      	cmp	r3, #0
 81047ee:	d102      	bne.n	81047f6 <xQueueGenericCreateStatic+0x7e>
 81047f0:	68bb      	ldr	r3, [r7, #8]
 81047f2:	2b00      	cmp	r3, #0
 81047f4:	d101      	bne.n	81047fa <xQueueGenericCreateStatic+0x82>
 81047f6:	2301      	movs	r3, #1
 81047f8:	e000      	b.n	81047fc <xQueueGenericCreateStatic+0x84>
 81047fa:	2300      	movs	r3, #0
 81047fc:	2b00      	cmp	r3, #0
 81047fe:	d10a      	bne.n	8104816 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8104800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104804:	f383 8811 	msr	BASEPRI, r3
 8104808:	f3bf 8f6f 	isb	sy
 810480c:	f3bf 8f4f 	dsb	sy
 8104810:	61fb      	str	r3, [r7, #28]
}
 8104812:	bf00      	nop
 8104814:	e7fe      	b.n	8104814 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8104816:	2350      	movs	r3, #80	; 0x50
 8104818:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810481a:	697b      	ldr	r3, [r7, #20]
 810481c:	2b50      	cmp	r3, #80	; 0x50
 810481e:	d00a      	beq.n	8104836 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8104820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104824:	f383 8811 	msr	BASEPRI, r3
 8104828:	f3bf 8f6f 	isb	sy
 810482c:	f3bf 8f4f 	dsb	sy
 8104830:	61bb      	str	r3, [r7, #24]
}
 8104832:	bf00      	nop
 8104834:	e7fe      	b.n	8104834 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8104836:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8104838:	683b      	ldr	r3, [r7, #0]
 810483a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 810483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810483e:	2b00      	cmp	r3, #0
 8104840:	d00d      	beq.n	810485e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8104842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104844:	2201      	movs	r2, #1
 8104846:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810484a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 810484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104850:	9300      	str	r3, [sp, #0]
 8104852:	4613      	mov	r3, r2
 8104854:	687a      	ldr	r2, [r7, #4]
 8104856:	68b9      	ldr	r1, [r7, #8]
 8104858:	68f8      	ldr	r0, [r7, #12]
 810485a:	f000 f805 	bl	8104868 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8104860:	4618      	mov	r0, r3
 8104862:	3730      	adds	r7, #48	; 0x30
 8104864:	46bd      	mov	sp, r7
 8104866:	bd80      	pop	{r7, pc}

08104868 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8104868:	b580      	push	{r7, lr}
 810486a:	b084      	sub	sp, #16
 810486c:	af00      	add	r7, sp, #0
 810486e:	60f8      	str	r0, [r7, #12]
 8104870:	60b9      	str	r1, [r7, #8]
 8104872:	607a      	str	r2, [r7, #4]
 8104874:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8104876:	68bb      	ldr	r3, [r7, #8]
 8104878:	2b00      	cmp	r3, #0
 810487a:	d103      	bne.n	8104884 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810487c:	69bb      	ldr	r3, [r7, #24]
 810487e:	69ba      	ldr	r2, [r7, #24]
 8104880:	601a      	str	r2, [r3, #0]
 8104882:	e002      	b.n	810488a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8104884:	69bb      	ldr	r3, [r7, #24]
 8104886:	687a      	ldr	r2, [r7, #4]
 8104888:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810488a:	69bb      	ldr	r3, [r7, #24]
 810488c:	68fa      	ldr	r2, [r7, #12]
 810488e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8104890:	69bb      	ldr	r3, [r7, #24]
 8104892:	68ba      	ldr	r2, [r7, #8]
 8104894:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8104896:	2101      	movs	r1, #1
 8104898:	69b8      	ldr	r0, [r7, #24]
 810489a:	f7ff ff05 	bl	81046a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810489e:	69bb      	ldr	r3, [r7, #24]
 81048a0:	78fa      	ldrb	r2, [r7, #3]
 81048a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 81048a6:	bf00      	nop
 81048a8:	3710      	adds	r7, #16
 81048aa:	46bd      	mov	sp, r7
 81048ac:	bd80      	pop	{r7, pc}
	...

081048b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 81048b0:	b580      	push	{r7, lr}
 81048b2:	b08e      	sub	sp, #56	; 0x38
 81048b4:	af00      	add	r7, sp, #0
 81048b6:	60f8      	str	r0, [r7, #12]
 81048b8:	60b9      	str	r1, [r7, #8]
 81048ba:	607a      	str	r2, [r7, #4]
 81048bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 81048be:	2300      	movs	r3, #0
 81048c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81048c2:	68fb      	ldr	r3, [r7, #12]
 81048c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 81048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81048c8:	2b00      	cmp	r3, #0
 81048ca:	d10a      	bne.n	81048e2 <xQueueGenericSend+0x32>
	__asm volatile
 81048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81048d0:	f383 8811 	msr	BASEPRI, r3
 81048d4:	f3bf 8f6f 	isb	sy
 81048d8:	f3bf 8f4f 	dsb	sy
 81048dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 81048de:	bf00      	nop
 81048e0:	e7fe      	b.n	81048e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81048e2:	68bb      	ldr	r3, [r7, #8]
 81048e4:	2b00      	cmp	r3, #0
 81048e6:	d103      	bne.n	81048f0 <xQueueGenericSend+0x40>
 81048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81048ec:	2b00      	cmp	r3, #0
 81048ee:	d101      	bne.n	81048f4 <xQueueGenericSend+0x44>
 81048f0:	2301      	movs	r3, #1
 81048f2:	e000      	b.n	81048f6 <xQueueGenericSend+0x46>
 81048f4:	2300      	movs	r3, #0
 81048f6:	2b00      	cmp	r3, #0
 81048f8:	d10a      	bne.n	8104910 <xQueueGenericSend+0x60>
	__asm volatile
 81048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81048fe:	f383 8811 	msr	BASEPRI, r3
 8104902:	f3bf 8f6f 	isb	sy
 8104906:	f3bf 8f4f 	dsb	sy
 810490a:	627b      	str	r3, [r7, #36]	; 0x24
}
 810490c:	bf00      	nop
 810490e:	e7fe      	b.n	810490e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8104910:	683b      	ldr	r3, [r7, #0]
 8104912:	2b02      	cmp	r3, #2
 8104914:	d103      	bne.n	810491e <xQueueGenericSend+0x6e>
 8104916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810491a:	2b01      	cmp	r3, #1
 810491c:	d101      	bne.n	8104922 <xQueueGenericSend+0x72>
 810491e:	2301      	movs	r3, #1
 8104920:	e000      	b.n	8104924 <xQueueGenericSend+0x74>
 8104922:	2300      	movs	r3, #0
 8104924:	2b00      	cmp	r3, #0
 8104926:	d10a      	bne.n	810493e <xQueueGenericSend+0x8e>
	__asm volatile
 8104928:	f04f 0350 	mov.w	r3, #80	; 0x50
 810492c:	f383 8811 	msr	BASEPRI, r3
 8104930:	f3bf 8f6f 	isb	sy
 8104934:	f3bf 8f4f 	dsb	sy
 8104938:	623b      	str	r3, [r7, #32]
}
 810493a:	bf00      	nop
 810493c:	e7fe      	b.n	810493c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810493e:	f001 f9e7 	bl	8105d10 <xTaskGetSchedulerState>
 8104942:	4603      	mov	r3, r0
 8104944:	2b00      	cmp	r3, #0
 8104946:	d102      	bne.n	810494e <xQueueGenericSend+0x9e>
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	2b00      	cmp	r3, #0
 810494c:	d101      	bne.n	8104952 <xQueueGenericSend+0xa2>
 810494e:	2301      	movs	r3, #1
 8104950:	e000      	b.n	8104954 <xQueueGenericSend+0xa4>
 8104952:	2300      	movs	r3, #0
 8104954:	2b00      	cmp	r3, #0
 8104956:	d10a      	bne.n	810496e <xQueueGenericSend+0xbe>
	__asm volatile
 8104958:	f04f 0350 	mov.w	r3, #80	; 0x50
 810495c:	f383 8811 	msr	BASEPRI, r3
 8104960:	f3bf 8f6f 	isb	sy
 8104964:	f3bf 8f4f 	dsb	sy
 8104968:	61fb      	str	r3, [r7, #28]
}
 810496a:	bf00      	nop
 810496c:	e7fe      	b.n	810496c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810496e:	f7ff fd79 	bl	8104464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8104972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8104976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810497a:	429a      	cmp	r2, r3
 810497c:	d302      	bcc.n	8104984 <xQueueGenericSend+0xd4>
 810497e:	683b      	ldr	r3, [r7, #0]
 8104980:	2b02      	cmp	r3, #2
 8104982:	d129      	bne.n	81049d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8104984:	683a      	ldr	r2, [r7, #0]
 8104986:	68b9      	ldr	r1, [r7, #8]
 8104988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810498a:	f000 fa0b 	bl	8104da4 <prvCopyDataToQueue>
 810498e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8104990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104994:	2b00      	cmp	r3, #0
 8104996:	d010      	beq.n	81049ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8104998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810499a:	3324      	adds	r3, #36	; 0x24
 810499c:	4618      	mov	r0, r3
 810499e:	f000 fff5 	bl	810598c <xTaskRemoveFromEventList>
 81049a2:	4603      	mov	r3, r0
 81049a4:	2b00      	cmp	r3, #0
 81049a6:	d013      	beq.n	81049d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 81049a8:	4b3f      	ldr	r3, [pc, #252]	; (8104aa8 <xQueueGenericSend+0x1f8>)
 81049aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81049ae:	601a      	str	r2, [r3, #0]
 81049b0:	f3bf 8f4f 	dsb	sy
 81049b4:	f3bf 8f6f 	isb	sy
 81049b8:	e00a      	b.n	81049d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 81049ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81049bc:	2b00      	cmp	r3, #0
 81049be:	d007      	beq.n	81049d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 81049c0:	4b39      	ldr	r3, [pc, #228]	; (8104aa8 <xQueueGenericSend+0x1f8>)
 81049c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81049c6:	601a      	str	r2, [r3, #0]
 81049c8:	f3bf 8f4f 	dsb	sy
 81049cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 81049d0:	f7ff fd78 	bl	81044c4 <vPortExitCritical>
				return pdPASS;
 81049d4:	2301      	movs	r3, #1
 81049d6:	e063      	b.n	8104aa0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81049d8:	687b      	ldr	r3, [r7, #4]
 81049da:	2b00      	cmp	r3, #0
 81049dc:	d103      	bne.n	81049e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81049de:	f7ff fd71 	bl	81044c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 81049e2:	2300      	movs	r3, #0
 81049e4:	e05c      	b.n	8104aa0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 81049e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81049e8:	2b00      	cmp	r3, #0
 81049ea:	d106      	bne.n	81049fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81049ec:	f107 0314 	add.w	r3, r7, #20
 81049f0:	4618      	mov	r0, r3
 81049f2:	f001 f82f 	bl	8105a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81049f6:	2301      	movs	r3, #1
 81049f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81049fa:	f7ff fd63 	bl	81044c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81049fe:	f000 fd9b 	bl	8105538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8104a02:	f7ff fd2f 	bl	8104464 <vPortEnterCritical>
 8104a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8104a0c:	b25b      	sxtb	r3, r3
 8104a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104a12:	d103      	bne.n	8104a1c <xQueueGenericSend+0x16c>
 8104a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a16:	2200      	movs	r2, #0
 8104a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8104a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8104a22:	b25b      	sxtb	r3, r3
 8104a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104a28:	d103      	bne.n	8104a32 <xQueueGenericSend+0x182>
 8104a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a2c:	2200      	movs	r2, #0
 8104a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8104a32:	f7ff fd47 	bl	81044c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8104a36:	1d3a      	adds	r2, r7, #4
 8104a38:	f107 0314 	add.w	r3, r7, #20
 8104a3c:	4611      	mov	r1, r2
 8104a3e:	4618      	mov	r0, r3
 8104a40:	f001 f81e 	bl	8105a80 <xTaskCheckForTimeOut>
 8104a44:	4603      	mov	r3, r0
 8104a46:	2b00      	cmp	r3, #0
 8104a48:	d124      	bne.n	8104a94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8104a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8104a4c:	f000 faa2 	bl	8104f94 <prvIsQueueFull>
 8104a50:	4603      	mov	r3, r0
 8104a52:	2b00      	cmp	r3, #0
 8104a54:	d018      	beq.n	8104a88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8104a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a58:	3310      	adds	r3, #16
 8104a5a:	687a      	ldr	r2, [r7, #4]
 8104a5c:	4611      	mov	r1, r2
 8104a5e:	4618      	mov	r0, r3
 8104a60:	f000 ff44 	bl	81058ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8104a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8104a66:	f000 fa2d 	bl	8104ec4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8104a6a:	f000 fd73 	bl	8105554 <xTaskResumeAll>
 8104a6e:	4603      	mov	r3, r0
 8104a70:	2b00      	cmp	r3, #0
 8104a72:	f47f af7c 	bne.w	810496e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8104a76:	4b0c      	ldr	r3, [pc, #48]	; (8104aa8 <xQueueGenericSend+0x1f8>)
 8104a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104a7c:	601a      	str	r2, [r3, #0]
 8104a7e:	f3bf 8f4f 	dsb	sy
 8104a82:	f3bf 8f6f 	isb	sy
 8104a86:	e772      	b.n	810496e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8104a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8104a8a:	f000 fa1b 	bl	8104ec4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8104a8e:	f000 fd61 	bl	8105554 <xTaskResumeAll>
 8104a92:	e76c      	b.n	810496e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8104a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8104a96:	f000 fa15 	bl	8104ec4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8104a9a:	f000 fd5b 	bl	8105554 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8104a9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8104aa0:	4618      	mov	r0, r3
 8104aa2:	3738      	adds	r7, #56	; 0x38
 8104aa4:	46bd      	mov	sp, r7
 8104aa6:	bd80      	pop	{r7, pc}
 8104aa8:	e000ed04 	.word	0xe000ed04

08104aac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8104aac:	b580      	push	{r7, lr}
 8104aae:	b090      	sub	sp, #64	; 0x40
 8104ab0:	af00      	add	r7, sp, #0
 8104ab2:	60f8      	str	r0, [r7, #12]
 8104ab4:	60b9      	str	r1, [r7, #8]
 8104ab6:	607a      	str	r2, [r7, #4]
 8104ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8104aba:	68fb      	ldr	r3, [r7, #12]
 8104abc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8104abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ac0:	2b00      	cmp	r3, #0
 8104ac2:	d10a      	bne.n	8104ada <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8104ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104ac8:	f383 8811 	msr	BASEPRI, r3
 8104acc:	f3bf 8f6f 	isb	sy
 8104ad0:	f3bf 8f4f 	dsb	sy
 8104ad4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8104ad6:	bf00      	nop
 8104ad8:	e7fe      	b.n	8104ad8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8104ada:	68bb      	ldr	r3, [r7, #8]
 8104adc:	2b00      	cmp	r3, #0
 8104ade:	d103      	bne.n	8104ae8 <xQueueGenericSendFromISR+0x3c>
 8104ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104ae4:	2b00      	cmp	r3, #0
 8104ae6:	d101      	bne.n	8104aec <xQueueGenericSendFromISR+0x40>
 8104ae8:	2301      	movs	r3, #1
 8104aea:	e000      	b.n	8104aee <xQueueGenericSendFromISR+0x42>
 8104aec:	2300      	movs	r3, #0
 8104aee:	2b00      	cmp	r3, #0
 8104af0:	d10a      	bne.n	8104b08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8104af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104af6:	f383 8811 	msr	BASEPRI, r3
 8104afa:	f3bf 8f6f 	isb	sy
 8104afe:	f3bf 8f4f 	dsb	sy
 8104b02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8104b04:	bf00      	nop
 8104b06:	e7fe      	b.n	8104b06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8104b08:	683b      	ldr	r3, [r7, #0]
 8104b0a:	2b02      	cmp	r3, #2
 8104b0c:	d103      	bne.n	8104b16 <xQueueGenericSendFromISR+0x6a>
 8104b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104b12:	2b01      	cmp	r3, #1
 8104b14:	d101      	bne.n	8104b1a <xQueueGenericSendFromISR+0x6e>
 8104b16:	2301      	movs	r3, #1
 8104b18:	e000      	b.n	8104b1c <xQueueGenericSendFromISR+0x70>
 8104b1a:	2300      	movs	r3, #0
 8104b1c:	2b00      	cmp	r3, #0
 8104b1e:	d10a      	bne.n	8104b36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8104b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104b24:	f383 8811 	msr	BASEPRI, r3
 8104b28:	f3bf 8f6f 	isb	sy
 8104b2c:	f3bf 8f4f 	dsb	sy
 8104b30:	623b      	str	r3, [r7, #32]
}
 8104b32:	bf00      	nop
 8104b34:	e7fe      	b.n	8104b34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8104b36:	f7ff fd77 	bl	8104628 <vPortValidateInterruptPriority>
	__asm volatile
 8104b3a:	f3ef 8211 	mrs	r2, BASEPRI
 8104b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104b42:	f383 8811 	msr	BASEPRI, r3
 8104b46:	f3bf 8f6f 	isb	sy
 8104b4a:	f3bf 8f4f 	dsb	sy
 8104b4e:	61fa      	str	r2, [r7, #28]
 8104b50:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8104b52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8104b54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8104b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8104b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104b5e:	429a      	cmp	r2, r3
 8104b60:	d302      	bcc.n	8104b68 <xQueueGenericSendFromISR+0xbc>
 8104b62:	683b      	ldr	r3, [r7, #0]
 8104b64:	2b02      	cmp	r3, #2
 8104b66:	d12f      	bne.n	8104bc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8104b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8104b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8104b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104b76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8104b78:	683a      	ldr	r2, [r7, #0]
 8104b7a:	68b9      	ldr	r1, [r7, #8]
 8104b7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8104b7e:	f000 f911 	bl	8104da4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8104b82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8104b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104b8a:	d112      	bne.n	8104bb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8104b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b90:	2b00      	cmp	r3, #0
 8104b92:	d016      	beq.n	8104bc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8104b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b96:	3324      	adds	r3, #36	; 0x24
 8104b98:	4618      	mov	r0, r3
 8104b9a:	f000 fef7 	bl	810598c <xTaskRemoveFromEventList>
 8104b9e:	4603      	mov	r3, r0
 8104ba0:	2b00      	cmp	r3, #0
 8104ba2:	d00e      	beq.n	8104bc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8104ba4:	687b      	ldr	r3, [r7, #4]
 8104ba6:	2b00      	cmp	r3, #0
 8104ba8:	d00b      	beq.n	8104bc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8104baa:	687b      	ldr	r3, [r7, #4]
 8104bac:	2201      	movs	r2, #1
 8104bae:	601a      	str	r2, [r3, #0]
 8104bb0:	e007      	b.n	8104bc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8104bb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8104bb6:	3301      	adds	r3, #1
 8104bb8:	b2db      	uxtb	r3, r3
 8104bba:	b25a      	sxtb	r2, r3
 8104bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8104bc2:	2301      	movs	r3, #1
 8104bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8104bc6:	e001      	b.n	8104bcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8104bc8:	2300      	movs	r3, #0
 8104bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104bce:	617b      	str	r3, [r7, #20]
	__asm volatile
 8104bd0:	697b      	ldr	r3, [r7, #20]
 8104bd2:	f383 8811 	msr	BASEPRI, r3
}
 8104bd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8104bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8104bda:	4618      	mov	r0, r3
 8104bdc:	3740      	adds	r7, #64	; 0x40
 8104bde:	46bd      	mov	sp, r7
 8104be0:	bd80      	pop	{r7, pc}
	...

08104be4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8104be4:	b580      	push	{r7, lr}
 8104be6:	b08c      	sub	sp, #48	; 0x30
 8104be8:	af00      	add	r7, sp, #0
 8104bea:	60f8      	str	r0, [r7, #12]
 8104bec:	60b9      	str	r1, [r7, #8]
 8104bee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8104bf0:	2300      	movs	r3, #0
 8104bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8104bf4:	68fb      	ldr	r3, [r7, #12]
 8104bf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8104bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104bfa:	2b00      	cmp	r3, #0
 8104bfc:	d10a      	bne.n	8104c14 <xQueueReceive+0x30>
	__asm volatile
 8104bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104c02:	f383 8811 	msr	BASEPRI, r3
 8104c06:	f3bf 8f6f 	isb	sy
 8104c0a:	f3bf 8f4f 	dsb	sy
 8104c0e:	623b      	str	r3, [r7, #32]
}
 8104c10:	bf00      	nop
 8104c12:	e7fe      	b.n	8104c12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8104c14:	68bb      	ldr	r3, [r7, #8]
 8104c16:	2b00      	cmp	r3, #0
 8104c18:	d103      	bne.n	8104c22 <xQueueReceive+0x3e>
 8104c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c1e:	2b00      	cmp	r3, #0
 8104c20:	d101      	bne.n	8104c26 <xQueueReceive+0x42>
 8104c22:	2301      	movs	r3, #1
 8104c24:	e000      	b.n	8104c28 <xQueueReceive+0x44>
 8104c26:	2300      	movs	r3, #0
 8104c28:	2b00      	cmp	r3, #0
 8104c2a:	d10a      	bne.n	8104c42 <xQueueReceive+0x5e>
	__asm volatile
 8104c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104c30:	f383 8811 	msr	BASEPRI, r3
 8104c34:	f3bf 8f6f 	isb	sy
 8104c38:	f3bf 8f4f 	dsb	sy
 8104c3c:	61fb      	str	r3, [r7, #28]
}
 8104c3e:	bf00      	nop
 8104c40:	e7fe      	b.n	8104c40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8104c42:	f001 f865 	bl	8105d10 <xTaskGetSchedulerState>
 8104c46:	4603      	mov	r3, r0
 8104c48:	2b00      	cmp	r3, #0
 8104c4a:	d102      	bne.n	8104c52 <xQueueReceive+0x6e>
 8104c4c:	687b      	ldr	r3, [r7, #4]
 8104c4e:	2b00      	cmp	r3, #0
 8104c50:	d101      	bne.n	8104c56 <xQueueReceive+0x72>
 8104c52:	2301      	movs	r3, #1
 8104c54:	e000      	b.n	8104c58 <xQueueReceive+0x74>
 8104c56:	2300      	movs	r3, #0
 8104c58:	2b00      	cmp	r3, #0
 8104c5a:	d10a      	bne.n	8104c72 <xQueueReceive+0x8e>
	__asm volatile
 8104c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104c60:	f383 8811 	msr	BASEPRI, r3
 8104c64:	f3bf 8f6f 	isb	sy
 8104c68:	f3bf 8f4f 	dsb	sy
 8104c6c:	61bb      	str	r3, [r7, #24]
}
 8104c6e:	bf00      	nop
 8104c70:	e7fe      	b.n	8104c70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8104c72:	f7ff fbf7 	bl	8104464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8104c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104c7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8104c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104c7e:	2b00      	cmp	r3, #0
 8104c80:	d01f      	beq.n	8104cc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8104c82:	68b9      	ldr	r1, [r7, #8]
 8104c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104c86:	f000 f8f7 	bl	8104e78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8104c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104c8c:	1e5a      	subs	r2, r3, #1
 8104c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104c90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8104c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104c94:	691b      	ldr	r3, [r3, #16]
 8104c96:	2b00      	cmp	r3, #0
 8104c98:	d00f      	beq.n	8104cba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8104c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104c9c:	3310      	adds	r3, #16
 8104c9e:	4618      	mov	r0, r3
 8104ca0:	f000 fe74 	bl	810598c <xTaskRemoveFromEventList>
 8104ca4:	4603      	mov	r3, r0
 8104ca6:	2b00      	cmp	r3, #0
 8104ca8:	d007      	beq.n	8104cba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8104caa:	4b3d      	ldr	r3, [pc, #244]	; (8104da0 <xQueueReceive+0x1bc>)
 8104cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104cb0:	601a      	str	r2, [r3, #0]
 8104cb2:	f3bf 8f4f 	dsb	sy
 8104cb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8104cba:	f7ff fc03 	bl	81044c4 <vPortExitCritical>
				return pdPASS;
 8104cbe:	2301      	movs	r3, #1
 8104cc0:	e069      	b.n	8104d96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8104cc2:	687b      	ldr	r3, [r7, #4]
 8104cc4:	2b00      	cmp	r3, #0
 8104cc6:	d103      	bne.n	8104cd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8104cc8:	f7ff fbfc 	bl	81044c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8104ccc:	2300      	movs	r3, #0
 8104cce:	e062      	b.n	8104d96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8104cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104cd2:	2b00      	cmp	r3, #0
 8104cd4:	d106      	bne.n	8104ce4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8104cd6:	f107 0310 	add.w	r3, r7, #16
 8104cda:	4618      	mov	r0, r3
 8104cdc:	f000 feba 	bl	8105a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8104ce0:	2301      	movs	r3, #1
 8104ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8104ce4:	f7ff fbee 	bl	81044c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8104ce8:	f000 fc26 	bl	8105538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8104cec:	f7ff fbba 	bl	8104464 <vPortEnterCritical>
 8104cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8104cf6:	b25b      	sxtb	r3, r3
 8104cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104cfc:	d103      	bne.n	8104d06 <xQueueReceive+0x122>
 8104cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104d00:	2200      	movs	r2, #0
 8104d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8104d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8104d0c:	b25b      	sxtb	r3, r3
 8104d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104d12:	d103      	bne.n	8104d1c <xQueueReceive+0x138>
 8104d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104d16:	2200      	movs	r2, #0
 8104d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8104d1c:	f7ff fbd2 	bl	81044c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8104d20:	1d3a      	adds	r2, r7, #4
 8104d22:	f107 0310 	add.w	r3, r7, #16
 8104d26:	4611      	mov	r1, r2
 8104d28:	4618      	mov	r0, r3
 8104d2a:	f000 fea9 	bl	8105a80 <xTaskCheckForTimeOut>
 8104d2e:	4603      	mov	r3, r0
 8104d30:	2b00      	cmp	r3, #0
 8104d32:	d123      	bne.n	8104d7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8104d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104d36:	f000 f917 	bl	8104f68 <prvIsQueueEmpty>
 8104d3a:	4603      	mov	r3, r0
 8104d3c:	2b00      	cmp	r3, #0
 8104d3e:	d017      	beq.n	8104d70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8104d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104d42:	3324      	adds	r3, #36	; 0x24
 8104d44:	687a      	ldr	r2, [r7, #4]
 8104d46:	4611      	mov	r1, r2
 8104d48:	4618      	mov	r0, r3
 8104d4a:	f000 fdcf 	bl	81058ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8104d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104d50:	f000 f8b8 	bl	8104ec4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8104d54:	f000 fbfe 	bl	8105554 <xTaskResumeAll>
 8104d58:	4603      	mov	r3, r0
 8104d5a:	2b00      	cmp	r3, #0
 8104d5c:	d189      	bne.n	8104c72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8104d5e:	4b10      	ldr	r3, [pc, #64]	; (8104da0 <xQueueReceive+0x1bc>)
 8104d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104d64:	601a      	str	r2, [r3, #0]
 8104d66:	f3bf 8f4f 	dsb	sy
 8104d6a:	f3bf 8f6f 	isb	sy
 8104d6e:	e780      	b.n	8104c72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8104d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104d72:	f000 f8a7 	bl	8104ec4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8104d76:	f000 fbed 	bl	8105554 <xTaskResumeAll>
 8104d7a:	e77a      	b.n	8104c72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8104d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104d7e:	f000 f8a1 	bl	8104ec4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8104d82:	f000 fbe7 	bl	8105554 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8104d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104d88:	f000 f8ee 	bl	8104f68 <prvIsQueueEmpty>
 8104d8c:	4603      	mov	r3, r0
 8104d8e:	2b00      	cmp	r3, #0
 8104d90:	f43f af6f 	beq.w	8104c72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8104d94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8104d96:	4618      	mov	r0, r3
 8104d98:	3730      	adds	r7, #48	; 0x30
 8104d9a:	46bd      	mov	sp, r7
 8104d9c:	bd80      	pop	{r7, pc}
 8104d9e:	bf00      	nop
 8104da0:	e000ed04 	.word	0xe000ed04

08104da4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8104da4:	b580      	push	{r7, lr}
 8104da6:	b086      	sub	sp, #24
 8104da8:	af00      	add	r7, sp, #0
 8104daa:	60f8      	str	r0, [r7, #12]
 8104dac:	60b9      	str	r1, [r7, #8]
 8104dae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8104db0:	2300      	movs	r3, #0
 8104db2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8104db4:	68fb      	ldr	r3, [r7, #12]
 8104db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104db8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8104dba:	68fb      	ldr	r3, [r7, #12]
 8104dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104dbe:	2b00      	cmp	r3, #0
 8104dc0:	d10d      	bne.n	8104dde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8104dc2:	68fb      	ldr	r3, [r7, #12]
 8104dc4:	681b      	ldr	r3, [r3, #0]
 8104dc6:	2b00      	cmp	r3, #0
 8104dc8:	d14d      	bne.n	8104e66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8104dca:	68fb      	ldr	r3, [r7, #12]
 8104dcc:	689b      	ldr	r3, [r3, #8]
 8104dce:	4618      	mov	r0, r3
 8104dd0:	f000 ffbc 	bl	8105d4c <xTaskPriorityDisinherit>
 8104dd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8104dd6:	68fb      	ldr	r3, [r7, #12]
 8104dd8:	2200      	movs	r2, #0
 8104dda:	609a      	str	r2, [r3, #8]
 8104ddc:	e043      	b.n	8104e66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	2b00      	cmp	r3, #0
 8104de2:	d119      	bne.n	8104e18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8104de4:	68fb      	ldr	r3, [r7, #12]
 8104de6:	6858      	ldr	r0, [r3, #4]
 8104de8:	68fb      	ldr	r3, [r7, #12]
 8104dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104dec:	461a      	mov	r2, r3
 8104dee:	68b9      	ldr	r1, [r7, #8]
 8104df0:	f004 f80e 	bl	8108e10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8104df4:	68fb      	ldr	r3, [r7, #12]
 8104df6:	685a      	ldr	r2, [r3, #4]
 8104df8:	68fb      	ldr	r3, [r7, #12]
 8104dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104dfc:	441a      	add	r2, r3
 8104dfe:	68fb      	ldr	r3, [r7, #12]
 8104e00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8104e02:	68fb      	ldr	r3, [r7, #12]
 8104e04:	685a      	ldr	r2, [r3, #4]
 8104e06:	68fb      	ldr	r3, [r7, #12]
 8104e08:	689b      	ldr	r3, [r3, #8]
 8104e0a:	429a      	cmp	r2, r3
 8104e0c:	d32b      	bcc.n	8104e66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8104e0e:	68fb      	ldr	r3, [r7, #12]
 8104e10:	681a      	ldr	r2, [r3, #0]
 8104e12:	68fb      	ldr	r3, [r7, #12]
 8104e14:	605a      	str	r2, [r3, #4]
 8104e16:	e026      	b.n	8104e66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8104e18:	68fb      	ldr	r3, [r7, #12]
 8104e1a:	68d8      	ldr	r0, [r3, #12]
 8104e1c:	68fb      	ldr	r3, [r7, #12]
 8104e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104e20:	461a      	mov	r2, r3
 8104e22:	68b9      	ldr	r1, [r7, #8]
 8104e24:	f003 fff4 	bl	8108e10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8104e28:	68fb      	ldr	r3, [r7, #12]
 8104e2a:	68da      	ldr	r2, [r3, #12]
 8104e2c:	68fb      	ldr	r3, [r7, #12]
 8104e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104e30:	425b      	negs	r3, r3
 8104e32:	441a      	add	r2, r3
 8104e34:	68fb      	ldr	r3, [r7, #12]
 8104e36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8104e38:	68fb      	ldr	r3, [r7, #12]
 8104e3a:	68da      	ldr	r2, [r3, #12]
 8104e3c:	68fb      	ldr	r3, [r7, #12]
 8104e3e:	681b      	ldr	r3, [r3, #0]
 8104e40:	429a      	cmp	r2, r3
 8104e42:	d207      	bcs.n	8104e54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8104e44:	68fb      	ldr	r3, [r7, #12]
 8104e46:	689a      	ldr	r2, [r3, #8]
 8104e48:	68fb      	ldr	r3, [r7, #12]
 8104e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104e4c:	425b      	negs	r3, r3
 8104e4e:	441a      	add	r2, r3
 8104e50:	68fb      	ldr	r3, [r7, #12]
 8104e52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8104e54:	687b      	ldr	r3, [r7, #4]
 8104e56:	2b02      	cmp	r3, #2
 8104e58:	d105      	bne.n	8104e66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8104e5a:	693b      	ldr	r3, [r7, #16]
 8104e5c:	2b00      	cmp	r3, #0
 8104e5e:	d002      	beq.n	8104e66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8104e60:	693b      	ldr	r3, [r7, #16]
 8104e62:	3b01      	subs	r3, #1
 8104e64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8104e66:	693b      	ldr	r3, [r7, #16]
 8104e68:	1c5a      	adds	r2, r3, #1
 8104e6a:	68fb      	ldr	r3, [r7, #12]
 8104e6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8104e6e:	697b      	ldr	r3, [r7, #20]
}
 8104e70:	4618      	mov	r0, r3
 8104e72:	3718      	adds	r7, #24
 8104e74:	46bd      	mov	sp, r7
 8104e76:	bd80      	pop	{r7, pc}

08104e78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8104e78:	b580      	push	{r7, lr}
 8104e7a:	b082      	sub	sp, #8
 8104e7c:	af00      	add	r7, sp, #0
 8104e7e:	6078      	str	r0, [r7, #4]
 8104e80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8104e82:	687b      	ldr	r3, [r7, #4]
 8104e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104e86:	2b00      	cmp	r3, #0
 8104e88:	d018      	beq.n	8104ebc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8104e8a:	687b      	ldr	r3, [r7, #4]
 8104e8c:	68da      	ldr	r2, [r3, #12]
 8104e8e:	687b      	ldr	r3, [r7, #4]
 8104e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104e92:	441a      	add	r2, r3
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	68da      	ldr	r2, [r3, #12]
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	689b      	ldr	r3, [r3, #8]
 8104ea0:	429a      	cmp	r2, r3
 8104ea2:	d303      	bcc.n	8104eac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	681a      	ldr	r2, [r3, #0]
 8104ea8:	687b      	ldr	r3, [r7, #4]
 8104eaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	68d9      	ldr	r1, [r3, #12]
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104eb4:	461a      	mov	r2, r3
 8104eb6:	6838      	ldr	r0, [r7, #0]
 8104eb8:	f003 ffaa 	bl	8108e10 <memcpy>
	}
}
 8104ebc:	bf00      	nop
 8104ebe:	3708      	adds	r7, #8
 8104ec0:	46bd      	mov	sp, r7
 8104ec2:	bd80      	pop	{r7, pc}

08104ec4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8104ec4:	b580      	push	{r7, lr}
 8104ec6:	b084      	sub	sp, #16
 8104ec8:	af00      	add	r7, sp, #0
 8104eca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8104ecc:	f7ff faca 	bl	8104464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8104ed0:	687b      	ldr	r3, [r7, #4]
 8104ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8104ed6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8104ed8:	e011      	b.n	8104efe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8104eda:	687b      	ldr	r3, [r7, #4]
 8104edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104ede:	2b00      	cmp	r3, #0
 8104ee0:	d012      	beq.n	8104f08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8104ee2:	687b      	ldr	r3, [r7, #4]
 8104ee4:	3324      	adds	r3, #36	; 0x24
 8104ee6:	4618      	mov	r0, r3
 8104ee8:	f000 fd50 	bl	810598c <xTaskRemoveFromEventList>
 8104eec:	4603      	mov	r3, r0
 8104eee:	2b00      	cmp	r3, #0
 8104ef0:	d001      	beq.n	8104ef6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8104ef2:	f000 fe27 	bl	8105b44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8104ef6:	7bfb      	ldrb	r3, [r7, #15]
 8104ef8:	3b01      	subs	r3, #1
 8104efa:	b2db      	uxtb	r3, r3
 8104efc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8104efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8104f02:	2b00      	cmp	r3, #0
 8104f04:	dce9      	bgt.n	8104eda <prvUnlockQueue+0x16>
 8104f06:	e000      	b.n	8104f0a <prvUnlockQueue+0x46>
					break;
 8104f08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	22ff      	movs	r2, #255	; 0xff
 8104f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8104f12:	f7ff fad7 	bl	81044c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8104f16:	f7ff faa5 	bl	8104464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8104f1a:	687b      	ldr	r3, [r7, #4]
 8104f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8104f20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8104f22:	e011      	b.n	8104f48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	691b      	ldr	r3, [r3, #16]
 8104f28:	2b00      	cmp	r3, #0
 8104f2a:	d012      	beq.n	8104f52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8104f2c:	687b      	ldr	r3, [r7, #4]
 8104f2e:	3310      	adds	r3, #16
 8104f30:	4618      	mov	r0, r3
 8104f32:	f000 fd2b 	bl	810598c <xTaskRemoveFromEventList>
 8104f36:	4603      	mov	r3, r0
 8104f38:	2b00      	cmp	r3, #0
 8104f3a:	d001      	beq.n	8104f40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8104f3c:	f000 fe02 	bl	8105b44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8104f40:	7bbb      	ldrb	r3, [r7, #14]
 8104f42:	3b01      	subs	r3, #1
 8104f44:	b2db      	uxtb	r3, r3
 8104f46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8104f48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8104f4c:	2b00      	cmp	r3, #0
 8104f4e:	dce9      	bgt.n	8104f24 <prvUnlockQueue+0x60>
 8104f50:	e000      	b.n	8104f54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8104f52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8104f54:	687b      	ldr	r3, [r7, #4]
 8104f56:	22ff      	movs	r2, #255	; 0xff
 8104f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8104f5c:	f7ff fab2 	bl	81044c4 <vPortExitCritical>
}
 8104f60:	bf00      	nop
 8104f62:	3710      	adds	r7, #16
 8104f64:	46bd      	mov	sp, r7
 8104f66:	bd80      	pop	{r7, pc}

08104f68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8104f68:	b580      	push	{r7, lr}
 8104f6a:	b084      	sub	sp, #16
 8104f6c:	af00      	add	r7, sp, #0
 8104f6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8104f70:	f7ff fa78 	bl	8104464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8104f74:	687b      	ldr	r3, [r7, #4]
 8104f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104f78:	2b00      	cmp	r3, #0
 8104f7a:	d102      	bne.n	8104f82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8104f7c:	2301      	movs	r3, #1
 8104f7e:	60fb      	str	r3, [r7, #12]
 8104f80:	e001      	b.n	8104f86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8104f82:	2300      	movs	r3, #0
 8104f84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8104f86:	f7ff fa9d 	bl	81044c4 <vPortExitCritical>

	return xReturn;
 8104f8a:	68fb      	ldr	r3, [r7, #12]
}
 8104f8c:	4618      	mov	r0, r3
 8104f8e:	3710      	adds	r7, #16
 8104f90:	46bd      	mov	sp, r7
 8104f92:	bd80      	pop	{r7, pc}

08104f94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8104f94:	b580      	push	{r7, lr}
 8104f96:	b084      	sub	sp, #16
 8104f98:	af00      	add	r7, sp, #0
 8104f9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8104f9c:	f7ff fa62 	bl	8104464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104fa8:	429a      	cmp	r2, r3
 8104faa:	d102      	bne.n	8104fb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8104fac:	2301      	movs	r3, #1
 8104fae:	60fb      	str	r3, [r7, #12]
 8104fb0:	e001      	b.n	8104fb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8104fb2:	2300      	movs	r3, #0
 8104fb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8104fb6:	f7ff fa85 	bl	81044c4 <vPortExitCritical>

	return xReturn;
 8104fba:	68fb      	ldr	r3, [r7, #12]
}
 8104fbc:	4618      	mov	r0, r3
 8104fbe:	3710      	adds	r7, #16
 8104fc0:	46bd      	mov	sp, r7
 8104fc2:	bd80      	pop	{r7, pc}

08104fc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8104fc4:	b480      	push	{r7}
 8104fc6:	b085      	sub	sp, #20
 8104fc8:	af00      	add	r7, sp, #0
 8104fca:	6078      	str	r0, [r7, #4]
 8104fcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8104fce:	2300      	movs	r3, #0
 8104fd0:	60fb      	str	r3, [r7, #12]
 8104fd2:	e014      	b.n	8104ffe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8104fd4:	4a0f      	ldr	r2, [pc, #60]	; (8105014 <vQueueAddToRegistry+0x50>)
 8104fd6:	68fb      	ldr	r3, [r7, #12]
 8104fd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8104fdc:	2b00      	cmp	r3, #0
 8104fde:	d10b      	bne.n	8104ff8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8104fe0:	490c      	ldr	r1, [pc, #48]	; (8105014 <vQueueAddToRegistry+0x50>)
 8104fe2:	68fb      	ldr	r3, [r7, #12]
 8104fe4:	683a      	ldr	r2, [r7, #0]
 8104fe6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8104fea:	4a0a      	ldr	r2, [pc, #40]	; (8105014 <vQueueAddToRegistry+0x50>)
 8104fec:	68fb      	ldr	r3, [r7, #12]
 8104fee:	00db      	lsls	r3, r3, #3
 8104ff0:	4413      	add	r3, r2
 8104ff2:	687a      	ldr	r2, [r7, #4]
 8104ff4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8104ff6:	e006      	b.n	8105006 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8104ff8:	68fb      	ldr	r3, [r7, #12]
 8104ffa:	3301      	adds	r3, #1
 8104ffc:	60fb      	str	r3, [r7, #12]
 8104ffe:	68fb      	ldr	r3, [r7, #12]
 8105000:	2b07      	cmp	r3, #7
 8105002:	d9e7      	bls.n	8104fd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8105004:	bf00      	nop
 8105006:	bf00      	nop
 8105008:	3714      	adds	r7, #20
 810500a:	46bd      	mov	sp, r7
 810500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105010:	4770      	bx	lr
 8105012:	bf00      	nop
 8105014:	10004cd4 	.word	0x10004cd4

08105018 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8105018:	b580      	push	{r7, lr}
 810501a:	b086      	sub	sp, #24
 810501c:	af00      	add	r7, sp, #0
 810501e:	60f8      	str	r0, [r7, #12]
 8105020:	60b9      	str	r1, [r7, #8]
 8105022:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8105024:	68fb      	ldr	r3, [r7, #12]
 8105026:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8105028:	f7ff fa1c 	bl	8104464 <vPortEnterCritical>
 810502c:	697b      	ldr	r3, [r7, #20]
 810502e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8105032:	b25b      	sxtb	r3, r3
 8105034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105038:	d103      	bne.n	8105042 <vQueueWaitForMessageRestricted+0x2a>
 810503a:	697b      	ldr	r3, [r7, #20]
 810503c:	2200      	movs	r2, #0
 810503e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105042:	697b      	ldr	r3, [r7, #20]
 8105044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8105048:	b25b      	sxtb	r3, r3
 810504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810504e:	d103      	bne.n	8105058 <vQueueWaitForMessageRestricted+0x40>
 8105050:	697b      	ldr	r3, [r7, #20]
 8105052:	2200      	movs	r2, #0
 8105054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105058:	f7ff fa34 	bl	81044c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810505c:	697b      	ldr	r3, [r7, #20]
 810505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105060:	2b00      	cmp	r3, #0
 8105062:	d106      	bne.n	8105072 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8105064:	697b      	ldr	r3, [r7, #20]
 8105066:	3324      	adds	r3, #36	; 0x24
 8105068:	687a      	ldr	r2, [r7, #4]
 810506a:	68b9      	ldr	r1, [r7, #8]
 810506c:	4618      	mov	r0, r3
 810506e:	f000 fc61 	bl	8105934 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8105072:	6978      	ldr	r0, [r7, #20]
 8105074:	f7ff ff26 	bl	8104ec4 <prvUnlockQueue>
	}
 8105078:	bf00      	nop
 810507a:	3718      	adds	r7, #24
 810507c:	46bd      	mov	sp, r7
 810507e:	bd80      	pop	{r7, pc}

08105080 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8105080:	b580      	push	{r7, lr}
 8105082:	b08e      	sub	sp, #56	; 0x38
 8105084:	af04      	add	r7, sp, #16
 8105086:	60f8      	str	r0, [r7, #12]
 8105088:	60b9      	str	r1, [r7, #8]
 810508a:	607a      	str	r2, [r7, #4]
 810508c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105090:	2b00      	cmp	r3, #0
 8105092:	d10a      	bne.n	81050aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8105094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105098:	f383 8811 	msr	BASEPRI, r3
 810509c:	f3bf 8f6f 	isb	sy
 81050a0:	f3bf 8f4f 	dsb	sy
 81050a4:	623b      	str	r3, [r7, #32]
}
 81050a6:	bf00      	nop
 81050a8:	e7fe      	b.n	81050a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 81050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050ac:	2b00      	cmp	r3, #0
 81050ae:	d10a      	bne.n	81050c6 <xTaskCreateStatic+0x46>
	__asm volatile
 81050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81050b4:	f383 8811 	msr	BASEPRI, r3
 81050b8:	f3bf 8f6f 	isb	sy
 81050bc:	f3bf 8f4f 	dsb	sy
 81050c0:	61fb      	str	r3, [r7, #28]
}
 81050c2:	bf00      	nop
 81050c4:	e7fe      	b.n	81050c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81050c6:	23bc      	movs	r3, #188	; 0xbc
 81050c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81050ca:	693b      	ldr	r3, [r7, #16]
 81050cc:	2bbc      	cmp	r3, #188	; 0xbc
 81050ce:	d00a      	beq.n	81050e6 <xTaskCreateStatic+0x66>
	__asm volatile
 81050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81050d4:	f383 8811 	msr	BASEPRI, r3
 81050d8:	f3bf 8f6f 	isb	sy
 81050dc:	f3bf 8f4f 	dsb	sy
 81050e0:	61bb      	str	r3, [r7, #24]
}
 81050e2:	bf00      	nop
 81050e4:	e7fe      	b.n	81050e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81050e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050ea:	2b00      	cmp	r3, #0
 81050ec:	d01e      	beq.n	810512c <xTaskCreateStatic+0xac>
 81050ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81050f0:	2b00      	cmp	r3, #0
 81050f2:	d01b      	beq.n	810512c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81050f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81050fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81050fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105100:	2202      	movs	r2, #2
 8105102:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8105106:	2300      	movs	r3, #0
 8105108:	9303      	str	r3, [sp, #12]
 810510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810510c:	9302      	str	r3, [sp, #8]
 810510e:	f107 0314 	add.w	r3, r7, #20
 8105112:	9301      	str	r3, [sp, #4]
 8105114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105116:	9300      	str	r3, [sp, #0]
 8105118:	683b      	ldr	r3, [r7, #0]
 810511a:	687a      	ldr	r2, [r7, #4]
 810511c:	68b9      	ldr	r1, [r7, #8]
 810511e:	68f8      	ldr	r0, [r7, #12]
 8105120:	f000 f850 	bl	81051c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8105124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8105126:	f000 f8f3 	bl	8105310 <prvAddNewTaskToReadyList>
 810512a:	e001      	b.n	8105130 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 810512c:	2300      	movs	r3, #0
 810512e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8105130:	697b      	ldr	r3, [r7, #20]
	}
 8105132:	4618      	mov	r0, r3
 8105134:	3728      	adds	r7, #40	; 0x28
 8105136:	46bd      	mov	sp, r7
 8105138:	bd80      	pop	{r7, pc}

0810513a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810513a:	b580      	push	{r7, lr}
 810513c:	b08c      	sub	sp, #48	; 0x30
 810513e:	af04      	add	r7, sp, #16
 8105140:	60f8      	str	r0, [r7, #12]
 8105142:	60b9      	str	r1, [r7, #8]
 8105144:	603b      	str	r3, [r7, #0]
 8105146:	4613      	mov	r3, r2
 8105148:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810514a:	88fb      	ldrh	r3, [r7, #6]
 810514c:	009b      	lsls	r3, r3, #2
 810514e:	4618      	mov	r0, r3
 8105150:	f7fe ff4c 	bl	8103fec <pvPortMalloc>
 8105154:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8105156:	697b      	ldr	r3, [r7, #20]
 8105158:	2b00      	cmp	r3, #0
 810515a:	d00e      	beq.n	810517a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810515c:	20bc      	movs	r0, #188	; 0xbc
 810515e:	f7fe ff45 	bl	8103fec <pvPortMalloc>
 8105162:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8105164:	69fb      	ldr	r3, [r7, #28]
 8105166:	2b00      	cmp	r3, #0
 8105168:	d003      	beq.n	8105172 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810516a:	69fb      	ldr	r3, [r7, #28]
 810516c:	697a      	ldr	r2, [r7, #20]
 810516e:	631a      	str	r2, [r3, #48]	; 0x30
 8105170:	e005      	b.n	810517e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8105172:	6978      	ldr	r0, [r7, #20]
 8105174:	f7fe ff80 	bl	8104078 <vPortFree>
 8105178:	e001      	b.n	810517e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810517a:	2300      	movs	r3, #0
 810517c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810517e:	69fb      	ldr	r3, [r7, #28]
 8105180:	2b00      	cmp	r3, #0
 8105182:	d017      	beq.n	81051b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8105184:	69fb      	ldr	r3, [r7, #28]
 8105186:	2200      	movs	r2, #0
 8105188:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810518c:	88fa      	ldrh	r2, [r7, #6]
 810518e:	2300      	movs	r3, #0
 8105190:	9303      	str	r3, [sp, #12]
 8105192:	69fb      	ldr	r3, [r7, #28]
 8105194:	9302      	str	r3, [sp, #8]
 8105196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105198:	9301      	str	r3, [sp, #4]
 810519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810519c:	9300      	str	r3, [sp, #0]
 810519e:	683b      	ldr	r3, [r7, #0]
 81051a0:	68b9      	ldr	r1, [r7, #8]
 81051a2:	68f8      	ldr	r0, [r7, #12]
 81051a4:	f000 f80e 	bl	81051c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81051a8:	69f8      	ldr	r0, [r7, #28]
 81051aa:	f000 f8b1 	bl	8105310 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81051ae:	2301      	movs	r3, #1
 81051b0:	61bb      	str	r3, [r7, #24]
 81051b2:	e002      	b.n	81051ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81051b4:	f04f 33ff 	mov.w	r3, #4294967295
 81051b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81051ba:	69bb      	ldr	r3, [r7, #24]
	}
 81051bc:	4618      	mov	r0, r3
 81051be:	3720      	adds	r7, #32
 81051c0:	46bd      	mov	sp, r7
 81051c2:	bd80      	pop	{r7, pc}

081051c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81051c4:	b580      	push	{r7, lr}
 81051c6:	b088      	sub	sp, #32
 81051c8:	af00      	add	r7, sp, #0
 81051ca:	60f8      	str	r0, [r7, #12]
 81051cc:	60b9      	str	r1, [r7, #8]
 81051ce:	607a      	str	r2, [r7, #4]
 81051d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81051d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	009b      	lsls	r3, r3, #2
 81051da:	461a      	mov	r2, r3
 81051dc:	21a5      	movs	r1, #165	; 0xa5
 81051de:	f003 fe25 	bl	8108e2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81051e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81051e6:	687b      	ldr	r3, [r7, #4]
 81051e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 81051ec:	3b01      	subs	r3, #1
 81051ee:	009b      	lsls	r3, r3, #2
 81051f0:	4413      	add	r3, r2
 81051f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81051f4:	69bb      	ldr	r3, [r7, #24]
 81051f6:	f023 0307 	bic.w	r3, r3, #7
 81051fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81051fc:	69bb      	ldr	r3, [r7, #24]
 81051fe:	f003 0307 	and.w	r3, r3, #7
 8105202:	2b00      	cmp	r3, #0
 8105204:	d00a      	beq.n	810521c <prvInitialiseNewTask+0x58>
	__asm volatile
 8105206:	f04f 0350 	mov.w	r3, #80	; 0x50
 810520a:	f383 8811 	msr	BASEPRI, r3
 810520e:	f3bf 8f6f 	isb	sy
 8105212:	f3bf 8f4f 	dsb	sy
 8105216:	617b      	str	r3, [r7, #20]
}
 8105218:	bf00      	nop
 810521a:	e7fe      	b.n	810521a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810521c:	68bb      	ldr	r3, [r7, #8]
 810521e:	2b00      	cmp	r3, #0
 8105220:	d01f      	beq.n	8105262 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8105222:	2300      	movs	r3, #0
 8105224:	61fb      	str	r3, [r7, #28]
 8105226:	e012      	b.n	810524e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8105228:	68ba      	ldr	r2, [r7, #8]
 810522a:	69fb      	ldr	r3, [r7, #28]
 810522c:	4413      	add	r3, r2
 810522e:	7819      	ldrb	r1, [r3, #0]
 8105230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105232:	69fb      	ldr	r3, [r7, #28]
 8105234:	4413      	add	r3, r2
 8105236:	3334      	adds	r3, #52	; 0x34
 8105238:	460a      	mov	r2, r1
 810523a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810523c:	68ba      	ldr	r2, [r7, #8]
 810523e:	69fb      	ldr	r3, [r7, #28]
 8105240:	4413      	add	r3, r2
 8105242:	781b      	ldrb	r3, [r3, #0]
 8105244:	2b00      	cmp	r3, #0
 8105246:	d006      	beq.n	8105256 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8105248:	69fb      	ldr	r3, [r7, #28]
 810524a:	3301      	adds	r3, #1
 810524c:	61fb      	str	r3, [r7, #28]
 810524e:	69fb      	ldr	r3, [r7, #28]
 8105250:	2b0f      	cmp	r3, #15
 8105252:	d9e9      	bls.n	8105228 <prvInitialiseNewTask+0x64>
 8105254:	e000      	b.n	8105258 <prvInitialiseNewTask+0x94>
			{
				break;
 8105256:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8105258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810525a:	2200      	movs	r2, #0
 810525c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8105260:	e003      	b.n	810526a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8105262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105264:	2200      	movs	r2, #0
 8105266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810526c:	2b37      	cmp	r3, #55	; 0x37
 810526e:	d901      	bls.n	8105274 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8105270:	2337      	movs	r3, #55	; 0x37
 8105272:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8105274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105278:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810527c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810527e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8105280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105282:	2200      	movs	r2, #0
 8105284:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8105286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105288:	3304      	adds	r3, #4
 810528a:	4618      	mov	r0, r3
 810528c:	f7fe ff2c 	bl	81040e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8105290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105292:	3318      	adds	r3, #24
 8105294:	4618      	mov	r0, r3
 8105296:	f7fe ff27 	bl	81040e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810529c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810529e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81052a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 81052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81052ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052b2:	2200      	movs	r2, #0
 81052b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052ba:	2200      	movs	r2, #0
 81052bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 81052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052c2:	3354      	adds	r3, #84	; 0x54
 81052c4:	2260      	movs	r2, #96	; 0x60
 81052c6:	2100      	movs	r1, #0
 81052c8:	4618      	mov	r0, r3
 81052ca:	f003 fdaf 	bl	8108e2c <memset>
 81052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052d0:	4a0c      	ldr	r2, [pc, #48]	; (8105304 <prvInitialiseNewTask+0x140>)
 81052d2:	659a      	str	r2, [r3, #88]	; 0x58
 81052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052d6:	4a0c      	ldr	r2, [pc, #48]	; (8105308 <prvInitialiseNewTask+0x144>)
 81052d8:	65da      	str	r2, [r3, #92]	; 0x5c
 81052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052dc:	4a0b      	ldr	r2, [pc, #44]	; (810530c <prvInitialiseNewTask+0x148>)
 81052de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81052e0:	683a      	ldr	r2, [r7, #0]
 81052e2:	68f9      	ldr	r1, [r7, #12]
 81052e4:	69b8      	ldr	r0, [r7, #24]
 81052e6:	f7fe ff93 	bl	8104210 <pxPortInitialiseStack>
 81052ea:	4602      	mov	r2, r0
 81052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81052f2:	2b00      	cmp	r3, #0
 81052f4:	d002      	beq.n	81052fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81052f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81052fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81052fc:	bf00      	nop
 81052fe:	3720      	adds	r7, #32
 8105300:	46bd      	mov	sp, r7
 8105302:	bd80      	pop	{r7, pc}
 8105304:	08109f9c 	.word	0x08109f9c
 8105308:	08109fbc 	.word	0x08109fbc
 810530c:	08109f7c 	.word	0x08109f7c

08105310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8105310:	b580      	push	{r7, lr}
 8105312:	b082      	sub	sp, #8
 8105314:	af00      	add	r7, sp, #0
 8105316:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8105318:	f7ff f8a4 	bl	8104464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810531c:	4b2d      	ldr	r3, [pc, #180]	; (81053d4 <prvAddNewTaskToReadyList+0xc4>)
 810531e:	681b      	ldr	r3, [r3, #0]
 8105320:	3301      	adds	r3, #1
 8105322:	4a2c      	ldr	r2, [pc, #176]	; (81053d4 <prvAddNewTaskToReadyList+0xc4>)
 8105324:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8105326:	4b2c      	ldr	r3, [pc, #176]	; (81053d8 <prvAddNewTaskToReadyList+0xc8>)
 8105328:	681b      	ldr	r3, [r3, #0]
 810532a:	2b00      	cmp	r3, #0
 810532c:	d109      	bne.n	8105342 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810532e:	4a2a      	ldr	r2, [pc, #168]	; (81053d8 <prvAddNewTaskToReadyList+0xc8>)
 8105330:	687b      	ldr	r3, [r7, #4]
 8105332:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8105334:	4b27      	ldr	r3, [pc, #156]	; (81053d4 <prvAddNewTaskToReadyList+0xc4>)
 8105336:	681b      	ldr	r3, [r3, #0]
 8105338:	2b01      	cmp	r3, #1
 810533a:	d110      	bne.n	810535e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810533c:	f000 fc26 	bl	8105b8c <prvInitialiseTaskLists>
 8105340:	e00d      	b.n	810535e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8105342:	4b26      	ldr	r3, [pc, #152]	; (81053dc <prvAddNewTaskToReadyList+0xcc>)
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	2b00      	cmp	r3, #0
 8105348:	d109      	bne.n	810535e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810534a:	4b23      	ldr	r3, [pc, #140]	; (81053d8 <prvAddNewTaskToReadyList+0xc8>)
 810534c:	681b      	ldr	r3, [r3, #0]
 810534e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105354:	429a      	cmp	r2, r3
 8105356:	d802      	bhi.n	810535e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8105358:	4a1f      	ldr	r2, [pc, #124]	; (81053d8 <prvAddNewTaskToReadyList+0xc8>)
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810535e:	4b20      	ldr	r3, [pc, #128]	; (81053e0 <prvAddNewTaskToReadyList+0xd0>)
 8105360:	681b      	ldr	r3, [r3, #0]
 8105362:	3301      	adds	r3, #1
 8105364:	4a1e      	ldr	r2, [pc, #120]	; (81053e0 <prvAddNewTaskToReadyList+0xd0>)
 8105366:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8105368:	4b1d      	ldr	r3, [pc, #116]	; (81053e0 <prvAddNewTaskToReadyList+0xd0>)
 810536a:	681a      	ldr	r2, [r3, #0]
 810536c:	687b      	ldr	r3, [r7, #4]
 810536e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8105370:	687b      	ldr	r3, [r7, #4]
 8105372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105374:	4b1b      	ldr	r3, [pc, #108]	; (81053e4 <prvAddNewTaskToReadyList+0xd4>)
 8105376:	681b      	ldr	r3, [r3, #0]
 8105378:	429a      	cmp	r2, r3
 810537a:	d903      	bls.n	8105384 <prvAddNewTaskToReadyList+0x74>
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105380:	4a18      	ldr	r2, [pc, #96]	; (81053e4 <prvAddNewTaskToReadyList+0xd4>)
 8105382:	6013      	str	r3, [r2, #0]
 8105384:	687b      	ldr	r3, [r7, #4]
 8105386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105388:	4613      	mov	r3, r2
 810538a:	009b      	lsls	r3, r3, #2
 810538c:	4413      	add	r3, r2
 810538e:	009b      	lsls	r3, r3, #2
 8105390:	4a15      	ldr	r2, [pc, #84]	; (81053e8 <prvAddNewTaskToReadyList+0xd8>)
 8105392:	441a      	add	r2, r3
 8105394:	687b      	ldr	r3, [r7, #4]
 8105396:	3304      	adds	r3, #4
 8105398:	4619      	mov	r1, r3
 810539a:	4610      	mov	r0, r2
 810539c:	f7fe feb1 	bl	8104102 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 81053a0:	f7ff f890 	bl	81044c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 81053a4:	4b0d      	ldr	r3, [pc, #52]	; (81053dc <prvAddNewTaskToReadyList+0xcc>)
 81053a6:	681b      	ldr	r3, [r3, #0]
 81053a8:	2b00      	cmp	r3, #0
 81053aa:	d00e      	beq.n	81053ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 81053ac:	4b0a      	ldr	r3, [pc, #40]	; (81053d8 <prvAddNewTaskToReadyList+0xc8>)
 81053ae:	681b      	ldr	r3, [r3, #0]
 81053b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81053b2:	687b      	ldr	r3, [r7, #4]
 81053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053b6:	429a      	cmp	r2, r3
 81053b8:	d207      	bcs.n	81053ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 81053ba:	4b0c      	ldr	r3, [pc, #48]	; (81053ec <prvAddNewTaskToReadyList+0xdc>)
 81053bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81053c0:	601a      	str	r2, [r3, #0]
 81053c2:	f3bf 8f4f 	dsb	sy
 81053c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81053ca:	bf00      	nop
 81053cc:	3708      	adds	r7, #8
 81053ce:	46bd      	mov	sp, r7
 81053d0:	bd80      	pop	{r7, pc}
 81053d2:	bf00      	nop
 81053d4:	100049a4 	.word	0x100049a4
 81053d8:	100044d0 	.word	0x100044d0
 81053dc:	100049b0 	.word	0x100049b0
 81053e0:	100049c0 	.word	0x100049c0
 81053e4:	100049ac 	.word	0x100049ac
 81053e8:	100044d4 	.word	0x100044d4
 81053ec:	e000ed04 	.word	0xe000ed04

081053f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81053f0:	b580      	push	{r7, lr}
 81053f2:	b084      	sub	sp, #16
 81053f4:	af00      	add	r7, sp, #0
 81053f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81053f8:	2300      	movs	r3, #0
 81053fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	2b00      	cmp	r3, #0
 8105400:	d017      	beq.n	8105432 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8105402:	4b13      	ldr	r3, [pc, #76]	; (8105450 <vTaskDelay+0x60>)
 8105404:	681b      	ldr	r3, [r3, #0]
 8105406:	2b00      	cmp	r3, #0
 8105408:	d00a      	beq.n	8105420 <vTaskDelay+0x30>
	__asm volatile
 810540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810540e:	f383 8811 	msr	BASEPRI, r3
 8105412:	f3bf 8f6f 	isb	sy
 8105416:	f3bf 8f4f 	dsb	sy
 810541a:	60bb      	str	r3, [r7, #8]
}
 810541c:	bf00      	nop
 810541e:	e7fe      	b.n	810541e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8105420:	f000 f88a 	bl	8105538 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8105424:	2100      	movs	r1, #0
 8105426:	6878      	ldr	r0, [r7, #4]
 8105428:	f000 fcfe 	bl	8105e28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810542c:	f000 f892 	bl	8105554 <xTaskResumeAll>
 8105430:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8105432:	68fb      	ldr	r3, [r7, #12]
 8105434:	2b00      	cmp	r3, #0
 8105436:	d107      	bne.n	8105448 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8105438:	4b06      	ldr	r3, [pc, #24]	; (8105454 <vTaskDelay+0x64>)
 810543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810543e:	601a      	str	r2, [r3, #0]
 8105440:	f3bf 8f4f 	dsb	sy
 8105444:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8105448:	bf00      	nop
 810544a:	3710      	adds	r7, #16
 810544c:	46bd      	mov	sp, r7
 810544e:	bd80      	pop	{r7, pc}
 8105450:	100049cc 	.word	0x100049cc
 8105454:	e000ed04 	.word	0xe000ed04

08105458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8105458:	b580      	push	{r7, lr}
 810545a:	b08a      	sub	sp, #40	; 0x28
 810545c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810545e:	2300      	movs	r3, #0
 8105460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8105462:	2300      	movs	r3, #0
 8105464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8105466:	463a      	mov	r2, r7
 8105468:	1d39      	adds	r1, r7, #4
 810546a:	f107 0308 	add.w	r3, r7, #8
 810546e:	4618      	mov	r0, r3
 8105470:	f7fe fd88 	bl	8103f84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8105474:	6839      	ldr	r1, [r7, #0]
 8105476:	687b      	ldr	r3, [r7, #4]
 8105478:	68ba      	ldr	r2, [r7, #8]
 810547a:	9202      	str	r2, [sp, #8]
 810547c:	9301      	str	r3, [sp, #4]
 810547e:	2300      	movs	r3, #0
 8105480:	9300      	str	r3, [sp, #0]
 8105482:	2300      	movs	r3, #0
 8105484:	460a      	mov	r2, r1
 8105486:	4924      	ldr	r1, [pc, #144]	; (8105518 <vTaskStartScheduler+0xc0>)
 8105488:	4824      	ldr	r0, [pc, #144]	; (810551c <vTaskStartScheduler+0xc4>)
 810548a:	f7ff fdf9 	bl	8105080 <xTaskCreateStatic>
 810548e:	4603      	mov	r3, r0
 8105490:	4a23      	ldr	r2, [pc, #140]	; (8105520 <vTaskStartScheduler+0xc8>)
 8105492:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8105494:	4b22      	ldr	r3, [pc, #136]	; (8105520 <vTaskStartScheduler+0xc8>)
 8105496:	681b      	ldr	r3, [r3, #0]
 8105498:	2b00      	cmp	r3, #0
 810549a:	d002      	beq.n	81054a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810549c:	2301      	movs	r3, #1
 810549e:	617b      	str	r3, [r7, #20]
 81054a0:	e001      	b.n	81054a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 81054a2:	2300      	movs	r3, #0
 81054a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 81054a6:	697b      	ldr	r3, [r7, #20]
 81054a8:	2b01      	cmp	r3, #1
 81054aa:	d102      	bne.n	81054b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 81054ac:	f000 fd10 	bl	8105ed0 <xTimerCreateTimerTask>
 81054b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 81054b2:	697b      	ldr	r3, [r7, #20]
 81054b4:	2b01      	cmp	r3, #1
 81054b6:	d11b      	bne.n	81054f0 <vTaskStartScheduler+0x98>
	__asm volatile
 81054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81054bc:	f383 8811 	msr	BASEPRI, r3
 81054c0:	f3bf 8f6f 	isb	sy
 81054c4:	f3bf 8f4f 	dsb	sy
 81054c8:	613b      	str	r3, [r7, #16]
}
 81054ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81054cc:	4b15      	ldr	r3, [pc, #84]	; (8105524 <vTaskStartScheduler+0xcc>)
 81054ce:	681b      	ldr	r3, [r3, #0]
 81054d0:	3354      	adds	r3, #84	; 0x54
 81054d2:	4a15      	ldr	r2, [pc, #84]	; (8105528 <vTaskStartScheduler+0xd0>)
 81054d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 81054d6:	4b15      	ldr	r3, [pc, #84]	; (810552c <vTaskStartScheduler+0xd4>)
 81054d8:	f04f 32ff 	mov.w	r2, #4294967295
 81054dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 81054de:	4b14      	ldr	r3, [pc, #80]	; (8105530 <vTaskStartScheduler+0xd8>)
 81054e0:	2201      	movs	r2, #1
 81054e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81054e4:	4b13      	ldr	r3, [pc, #76]	; (8105534 <vTaskStartScheduler+0xdc>)
 81054e6:	2200      	movs	r2, #0
 81054e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81054ea:	f7fe ff19 	bl	8104320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81054ee:	e00e      	b.n	810550e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81054f0:	697b      	ldr	r3, [r7, #20]
 81054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81054f6:	d10a      	bne.n	810550e <vTaskStartScheduler+0xb6>
	__asm volatile
 81054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81054fc:	f383 8811 	msr	BASEPRI, r3
 8105500:	f3bf 8f6f 	isb	sy
 8105504:	f3bf 8f4f 	dsb	sy
 8105508:	60fb      	str	r3, [r7, #12]
}
 810550a:	bf00      	nop
 810550c:	e7fe      	b.n	810550c <vTaskStartScheduler+0xb4>
}
 810550e:	bf00      	nop
 8105510:	3718      	adds	r7, #24
 8105512:	46bd      	mov	sp, r7
 8105514:	bd80      	pop	{r7, pc}
 8105516:	bf00      	nop
 8105518:	08109cb8 	.word	0x08109cb8
 810551c:	08105b5d 	.word	0x08105b5d
 8105520:	100049c8 	.word	0x100049c8
 8105524:	100044d0 	.word	0x100044d0
 8105528:	100000bc 	.word	0x100000bc
 810552c:	100049c4 	.word	0x100049c4
 8105530:	100049b0 	.word	0x100049b0
 8105534:	100049a8 	.word	0x100049a8

08105538 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8105538:	b480      	push	{r7}
 810553a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810553c:	4b04      	ldr	r3, [pc, #16]	; (8105550 <vTaskSuspendAll+0x18>)
 810553e:	681b      	ldr	r3, [r3, #0]
 8105540:	3301      	adds	r3, #1
 8105542:	4a03      	ldr	r2, [pc, #12]	; (8105550 <vTaskSuspendAll+0x18>)
 8105544:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8105546:	bf00      	nop
 8105548:	46bd      	mov	sp, r7
 810554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810554e:	4770      	bx	lr
 8105550:	100049cc 	.word	0x100049cc

08105554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8105554:	b580      	push	{r7, lr}
 8105556:	b084      	sub	sp, #16
 8105558:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810555a:	2300      	movs	r3, #0
 810555c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810555e:	2300      	movs	r3, #0
 8105560:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8105562:	4b42      	ldr	r3, [pc, #264]	; (810566c <xTaskResumeAll+0x118>)
 8105564:	681b      	ldr	r3, [r3, #0]
 8105566:	2b00      	cmp	r3, #0
 8105568:	d10a      	bne.n	8105580 <xTaskResumeAll+0x2c>
	__asm volatile
 810556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810556e:	f383 8811 	msr	BASEPRI, r3
 8105572:	f3bf 8f6f 	isb	sy
 8105576:	f3bf 8f4f 	dsb	sy
 810557a:	603b      	str	r3, [r7, #0]
}
 810557c:	bf00      	nop
 810557e:	e7fe      	b.n	810557e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8105580:	f7fe ff70 	bl	8104464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8105584:	4b39      	ldr	r3, [pc, #228]	; (810566c <xTaskResumeAll+0x118>)
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	3b01      	subs	r3, #1
 810558a:	4a38      	ldr	r2, [pc, #224]	; (810566c <xTaskResumeAll+0x118>)
 810558c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810558e:	4b37      	ldr	r3, [pc, #220]	; (810566c <xTaskResumeAll+0x118>)
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	2b00      	cmp	r3, #0
 8105594:	d162      	bne.n	810565c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8105596:	4b36      	ldr	r3, [pc, #216]	; (8105670 <xTaskResumeAll+0x11c>)
 8105598:	681b      	ldr	r3, [r3, #0]
 810559a:	2b00      	cmp	r3, #0
 810559c:	d05e      	beq.n	810565c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810559e:	e02f      	b.n	8105600 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81055a0:	4b34      	ldr	r3, [pc, #208]	; (8105674 <xTaskResumeAll+0x120>)
 81055a2:	68db      	ldr	r3, [r3, #12]
 81055a4:	68db      	ldr	r3, [r3, #12]
 81055a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81055a8:	68fb      	ldr	r3, [r7, #12]
 81055aa:	3318      	adds	r3, #24
 81055ac:	4618      	mov	r0, r3
 81055ae:	f7fe fe05 	bl	81041bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81055b2:	68fb      	ldr	r3, [r7, #12]
 81055b4:	3304      	adds	r3, #4
 81055b6:	4618      	mov	r0, r3
 81055b8:	f7fe fe00 	bl	81041bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 81055bc:	68fb      	ldr	r3, [r7, #12]
 81055be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81055c0:	4b2d      	ldr	r3, [pc, #180]	; (8105678 <xTaskResumeAll+0x124>)
 81055c2:	681b      	ldr	r3, [r3, #0]
 81055c4:	429a      	cmp	r2, r3
 81055c6:	d903      	bls.n	81055d0 <xTaskResumeAll+0x7c>
 81055c8:	68fb      	ldr	r3, [r7, #12]
 81055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81055cc:	4a2a      	ldr	r2, [pc, #168]	; (8105678 <xTaskResumeAll+0x124>)
 81055ce:	6013      	str	r3, [r2, #0]
 81055d0:	68fb      	ldr	r3, [r7, #12]
 81055d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81055d4:	4613      	mov	r3, r2
 81055d6:	009b      	lsls	r3, r3, #2
 81055d8:	4413      	add	r3, r2
 81055da:	009b      	lsls	r3, r3, #2
 81055dc:	4a27      	ldr	r2, [pc, #156]	; (810567c <xTaskResumeAll+0x128>)
 81055de:	441a      	add	r2, r3
 81055e0:	68fb      	ldr	r3, [r7, #12]
 81055e2:	3304      	adds	r3, #4
 81055e4:	4619      	mov	r1, r3
 81055e6:	4610      	mov	r0, r2
 81055e8:	f7fe fd8b 	bl	8104102 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81055ec:	68fb      	ldr	r3, [r7, #12]
 81055ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81055f0:	4b23      	ldr	r3, [pc, #140]	; (8105680 <xTaskResumeAll+0x12c>)
 81055f2:	681b      	ldr	r3, [r3, #0]
 81055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81055f6:	429a      	cmp	r2, r3
 81055f8:	d302      	bcc.n	8105600 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 81055fa:	4b22      	ldr	r3, [pc, #136]	; (8105684 <xTaskResumeAll+0x130>)
 81055fc:	2201      	movs	r2, #1
 81055fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8105600:	4b1c      	ldr	r3, [pc, #112]	; (8105674 <xTaskResumeAll+0x120>)
 8105602:	681b      	ldr	r3, [r3, #0]
 8105604:	2b00      	cmp	r3, #0
 8105606:	d1cb      	bne.n	81055a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8105608:	68fb      	ldr	r3, [r7, #12]
 810560a:	2b00      	cmp	r3, #0
 810560c:	d001      	beq.n	8105612 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810560e:	f000 fb5f 	bl	8105cd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8105612:	4b1d      	ldr	r3, [pc, #116]	; (8105688 <xTaskResumeAll+0x134>)
 8105614:	681b      	ldr	r3, [r3, #0]
 8105616:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8105618:	687b      	ldr	r3, [r7, #4]
 810561a:	2b00      	cmp	r3, #0
 810561c:	d010      	beq.n	8105640 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810561e:	f000 f847 	bl	81056b0 <xTaskIncrementTick>
 8105622:	4603      	mov	r3, r0
 8105624:	2b00      	cmp	r3, #0
 8105626:	d002      	beq.n	810562e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8105628:	4b16      	ldr	r3, [pc, #88]	; (8105684 <xTaskResumeAll+0x130>)
 810562a:	2201      	movs	r2, #1
 810562c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810562e:	687b      	ldr	r3, [r7, #4]
 8105630:	3b01      	subs	r3, #1
 8105632:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8105634:	687b      	ldr	r3, [r7, #4]
 8105636:	2b00      	cmp	r3, #0
 8105638:	d1f1      	bne.n	810561e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 810563a:	4b13      	ldr	r3, [pc, #76]	; (8105688 <xTaskResumeAll+0x134>)
 810563c:	2200      	movs	r2, #0
 810563e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8105640:	4b10      	ldr	r3, [pc, #64]	; (8105684 <xTaskResumeAll+0x130>)
 8105642:	681b      	ldr	r3, [r3, #0]
 8105644:	2b00      	cmp	r3, #0
 8105646:	d009      	beq.n	810565c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8105648:	2301      	movs	r3, #1
 810564a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810564c:	4b0f      	ldr	r3, [pc, #60]	; (810568c <xTaskResumeAll+0x138>)
 810564e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8105652:	601a      	str	r2, [r3, #0]
 8105654:	f3bf 8f4f 	dsb	sy
 8105658:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810565c:	f7fe ff32 	bl	81044c4 <vPortExitCritical>

	return xAlreadyYielded;
 8105660:	68bb      	ldr	r3, [r7, #8]
}
 8105662:	4618      	mov	r0, r3
 8105664:	3710      	adds	r7, #16
 8105666:	46bd      	mov	sp, r7
 8105668:	bd80      	pop	{r7, pc}
 810566a:	bf00      	nop
 810566c:	100049cc 	.word	0x100049cc
 8105670:	100049a4 	.word	0x100049a4
 8105674:	10004964 	.word	0x10004964
 8105678:	100049ac 	.word	0x100049ac
 810567c:	100044d4 	.word	0x100044d4
 8105680:	100044d0 	.word	0x100044d0
 8105684:	100049b8 	.word	0x100049b8
 8105688:	100049b4 	.word	0x100049b4
 810568c:	e000ed04 	.word	0xe000ed04

08105690 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8105690:	b480      	push	{r7}
 8105692:	b083      	sub	sp, #12
 8105694:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8105696:	4b05      	ldr	r3, [pc, #20]	; (81056ac <xTaskGetTickCount+0x1c>)
 8105698:	681b      	ldr	r3, [r3, #0]
 810569a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810569c:	687b      	ldr	r3, [r7, #4]
}
 810569e:	4618      	mov	r0, r3
 81056a0:	370c      	adds	r7, #12
 81056a2:	46bd      	mov	sp, r7
 81056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056a8:	4770      	bx	lr
 81056aa:	bf00      	nop
 81056ac:	100049a8 	.word	0x100049a8

081056b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81056b0:	b580      	push	{r7, lr}
 81056b2:	b086      	sub	sp, #24
 81056b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81056b6:	2300      	movs	r3, #0
 81056b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81056ba:	4b4f      	ldr	r3, [pc, #316]	; (81057f8 <xTaskIncrementTick+0x148>)
 81056bc:	681b      	ldr	r3, [r3, #0]
 81056be:	2b00      	cmp	r3, #0
 81056c0:	f040 808f 	bne.w	81057e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 81056c4:	4b4d      	ldr	r3, [pc, #308]	; (81057fc <xTaskIncrementTick+0x14c>)
 81056c6:	681b      	ldr	r3, [r3, #0]
 81056c8:	3301      	adds	r3, #1
 81056ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 81056cc:	4a4b      	ldr	r2, [pc, #300]	; (81057fc <xTaskIncrementTick+0x14c>)
 81056ce:	693b      	ldr	r3, [r7, #16]
 81056d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81056d2:	693b      	ldr	r3, [r7, #16]
 81056d4:	2b00      	cmp	r3, #0
 81056d6:	d120      	bne.n	810571a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 81056d8:	4b49      	ldr	r3, [pc, #292]	; (8105800 <xTaskIncrementTick+0x150>)
 81056da:	681b      	ldr	r3, [r3, #0]
 81056dc:	681b      	ldr	r3, [r3, #0]
 81056de:	2b00      	cmp	r3, #0
 81056e0:	d00a      	beq.n	81056f8 <xTaskIncrementTick+0x48>
	__asm volatile
 81056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81056e6:	f383 8811 	msr	BASEPRI, r3
 81056ea:	f3bf 8f6f 	isb	sy
 81056ee:	f3bf 8f4f 	dsb	sy
 81056f2:	603b      	str	r3, [r7, #0]
}
 81056f4:	bf00      	nop
 81056f6:	e7fe      	b.n	81056f6 <xTaskIncrementTick+0x46>
 81056f8:	4b41      	ldr	r3, [pc, #260]	; (8105800 <xTaskIncrementTick+0x150>)
 81056fa:	681b      	ldr	r3, [r3, #0]
 81056fc:	60fb      	str	r3, [r7, #12]
 81056fe:	4b41      	ldr	r3, [pc, #260]	; (8105804 <xTaskIncrementTick+0x154>)
 8105700:	681b      	ldr	r3, [r3, #0]
 8105702:	4a3f      	ldr	r2, [pc, #252]	; (8105800 <xTaskIncrementTick+0x150>)
 8105704:	6013      	str	r3, [r2, #0]
 8105706:	4a3f      	ldr	r2, [pc, #252]	; (8105804 <xTaskIncrementTick+0x154>)
 8105708:	68fb      	ldr	r3, [r7, #12]
 810570a:	6013      	str	r3, [r2, #0]
 810570c:	4b3e      	ldr	r3, [pc, #248]	; (8105808 <xTaskIncrementTick+0x158>)
 810570e:	681b      	ldr	r3, [r3, #0]
 8105710:	3301      	adds	r3, #1
 8105712:	4a3d      	ldr	r2, [pc, #244]	; (8105808 <xTaskIncrementTick+0x158>)
 8105714:	6013      	str	r3, [r2, #0]
 8105716:	f000 fadb 	bl	8105cd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810571a:	4b3c      	ldr	r3, [pc, #240]	; (810580c <xTaskIncrementTick+0x15c>)
 810571c:	681b      	ldr	r3, [r3, #0]
 810571e:	693a      	ldr	r2, [r7, #16]
 8105720:	429a      	cmp	r2, r3
 8105722:	d349      	bcc.n	81057b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8105724:	4b36      	ldr	r3, [pc, #216]	; (8105800 <xTaskIncrementTick+0x150>)
 8105726:	681b      	ldr	r3, [r3, #0]
 8105728:	681b      	ldr	r3, [r3, #0]
 810572a:	2b00      	cmp	r3, #0
 810572c:	d104      	bne.n	8105738 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810572e:	4b37      	ldr	r3, [pc, #220]	; (810580c <xTaskIncrementTick+0x15c>)
 8105730:	f04f 32ff 	mov.w	r2, #4294967295
 8105734:	601a      	str	r2, [r3, #0]
					break;
 8105736:	e03f      	b.n	81057b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8105738:	4b31      	ldr	r3, [pc, #196]	; (8105800 <xTaskIncrementTick+0x150>)
 810573a:	681b      	ldr	r3, [r3, #0]
 810573c:	68db      	ldr	r3, [r3, #12]
 810573e:	68db      	ldr	r3, [r3, #12]
 8105740:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8105742:	68bb      	ldr	r3, [r7, #8]
 8105744:	685b      	ldr	r3, [r3, #4]
 8105746:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8105748:	693a      	ldr	r2, [r7, #16]
 810574a:	687b      	ldr	r3, [r7, #4]
 810574c:	429a      	cmp	r2, r3
 810574e:	d203      	bcs.n	8105758 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8105750:	4a2e      	ldr	r2, [pc, #184]	; (810580c <xTaskIncrementTick+0x15c>)
 8105752:	687b      	ldr	r3, [r7, #4]
 8105754:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8105756:	e02f      	b.n	81057b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8105758:	68bb      	ldr	r3, [r7, #8]
 810575a:	3304      	adds	r3, #4
 810575c:	4618      	mov	r0, r3
 810575e:	f7fe fd2d 	bl	81041bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8105762:	68bb      	ldr	r3, [r7, #8]
 8105764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105766:	2b00      	cmp	r3, #0
 8105768:	d004      	beq.n	8105774 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810576a:	68bb      	ldr	r3, [r7, #8]
 810576c:	3318      	adds	r3, #24
 810576e:	4618      	mov	r0, r3
 8105770:	f7fe fd24 	bl	81041bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8105774:	68bb      	ldr	r3, [r7, #8]
 8105776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105778:	4b25      	ldr	r3, [pc, #148]	; (8105810 <xTaskIncrementTick+0x160>)
 810577a:	681b      	ldr	r3, [r3, #0]
 810577c:	429a      	cmp	r2, r3
 810577e:	d903      	bls.n	8105788 <xTaskIncrementTick+0xd8>
 8105780:	68bb      	ldr	r3, [r7, #8]
 8105782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105784:	4a22      	ldr	r2, [pc, #136]	; (8105810 <xTaskIncrementTick+0x160>)
 8105786:	6013      	str	r3, [r2, #0]
 8105788:	68bb      	ldr	r3, [r7, #8]
 810578a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810578c:	4613      	mov	r3, r2
 810578e:	009b      	lsls	r3, r3, #2
 8105790:	4413      	add	r3, r2
 8105792:	009b      	lsls	r3, r3, #2
 8105794:	4a1f      	ldr	r2, [pc, #124]	; (8105814 <xTaskIncrementTick+0x164>)
 8105796:	441a      	add	r2, r3
 8105798:	68bb      	ldr	r3, [r7, #8]
 810579a:	3304      	adds	r3, #4
 810579c:	4619      	mov	r1, r3
 810579e:	4610      	mov	r0, r2
 81057a0:	f7fe fcaf 	bl	8104102 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81057a4:	68bb      	ldr	r3, [r7, #8]
 81057a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81057a8:	4b1b      	ldr	r3, [pc, #108]	; (8105818 <xTaskIncrementTick+0x168>)
 81057aa:	681b      	ldr	r3, [r3, #0]
 81057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057ae:	429a      	cmp	r2, r3
 81057b0:	d3b8      	bcc.n	8105724 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 81057b2:	2301      	movs	r3, #1
 81057b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81057b6:	e7b5      	b.n	8105724 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81057b8:	4b17      	ldr	r3, [pc, #92]	; (8105818 <xTaskIncrementTick+0x168>)
 81057ba:	681b      	ldr	r3, [r3, #0]
 81057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81057be:	4915      	ldr	r1, [pc, #84]	; (8105814 <xTaskIncrementTick+0x164>)
 81057c0:	4613      	mov	r3, r2
 81057c2:	009b      	lsls	r3, r3, #2
 81057c4:	4413      	add	r3, r2
 81057c6:	009b      	lsls	r3, r3, #2
 81057c8:	440b      	add	r3, r1
 81057ca:	681b      	ldr	r3, [r3, #0]
 81057cc:	2b01      	cmp	r3, #1
 81057ce:	d901      	bls.n	81057d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 81057d0:	2301      	movs	r3, #1
 81057d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81057d4:	4b11      	ldr	r3, [pc, #68]	; (810581c <xTaskIncrementTick+0x16c>)
 81057d6:	681b      	ldr	r3, [r3, #0]
 81057d8:	2b00      	cmp	r3, #0
 81057da:	d007      	beq.n	81057ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 81057dc:	2301      	movs	r3, #1
 81057de:	617b      	str	r3, [r7, #20]
 81057e0:	e004      	b.n	81057ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81057e2:	4b0f      	ldr	r3, [pc, #60]	; (8105820 <xTaskIncrementTick+0x170>)
 81057e4:	681b      	ldr	r3, [r3, #0]
 81057e6:	3301      	adds	r3, #1
 81057e8:	4a0d      	ldr	r2, [pc, #52]	; (8105820 <xTaskIncrementTick+0x170>)
 81057ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81057ec:	697b      	ldr	r3, [r7, #20]
}
 81057ee:	4618      	mov	r0, r3
 81057f0:	3718      	adds	r7, #24
 81057f2:	46bd      	mov	sp, r7
 81057f4:	bd80      	pop	{r7, pc}
 81057f6:	bf00      	nop
 81057f8:	100049cc 	.word	0x100049cc
 81057fc:	100049a8 	.word	0x100049a8
 8105800:	1000495c 	.word	0x1000495c
 8105804:	10004960 	.word	0x10004960
 8105808:	100049bc 	.word	0x100049bc
 810580c:	100049c4 	.word	0x100049c4
 8105810:	100049ac 	.word	0x100049ac
 8105814:	100044d4 	.word	0x100044d4
 8105818:	100044d0 	.word	0x100044d0
 810581c:	100049b8 	.word	0x100049b8
 8105820:	100049b4 	.word	0x100049b4

08105824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8105824:	b480      	push	{r7}
 8105826:	b085      	sub	sp, #20
 8105828:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810582a:	4b2a      	ldr	r3, [pc, #168]	; (81058d4 <vTaskSwitchContext+0xb0>)
 810582c:	681b      	ldr	r3, [r3, #0]
 810582e:	2b00      	cmp	r3, #0
 8105830:	d003      	beq.n	810583a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8105832:	4b29      	ldr	r3, [pc, #164]	; (81058d8 <vTaskSwitchContext+0xb4>)
 8105834:	2201      	movs	r2, #1
 8105836:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8105838:	e046      	b.n	81058c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 810583a:	4b27      	ldr	r3, [pc, #156]	; (81058d8 <vTaskSwitchContext+0xb4>)
 810583c:	2200      	movs	r2, #0
 810583e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8105840:	4b26      	ldr	r3, [pc, #152]	; (81058dc <vTaskSwitchContext+0xb8>)
 8105842:	681b      	ldr	r3, [r3, #0]
 8105844:	60fb      	str	r3, [r7, #12]
 8105846:	e010      	b.n	810586a <vTaskSwitchContext+0x46>
 8105848:	68fb      	ldr	r3, [r7, #12]
 810584a:	2b00      	cmp	r3, #0
 810584c:	d10a      	bne.n	8105864 <vTaskSwitchContext+0x40>
	__asm volatile
 810584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105852:	f383 8811 	msr	BASEPRI, r3
 8105856:	f3bf 8f6f 	isb	sy
 810585a:	f3bf 8f4f 	dsb	sy
 810585e:	607b      	str	r3, [r7, #4]
}
 8105860:	bf00      	nop
 8105862:	e7fe      	b.n	8105862 <vTaskSwitchContext+0x3e>
 8105864:	68fb      	ldr	r3, [r7, #12]
 8105866:	3b01      	subs	r3, #1
 8105868:	60fb      	str	r3, [r7, #12]
 810586a:	491d      	ldr	r1, [pc, #116]	; (81058e0 <vTaskSwitchContext+0xbc>)
 810586c:	68fa      	ldr	r2, [r7, #12]
 810586e:	4613      	mov	r3, r2
 8105870:	009b      	lsls	r3, r3, #2
 8105872:	4413      	add	r3, r2
 8105874:	009b      	lsls	r3, r3, #2
 8105876:	440b      	add	r3, r1
 8105878:	681b      	ldr	r3, [r3, #0]
 810587a:	2b00      	cmp	r3, #0
 810587c:	d0e4      	beq.n	8105848 <vTaskSwitchContext+0x24>
 810587e:	68fa      	ldr	r2, [r7, #12]
 8105880:	4613      	mov	r3, r2
 8105882:	009b      	lsls	r3, r3, #2
 8105884:	4413      	add	r3, r2
 8105886:	009b      	lsls	r3, r3, #2
 8105888:	4a15      	ldr	r2, [pc, #84]	; (81058e0 <vTaskSwitchContext+0xbc>)
 810588a:	4413      	add	r3, r2
 810588c:	60bb      	str	r3, [r7, #8]
 810588e:	68bb      	ldr	r3, [r7, #8]
 8105890:	685b      	ldr	r3, [r3, #4]
 8105892:	685a      	ldr	r2, [r3, #4]
 8105894:	68bb      	ldr	r3, [r7, #8]
 8105896:	605a      	str	r2, [r3, #4]
 8105898:	68bb      	ldr	r3, [r7, #8]
 810589a:	685a      	ldr	r2, [r3, #4]
 810589c:	68bb      	ldr	r3, [r7, #8]
 810589e:	3308      	adds	r3, #8
 81058a0:	429a      	cmp	r2, r3
 81058a2:	d104      	bne.n	81058ae <vTaskSwitchContext+0x8a>
 81058a4:	68bb      	ldr	r3, [r7, #8]
 81058a6:	685b      	ldr	r3, [r3, #4]
 81058a8:	685a      	ldr	r2, [r3, #4]
 81058aa:	68bb      	ldr	r3, [r7, #8]
 81058ac:	605a      	str	r2, [r3, #4]
 81058ae:	68bb      	ldr	r3, [r7, #8]
 81058b0:	685b      	ldr	r3, [r3, #4]
 81058b2:	68db      	ldr	r3, [r3, #12]
 81058b4:	4a0b      	ldr	r2, [pc, #44]	; (81058e4 <vTaskSwitchContext+0xc0>)
 81058b6:	6013      	str	r3, [r2, #0]
 81058b8:	4a08      	ldr	r2, [pc, #32]	; (81058dc <vTaskSwitchContext+0xb8>)
 81058ba:	68fb      	ldr	r3, [r7, #12]
 81058bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81058be:	4b09      	ldr	r3, [pc, #36]	; (81058e4 <vTaskSwitchContext+0xc0>)
 81058c0:	681b      	ldr	r3, [r3, #0]
 81058c2:	3354      	adds	r3, #84	; 0x54
 81058c4:	4a08      	ldr	r2, [pc, #32]	; (81058e8 <vTaskSwitchContext+0xc4>)
 81058c6:	6013      	str	r3, [r2, #0]
}
 81058c8:	bf00      	nop
 81058ca:	3714      	adds	r7, #20
 81058cc:	46bd      	mov	sp, r7
 81058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058d2:	4770      	bx	lr
 81058d4:	100049cc 	.word	0x100049cc
 81058d8:	100049b8 	.word	0x100049b8
 81058dc:	100049ac 	.word	0x100049ac
 81058e0:	100044d4 	.word	0x100044d4
 81058e4:	100044d0 	.word	0x100044d0
 81058e8:	100000bc 	.word	0x100000bc

081058ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 81058ec:	b580      	push	{r7, lr}
 81058ee:	b084      	sub	sp, #16
 81058f0:	af00      	add	r7, sp, #0
 81058f2:	6078      	str	r0, [r7, #4]
 81058f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	2b00      	cmp	r3, #0
 81058fa:	d10a      	bne.n	8105912 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 81058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105900:	f383 8811 	msr	BASEPRI, r3
 8105904:	f3bf 8f6f 	isb	sy
 8105908:	f3bf 8f4f 	dsb	sy
 810590c:	60fb      	str	r3, [r7, #12]
}
 810590e:	bf00      	nop
 8105910:	e7fe      	b.n	8105910 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8105912:	4b07      	ldr	r3, [pc, #28]	; (8105930 <vTaskPlaceOnEventList+0x44>)
 8105914:	681b      	ldr	r3, [r3, #0]
 8105916:	3318      	adds	r3, #24
 8105918:	4619      	mov	r1, r3
 810591a:	6878      	ldr	r0, [r7, #4]
 810591c:	f7fe fc15 	bl	810414a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8105920:	2101      	movs	r1, #1
 8105922:	6838      	ldr	r0, [r7, #0]
 8105924:	f000 fa80 	bl	8105e28 <prvAddCurrentTaskToDelayedList>
}
 8105928:	bf00      	nop
 810592a:	3710      	adds	r7, #16
 810592c:	46bd      	mov	sp, r7
 810592e:	bd80      	pop	{r7, pc}
 8105930:	100044d0 	.word	0x100044d0

08105934 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8105934:	b580      	push	{r7, lr}
 8105936:	b086      	sub	sp, #24
 8105938:	af00      	add	r7, sp, #0
 810593a:	60f8      	str	r0, [r7, #12]
 810593c:	60b9      	str	r1, [r7, #8]
 810593e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8105940:	68fb      	ldr	r3, [r7, #12]
 8105942:	2b00      	cmp	r3, #0
 8105944:	d10a      	bne.n	810595c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8105946:	f04f 0350 	mov.w	r3, #80	; 0x50
 810594a:	f383 8811 	msr	BASEPRI, r3
 810594e:	f3bf 8f6f 	isb	sy
 8105952:	f3bf 8f4f 	dsb	sy
 8105956:	617b      	str	r3, [r7, #20]
}
 8105958:	bf00      	nop
 810595a:	e7fe      	b.n	810595a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810595c:	4b0a      	ldr	r3, [pc, #40]	; (8105988 <vTaskPlaceOnEventListRestricted+0x54>)
 810595e:	681b      	ldr	r3, [r3, #0]
 8105960:	3318      	adds	r3, #24
 8105962:	4619      	mov	r1, r3
 8105964:	68f8      	ldr	r0, [r7, #12]
 8105966:	f7fe fbcc 	bl	8104102 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810596a:	687b      	ldr	r3, [r7, #4]
 810596c:	2b00      	cmp	r3, #0
 810596e:	d002      	beq.n	8105976 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8105970:	f04f 33ff 	mov.w	r3, #4294967295
 8105974:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8105976:	6879      	ldr	r1, [r7, #4]
 8105978:	68b8      	ldr	r0, [r7, #8]
 810597a:	f000 fa55 	bl	8105e28 <prvAddCurrentTaskToDelayedList>
	}
 810597e:	bf00      	nop
 8105980:	3718      	adds	r7, #24
 8105982:	46bd      	mov	sp, r7
 8105984:	bd80      	pop	{r7, pc}
 8105986:	bf00      	nop
 8105988:	100044d0 	.word	0x100044d0

0810598c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810598c:	b580      	push	{r7, lr}
 810598e:	b086      	sub	sp, #24
 8105990:	af00      	add	r7, sp, #0
 8105992:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	68db      	ldr	r3, [r3, #12]
 8105998:	68db      	ldr	r3, [r3, #12]
 810599a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810599c:	693b      	ldr	r3, [r7, #16]
 810599e:	2b00      	cmp	r3, #0
 81059a0:	d10a      	bne.n	81059b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 81059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81059a6:	f383 8811 	msr	BASEPRI, r3
 81059aa:	f3bf 8f6f 	isb	sy
 81059ae:	f3bf 8f4f 	dsb	sy
 81059b2:	60fb      	str	r3, [r7, #12]
}
 81059b4:	bf00      	nop
 81059b6:	e7fe      	b.n	81059b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 81059b8:	693b      	ldr	r3, [r7, #16]
 81059ba:	3318      	adds	r3, #24
 81059bc:	4618      	mov	r0, r3
 81059be:	f7fe fbfd 	bl	81041bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81059c2:	4b1e      	ldr	r3, [pc, #120]	; (8105a3c <xTaskRemoveFromEventList+0xb0>)
 81059c4:	681b      	ldr	r3, [r3, #0]
 81059c6:	2b00      	cmp	r3, #0
 81059c8:	d11d      	bne.n	8105a06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 81059ca:	693b      	ldr	r3, [r7, #16]
 81059cc:	3304      	adds	r3, #4
 81059ce:	4618      	mov	r0, r3
 81059d0:	f7fe fbf4 	bl	81041bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 81059d4:	693b      	ldr	r3, [r7, #16]
 81059d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81059d8:	4b19      	ldr	r3, [pc, #100]	; (8105a40 <xTaskRemoveFromEventList+0xb4>)
 81059da:	681b      	ldr	r3, [r3, #0]
 81059dc:	429a      	cmp	r2, r3
 81059de:	d903      	bls.n	81059e8 <xTaskRemoveFromEventList+0x5c>
 81059e0:	693b      	ldr	r3, [r7, #16]
 81059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059e4:	4a16      	ldr	r2, [pc, #88]	; (8105a40 <xTaskRemoveFromEventList+0xb4>)
 81059e6:	6013      	str	r3, [r2, #0]
 81059e8:	693b      	ldr	r3, [r7, #16]
 81059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81059ec:	4613      	mov	r3, r2
 81059ee:	009b      	lsls	r3, r3, #2
 81059f0:	4413      	add	r3, r2
 81059f2:	009b      	lsls	r3, r3, #2
 81059f4:	4a13      	ldr	r2, [pc, #76]	; (8105a44 <xTaskRemoveFromEventList+0xb8>)
 81059f6:	441a      	add	r2, r3
 81059f8:	693b      	ldr	r3, [r7, #16]
 81059fa:	3304      	adds	r3, #4
 81059fc:	4619      	mov	r1, r3
 81059fe:	4610      	mov	r0, r2
 8105a00:	f7fe fb7f 	bl	8104102 <vListInsertEnd>
 8105a04:	e005      	b.n	8105a12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8105a06:	693b      	ldr	r3, [r7, #16]
 8105a08:	3318      	adds	r3, #24
 8105a0a:	4619      	mov	r1, r3
 8105a0c:	480e      	ldr	r0, [pc, #56]	; (8105a48 <xTaskRemoveFromEventList+0xbc>)
 8105a0e:	f7fe fb78 	bl	8104102 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8105a12:	693b      	ldr	r3, [r7, #16]
 8105a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105a16:	4b0d      	ldr	r3, [pc, #52]	; (8105a4c <xTaskRemoveFromEventList+0xc0>)
 8105a18:	681b      	ldr	r3, [r3, #0]
 8105a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a1c:	429a      	cmp	r2, r3
 8105a1e:	d905      	bls.n	8105a2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8105a20:	2301      	movs	r3, #1
 8105a22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8105a24:	4b0a      	ldr	r3, [pc, #40]	; (8105a50 <xTaskRemoveFromEventList+0xc4>)
 8105a26:	2201      	movs	r2, #1
 8105a28:	601a      	str	r2, [r3, #0]
 8105a2a:	e001      	b.n	8105a30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8105a2c:	2300      	movs	r3, #0
 8105a2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8105a30:	697b      	ldr	r3, [r7, #20]
}
 8105a32:	4618      	mov	r0, r3
 8105a34:	3718      	adds	r7, #24
 8105a36:	46bd      	mov	sp, r7
 8105a38:	bd80      	pop	{r7, pc}
 8105a3a:	bf00      	nop
 8105a3c:	100049cc 	.word	0x100049cc
 8105a40:	100049ac 	.word	0x100049ac
 8105a44:	100044d4 	.word	0x100044d4
 8105a48:	10004964 	.word	0x10004964
 8105a4c:	100044d0 	.word	0x100044d0
 8105a50:	100049b8 	.word	0x100049b8

08105a54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8105a54:	b480      	push	{r7}
 8105a56:	b083      	sub	sp, #12
 8105a58:	af00      	add	r7, sp, #0
 8105a5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8105a5c:	4b06      	ldr	r3, [pc, #24]	; (8105a78 <vTaskInternalSetTimeOutState+0x24>)
 8105a5e:	681a      	ldr	r2, [r3, #0]
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8105a64:	4b05      	ldr	r3, [pc, #20]	; (8105a7c <vTaskInternalSetTimeOutState+0x28>)
 8105a66:	681a      	ldr	r2, [r3, #0]
 8105a68:	687b      	ldr	r3, [r7, #4]
 8105a6a:	605a      	str	r2, [r3, #4]
}
 8105a6c:	bf00      	nop
 8105a6e:	370c      	adds	r7, #12
 8105a70:	46bd      	mov	sp, r7
 8105a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a76:	4770      	bx	lr
 8105a78:	100049bc 	.word	0x100049bc
 8105a7c:	100049a8 	.word	0x100049a8

08105a80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8105a80:	b580      	push	{r7, lr}
 8105a82:	b088      	sub	sp, #32
 8105a84:	af00      	add	r7, sp, #0
 8105a86:	6078      	str	r0, [r7, #4]
 8105a88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8105a8a:	687b      	ldr	r3, [r7, #4]
 8105a8c:	2b00      	cmp	r3, #0
 8105a8e:	d10a      	bne.n	8105aa6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8105a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105a94:	f383 8811 	msr	BASEPRI, r3
 8105a98:	f3bf 8f6f 	isb	sy
 8105a9c:	f3bf 8f4f 	dsb	sy
 8105aa0:	613b      	str	r3, [r7, #16]
}
 8105aa2:	bf00      	nop
 8105aa4:	e7fe      	b.n	8105aa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8105aa6:	683b      	ldr	r3, [r7, #0]
 8105aa8:	2b00      	cmp	r3, #0
 8105aaa:	d10a      	bne.n	8105ac2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8105aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105ab0:	f383 8811 	msr	BASEPRI, r3
 8105ab4:	f3bf 8f6f 	isb	sy
 8105ab8:	f3bf 8f4f 	dsb	sy
 8105abc:	60fb      	str	r3, [r7, #12]
}
 8105abe:	bf00      	nop
 8105ac0:	e7fe      	b.n	8105ac0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8105ac2:	f7fe fccf 	bl	8104464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8105ac6:	4b1d      	ldr	r3, [pc, #116]	; (8105b3c <xTaskCheckForTimeOut+0xbc>)
 8105ac8:	681b      	ldr	r3, [r3, #0]
 8105aca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8105acc:	687b      	ldr	r3, [r7, #4]
 8105ace:	685b      	ldr	r3, [r3, #4]
 8105ad0:	69ba      	ldr	r2, [r7, #24]
 8105ad2:	1ad3      	subs	r3, r2, r3
 8105ad4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8105ad6:	683b      	ldr	r3, [r7, #0]
 8105ad8:	681b      	ldr	r3, [r3, #0]
 8105ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105ade:	d102      	bne.n	8105ae6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8105ae0:	2300      	movs	r3, #0
 8105ae2:	61fb      	str	r3, [r7, #28]
 8105ae4:	e023      	b.n	8105b2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	681a      	ldr	r2, [r3, #0]
 8105aea:	4b15      	ldr	r3, [pc, #84]	; (8105b40 <xTaskCheckForTimeOut+0xc0>)
 8105aec:	681b      	ldr	r3, [r3, #0]
 8105aee:	429a      	cmp	r2, r3
 8105af0:	d007      	beq.n	8105b02 <xTaskCheckForTimeOut+0x82>
 8105af2:	687b      	ldr	r3, [r7, #4]
 8105af4:	685b      	ldr	r3, [r3, #4]
 8105af6:	69ba      	ldr	r2, [r7, #24]
 8105af8:	429a      	cmp	r2, r3
 8105afa:	d302      	bcc.n	8105b02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8105afc:	2301      	movs	r3, #1
 8105afe:	61fb      	str	r3, [r7, #28]
 8105b00:	e015      	b.n	8105b2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8105b02:	683b      	ldr	r3, [r7, #0]
 8105b04:	681b      	ldr	r3, [r3, #0]
 8105b06:	697a      	ldr	r2, [r7, #20]
 8105b08:	429a      	cmp	r2, r3
 8105b0a:	d20b      	bcs.n	8105b24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8105b0c:	683b      	ldr	r3, [r7, #0]
 8105b0e:	681a      	ldr	r2, [r3, #0]
 8105b10:	697b      	ldr	r3, [r7, #20]
 8105b12:	1ad2      	subs	r2, r2, r3
 8105b14:	683b      	ldr	r3, [r7, #0]
 8105b16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8105b18:	6878      	ldr	r0, [r7, #4]
 8105b1a:	f7ff ff9b 	bl	8105a54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8105b1e:	2300      	movs	r3, #0
 8105b20:	61fb      	str	r3, [r7, #28]
 8105b22:	e004      	b.n	8105b2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8105b24:	683b      	ldr	r3, [r7, #0]
 8105b26:	2200      	movs	r2, #0
 8105b28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8105b2a:	2301      	movs	r3, #1
 8105b2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8105b2e:	f7fe fcc9 	bl	81044c4 <vPortExitCritical>

	return xReturn;
 8105b32:	69fb      	ldr	r3, [r7, #28]
}
 8105b34:	4618      	mov	r0, r3
 8105b36:	3720      	adds	r7, #32
 8105b38:	46bd      	mov	sp, r7
 8105b3a:	bd80      	pop	{r7, pc}
 8105b3c:	100049a8 	.word	0x100049a8
 8105b40:	100049bc 	.word	0x100049bc

08105b44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8105b44:	b480      	push	{r7}
 8105b46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8105b48:	4b03      	ldr	r3, [pc, #12]	; (8105b58 <vTaskMissedYield+0x14>)
 8105b4a:	2201      	movs	r2, #1
 8105b4c:	601a      	str	r2, [r3, #0]
}
 8105b4e:	bf00      	nop
 8105b50:	46bd      	mov	sp, r7
 8105b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b56:	4770      	bx	lr
 8105b58:	100049b8 	.word	0x100049b8

08105b5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8105b5c:	b580      	push	{r7, lr}
 8105b5e:	b082      	sub	sp, #8
 8105b60:	af00      	add	r7, sp, #0
 8105b62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8105b64:	f000 f852 	bl	8105c0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8105b68:	4b06      	ldr	r3, [pc, #24]	; (8105b84 <prvIdleTask+0x28>)
 8105b6a:	681b      	ldr	r3, [r3, #0]
 8105b6c:	2b01      	cmp	r3, #1
 8105b6e:	d9f9      	bls.n	8105b64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8105b70:	4b05      	ldr	r3, [pc, #20]	; (8105b88 <prvIdleTask+0x2c>)
 8105b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8105b76:	601a      	str	r2, [r3, #0]
 8105b78:	f3bf 8f4f 	dsb	sy
 8105b7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8105b80:	e7f0      	b.n	8105b64 <prvIdleTask+0x8>
 8105b82:	bf00      	nop
 8105b84:	100044d4 	.word	0x100044d4
 8105b88:	e000ed04 	.word	0xe000ed04

08105b8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8105b8c:	b580      	push	{r7, lr}
 8105b8e:	b082      	sub	sp, #8
 8105b90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8105b92:	2300      	movs	r3, #0
 8105b94:	607b      	str	r3, [r7, #4]
 8105b96:	e00c      	b.n	8105bb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8105b98:	687a      	ldr	r2, [r7, #4]
 8105b9a:	4613      	mov	r3, r2
 8105b9c:	009b      	lsls	r3, r3, #2
 8105b9e:	4413      	add	r3, r2
 8105ba0:	009b      	lsls	r3, r3, #2
 8105ba2:	4a12      	ldr	r2, [pc, #72]	; (8105bec <prvInitialiseTaskLists+0x60>)
 8105ba4:	4413      	add	r3, r2
 8105ba6:	4618      	mov	r0, r3
 8105ba8:	f7fe fa7e 	bl	81040a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8105bac:	687b      	ldr	r3, [r7, #4]
 8105bae:	3301      	adds	r3, #1
 8105bb0:	607b      	str	r3, [r7, #4]
 8105bb2:	687b      	ldr	r3, [r7, #4]
 8105bb4:	2b37      	cmp	r3, #55	; 0x37
 8105bb6:	d9ef      	bls.n	8105b98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8105bb8:	480d      	ldr	r0, [pc, #52]	; (8105bf0 <prvInitialiseTaskLists+0x64>)
 8105bba:	f7fe fa75 	bl	81040a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8105bbe:	480d      	ldr	r0, [pc, #52]	; (8105bf4 <prvInitialiseTaskLists+0x68>)
 8105bc0:	f7fe fa72 	bl	81040a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8105bc4:	480c      	ldr	r0, [pc, #48]	; (8105bf8 <prvInitialiseTaskLists+0x6c>)
 8105bc6:	f7fe fa6f 	bl	81040a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8105bca:	480c      	ldr	r0, [pc, #48]	; (8105bfc <prvInitialiseTaskLists+0x70>)
 8105bcc:	f7fe fa6c 	bl	81040a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8105bd0:	480b      	ldr	r0, [pc, #44]	; (8105c00 <prvInitialiseTaskLists+0x74>)
 8105bd2:	f7fe fa69 	bl	81040a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8105bd6:	4b0b      	ldr	r3, [pc, #44]	; (8105c04 <prvInitialiseTaskLists+0x78>)
 8105bd8:	4a05      	ldr	r2, [pc, #20]	; (8105bf0 <prvInitialiseTaskLists+0x64>)
 8105bda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8105bdc:	4b0a      	ldr	r3, [pc, #40]	; (8105c08 <prvInitialiseTaskLists+0x7c>)
 8105bde:	4a05      	ldr	r2, [pc, #20]	; (8105bf4 <prvInitialiseTaskLists+0x68>)
 8105be0:	601a      	str	r2, [r3, #0]
}
 8105be2:	bf00      	nop
 8105be4:	3708      	adds	r7, #8
 8105be6:	46bd      	mov	sp, r7
 8105be8:	bd80      	pop	{r7, pc}
 8105bea:	bf00      	nop
 8105bec:	100044d4 	.word	0x100044d4
 8105bf0:	10004934 	.word	0x10004934
 8105bf4:	10004948 	.word	0x10004948
 8105bf8:	10004964 	.word	0x10004964
 8105bfc:	10004978 	.word	0x10004978
 8105c00:	10004990 	.word	0x10004990
 8105c04:	1000495c 	.word	0x1000495c
 8105c08:	10004960 	.word	0x10004960

08105c0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8105c0c:	b580      	push	{r7, lr}
 8105c0e:	b082      	sub	sp, #8
 8105c10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8105c12:	e019      	b.n	8105c48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8105c14:	f7fe fc26 	bl	8104464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8105c18:	4b10      	ldr	r3, [pc, #64]	; (8105c5c <prvCheckTasksWaitingTermination+0x50>)
 8105c1a:	68db      	ldr	r3, [r3, #12]
 8105c1c:	68db      	ldr	r3, [r3, #12]
 8105c1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8105c20:	687b      	ldr	r3, [r7, #4]
 8105c22:	3304      	adds	r3, #4
 8105c24:	4618      	mov	r0, r3
 8105c26:	f7fe fac9 	bl	81041bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8105c2a:	4b0d      	ldr	r3, [pc, #52]	; (8105c60 <prvCheckTasksWaitingTermination+0x54>)
 8105c2c:	681b      	ldr	r3, [r3, #0]
 8105c2e:	3b01      	subs	r3, #1
 8105c30:	4a0b      	ldr	r2, [pc, #44]	; (8105c60 <prvCheckTasksWaitingTermination+0x54>)
 8105c32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8105c34:	4b0b      	ldr	r3, [pc, #44]	; (8105c64 <prvCheckTasksWaitingTermination+0x58>)
 8105c36:	681b      	ldr	r3, [r3, #0]
 8105c38:	3b01      	subs	r3, #1
 8105c3a:	4a0a      	ldr	r2, [pc, #40]	; (8105c64 <prvCheckTasksWaitingTermination+0x58>)
 8105c3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8105c3e:	f7fe fc41 	bl	81044c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8105c42:	6878      	ldr	r0, [r7, #4]
 8105c44:	f000 f810 	bl	8105c68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8105c48:	4b06      	ldr	r3, [pc, #24]	; (8105c64 <prvCheckTasksWaitingTermination+0x58>)
 8105c4a:	681b      	ldr	r3, [r3, #0]
 8105c4c:	2b00      	cmp	r3, #0
 8105c4e:	d1e1      	bne.n	8105c14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8105c50:	bf00      	nop
 8105c52:	bf00      	nop
 8105c54:	3708      	adds	r7, #8
 8105c56:	46bd      	mov	sp, r7
 8105c58:	bd80      	pop	{r7, pc}
 8105c5a:	bf00      	nop
 8105c5c:	10004978 	.word	0x10004978
 8105c60:	100049a4 	.word	0x100049a4
 8105c64:	1000498c 	.word	0x1000498c

08105c68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8105c68:	b580      	push	{r7, lr}
 8105c6a:	b084      	sub	sp, #16
 8105c6c:	af00      	add	r7, sp, #0
 8105c6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	3354      	adds	r3, #84	; 0x54
 8105c74:	4618      	mov	r0, r3
 8105c76:	f003 fc87 	bl	8109588 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8105c7a:	687b      	ldr	r3, [r7, #4]
 8105c7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8105c80:	2b00      	cmp	r3, #0
 8105c82:	d108      	bne.n	8105c96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105c88:	4618      	mov	r0, r3
 8105c8a:	f7fe f9f5 	bl	8104078 <vPortFree>
				vPortFree( pxTCB );
 8105c8e:	6878      	ldr	r0, [r7, #4]
 8105c90:	f7fe f9f2 	bl	8104078 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8105c94:	e018      	b.n	8105cc8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8105c96:	687b      	ldr	r3, [r7, #4]
 8105c98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8105c9c:	2b01      	cmp	r3, #1
 8105c9e:	d103      	bne.n	8105ca8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8105ca0:	6878      	ldr	r0, [r7, #4]
 8105ca2:	f7fe f9e9 	bl	8104078 <vPortFree>
	}
 8105ca6:	e00f      	b.n	8105cc8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8105ca8:	687b      	ldr	r3, [r7, #4]
 8105caa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8105cae:	2b02      	cmp	r3, #2
 8105cb0:	d00a      	beq.n	8105cc8 <prvDeleteTCB+0x60>
	__asm volatile
 8105cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105cb6:	f383 8811 	msr	BASEPRI, r3
 8105cba:	f3bf 8f6f 	isb	sy
 8105cbe:	f3bf 8f4f 	dsb	sy
 8105cc2:	60fb      	str	r3, [r7, #12]
}
 8105cc4:	bf00      	nop
 8105cc6:	e7fe      	b.n	8105cc6 <prvDeleteTCB+0x5e>
	}
 8105cc8:	bf00      	nop
 8105cca:	3710      	adds	r7, #16
 8105ccc:	46bd      	mov	sp, r7
 8105cce:	bd80      	pop	{r7, pc}

08105cd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8105cd0:	b480      	push	{r7}
 8105cd2:	b083      	sub	sp, #12
 8105cd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8105cd6:	4b0c      	ldr	r3, [pc, #48]	; (8105d08 <prvResetNextTaskUnblockTime+0x38>)
 8105cd8:	681b      	ldr	r3, [r3, #0]
 8105cda:	681b      	ldr	r3, [r3, #0]
 8105cdc:	2b00      	cmp	r3, #0
 8105cde:	d104      	bne.n	8105cea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8105ce0:	4b0a      	ldr	r3, [pc, #40]	; (8105d0c <prvResetNextTaskUnblockTime+0x3c>)
 8105ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8105ce6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8105ce8:	e008      	b.n	8105cfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8105cea:	4b07      	ldr	r3, [pc, #28]	; (8105d08 <prvResetNextTaskUnblockTime+0x38>)
 8105cec:	681b      	ldr	r3, [r3, #0]
 8105cee:	68db      	ldr	r3, [r3, #12]
 8105cf0:	68db      	ldr	r3, [r3, #12]
 8105cf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8105cf4:	687b      	ldr	r3, [r7, #4]
 8105cf6:	685b      	ldr	r3, [r3, #4]
 8105cf8:	4a04      	ldr	r2, [pc, #16]	; (8105d0c <prvResetNextTaskUnblockTime+0x3c>)
 8105cfa:	6013      	str	r3, [r2, #0]
}
 8105cfc:	bf00      	nop
 8105cfe:	370c      	adds	r7, #12
 8105d00:	46bd      	mov	sp, r7
 8105d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d06:	4770      	bx	lr
 8105d08:	1000495c 	.word	0x1000495c
 8105d0c:	100049c4 	.word	0x100049c4

08105d10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8105d10:	b480      	push	{r7}
 8105d12:	b083      	sub	sp, #12
 8105d14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8105d16:	4b0b      	ldr	r3, [pc, #44]	; (8105d44 <xTaskGetSchedulerState+0x34>)
 8105d18:	681b      	ldr	r3, [r3, #0]
 8105d1a:	2b00      	cmp	r3, #0
 8105d1c:	d102      	bne.n	8105d24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8105d1e:	2301      	movs	r3, #1
 8105d20:	607b      	str	r3, [r7, #4]
 8105d22:	e008      	b.n	8105d36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8105d24:	4b08      	ldr	r3, [pc, #32]	; (8105d48 <xTaskGetSchedulerState+0x38>)
 8105d26:	681b      	ldr	r3, [r3, #0]
 8105d28:	2b00      	cmp	r3, #0
 8105d2a:	d102      	bne.n	8105d32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8105d2c:	2302      	movs	r3, #2
 8105d2e:	607b      	str	r3, [r7, #4]
 8105d30:	e001      	b.n	8105d36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8105d32:	2300      	movs	r3, #0
 8105d34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8105d36:	687b      	ldr	r3, [r7, #4]
	}
 8105d38:	4618      	mov	r0, r3
 8105d3a:	370c      	adds	r7, #12
 8105d3c:	46bd      	mov	sp, r7
 8105d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d42:	4770      	bx	lr
 8105d44:	100049b0 	.word	0x100049b0
 8105d48:	100049cc 	.word	0x100049cc

08105d4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8105d4c:	b580      	push	{r7, lr}
 8105d4e:	b086      	sub	sp, #24
 8105d50:	af00      	add	r7, sp, #0
 8105d52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8105d58:	2300      	movs	r3, #0
 8105d5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8105d5c:	687b      	ldr	r3, [r7, #4]
 8105d5e:	2b00      	cmp	r3, #0
 8105d60:	d056      	beq.n	8105e10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8105d62:	4b2e      	ldr	r3, [pc, #184]	; (8105e1c <xTaskPriorityDisinherit+0xd0>)
 8105d64:	681b      	ldr	r3, [r3, #0]
 8105d66:	693a      	ldr	r2, [r7, #16]
 8105d68:	429a      	cmp	r2, r3
 8105d6a:	d00a      	beq.n	8105d82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8105d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105d70:	f383 8811 	msr	BASEPRI, r3
 8105d74:	f3bf 8f6f 	isb	sy
 8105d78:	f3bf 8f4f 	dsb	sy
 8105d7c:	60fb      	str	r3, [r7, #12]
}
 8105d7e:	bf00      	nop
 8105d80:	e7fe      	b.n	8105d80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8105d82:	693b      	ldr	r3, [r7, #16]
 8105d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105d86:	2b00      	cmp	r3, #0
 8105d88:	d10a      	bne.n	8105da0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8105d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105d8e:	f383 8811 	msr	BASEPRI, r3
 8105d92:	f3bf 8f6f 	isb	sy
 8105d96:	f3bf 8f4f 	dsb	sy
 8105d9a:	60bb      	str	r3, [r7, #8]
}
 8105d9c:	bf00      	nop
 8105d9e:	e7fe      	b.n	8105d9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8105da0:	693b      	ldr	r3, [r7, #16]
 8105da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105da4:	1e5a      	subs	r2, r3, #1
 8105da6:	693b      	ldr	r3, [r7, #16]
 8105da8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8105daa:	693b      	ldr	r3, [r7, #16]
 8105dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105dae:	693b      	ldr	r3, [r7, #16]
 8105db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105db2:	429a      	cmp	r2, r3
 8105db4:	d02c      	beq.n	8105e10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8105db6:	693b      	ldr	r3, [r7, #16]
 8105db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105dba:	2b00      	cmp	r3, #0
 8105dbc:	d128      	bne.n	8105e10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8105dbe:	693b      	ldr	r3, [r7, #16]
 8105dc0:	3304      	adds	r3, #4
 8105dc2:	4618      	mov	r0, r3
 8105dc4:	f7fe f9fa 	bl	81041bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8105dc8:	693b      	ldr	r3, [r7, #16]
 8105dca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8105dcc:	693b      	ldr	r3, [r7, #16]
 8105dce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8105dd0:	693b      	ldr	r3, [r7, #16]
 8105dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105dd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8105dd8:	693b      	ldr	r3, [r7, #16]
 8105dda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8105ddc:	693b      	ldr	r3, [r7, #16]
 8105dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105de0:	4b0f      	ldr	r3, [pc, #60]	; (8105e20 <xTaskPriorityDisinherit+0xd4>)
 8105de2:	681b      	ldr	r3, [r3, #0]
 8105de4:	429a      	cmp	r2, r3
 8105de6:	d903      	bls.n	8105df0 <xTaskPriorityDisinherit+0xa4>
 8105de8:	693b      	ldr	r3, [r7, #16]
 8105dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105dec:	4a0c      	ldr	r2, [pc, #48]	; (8105e20 <xTaskPriorityDisinherit+0xd4>)
 8105dee:	6013      	str	r3, [r2, #0]
 8105df0:	693b      	ldr	r3, [r7, #16]
 8105df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105df4:	4613      	mov	r3, r2
 8105df6:	009b      	lsls	r3, r3, #2
 8105df8:	4413      	add	r3, r2
 8105dfa:	009b      	lsls	r3, r3, #2
 8105dfc:	4a09      	ldr	r2, [pc, #36]	; (8105e24 <xTaskPriorityDisinherit+0xd8>)
 8105dfe:	441a      	add	r2, r3
 8105e00:	693b      	ldr	r3, [r7, #16]
 8105e02:	3304      	adds	r3, #4
 8105e04:	4619      	mov	r1, r3
 8105e06:	4610      	mov	r0, r2
 8105e08:	f7fe f97b 	bl	8104102 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8105e0c:	2301      	movs	r3, #1
 8105e0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8105e10:	697b      	ldr	r3, [r7, #20]
	}
 8105e12:	4618      	mov	r0, r3
 8105e14:	3718      	adds	r7, #24
 8105e16:	46bd      	mov	sp, r7
 8105e18:	bd80      	pop	{r7, pc}
 8105e1a:	bf00      	nop
 8105e1c:	100044d0 	.word	0x100044d0
 8105e20:	100049ac 	.word	0x100049ac
 8105e24:	100044d4 	.word	0x100044d4

08105e28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8105e28:	b580      	push	{r7, lr}
 8105e2a:	b084      	sub	sp, #16
 8105e2c:	af00      	add	r7, sp, #0
 8105e2e:	6078      	str	r0, [r7, #4]
 8105e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8105e32:	4b21      	ldr	r3, [pc, #132]	; (8105eb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8105e34:	681b      	ldr	r3, [r3, #0]
 8105e36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8105e38:	4b20      	ldr	r3, [pc, #128]	; (8105ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8105e3a:	681b      	ldr	r3, [r3, #0]
 8105e3c:	3304      	adds	r3, #4
 8105e3e:	4618      	mov	r0, r3
 8105e40:	f7fe f9bc 	bl	81041bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8105e44:	687b      	ldr	r3, [r7, #4]
 8105e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105e4a:	d10a      	bne.n	8105e62 <prvAddCurrentTaskToDelayedList+0x3a>
 8105e4c:	683b      	ldr	r3, [r7, #0]
 8105e4e:	2b00      	cmp	r3, #0
 8105e50:	d007      	beq.n	8105e62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8105e52:	4b1a      	ldr	r3, [pc, #104]	; (8105ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8105e54:	681b      	ldr	r3, [r3, #0]
 8105e56:	3304      	adds	r3, #4
 8105e58:	4619      	mov	r1, r3
 8105e5a:	4819      	ldr	r0, [pc, #100]	; (8105ec0 <prvAddCurrentTaskToDelayedList+0x98>)
 8105e5c:	f7fe f951 	bl	8104102 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8105e60:	e026      	b.n	8105eb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8105e62:	68fa      	ldr	r2, [r7, #12]
 8105e64:	687b      	ldr	r3, [r7, #4]
 8105e66:	4413      	add	r3, r2
 8105e68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8105e6a:	4b14      	ldr	r3, [pc, #80]	; (8105ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8105e6c:	681b      	ldr	r3, [r3, #0]
 8105e6e:	68ba      	ldr	r2, [r7, #8]
 8105e70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8105e72:	68ba      	ldr	r2, [r7, #8]
 8105e74:	68fb      	ldr	r3, [r7, #12]
 8105e76:	429a      	cmp	r2, r3
 8105e78:	d209      	bcs.n	8105e8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8105e7a:	4b12      	ldr	r3, [pc, #72]	; (8105ec4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8105e7c:	681a      	ldr	r2, [r3, #0]
 8105e7e:	4b0f      	ldr	r3, [pc, #60]	; (8105ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8105e80:	681b      	ldr	r3, [r3, #0]
 8105e82:	3304      	adds	r3, #4
 8105e84:	4619      	mov	r1, r3
 8105e86:	4610      	mov	r0, r2
 8105e88:	f7fe f95f 	bl	810414a <vListInsert>
}
 8105e8c:	e010      	b.n	8105eb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8105e8e:	4b0e      	ldr	r3, [pc, #56]	; (8105ec8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8105e90:	681a      	ldr	r2, [r3, #0]
 8105e92:	4b0a      	ldr	r3, [pc, #40]	; (8105ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8105e94:	681b      	ldr	r3, [r3, #0]
 8105e96:	3304      	adds	r3, #4
 8105e98:	4619      	mov	r1, r3
 8105e9a:	4610      	mov	r0, r2
 8105e9c:	f7fe f955 	bl	810414a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8105ea0:	4b0a      	ldr	r3, [pc, #40]	; (8105ecc <prvAddCurrentTaskToDelayedList+0xa4>)
 8105ea2:	681b      	ldr	r3, [r3, #0]
 8105ea4:	68ba      	ldr	r2, [r7, #8]
 8105ea6:	429a      	cmp	r2, r3
 8105ea8:	d202      	bcs.n	8105eb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8105eaa:	4a08      	ldr	r2, [pc, #32]	; (8105ecc <prvAddCurrentTaskToDelayedList+0xa4>)
 8105eac:	68bb      	ldr	r3, [r7, #8]
 8105eae:	6013      	str	r3, [r2, #0]
}
 8105eb0:	bf00      	nop
 8105eb2:	3710      	adds	r7, #16
 8105eb4:	46bd      	mov	sp, r7
 8105eb6:	bd80      	pop	{r7, pc}
 8105eb8:	100049a8 	.word	0x100049a8
 8105ebc:	100044d0 	.word	0x100044d0
 8105ec0:	10004990 	.word	0x10004990
 8105ec4:	10004960 	.word	0x10004960
 8105ec8:	1000495c 	.word	0x1000495c
 8105ecc:	100049c4 	.word	0x100049c4

08105ed0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8105ed0:	b580      	push	{r7, lr}
 8105ed2:	b08a      	sub	sp, #40	; 0x28
 8105ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8105ed6:	2300      	movs	r3, #0
 8105ed8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8105eda:	f000 fb07 	bl	81064ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8105ede:	4b1c      	ldr	r3, [pc, #112]	; (8105f50 <xTimerCreateTimerTask+0x80>)
 8105ee0:	681b      	ldr	r3, [r3, #0]
 8105ee2:	2b00      	cmp	r3, #0
 8105ee4:	d021      	beq.n	8105f2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8105ee6:	2300      	movs	r3, #0
 8105ee8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8105eea:	2300      	movs	r3, #0
 8105eec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8105eee:	1d3a      	adds	r2, r7, #4
 8105ef0:	f107 0108 	add.w	r1, r7, #8
 8105ef4:	f107 030c 	add.w	r3, r7, #12
 8105ef8:	4618      	mov	r0, r3
 8105efa:	f7fe f85d 	bl	8103fb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8105efe:	6879      	ldr	r1, [r7, #4]
 8105f00:	68bb      	ldr	r3, [r7, #8]
 8105f02:	68fa      	ldr	r2, [r7, #12]
 8105f04:	9202      	str	r2, [sp, #8]
 8105f06:	9301      	str	r3, [sp, #4]
 8105f08:	2302      	movs	r3, #2
 8105f0a:	9300      	str	r3, [sp, #0]
 8105f0c:	2300      	movs	r3, #0
 8105f0e:	460a      	mov	r2, r1
 8105f10:	4910      	ldr	r1, [pc, #64]	; (8105f54 <xTimerCreateTimerTask+0x84>)
 8105f12:	4811      	ldr	r0, [pc, #68]	; (8105f58 <xTimerCreateTimerTask+0x88>)
 8105f14:	f7ff f8b4 	bl	8105080 <xTaskCreateStatic>
 8105f18:	4603      	mov	r3, r0
 8105f1a:	4a10      	ldr	r2, [pc, #64]	; (8105f5c <xTimerCreateTimerTask+0x8c>)
 8105f1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8105f1e:	4b0f      	ldr	r3, [pc, #60]	; (8105f5c <xTimerCreateTimerTask+0x8c>)
 8105f20:	681b      	ldr	r3, [r3, #0]
 8105f22:	2b00      	cmp	r3, #0
 8105f24:	d001      	beq.n	8105f2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8105f26:	2301      	movs	r3, #1
 8105f28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8105f2a:	697b      	ldr	r3, [r7, #20]
 8105f2c:	2b00      	cmp	r3, #0
 8105f2e:	d10a      	bne.n	8105f46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8105f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105f34:	f383 8811 	msr	BASEPRI, r3
 8105f38:	f3bf 8f6f 	isb	sy
 8105f3c:	f3bf 8f4f 	dsb	sy
 8105f40:	613b      	str	r3, [r7, #16]
}
 8105f42:	bf00      	nop
 8105f44:	e7fe      	b.n	8105f44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8105f46:	697b      	ldr	r3, [r7, #20]
}
 8105f48:	4618      	mov	r0, r3
 8105f4a:	3718      	adds	r7, #24
 8105f4c:	46bd      	mov	sp, r7
 8105f4e:	bd80      	pop	{r7, pc}
 8105f50:	10004a00 	.word	0x10004a00
 8105f54:	08109cc0 	.word	0x08109cc0
 8105f58:	08106095 	.word	0x08106095
 8105f5c:	10004a04 	.word	0x10004a04

08105f60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8105f60:	b580      	push	{r7, lr}
 8105f62:	b08a      	sub	sp, #40	; 0x28
 8105f64:	af00      	add	r7, sp, #0
 8105f66:	60f8      	str	r0, [r7, #12]
 8105f68:	60b9      	str	r1, [r7, #8]
 8105f6a:	607a      	str	r2, [r7, #4]
 8105f6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8105f6e:	2300      	movs	r3, #0
 8105f70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8105f72:	68fb      	ldr	r3, [r7, #12]
 8105f74:	2b00      	cmp	r3, #0
 8105f76:	d10a      	bne.n	8105f8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8105f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105f7c:	f383 8811 	msr	BASEPRI, r3
 8105f80:	f3bf 8f6f 	isb	sy
 8105f84:	f3bf 8f4f 	dsb	sy
 8105f88:	623b      	str	r3, [r7, #32]
}
 8105f8a:	bf00      	nop
 8105f8c:	e7fe      	b.n	8105f8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8105f8e:	4b1a      	ldr	r3, [pc, #104]	; (8105ff8 <xTimerGenericCommand+0x98>)
 8105f90:	681b      	ldr	r3, [r3, #0]
 8105f92:	2b00      	cmp	r3, #0
 8105f94:	d02a      	beq.n	8105fec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8105f96:	68bb      	ldr	r3, [r7, #8]
 8105f98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8105f9a:	687b      	ldr	r3, [r7, #4]
 8105f9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8105f9e:	68fb      	ldr	r3, [r7, #12]
 8105fa0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8105fa2:	68bb      	ldr	r3, [r7, #8]
 8105fa4:	2b05      	cmp	r3, #5
 8105fa6:	dc18      	bgt.n	8105fda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8105fa8:	f7ff feb2 	bl	8105d10 <xTaskGetSchedulerState>
 8105fac:	4603      	mov	r3, r0
 8105fae:	2b02      	cmp	r3, #2
 8105fb0:	d109      	bne.n	8105fc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8105fb2:	4b11      	ldr	r3, [pc, #68]	; (8105ff8 <xTimerGenericCommand+0x98>)
 8105fb4:	6818      	ldr	r0, [r3, #0]
 8105fb6:	f107 0110 	add.w	r1, r7, #16
 8105fba:	2300      	movs	r3, #0
 8105fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105fbe:	f7fe fc77 	bl	81048b0 <xQueueGenericSend>
 8105fc2:	6278      	str	r0, [r7, #36]	; 0x24
 8105fc4:	e012      	b.n	8105fec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8105fc6:	4b0c      	ldr	r3, [pc, #48]	; (8105ff8 <xTimerGenericCommand+0x98>)
 8105fc8:	6818      	ldr	r0, [r3, #0]
 8105fca:	f107 0110 	add.w	r1, r7, #16
 8105fce:	2300      	movs	r3, #0
 8105fd0:	2200      	movs	r2, #0
 8105fd2:	f7fe fc6d 	bl	81048b0 <xQueueGenericSend>
 8105fd6:	6278      	str	r0, [r7, #36]	; 0x24
 8105fd8:	e008      	b.n	8105fec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8105fda:	4b07      	ldr	r3, [pc, #28]	; (8105ff8 <xTimerGenericCommand+0x98>)
 8105fdc:	6818      	ldr	r0, [r3, #0]
 8105fde:	f107 0110 	add.w	r1, r7, #16
 8105fe2:	2300      	movs	r3, #0
 8105fe4:	683a      	ldr	r2, [r7, #0]
 8105fe6:	f7fe fd61 	bl	8104aac <xQueueGenericSendFromISR>
 8105fea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8105fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8105fee:	4618      	mov	r0, r3
 8105ff0:	3728      	adds	r7, #40	; 0x28
 8105ff2:	46bd      	mov	sp, r7
 8105ff4:	bd80      	pop	{r7, pc}
 8105ff6:	bf00      	nop
 8105ff8:	10004a00 	.word	0x10004a00

08105ffc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8105ffc:	b580      	push	{r7, lr}
 8105ffe:	b088      	sub	sp, #32
 8106000:	af02      	add	r7, sp, #8
 8106002:	6078      	str	r0, [r7, #4]
 8106004:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106006:	4b22      	ldr	r3, [pc, #136]	; (8106090 <prvProcessExpiredTimer+0x94>)
 8106008:	681b      	ldr	r3, [r3, #0]
 810600a:	68db      	ldr	r3, [r3, #12]
 810600c:	68db      	ldr	r3, [r3, #12]
 810600e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8106010:	697b      	ldr	r3, [r7, #20]
 8106012:	3304      	adds	r3, #4
 8106014:	4618      	mov	r0, r3
 8106016:	f7fe f8d1 	bl	81041bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810601a:	697b      	ldr	r3, [r7, #20]
 810601c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8106020:	f003 0304 	and.w	r3, r3, #4
 8106024:	2b00      	cmp	r3, #0
 8106026:	d022      	beq.n	810606e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8106028:	697b      	ldr	r3, [r7, #20]
 810602a:	699a      	ldr	r2, [r3, #24]
 810602c:	687b      	ldr	r3, [r7, #4]
 810602e:	18d1      	adds	r1, r2, r3
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	683a      	ldr	r2, [r7, #0]
 8106034:	6978      	ldr	r0, [r7, #20]
 8106036:	f000 f8d1 	bl	81061dc <prvInsertTimerInActiveList>
 810603a:	4603      	mov	r3, r0
 810603c:	2b00      	cmp	r3, #0
 810603e:	d01f      	beq.n	8106080 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8106040:	2300      	movs	r3, #0
 8106042:	9300      	str	r3, [sp, #0]
 8106044:	2300      	movs	r3, #0
 8106046:	687a      	ldr	r2, [r7, #4]
 8106048:	2100      	movs	r1, #0
 810604a:	6978      	ldr	r0, [r7, #20]
 810604c:	f7ff ff88 	bl	8105f60 <xTimerGenericCommand>
 8106050:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8106052:	693b      	ldr	r3, [r7, #16]
 8106054:	2b00      	cmp	r3, #0
 8106056:	d113      	bne.n	8106080 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8106058:	f04f 0350 	mov.w	r3, #80	; 0x50
 810605c:	f383 8811 	msr	BASEPRI, r3
 8106060:	f3bf 8f6f 	isb	sy
 8106064:	f3bf 8f4f 	dsb	sy
 8106068:	60fb      	str	r3, [r7, #12]
}
 810606a:	bf00      	nop
 810606c:	e7fe      	b.n	810606c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810606e:	697b      	ldr	r3, [r7, #20]
 8106070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8106074:	f023 0301 	bic.w	r3, r3, #1
 8106078:	b2da      	uxtb	r2, r3
 810607a:	697b      	ldr	r3, [r7, #20]
 810607c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8106080:	697b      	ldr	r3, [r7, #20]
 8106082:	6a1b      	ldr	r3, [r3, #32]
 8106084:	6978      	ldr	r0, [r7, #20]
 8106086:	4798      	blx	r3
}
 8106088:	bf00      	nop
 810608a:	3718      	adds	r7, #24
 810608c:	46bd      	mov	sp, r7
 810608e:	bd80      	pop	{r7, pc}
 8106090:	100049f8 	.word	0x100049f8

08106094 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8106094:	b580      	push	{r7, lr}
 8106096:	b084      	sub	sp, #16
 8106098:	af00      	add	r7, sp, #0
 810609a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810609c:	f107 0308 	add.w	r3, r7, #8
 81060a0:	4618      	mov	r0, r3
 81060a2:	f000 f857 	bl	8106154 <prvGetNextExpireTime>
 81060a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 81060a8:	68bb      	ldr	r3, [r7, #8]
 81060aa:	4619      	mov	r1, r3
 81060ac:	68f8      	ldr	r0, [r7, #12]
 81060ae:	f000 f803 	bl	81060b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 81060b2:	f000 f8d5 	bl	8106260 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81060b6:	e7f1      	b.n	810609c <prvTimerTask+0x8>

081060b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 81060b8:	b580      	push	{r7, lr}
 81060ba:	b084      	sub	sp, #16
 81060bc:	af00      	add	r7, sp, #0
 81060be:	6078      	str	r0, [r7, #4]
 81060c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 81060c2:	f7ff fa39 	bl	8105538 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 81060c6:	f107 0308 	add.w	r3, r7, #8
 81060ca:	4618      	mov	r0, r3
 81060cc:	f000 f866 	bl	810619c <prvSampleTimeNow>
 81060d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 81060d2:	68bb      	ldr	r3, [r7, #8]
 81060d4:	2b00      	cmp	r3, #0
 81060d6:	d130      	bne.n	810613a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 81060d8:	683b      	ldr	r3, [r7, #0]
 81060da:	2b00      	cmp	r3, #0
 81060dc:	d10a      	bne.n	81060f4 <prvProcessTimerOrBlockTask+0x3c>
 81060de:	687a      	ldr	r2, [r7, #4]
 81060e0:	68fb      	ldr	r3, [r7, #12]
 81060e2:	429a      	cmp	r2, r3
 81060e4:	d806      	bhi.n	81060f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 81060e6:	f7ff fa35 	bl	8105554 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 81060ea:	68f9      	ldr	r1, [r7, #12]
 81060ec:	6878      	ldr	r0, [r7, #4]
 81060ee:	f7ff ff85 	bl	8105ffc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 81060f2:	e024      	b.n	810613e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 81060f4:	683b      	ldr	r3, [r7, #0]
 81060f6:	2b00      	cmp	r3, #0
 81060f8:	d008      	beq.n	810610c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 81060fa:	4b13      	ldr	r3, [pc, #76]	; (8106148 <prvProcessTimerOrBlockTask+0x90>)
 81060fc:	681b      	ldr	r3, [r3, #0]
 81060fe:	681b      	ldr	r3, [r3, #0]
 8106100:	2b00      	cmp	r3, #0
 8106102:	d101      	bne.n	8106108 <prvProcessTimerOrBlockTask+0x50>
 8106104:	2301      	movs	r3, #1
 8106106:	e000      	b.n	810610a <prvProcessTimerOrBlockTask+0x52>
 8106108:	2300      	movs	r3, #0
 810610a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810610c:	4b0f      	ldr	r3, [pc, #60]	; (810614c <prvProcessTimerOrBlockTask+0x94>)
 810610e:	6818      	ldr	r0, [r3, #0]
 8106110:	687a      	ldr	r2, [r7, #4]
 8106112:	68fb      	ldr	r3, [r7, #12]
 8106114:	1ad3      	subs	r3, r2, r3
 8106116:	683a      	ldr	r2, [r7, #0]
 8106118:	4619      	mov	r1, r3
 810611a:	f7fe ff7d 	bl	8105018 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810611e:	f7ff fa19 	bl	8105554 <xTaskResumeAll>
 8106122:	4603      	mov	r3, r0
 8106124:	2b00      	cmp	r3, #0
 8106126:	d10a      	bne.n	810613e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8106128:	4b09      	ldr	r3, [pc, #36]	; (8106150 <prvProcessTimerOrBlockTask+0x98>)
 810612a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810612e:	601a      	str	r2, [r3, #0]
 8106130:	f3bf 8f4f 	dsb	sy
 8106134:	f3bf 8f6f 	isb	sy
}
 8106138:	e001      	b.n	810613e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810613a:	f7ff fa0b 	bl	8105554 <xTaskResumeAll>
}
 810613e:	bf00      	nop
 8106140:	3710      	adds	r7, #16
 8106142:	46bd      	mov	sp, r7
 8106144:	bd80      	pop	{r7, pc}
 8106146:	bf00      	nop
 8106148:	100049fc 	.word	0x100049fc
 810614c:	10004a00 	.word	0x10004a00
 8106150:	e000ed04 	.word	0xe000ed04

08106154 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8106154:	b480      	push	{r7}
 8106156:	b085      	sub	sp, #20
 8106158:	af00      	add	r7, sp, #0
 810615a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810615c:	4b0e      	ldr	r3, [pc, #56]	; (8106198 <prvGetNextExpireTime+0x44>)
 810615e:	681b      	ldr	r3, [r3, #0]
 8106160:	681b      	ldr	r3, [r3, #0]
 8106162:	2b00      	cmp	r3, #0
 8106164:	d101      	bne.n	810616a <prvGetNextExpireTime+0x16>
 8106166:	2201      	movs	r2, #1
 8106168:	e000      	b.n	810616c <prvGetNextExpireTime+0x18>
 810616a:	2200      	movs	r2, #0
 810616c:	687b      	ldr	r3, [r7, #4]
 810616e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8106170:	687b      	ldr	r3, [r7, #4]
 8106172:	681b      	ldr	r3, [r3, #0]
 8106174:	2b00      	cmp	r3, #0
 8106176:	d105      	bne.n	8106184 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8106178:	4b07      	ldr	r3, [pc, #28]	; (8106198 <prvGetNextExpireTime+0x44>)
 810617a:	681b      	ldr	r3, [r3, #0]
 810617c:	68db      	ldr	r3, [r3, #12]
 810617e:	681b      	ldr	r3, [r3, #0]
 8106180:	60fb      	str	r3, [r7, #12]
 8106182:	e001      	b.n	8106188 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8106184:	2300      	movs	r3, #0
 8106186:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8106188:	68fb      	ldr	r3, [r7, #12]
}
 810618a:	4618      	mov	r0, r3
 810618c:	3714      	adds	r7, #20
 810618e:	46bd      	mov	sp, r7
 8106190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106194:	4770      	bx	lr
 8106196:	bf00      	nop
 8106198:	100049f8 	.word	0x100049f8

0810619c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810619c:	b580      	push	{r7, lr}
 810619e:	b084      	sub	sp, #16
 81061a0:	af00      	add	r7, sp, #0
 81061a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 81061a4:	f7ff fa74 	bl	8105690 <xTaskGetTickCount>
 81061a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 81061aa:	4b0b      	ldr	r3, [pc, #44]	; (81061d8 <prvSampleTimeNow+0x3c>)
 81061ac:	681b      	ldr	r3, [r3, #0]
 81061ae:	68fa      	ldr	r2, [r7, #12]
 81061b0:	429a      	cmp	r2, r3
 81061b2:	d205      	bcs.n	81061c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 81061b4:	f000 f936 	bl	8106424 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	2201      	movs	r2, #1
 81061bc:	601a      	str	r2, [r3, #0]
 81061be:	e002      	b.n	81061c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 81061c0:	687b      	ldr	r3, [r7, #4]
 81061c2:	2200      	movs	r2, #0
 81061c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 81061c6:	4a04      	ldr	r2, [pc, #16]	; (81061d8 <prvSampleTimeNow+0x3c>)
 81061c8:	68fb      	ldr	r3, [r7, #12]
 81061ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 81061cc:	68fb      	ldr	r3, [r7, #12]
}
 81061ce:	4618      	mov	r0, r3
 81061d0:	3710      	adds	r7, #16
 81061d2:	46bd      	mov	sp, r7
 81061d4:	bd80      	pop	{r7, pc}
 81061d6:	bf00      	nop
 81061d8:	10004a08 	.word	0x10004a08

081061dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 81061dc:	b580      	push	{r7, lr}
 81061de:	b086      	sub	sp, #24
 81061e0:	af00      	add	r7, sp, #0
 81061e2:	60f8      	str	r0, [r7, #12]
 81061e4:	60b9      	str	r1, [r7, #8]
 81061e6:	607a      	str	r2, [r7, #4]
 81061e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 81061ea:	2300      	movs	r3, #0
 81061ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 81061ee:	68fb      	ldr	r3, [r7, #12]
 81061f0:	68ba      	ldr	r2, [r7, #8]
 81061f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81061f4:	68fb      	ldr	r3, [r7, #12]
 81061f6:	68fa      	ldr	r2, [r7, #12]
 81061f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 81061fa:	68ba      	ldr	r2, [r7, #8]
 81061fc:	687b      	ldr	r3, [r7, #4]
 81061fe:	429a      	cmp	r2, r3
 8106200:	d812      	bhi.n	8106228 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8106202:	687a      	ldr	r2, [r7, #4]
 8106204:	683b      	ldr	r3, [r7, #0]
 8106206:	1ad2      	subs	r2, r2, r3
 8106208:	68fb      	ldr	r3, [r7, #12]
 810620a:	699b      	ldr	r3, [r3, #24]
 810620c:	429a      	cmp	r2, r3
 810620e:	d302      	bcc.n	8106216 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8106210:	2301      	movs	r3, #1
 8106212:	617b      	str	r3, [r7, #20]
 8106214:	e01b      	b.n	810624e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8106216:	4b10      	ldr	r3, [pc, #64]	; (8106258 <prvInsertTimerInActiveList+0x7c>)
 8106218:	681a      	ldr	r2, [r3, #0]
 810621a:	68fb      	ldr	r3, [r7, #12]
 810621c:	3304      	adds	r3, #4
 810621e:	4619      	mov	r1, r3
 8106220:	4610      	mov	r0, r2
 8106222:	f7fd ff92 	bl	810414a <vListInsert>
 8106226:	e012      	b.n	810624e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8106228:	687a      	ldr	r2, [r7, #4]
 810622a:	683b      	ldr	r3, [r7, #0]
 810622c:	429a      	cmp	r2, r3
 810622e:	d206      	bcs.n	810623e <prvInsertTimerInActiveList+0x62>
 8106230:	68ba      	ldr	r2, [r7, #8]
 8106232:	683b      	ldr	r3, [r7, #0]
 8106234:	429a      	cmp	r2, r3
 8106236:	d302      	bcc.n	810623e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8106238:	2301      	movs	r3, #1
 810623a:	617b      	str	r3, [r7, #20]
 810623c:	e007      	b.n	810624e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810623e:	4b07      	ldr	r3, [pc, #28]	; (810625c <prvInsertTimerInActiveList+0x80>)
 8106240:	681a      	ldr	r2, [r3, #0]
 8106242:	68fb      	ldr	r3, [r7, #12]
 8106244:	3304      	adds	r3, #4
 8106246:	4619      	mov	r1, r3
 8106248:	4610      	mov	r0, r2
 810624a:	f7fd ff7e 	bl	810414a <vListInsert>
		}
	}

	return xProcessTimerNow;
 810624e:	697b      	ldr	r3, [r7, #20]
}
 8106250:	4618      	mov	r0, r3
 8106252:	3718      	adds	r7, #24
 8106254:	46bd      	mov	sp, r7
 8106256:	bd80      	pop	{r7, pc}
 8106258:	100049fc 	.word	0x100049fc
 810625c:	100049f8 	.word	0x100049f8

08106260 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8106260:	b580      	push	{r7, lr}
 8106262:	b08e      	sub	sp, #56	; 0x38
 8106264:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8106266:	e0ca      	b.n	81063fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8106268:	687b      	ldr	r3, [r7, #4]
 810626a:	2b00      	cmp	r3, #0
 810626c:	da18      	bge.n	81062a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810626e:	1d3b      	adds	r3, r7, #4
 8106270:	3304      	adds	r3, #4
 8106272:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8106274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106276:	2b00      	cmp	r3, #0
 8106278:	d10a      	bne.n	8106290 <prvProcessReceivedCommands+0x30>
	__asm volatile
 810627a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810627e:	f383 8811 	msr	BASEPRI, r3
 8106282:	f3bf 8f6f 	isb	sy
 8106286:	f3bf 8f4f 	dsb	sy
 810628a:	61fb      	str	r3, [r7, #28]
}
 810628c:	bf00      	nop
 810628e:	e7fe      	b.n	810628e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8106290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106292:	681b      	ldr	r3, [r3, #0]
 8106294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8106296:	6850      	ldr	r0, [r2, #4]
 8106298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810629a:	6892      	ldr	r2, [r2, #8]
 810629c:	4611      	mov	r1, r2
 810629e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 81062a0:	687b      	ldr	r3, [r7, #4]
 81062a2:	2b00      	cmp	r3, #0
 81062a4:	f2c0 80aa 	blt.w	81063fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 81062a8:	68fb      	ldr	r3, [r7, #12]
 81062aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 81062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81062ae:	695b      	ldr	r3, [r3, #20]
 81062b0:	2b00      	cmp	r3, #0
 81062b2:	d004      	beq.n	81062be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81062b6:	3304      	adds	r3, #4
 81062b8:	4618      	mov	r0, r3
 81062ba:	f7fd ff7f 	bl	81041bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 81062be:	463b      	mov	r3, r7
 81062c0:	4618      	mov	r0, r3
 81062c2:	f7ff ff6b 	bl	810619c <prvSampleTimeNow>
 81062c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 81062c8:	687b      	ldr	r3, [r7, #4]
 81062ca:	2b09      	cmp	r3, #9
 81062cc:	f200 8097 	bhi.w	81063fe <prvProcessReceivedCommands+0x19e>
 81062d0:	a201      	add	r2, pc, #4	; (adr r2, 81062d8 <prvProcessReceivedCommands+0x78>)
 81062d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81062d6:	bf00      	nop
 81062d8:	08106301 	.word	0x08106301
 81062dc:	08106301 	.word	0x08106301
 81062e0:	08106301 	.word	0x08106301
 81062e4:	08106375 	.word	0x08106375
 81062e8:	08106389 	.word	0x08106389
 81062ec:	081063d3 	.word	0x081063d3
 81062f0:	08106301 	.word	0x08106301
 81062f4:	08106301 	.word	0x08106301
 81062f8:	08106375 	.word	0x08106375
 81062fc:	08106389 	.word	0x08106389
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8106300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8106306:	f043 0301 	orr.w	r3, r3, #1
 810630a:	b2da      	uxtb	r2, r3
 810630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810630e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8106312:	68ba      	ldr	r2, [r7, #8]
 8106314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106316:	699b      	ldr	r3, [r3, #24]
 8106318:	18d1      	adds	r1, r2, r3
 810631a:	68bb      	ldr	r3, [r7, #8]
 810631c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810631e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106320:	f7ff ff5c 	bl	81061dc <prvInsertTimerInActiveList>
 8106324:	4603      	mov	r3, r0
 8106326:	2b00      	cmp	r3, #0
 8106328:	d069      	beq.n	81063fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810632c:	6a1b      	ldr	r3, [r3, #32]
 810632e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106330:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8106332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8106338:	f003 0304 	and.w	r3, r3, #4
 810633c:	2b00      	cmp	r3, #0
 810633e:	d05e      	beq.n	81063fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8106340:	68ba      	ldr	r2, [r7, #8]
 8106342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106344:	699b      	ldr	r3, [r3, #24]
 8106346:	441a      	add	r2, r3
 8106348:	2300      	movs	r3, #0
 810634a:	9300      	str	r3, [sp, #0]
 810634c:	2300      	movs	r3, #0
 810634e:	2100      	movs	r1, #0
 8106350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106352:	f7ff fe05 	bl	8105f60 <xTimerGenericCommand>
 8106356:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8106358:	6a3b      	ldr	r3, [r7, #32]
 810635a:	2b00      	cmp	r3, #0
 810635c:	d14f      	bne.n	81063fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 810635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106362:	f383 8811 	msr	BASEPRI, r3
 8106366:	f3bf 8f6f 	isb	sy
 810636a:	f3bf 8f4f 	dsb	sy
 810636e:	61bb      	str	r3, [r7, #24]
}
 8106370:	bf00      	nop
 8106372:	e7fe      	b.n	8106372 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8106374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810637a:	f023 0301 	bic.w	r3, r3, #1
 810637e:	b2da      	uxtb	r2, r3
 8106380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8106386:	e03a      	b.n	81063fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8106388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810638a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810638e:	f043 0301 	orr.w	r3, r3, #1
 8106392:	b2da      	uxtb	r2, r3
 8106394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810639a:	68ba      	ldr	r2, [r7, #8]
 810639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810639e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 81063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81063a2:	699b      	ldr	r3, [r3, #24]
 81063a4:	2b00      	cmp	r3, #0
 81063a6:	d10a      	bne.n	81063be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 81063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81063ac:	f383 8811 	msr	BASEPRI, r3
 81063b0:	f3bf 8f6f 	isb	sy
 81063b4:	f3bf 8f4f 	dsb	sy
 81063b8:	617b      	str	r3, [r7, #20]
}
 81063ba:	bf00      	nop
 81063bc:	e7fe      	b.n	81063bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 81063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81063c0:	699a      	ldr	r2, [r3, #24]
 81063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81063c4:	18d1      	adds	r1, r2, r3
 81063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81063c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81063ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81063cc:	f7ff ff06 	bl	81061dc <prvInsertTimerInActiveList>
					break;
 81063d0:	e015      	b.n	81063fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 81063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81063d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81063d8:	f003 0302 	and.w	r3, r3, #2
 81063dc:	2b00      	cmp	r3, #0
 81063de:	d103      	bne.n	81063e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 81063e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81063e2:	f7fd fe49 	bl	8104078 <vPortFree>
 81063e6:	e00a      	b.n	81063fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81063ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81063ee:	f023 0301 	bic.w	r3, r3, #1
 81063f2:	b2da      	uxtb	r2, r3
 81063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81063f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 81063fa:	e000      	b.n	81063fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 81063fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81063fe:	4b08      	ldr	r3, [pc, #32]	; (8106420 <prvProcessReceivedCommands+0x1c0>)
 8106400:	681b      	ldr	r3, [r3, #0]
 8106402:	1d39      	adds	r1, r7, #4
 8106404:	2200      	movs	r2, #0
 8106406:	4618      	mov	r0, r3
 8106408:	f7fe fbec 	bl	8104be4 <xQueueReceive>
 810640c:	4603      	mov	r3, r0
 810640e:	2b00      	cmp	r3, #0
 8106410:	f47f af2a 	bne.w	8106268 <prvProcessReceivedCommands+0x8>
	}
}
 8106414:	bf00      	nop
 8106416:	bf00      	nop
 8106418:	3730      	adds	r7, #48	; 0x30
 810641a:	46bd      	mov	sp, r7
 810641c:	bd80      	pop	{r7, pc}
 810641e:	bf00      	nop
 8106420:	10004a00 	.word	0x10004a00

08106424 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8106424:	b580      	push	{r7, lr}
 8106426:	b088      	sub	sp, #32
 8106428:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810642a:	e048      	b.n	81064be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810642c:	4b2d      	ldr	r3, [pc, #180]	; (81064e4 <prvSwitchTimerLists+0xc0>)
 810642e:	681b      	ldr	r3, [r3, #0]
 8106430:	68db      	ldr	r3, [r3, #12]
 8106432:	681b      	ldr	r3, [r3, #0]
 8106434:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106436:	4b2b      	ldr	r3, [pc, #172]	; (81064e4 <prvSwitchTimerLists+0xc0>)
 8106438:	681b      	ldr	r3, [r3, #0]
 810643a:	68db      	ldr	r3, [r3, #12]
 810643c:	68db      	ldr	r3, [r3, #12]
 810643e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8106440:	68fb      	ldr	r3, [r7, #12]
 8106442:	3304      	adds	r3, #4
 8106444:	4618      	mov	r0, r3
 8106446:	f7fd feb9 	bl	81041bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810644a:	68fb      	ldr	r3, [r7, #12]
 810644c:	6a1b      	ldr	r3, [r3, #32]
 810644e:	68f8      	ldr	r0, [r7, #12]
 8106450:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8106452:	68fb      	ldr	r3, [r7, #12]
 8106454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8106458:	f003 0304 	and.w	r3, r3, #4
 810645c:	2b00      	cmp	r3, #0
 810645e:	d02e      	beq.n	81064be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8106460:	68fb      	ldr	r3, [r7, #12]
 8106462:	699b      	ldr	r3, [r3, #24]
 8106464:	693a      	ldr	r2, [r7, #16]
 8106466:	4413      	add	r3, r2
 8106468:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810646a:	68ba      	ldr	r2, [r7, #8]
 810646c:	693b      	ldr	r3, [r7, #16]
 810646e:	429a      	cmp	r2, r3
 8106470:	d90e      	bls.n	8106490 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8106472:	68fb      	ldr	r3, [r7, #12]
 8106474:	68ba      	ldr	r2, [r7, #8]
 8106476:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8106478:	68fb      	ldr	r3, [r7, #12]
 810647a:	68fa      	ldr	r2, [r7, #12]
 810647c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810647e:	4b19      	ldr	r3, [pc, #100]	; (81064e4 <prvSwitchTimerLists+0xc0>)
 8106480:	681a      	ldr	r2, [r3, #0]
 8106482:	68fb      	ldr	r3, [r7, #12]
 8106484:	3304      	adds	r3, #4
 8106486:	4619      	mov	r1, r3
 8106488:	4610      	mov	r0, r2
 810648a:	f7fd fe5e 	bl	810414a <vListInsert>
 810648e:	e016      	b.n	81064be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8106490:	2300      	movs	r3, #0
 8106492:	9300      	str	r3, [sp, #0]
 8106494:	2300      	movs	r3, #0
 8106496:	693a      	ldr	r2, [r7, #16]
 8106498:	2100      	movs	r1, #0
 810649a:	68f8      	ldr	r0, [r7, #12]
 810649c:	f7ff fd60 	bl	8105f60 <xTimerGenericCommand>
 81064a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 81064a2:	687b      	ldr	r3, [r7, #4]
 81064a4:	2b00      	cmp	r3, #0
 81064a6:	d10a      	bne.n	81064be <prvSwitchTimerLists+0x9a>
	__asm volatile
 81064a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81064ac:	f383 8811 	msr	BASEPRI, r3
 81064b0:	f3bf 8f6f 	isb	sy
 81064b4:	f3bf 8f4f 	dsb	sy
 81064b8:	603b      	str	r3, [r7, #0]
}
 81064ba:	bf00      	nop
 81064bc:	e7fe      	b.n	81064bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81064be:	4b09      	ldr	r3, [pc, #36]	; (81064e4 <prvSwitchTimerLists+0xc0>)
 81064c0:	681b      	ldr	r3, [r3, #0]
 81064c2:	681b      	ldr	r3, [r3, #0]
 81064c4:	2b00      	cmp	r3, #0
 81064c6:	d1b1      	bne.n	810642c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 81064c8:	4b06      	ldr	r3, [pc, #24]	; (81064e4 <prvSwitchTimerLists+0xc0>)
 81064ca:	681b      	ldr	r3, [r3, #0]
 81064cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 81064ce:	4b06      	ldr	r3, [pc, #24]	; (81064e8 <prvSwitchTimerLists+0xc4>)
 81064d0:	681b      	ldr	r3, [r3, #0]
 81064d2:	4a04      	ldr	r2, [pc, #16]	; (81064e4 <prvSwitchTimerLists+0xc0>)
 81064d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 81064d6:	4a04      	ldr	r2, [pc, #16]	; (81064e8 <prvSwitchTimerLists+0xc4>)
 81064d8:	697b      	ldr	r3, [r7, #20]
 81064da:	6013      	str	r3, [r2, #0]
}
 81064dc:	bf00      	nop
 81064de:	3718      	adds	r7, #24
 81064e0:	46bd      	mov	sp, r7
 81064e2:	bd80      	pop	{r7, pc}
 81064e4:	100049f8 	.word	0x100049f8
 81064e8:	100049fc 	.word	0x100049fc

081064ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 81064ec:	b580      	push	{r7, lr}
 81064ee:	b082      	sub	sp, #8
 81064f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 81064f2:	f7fd ffb7 	bl	8104464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 81064f6:	4b15      	ldr	r3, [pc, #84]	; (810654c <prvCheckForValidListAndQueue+0x60>)
 81064f8:	681b      	ldr	r3, [r3, #0]
 81064fa:	2b00      	cmp	r3, #0
 81064fc:	d120      	bne.n	8106540 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 81064fe:	4814      	ldr	r0, [pc, #80]	; (8106550 <prvCheckForValidListAndQueue+0x64>)
 8106500:	f7fd fdd2 	bl	81040a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8106504:	4813      	ldr	r0, [pc, #76]	; (8106554 <prvCheckForValidListAndQueue+0x68>)
 8106506:	f7fd fdcf 	bl	81040a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810650a:	4b13      	ldr	r3, [pc, #76]	; (8106558 <prvCheckForValidListAndQueue+0x6c>)
 810650c:	4a10      	ldr	r2, [pc, #64]	; (8106550 <prvCheckForValidListAndQueue+0x64>)
 810650e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8106510:	4b12      	ldr	r3, [pc, #72]	; (810655c <prvCheckForValidListAndQueue+0x70>)
 8106512:	4a10      	ldr	r2, [pc, #64]	; (8106554 <prvCheckForValidListAndQueue+0x68>)
 8106514:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8106516:	2300      	movs	r3, #0
 8106518:	9300      	str	r3, [sp, #0]
 810651a:	4b11      	ldr	r3, [pc, #68]	; (8106560 <prvCheckForValidListAndQueue+0x74>)
 810651c:	4a11      	ldr	r2, [pc, #68]	; (8106564 <prvCheckForValidListAndQueue+0x78>)
 810651e:	2110      	movs	r1, #16
 8106520:	200a      	movs	r0, #10
 8106522:	f7fe f929 	bl	8104778 <xQueueGenericCreateStatic>
 8106526:	4603      	mov	r3, r0
 8106528:	4a08      	ldr	r2, [pc, #32]	; (810654c <prvCheckForValidListAndQueue+0x60>)
 810652a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810652c:	4b07      	ldr	r3, [pc, #28]	; (810654c <prvCheckForValidListAndQueue+0x60>)
 810652e:	681b      	ldr	r3, [r3, #0]
 8106530:	2b00      	cmp	r3, #0
 8106532:	d005      	beq.n	8106540 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8106534:	4b05      	ldr	r3, [pc, #20]	; (810654c <prvCheckForValidListAndQueue+0x60>)
 8106536:	681b      	ldr	r3, [r3, #0]
 8106538:	490b      	ldr	r1, [pc, #44]	; (8106568 <prvCheckForValidListAndQueue+0x7c>)
 810653a:	4618      	mov	r0, r3
 810653c:	f7fe fd42 	bl	8104fc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8106540:	f7fd ffc0 	bl	81044c4 <vPortExitCritical>
}
 8106544:	bf00      	nop
 8106546:	46bd      	mov	sp, r7
 8106548:	bd80      	pop	{r7, pc}
 810654a:	bf00      	nop
 810654c:	10004a00 	.word	0x10004a00
 8106550:	100049d0 	.word	0x100049d0
 8106554:	100049e4 	.word	0x100049e4
 8106558:	100049f8 	.word	0x100049f8
 810655c:	100049fc 	.word	0x100049fc
 8106560:	10004aac 	.word	0x10004aac
 8106564:	10004a0c 	.word	0x10004a0c
 8106568:	08109cc8 	.word	0x08109cc8

0810656c <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 810656c:	b480      	push	{r7}
 810656e:	b083      	sub	sp, #12
 8106570:	af00      	add	r7, sp, #0
 8106572:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8106574:	687b      	ldr	r3, [r7, #4]
 8106576:	687a      	ldr	r2, [r7, #4]
 8106578:	605a      	str	r2, [r3, #4]
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	685a      	ldr	r2, [r3, #4]
 810657e:	687b      	ldr	r3, [r7, #4]
 8106580:	601a      	str	r2, [r3, #0]
}
 8106582:	bf00      	nop
 8106584:	370c      	adds	r7, #12
 8106586:	46bd      	mov	sp, r7
 8106588:	f85d 7b04 	ldr.w	r7, [sp], #4
 810658c:	4770      	bx	lr

0810658e <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 810658e:	b480      	push	{r7}
 8106590:	b083      	sub	sp, #12
 8106592:	af00      	add	r7, sp, #0
 8106594:	6078      	str	r0, [r7, #4]
 8106596:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8106598:	687b      	ldr	r3, [r7, #4]
 810659a:	685a      	ldr	r2, [r3, #4]
 810659c:	683b      	ldr	r3, [r7, #0]
 810659e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 81065a0:	683b      	ldr	r3, [r7, #0]
 81065a2:	687a      	ldr	r2, [r7, #4]
 81065a4:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 81065a6:	683b      	ldr	r3, [r7, #0]
 81065a8:	681b      	ldr	r3, [r3, #0]
 81065aa:	683a      	ldr	r2, [r7, #0]
 81065ac:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 81065ae:	683b      	ldr	r3, [r7, #0]
 81065b0:	685b      	ldr	r3, [r3, #4]
 81065b2:	683a      	ldr	r2, [r7, #0]
 81065b4:	601a      	str	r2, [r3, #0]
}
 81065b6:	bf00      	nop
 81065b8:	370c      	adds	r7, #12
 81065ba:	46bd      	mov	sp, r7
 81065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065c0:	4770      	bx	lr

081065c2 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 81065c2:	b580      	push	{r7, lr}
 81065c4:	b082      	sub	sp, #8
 81065c6:	af00      	add	r7, sp, #0
 81065c8:	6078      	str	r0, [r7, #4]
 81065ca:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 81065cc:	6839      	ldr	r1, [r7, #0]
 81065ce:	6878      	ldr	r0, [r7, #4]
 81065d0:	f7ff ffdd 	bl	810658e <metal_list_add_before>
}
 81065d4:	bf00      	nop
 81065d6:	3708      	adds	r7, #8
 81065d8:	46bd      	mov	sp, r7
 81065da:	bd80      	pop	{r7, pc}

081065dc <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 81065dc:	b580      	push	{r7, lr}
 81065de:	b082      	sub	sp, #8
 81065e0:	af00      	add	r7, sp, #0
 81065e2:	6078      	str	r0, [r7, #4]
 81065e4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 81065e6:	6839      	ldr	r1, [r7, #0]
 81065e8:	6878      	ldr	r0, [r7, #4]
 81065ea:	f001 fdb9 	bl	8108160 <metal_machine_cache_flush>
}
 81065ee:	bf00      	nop
 81065f0:	3708      	adds	r7, #8
 81065f2:	46bd      	mov	sp, r7
 81065f4:	bd80      	pop	{r7, pc}

081065f6 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 81065f6:	b580      	push	{r7, lr}
 81065f8:	b082      	sub	sp, #8
 81065fa:	af00      	add	r7, sp, #0
 81065fc:	6078      	str	r0, [r7, #4]
 81065fe:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8106600:	6839      	ldr	r1, [r7, #0]
 8106602:	6878      	ldr	r0, [r7, #4]
 8106604:	f001 fdb7 	bl	8108176 <metal_machine_cache_invalidate>
}
 8106608:	bf00      	nop
 810660a:	3708      	adds	r7, #8
 810660c:	46bd      	mov	sp, r7
 810660e:	bd80      	pop	{r7, pc}

08106610 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8106610:	b580      	push	{r7, lr}
 8106612:	b082      	sub	sp, #8
 8106614:	af00      	add	r7, sp, #0
 8106616:	6078      	str	r0, [r7, #4]
 8106618:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 810661a:	6839      	ldr	r1, [r7, #0]
 810661c:	6878      	ldr	r0, [r7, #4]
 810661e:	f7ff ffdd 	bl	81065dc <__metal_cache_flush>
}
 8106622:	bf00      	nop
 8106624:	3708      	adds	r7, #8
 8106626:	46bd      	mov	sp, r7
 8106628:	bd80      	pop	{r7, pc}

0810662a <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 810662a:	b580      	push	{r7, lr}
 810662c:	b082      	sub	sp, #8
 810662e:	af00      	add	r7, sp, #0
 8106630:	6078      	str	r0, [r7, #4]
 8106632:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8106634:	6839      	ldr	r1, [r7, #0]
 8106636:	6878      	ldr	r0, [r7, #4]
 8106638:	f7ff ffdd 	bl	81065f6 <__metal_cache_invalidate>
}
 810663c:	bf00      	nop
 810663e:	3708      	adds	r7, #8
 8106640:	46bd      	mov	sp, r7
 8106642:	bd80      	pop	{r7, pc}

08106644 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8106644:	b580      	push	{r7, lr}
 8106646:	b082      	sub	sp, #8
 8106648:	af00      	add	r7, sp, #0
 810664a:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 810664c:	687b      	ldr	r3, [r7, #4]
 810664e:	2b00      	cmp	r3, #0
 8106650:	d008      	beq.n	8106664 <metal_bus_register+0x20>
 8106652:	687b      	ldr	r3, [r7, #4]
 8106654:	681b      	ldr	r3, [r3, #0]
 8106656:	2b00      	cmp	r3, #0
 8106658:	d004      	beq.n	8106664 <metal_bus_register+0x20>
 810665a:	687b      	ldr	r3, [r7, #4]
 810665c:	681b      	ldr	r3, [r3, #0]
 810665e:	781b      	ldrb	r3, [r3, #0]
 8106660:	2b00      	cmp	r3, #0
 8106662:	d102      	bne.n	810666a <metal_bus_register+0x26>
		return -EINVAL;
 8106664:	f06f 0315 	mvn.w	r3, #21
 8106668:	e026      	b.n	81066b8 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 810666a:	687b      	ldr	r3, [r7, #4]
 810666c:	681b      	ldr	r3, [r3, #0]
 810666e:	2100      	movs	r1, #0
 8106670:	4618      	mov	r0, r3
 8106672:	f000 f82b 	bl	81066cc <metal_bus_find>
 8106676:	4603      	mov	r3, r0
 8106678:	2b00      	cmp	r3, #0
 810667a:	d102      	bne.n	8106682 <metal_bus_register+0x3e>
		return -EEXIST;
 810667c:	f06f 0310 	mvn.w	r3, #16
 8106680:	e01a      	b.n	81066b8 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8106682:	687b      	ldr	r3, [r7, #4]
 8106684:	331c      	adds	r3, #28
 8106686:	4618      	mov	r0, r3
 8106688:	f7ff ff70 	bl	810656c <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 810668c:	687b      	ldr	r3, [r7, #4]
 810668e:	3324      	adds	r3, #36	; 0x24
 8106690:	4619      	mov	r1, r3
 8106692:	480b      	ldr	r0, [pc, #44]	; (81066c0 <metal_bus_register+0x7c>)
 8106694:	f7ff ff95 	bl	81065c2 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8106698:	4b0a      	ldr	r3, [pc, #40]	; (81066c4 <metal_bus_register+0x80>)
 810669a:	781b      	ldrb	r3, [r3, #0]
 810669c:	2b06      	cmp	r3, #6
 810669e:	d90a      	bls.n	81066b6 <metal_bus_register+0x72>
 81066a0:	4b08      	ldr	r3, [pc, #32]	; (81066c4 <metal_bus_register+0x80>)
 81066a2:	685b      	ldr	r3, [r3, #4]
 81066a4:	2b00      	cmp	r3, #0
 81066a6:	d006      	beq.n	81066b6 <metal_bus_register+0x72>
 81066a8:	4b06      	ldr	r3, [pc, #24]	; (81066c4 <metal_bus_register+0x80>)
 81066aa:	685b      	ldr	r3, [r3, #4]
 81066ac:	687a      	ldr	r2, [r7, #4]
 81066ae:	6812      	ldr	r2, [r2, #0]
 81066b0:	4905      	ldr	r1, [pc, #20]	; (81066c8 <metal_bus_register+0x84>)
 81066b2:	2007      	movs	r0, #7
 81066b4:	4798      	blx	r3
	return 0;
 81066b6:	2300      	movs	r3, #0
}
 81066b8:	4618      	mov	r0, r3
 81066ba:	3708      	adds	r7, #8
 81066bc:	46bd      	mov	sp, r7
 81066be:	bd80      	pop	{r7, pc}
 81066c0:	10004d1c 	.word	0x10004d1c
 81066c4:	10004d14 	.word	0x10004d14
 81066c8:	08109cd0 	.word	0x08109cd0

081066cc <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 81066cc:	b580      	push	{r7, lr}
 81066ce:	b084      	sub	sp, #16
 81066d0:	af00      	add	r7, sp, #0
 81066d2:	6078      	str	r0, [r7, #4]
 81066d4:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 81066d6:	4b13      	ldr	r3, [pc, #76]	; (8106724 <metal_bus_find+0x58>)
 81066d8:	689b      	ldr	r3, [r3, #8]
 81066da:	60fb      	str	r3, [r7, #12]
 81066dc:	e017      	b.n	810670e <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 81066de:	68fb      	ldr	r3, [r7, #12]
 81066e0:	3b24      	subs	r3, #36	; 0x24
 81066e2:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 81066e4:	68bb      	ldr	r3, [r7, #8]
 81066e6:	681b      	ldr	r3, [r3, #0]
 81066e8:	6879      	ldr	r1, [r7, #4]
 81066ea:	4618      	mov	r0, r3
 81066ec:	f7f9 fdf8 	bl	81002e0 <strcmp>
 81066f0:	4603      	mov	r3, r0
 81066f2:	2b00      	cmp	r3, #0
 81066f4:	d003      	beq.n	81066fe <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 81066f6:	68fb      	ldr	r3, [r7, #12]
 81066f8:	681b      	ldr	r3, [r3, #0]
 81066fa:	60fb      	str	r3, [r7, #12]
 81066fc:	e007      	b.n	810670e <metal_bus_find+0x42>
			continue;
		if (result)
 81066fe:	683b      	ldr	r3, [r7, #0]
 8106700:	2b00      	cmp	r3, #0
 8106702:	d002      	beq.n	810670a <metal_bus_find+0x3e>
			*result = bus;
 8106704:	683b      	ldr	r3, [r7, #0]
 8106706:	68ba      	ldr	r2, [r7, #8]
 8106708:	601a      	str	r2, [r3, #0]
		return 0;
 810670a:	2300      	movs	r3, #0
 810670c:	e005      	b.n	810671a <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 810670e:	68fb      	ldr	r3, [r7, #12]
 8106710:	4a05      	ldr	r2, [pc, #20]	; (8106728 <metal_bus_find+0x5c>)
 8106712:	4293      	cmp	r3, r2
 8106714:	d1e3      	bne.n	81066de <metal_bus_find+0x12>
	}
	return -ENOENT;
 8106716:	f06f 0301 	mvn.w	r3, #1
}
 810671a:	4618      	mov	r0, r3
 810671c:	3710      	adds	r7, #16
 810671e:	46bd      	mov	sp, r7
 8106720:	bd80      	pop	{r7, pc}
 8106722:	bf00      	nop
 8106724:	10004d14 	.word	0x10004d14
 8106728:	10004d1c 	.word	0x10004d1c

0810672c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 810672c:	b580      	push	{r7, lr}
 810672e:	b086      	sub	sp, #24
 8106730:	af00      	add	r7, sp, #0
 8106732:	60f8      	str	r0, [r7, #12]
 8106734:	60b9      	str	r1, [r7, #8]
 8106736:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8106738:	68fb      	ldr	r3, [r7, #12]
 810673a:	2b00      	cmp	r3, #0
 810673c:	d00d      	beq.n	810675a <metal_device_open+0x2e>
 810673e:	68fb      	ldr	r3, [r7, #12]
 8106740:	781b      	ldrb	r3, [r3, #0]
 8106742:	2b00      	cmp	r3, #0
 8106744:	d009      	beq.n	810675a <metal_device_open+0x2e>
 8106746:	68bb      	ldr	r3, [r7, #8]
 8106748:	2b00      	cmp	r3, #0
 810674a:	d006      	beq.n	810675a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 810674c:	68bb      	ldr	r3, [r7, #8]
 810674e:	781b      	ldrb	r3, [r3, #0]
 8106750:	2b00      	cmp	r3, #0
 8106752:	d002      	beq.n	810675a <metal_device_open+0x2e>
 8106754:	687b      	ldr	r3, [r7, #4]
 8106756:	2b00      	cmp	r3, #0
 8106758:	d102      	bne.n	8106760 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 810675a:	f06f 0315 	mvn.w	r3, #21
 810675e:	e01f      	b.n	81067a0 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8106760:	f107 0310 	add.w	r3, r7, #16
 8106764:	4619      	mov	r1, r3
 8106766:	68f8      	ldr	r0, [r7, #12]
 8106768:	f7ff ffb0 	bl	81066cc <metal_bus_find>
 810676c:	6178      	str	r0, [r7, #20]
	if (error)
 810676e:	697b      	ldr	r3, [r7, #20]
 8106770:	2b00      	cmp	r3, #0
 8106772:	d001      	beq.n	8106778 <metal_device_open+0x4c>
		return error;
 8106774:	697b      	ldr	r3, [r7, #20]
 8106776:	e013      	b.n	81067a0 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8106778:	693b      	ldr	r3, [r7, #16]
 810677a:	689b      	ldr	r3, [r3, #8]
 810677c:	2b00      	cmp	r3, #0
 810677e:	d102      	bne.n	8106786 <metal_device_open+0x5a>
		return -ENODEV;
 8106780:	f06f 0312 	mvn.w	r3, #18
 8106784:	e00c      	b.n	81067a0 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8106786:	693b      	ldr	r3, [r7, #16]
 8106788:	689b      	ldr	r3, [r3, #8]
 810678a:	6938      	ldr	r0, [r7, #16]
 810678c:	687a      	ldr	r2, [r7, #4]
 810678e:	68b9      	ldr	r1, [r7, #8]
 8106790:	4798      	blx	r3
 8106792:	6178      	str	r0, [r7, #20]
	if (error)
 8106794:	697b      	ldr	r3, [r7, #20]
 8106796:	2b00      	cmp	r3, #0
 8106798:	d001      	beq.n	810679e <metal_device_open+0x72>
		return error;
 810679a:	697b      	ldr	r3, [r7, #20]
 810679c:	e000      	b.n	81067a0 <metal_device_open+0x74>

	return 0;
 810679e:	2300      	movs	r3, #0
}
 81067a0:	4618      	mov	r0, r3
 81067a2:	3718      	adds	r7, #24
 81067a4:	46bd      	mov	sp, r7
 81067a6:	bd80      	pop	{r7, pc}

081067a8 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 81067a8:	b580      	push	{r7, lr}
 81067aa:	b082      	sub	sp, #8
 81067ac:	af00      	add	r7, sp, #0
 81067ae:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 81067b0:	687b      	ldr	r3, [r7, #4]
 81067b2:	681b      	ldr	r3, [r3, #0]
 81067b4:	2b00      	cmp	r3, #0
 81067b6:	d008      	beq.n	81067ca <metal_register_generic_device+0x22>
 81067b8:	687b      	ldr	r3, [r7, #4]
 81067ba:	681b      	ldr	r3, [r3, #0]
 81067bc:	781b      	ldrb	r3, [r3, #0]
 81067be:	2b00      	cmp	r3, #0
 81067c0:	d003      	beq.n	81067ca <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 81067c2:	687b      	ldr	r3, [r7, #4]
 81067c4:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 81067c6:	2b02      	cmp	r3, #2
 81067c8:	d902      	bls.n	81067d0 <metal_register_generic_device+0x28>
		return -EINVAL;
 81067ca:	f06f 0315 	mvn.w	r3, #21
 81067ce:	e009      	b.n	81067e4 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 81067d0:	687b      	ldr	r3, [r7, #4]
 81067d2:	4a06      	ldr	r2, [pc, #24]	; (81067ec <metal_register_generic_device+0x44>)
 81067d4:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 81067d6:	687b      	ldr	r3, [r7, #4]
 81067d8:	336c      	adds	r3, #108	; 0x6c
 81067da:	4619      	mov	r1, r3
 81067dc:	4804      	ldr	r0, [pc, #16]	; (81067f0 <metal_register_generic_device+0x48>)
 81067de:	f7ff fef0 	bl	81065c2 <metal_list_add_tail>
			    &device->node);
	return 0;
 81067e2:	2300      	movs	r3, #0
}
 81067e4:	4618      	mov	r0, r3
 81067e6:	3708      	adds	r7, #8
 81067e8:	46bd      	mov	sp, r7
 81067ea:	bd80      	pop	{r7, pc}
 81067ec:	10000014 	.word	0x10000014
 81067f0:	10004d2c 	.word	0x10004d2c

081067f4 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 81067f4:	b580      	push	{r7, lr}
 81067f6:	b086      	sub	sp, #24
 81067f8:	af00      	add	r7, sp, #0
 81067fa:	60f8      	str	r0, [r7, #12]
 81067fc:	60b9      	str	r1, [r7, #8]
 81067fe:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8106800:	4b12      	ldr	r3, [pc, #72]	; (810684c <metal_generic_dev_open+0x58>)
 8106802:	699b      	ldr	r3, [r3, #24]
 8106804:	617b      	str	r3, [r7, #20]
 8106806:	e017      	b.n	8106838 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8106808:	697b      	ldr	r3, [r7, #20]
 810680a:	3b6c      	subs	r3, #108	; 0x6c
 810680c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 810680e:	693b      	ldr	r3, [r7, #16]
 8106810:	681b      	ldr	r3, [r3, #0]
 8106812:	68b9      	ldr	r1, [r7, #8]
 8106814:	4618      	mov	r0, r3
 8106816:	f7f9 fd63 	bl	81002e0 <strcmp>
 810681a:	4603      	mov	r3, r0
 810681c:	2b00      	cmp	r3, #0
 810681e:	d003      	beq.n	8106828 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8106820:	697b      	ldr	r3, [r7, #20]
 8106822:	681b      	ldr	r3, [r3, #0]
 8106824:	617b      	str	r3, [r7, #20]
 8106826:	e007      	b.n	8106838 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8106828:	687b      	ldr	r3, [r7, #4]
 810682a:	693a      	ldr	r2, [r7, #16]
 810682c:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 810682e:	6938      	ldr	r0, [r7, #16]
 8106830:	f000 f88c 	bl	810694c <metal_generic_dev_sys_open>
 8106834:	4603      	mov	r3, r0
 8106836:	e005      	b.n	8106844 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8106838:	697b      	ldr	r3, [r7, #20]
 810683a:	4a05      	ldr	r2, [pc, #20]	; (8106850 <metal_generic_dev_open+0x5c>)
 810683c:	4293      	cmp	r3, r2
 810683e:	d1e3      	bne.n	8106808 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8106840:	f06f 0312 	mvn.w	r3, #18
}
 8106844:	4618      	mov	r0, r3
 8106846:	3718      	adds	r7, #24
 8106848:	46bd      	mov	sp, r7
 810684a:	bd80      	pop	{r7, pc}
 810684c:	10004d14 	.word	0x10004d14
 8106850:	10004d2c 	.word	0x10004d2c

08106854 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8106854:	b580      	push	{r7, lr}
 8106856:	b086      	sub	sp, #24
 8106858:	af00      	add	r7, sp, #0
 810685a:	60f8      	str	r0, [r7, #12]
 810685c:	60b9      	str	r1, [r7, #8]
 810685e:	607a      	str	r2, [r7, #4]
 8106860:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8106862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106864:	683b      	ldr	r3, [r7, #0]
 8106866:	429a      	cmp	r2, r3
 8106868:	d009      	beq.n	810687e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 810686a:	6a3a      	ldr	r2, [r7, #32]
 810686c:	4613      	mov	r3, r2
 810686e:	005b      	lsls	r3, r3, #1
 8106870:	4413      	add	r3, r2
 8106872:	009b      	lsls	r3, r3, #2
 8106874:	461a      	mov	r2, r3
 8106876:	6839      	ldr	r1, [r7, #0]
 8106878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810687a:	f002 fac9 	bl	8108e10 <memcpy>
	for (i = 0; i < nents_in; i++) {
 810687e:	2300      	movs	r3, #0
 8106880:	617b      	str	r3, [r7, #20]
 8106882:	e02f      	b.n	81068e4 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8106884:	687b      	ldr	r3, [r7, #4]
 8106886:	2b02      	cmp	r3, #2
 8106888:	d114      	bne.n	81068b4 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 810688a:	697a      	ldr	r2, [r7, #20]
 810688c:	4613      	mov	r3, r2
 810688e:	005b      	lsls	r3, r3, #1
 8106890:	4413      	add	r3, r2
 8106892:	009b      	lsls	r3, r3, #2
 8106894:	461a      	mov	r2, r3
 8106896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106898:	4413      	add	r3, r2
 810689a:	6818      	ldr	r0, [r3, #0]
 810689c:	697a      	ldr	r2, [r7, #20]
 810689e:	4613      	mov	r3, r2
 81068a0:	005b      	lsls	r3, r3, #1
 81068a2:	4413      	add	r3, r2
 81068a4:	009b      	lsls	r3, r3, #2
 81068a6:	461a      	mov	r2, r3
 81068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81068aa:	4413      	add	r3, r2
 81068ac:	689b      	ldr	r3, [r3, #8]
 81068ae:	4619      	mov	r1, r3
 81068b0:	f7ff feae 	bl	8106610 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 81068b4:	697a      	ldr	r2, [r7, #20]
 81068b6:	4613      	mov	r3, r2
 81068b8:	005b      	lsls	r3, r3, #1
 81068ba:	4413      	add	r3, r2
 81068bc:	009b      	lsls	r3, r3, #2
 81068be:	461a      	mov	r2, r3
 81068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81068c2:	4413      	add	r3, r2
 81068c4:	6818      	ldr	r0, [r3, #0]
 81068c6:	697a      	ldr	r2, [r7, #20]
 81068c8:	4613      	mov	r3, r2
 81068ca:	005b      	lsls	r3, r3, #1
 81068cc:	4413      	add	r3, r2
 81068ce:	009b      	lsls	r3, r3, #2
 81068d0:	461a      	mov	r2, r3
 81068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81068d4:	4413      	add	r3, r2
 81068d6:	689b      	ldr	r3, [r3, #8]
 81068d8:	4619      	mov	r1, r3
 81068da:	f7ff fea6 	bl	810662a <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 81068de:	697b      	ldr	r3, [r7, #20]
 81068e0:	3301      	adds	r3, #1
 81068e2:	617b      	str	r3, [r7, #20]
 81068e4:	697a      	ldr	r2, [r7, #20]
 81068e6:	6a3b      	ldr	r3, [r7, #32]
 81068e8:	429a      	cmp	r2, r3
 81068ea:	dbcb      	blt.n	8106884 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 81068ec:	6a3b      	ldr	r3, [r7, #32]
}
 81068ee:	4618      	mov	r0, r3
 81068f0:	3718      	adds	r7, #24
 81068f2:	46bd      	mov	sp, r7
 81068f4:	bd80      	pop	{r7, pc}

081068f6 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 81068f6:	b580      	push	{r7, lr}
 81068f8:	b086      	sub	sp, #24
 81068fa:	af00      	add	r7, sp, #0
 81068fc:	60f8      	str	r0, [r7, #12]
 81068fe:	60b9      	str	r1, [r7, #8]
 8106900:	607a      	str	r2, [r7, #4]
 8106902:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8106904:	2300      	movs	r3, #0
 8106906:	617b      	str	r3, [r7, #20]
 8106908:	e017      	b.n	810693a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 810690a:	697a      	ldr	r2, [r7, #20]
 810690c:	4613      	mov	r3, r2
 810690e:	005b      	lsls	r3, r3, #1
 8106910:	4413      	add	r3, r2
 8106912:	009b      	lsls	r3, r3, #2
 8106914:	461a      	mov	r2, r3
 8106916:	683b      	ldr	r3, [r7, #0]
 8106918:	4413      	add	r3, r2
 810691a:	6818      	ldr	r0, [r3, #0]
 810691c:	697a      	ldr	r2, [r7, #20]
 810691e:	4613      	mov	r3, r2
 8106920:	005b      	lsls	r3, r3, #1
 8106922:	4413      	add	r3, r2
 8106924:	009b      	lsls	r3, r3, #2
 8106926:	461a      	mov	r2, r3
 8106928:	683b      	ldr	r3, [r7, #0]
 810692a:	4413      	add	r3, r2
 810692c:	689b      	ldr	r3, [r3, #8]
 810692e:	4619      	mov	r1, r3
 8106930:	f7ff fe7b 	bl	810662a <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8106934:	697b      	ldr	r3, [r7, #20]
 8106936:	3301      	adds	r3, #1
 8106938:	617b      	str	r3, [r7, #20]
 810693a:	697a      	ldr	r2, [r7, #20]
 810693c:	6a3b      	ldr	r3, [r7, #32]
 810693e:	429a      	cmp	r2, r3
 8106940:	dbe3      	blt.n	810690a <metal_generic_dev_dma_unmap+0x14>
	}
}
 8106942:	bf00      	nop
 8106944:	bf00      	nop
 8106946:	3718      	adds	r7, #24
 8106948:	46bd      	mov	sp, r7
 810694a:	bd80      	pop	{r7, pc}

0810694c <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 810694c:	b580      	push	{r7, lr}
 810694e:	b084      	sub	sp, #16
 8106950:	af00      	add	r7, sp, #0
 8106952:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8106954:	2300      	movs	r3, #0
 8106956:	60fb      	str	r3, [r7, #12]
 8106958:	e013      	b.n	8106982 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 810695a:	68fa      	ldr	r2, [r7, #12]
 810695c:	4613      	mov	r3, r2
 810695e:	005b      	lsls	r3, r3, #1
 8106960:	4413      	add	r3, r2
 8106962:	011b      	lsls	r3, r3, #4
 8106964:	3308      	adds	r3, #8
 8106966:	687a      	ldr	r2, [r7, #4]
 8106968:	4413      	add	r3, r2
 810696a:	3304      	adds	r3, #4
 810696c:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 810696e:	68bb      	ldr	r3, [r7, #8]
 8106970:	689b      	ldr	r3, [r3, #8]
 8106972:	2b00      	cmp	r3, #0
 8106974:	d00b      	beq.n	810698e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8106976:	68b8      	ldr	r0, [r7, #8]
 8106978:	f000 f81e 	bl	81069b8 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 810697c:	68fb      	ldr	r3, [r7, #12]
 810697e:	3301      	adds	r3, #1
 8106980:	60fb      	str	r3, [r7, #12]
 8106982:	687b      	ldr	r3, [r7, #4]
 8106984:	689b      	ldr	r3, [r3, #8]
 8106986:	68fa      	ldr	r2, [r7, #12]
 8106988:	429a      	cmp	r2, r3
 810698a:	d3e6      	bcc.n	810695a <metal_generic_dev_sys_open+0xe>
 810698c:	e000      	b.n	8106990 <metal_generic_dev_sys_open+0x44>
			break;
 810698e:	bf00      	nop
	}

	return 0;
 8106990:	2300      	movs	r3, #0
}
 8106992:	4618      	mov	r0, r3
 8106994:	3710      	adds	r7, #16
 8106996:	46bd      	mov	sp, r7
 8106998:	bd80      	pop	{r7, pc}
	...

0810699c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 810699c:	b580      	push	{r7, lr}
 810699e:	b082      	sub	sp, #8
 81069a0:	af00      	add	r7, sp, #0
 81069a2:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 81069a4:	4803      	ldr	r0, [pc, #12]	; (81069b4 <metal_sys_init+0x18>)
 81069a6:	f7ff fe4d 	bl	8106644 <metal_bus_register>
	return 0;
 81069aa:	2300      	movs	r3, #0
}
 81069ac:	4618      	mov	r0, r3
 81069ae:	3708      	adds	r7, #8
 81069b0:	46bd      	mov	sp, r7
 81069b2:	bd80      	pop	{r7, pc}
 81069b4:	10000014 	.word	0x10000014

081069b8 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 81069b8:	b580      	push	{r7, lr}
 81069ba:	b086      	sub	sp, #24
 81069bc:	af00      	add	r7, sp, #0
 81069be:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 81069c0:	687b      	ldr	r3, [r7, #4]
 81069c2:	681b      	ldr	r3, [r3, #0]
 81069c4:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 81069c6:	687b      	ldr	r3, [r7, #4]
 81069c8:	689b      	ldr	r3, [r3, #8]
 81069ca:	613b      	str	r3, [r7, #16]
	if (psize) {
 81069cc:	693b      	ldr	r3, [r7, #16]
 81069ce:	2b00      	cmp	r3, #0
 81069d0:	d02c      	beq.n	8106a2c <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 81069d2:	687b      	ldr	r3, [r7, #4]
 81069d4:	68db      	ldr	r3, [r3, #12]
 81069d6:	693a      	ldr	r2, [r7, #16]
 81069d8:	fa22 f303 	lsr.w	r3, r2, r3
 81069dc:	2b00      	cmp	r3, #0
 81069de:	d005      	beq.n	81069ec <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 81069e0:	687b      	ldr	r3, [r7, #4]
 81069e2:	68db      	ldr	r3, [r3, #12]
 81069e4:	2201      	movs	r2, #1
 81069e6:	fa02 f303 	lsl.w	r3, r2, r3
 81069ea:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 81069ec:	2300      	movs	r3, #0
 81069ee:	617b      	str	r3, [r7, #20]
 81069f0:	e013      	b.n	8106a1a <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 81069f2:	687b      	ldr	r3, [r7, #4]
 81069f4:	685a      	ldr	r2, [r3, #4]
 81069f6:	697b      	ldr	r3, [r7, #20]
 81069f8:	009b      	lsls	r3, r3, #2
 81069fa:	4413      	add	r3, r2
 81069fc:	6819      	ldr	r1, [r3, #0]
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	695b      	ldr	r3, [r3, #20]
 8106a02:	693a      	ldr	r2, [r7, #16]
 8106a04:	68f8      	ldr	r0, [r7, #12]
 8106a06:	f001 fbc1 	bl	810818c <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8106a0a:	693b      	ldr	r3, [r7, #16]
 8106a0c:	009b      	lsls	r3, r3, #2
 8106a0e:	68fa      	ldr	r2, [r7, #12]
 8106a10:	4413      	add	r3, r2
 8106a12:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8106a14:	697b      	ldr	r3, [r7, #20]
 8106a16:	3301      	adds	r3, #1
 8106a18:	617b      	str	r3, [r7, #20]
 8106a1a:	687b      	ldr	r3, [r7, #4]
 8106a1c:	689a      	ldr	r2, [r3, #8]
 8106a1e:	687b      	ldr	r3, [r7, #4]
 8106a20:	68db      	ldr	r3, [r3, #12]
 8106a22:	fa22 f303 	lsr.w	r3, r2, r3
 8106a26:	697a      	ldr	r2, [r7, #20]
 8106a28:	429a      	cmp	r2, r3
 8106a2a:	d9e2      	bls.n	81069f2 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8106a2c:	bf00      	nop
 8106a2e:	3718      	adds	r7, #24
 8106a30:	46bd      	mov	sp, r7
 8106a32:	bd80      	pop	{r7, pc}

08106a34 <metal_list_init>:
{
 8106a34:	b480      	push	{r7}
 8106a36:	b083      	sub	sp, #12
 8106a38:	af00      	add	r7, sp, #0
 8106a3a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8106a3c:	687b      	ldr	r3, [r7, #4]
 8106a3e:	687a      	ldr	r2, [r7, #4]
 8106a40:	605a      	str	r2, [r3, #4]
 8106a42:	687b      	ldr	r3, [r7, #4]
 8106a44:	685a      	ldr	r2, [r3, #4]
 8106a46:	687b      	ldr	r3, [r7, #4]
 8106a48:	601a      	str	r2, [r3, #0]
}
 8106a4a:	bf00      	nop
 8106a4c:	370c      	adds	r7, #12
 8106a4e:	46bd      	mov	sp, r7
 8106a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a54:	4770      	bx	lr
	...

08106a58 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8106a58:	b580      	push	{r7, lr}
 8106a5a:	b084      	sub	sp, #16
 8106a5c:	af00      	add	r7, sp, #0
 8106a5e:	6078      	str	r0, [r7, #4]
	int error = 0;
 8106a60:	2300      	movs	r3, #0
 8106a62:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8106a64:	2220      	movs	r2, #32
 8106a66:	2100      	movs	r1, #0
 8106a68:	4810      	ldr	r0, [pc, #64]	; (8106aac <metal_init+0x54>)
 8106a6a:	f002 f9df 	bl	8108e2c <memset>

	_metal.common.log_handler   = params->log_handler;
 8106a6e:	687b      	ldr	r3, [r7, #4]
 8106a70:	681b      	ldr	r3, [r3, #0]
 8106a72:	4a0e      	ldr	r2, [pc, #56]	; (8106aac <metal_init+0x54>)
 8106a74:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8106a76:	687b      	ldr	r3, [r7, #4]
 8106a78:	791a      	ldrb	r2, [r3, #4]
 8106a7a:	4b0c      	ldr	r3, [pc, #48]	; (8106aac <metal_init+0x54>)
 8106a7c:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8106a7e:	480c      	ldr	r0, [pc, #48]	; (8106ab0 <metal_init+0x58>)
 8106a80:	f7ff ffd8 	bl	8106a34 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8106a84:	480b      	ldr	r0, [pc, #44]	; (8106ab4 <metal_init+0x5c>)
 8106a86:	f7ff ffd5 	bl	8106a34 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8106a8a:	480b      	ldr	r0, [pc, #44]	; (8106ab8 <metal_init+0x60>)
 8106a8c:	f7ff ffd2 	bl	8106a34 <metal_list_init>

	error = metal_sys_init(params);
 8106a90:	6878      	ldr	r0, [r7, #4]
 8106a92:	f7ff ff83 	bl	810699c <metal_sys_init>
 8106a96:	60f8      	str	r0, [r7, #12]
	if (error)
 8106a98:	68fb      	ldr	r3, [r7, #12]
 8106a9a:	2b00      	cmp	r3, #0
 8106a9c:	d001      	beq.n	8106aa2 <metal_init+0x4a>
		return error;
 8106a9e:	68fb      	ldr	r3, [r7, #12]
 8106aa0:	e000      	b.n	8106aa4 <metal_init+0x4c>

	return error;
 8106aa2:	68fb      	ldr	r3, [r7, #12]
}
 8106aa4:	4618      	mov	r0, r3
 8106aa6:	3710      	adds	r7, #16
 8106aa8:	46bd      	mov	sp, r7
 8106aaa:	bd80      	pop	{r7, pc}
 8106aac:	10004d14 	.word	0x10004d14
 8106ab0:	10004d1c 	.word	0x10004d1c
 8106ab4:	10004d24 	.word	0x10004d24
 8106ab8:	10004d2c 	.word	0x10004d2c

08106abc <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8106abc:	b480      	push	{r7}
 8106abe:	b083      	sub	sp, #12
 8106ac0:	af00      	add	r7, sp, #0
 8106ac2:	6078      	str	r0, [r7, #4]
 8106ac4:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106ac6:	687b      	ldr	r3, [r7, #4]
 8106ac8:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8106aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106ace:	d009      	beq.n	8106ae4 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106ad0:	687b      	ldr	r3, [r7, #4]
 8106ad2:	689b      	ldr	r3, [r3, #8]
 8106ad4:	683a      	ldr	r2, [r7, #0]
 8106ad6:	429a      	cmp	r2, r3
 8106ad8:	d804      	bhi.n	8106ae4 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8106ade:	683b      	ldr	r3, [r7, #0]
 8106ae0:	4413      	add	r3, r2
 8106ae2:	e000      	b.n	8106ae6 <metal_io_virt+0x2a>
 8106ae4:	2300      	movs	r3, #0
}
 8106ae6:	4618      	mov	r0, r3
 8106ae8:	370c      	adds	r7, #12
 8106aea:	46bd      	mov	sp, r7
 8106aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106af0:	4770      	bx	lr

08106af2 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8106af2:	b5b0      	push	{r4, r5, r7, lr}
 8106af4:	b08a      	sub	sp, #40	; 0x28
 8106af6:	af00      	add	r7, sp, #0
 8106af8:	60f8      	str	r0, [r7, #12]
 8106afa:	60b9      	str	r1, [r7, #8]
 8106afc:	607a      	str	r2, [r7, #4]
 8106afe:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8106b00:	f107 0310 	add.w	r3, r7, #16
 8106b04:	2200      	movs	r2, #0
 8106b06:	601a      	str	r2, [r3, #0]
 8106b08:	605a      	str	r2, [r3, #4]
 8106b0a:	609a      	str	r2, [r3, #8]
 8106b0c:	60da      	str	r2, [r3, #12]
 8106b0e:	611a      	str	r2, [r3, #16]
 8106b10:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8106b12:	68fb      	ldr	r3, [r7, #12]
 8106b14:	68ba      	ldr	r2, [r7, #8]
 8106b16:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8106b18:	68fb      	ldr	r3, [r7, #12]
 8106b1a:	687a      	ldr	r2, [r7, #4]
 8106b1c:	605a      	str	r2, [r3, #4]
	io->size = size;
 8106b1e:	68fb      	ldr	r3, [r7, #12]
 8106b20:	683a      	ldr	r2, [r7, #0]
 8106b22:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8106b24:	68fb      	ldr	r3, [r7, #12]
 8106b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106b28:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8106b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106b2c:	2b1f      	cmp	r3, #31
 8106b2e:	d904      	bls.n	8106b3a <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8106b30:	68fb      	ldr	r3, [r7, #12]
 8106b32:	f04f 32ff 	mov.w	r2, #4294967295
 8106b36:	611a      	str	r2, [r3, #16]
 8106b38:	e006      	b.n	8106b48 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8106b3a:	2201      	movs	r2, #1
 8106b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8106b42:	1e5a      	subs	r2, r3, #1
 8106b44:	68fb      	ldr	r3, [r7, #12]
 8106b46:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8106b48:	68fb      	ldr	r3, [r7, #12]
 8106b4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8106b4c:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8106b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106b50:	2b00      	cmp	r3, #0
 8106b52:	d00b      	beq.n	8106b6c <metal_io_init+0x7a>
 8106b54:	68fb      	ldr	r3, [r7, #12]
 8106b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8106b58:	f103 0418 	add.w	r4, r3, #24
 8106b5c:	4615      	mov	r5, r2
 8106b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8106b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8106b62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8106b66:	e884 0003 	stmia.w	r4, {r0, r1}
 8106b6a:	e00a      	b.n	8106b82 <metal_io_init+0x90>
 8106b6c:	68fb      	ldr	r3, [r7, #12]
 8106b6e:	f103 0418 	add.w	r4, r3, #24
 8106b72:	f107 0510 	add.w	r5, r7, #16
 8106b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8106b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8106b7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8106b7e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8106b82:	68f8      	ldr	r0, [r7, #12]
 8106b84:	f7ff ff18 	bl	81069b8 <metal_sys_io_mem_map>
}
 8106b88:	bf00      	nop
 8106b8a:	3728      	adds	r7, #40	; 0x28
 8106b8c:	46bd      	mov	sp, r7
 8106b8e:	bdb0      	pop	{r4, r5, r7, pc}

08106b90 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8106b90:	b590      	push	{r4, r7, lr}
 8106b92:	b08b      	sub	sp, #44	; 0x2c
 8106b94:	af02      	add	r7, sp, #8
 8106b96:	60f8      	str	r0, [r7, #12]
 8106b98:	60b9      	str	r1, [r7, #8]
 8106b9a:	607a      	str	r2, [r7, #4]
 8106b9c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8106b9e:	68b9      	ldr	r1, [r7, #8]
 8106ba0:	68f8      	ldr	r0, [r7, #12]
 8106ba2:	f7ff ff8b 	bl	8106abc <metal_io_virt>
 8106ba6:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8106ba8:	687b      	ldr	r3, [r7, #4]
 8106baa:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8106bac:	68fb      	ldr	r3, [r7, #12]
 8106bae:	689b      	ldr	r3, [r3, #8]
 8106bb0:	68ba      	ldr	r2, [r7, #8]
 8106bb2:	429a      	cmp	r2, r3
 8106bb4:	d902      	bls.n	8106bbc <metal_io_block_read+0x2c>
		return -ERANGE;
 8106bb6:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8106bba:	e05c      	b.n	8106c76 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8106bbc:	683a      	ldr	r2, [r7, #0]
 8106bbe:	68bb      	ldr	r3, [r7, #8]
 8106bc0:	441a      	add	r2, r3
 8106bc2:	68fb      	ldr	r3, [r7, #12]
 8106bc4:	689b      	ldr	r3, [r3, #8]
 8106bc6:	429a      	cmp	r2, r3
 8106bc8:	d904      	bls.n	8106bd4 <metal_io_block_read+0x44>
		len = io->size - offset;
 8106bca:	68fb      	ldr	r3, [r7, #12]
 8106bcc:	689a      	ldr	r2, [r3, #8]
 8106bce:	68bb      	ldr	r3, [r7, #8]
 8106bd0:	1ad3      	subs	r3, r2, r3
 8106bd2:	603b      	str	r3, [r7, #0]
	retlen = len;
 8106bd4:	683b      	ldr	r3, [r7, #0]
 8106bd6:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8106bd8:	68fb      	ldr	r3, [r7, #12]
 8106bda:	6a1b      	ldr	r3, [r3, #32]
 8106bdc:	2b00      	cmp	r3, #0
 8106bde:	d00a      	beq.n	8106bf6 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8106be0:	68fb      	ldr	r3, [r7, #12]
 8106be2:	6a1c      	ldr	r4, [r3, #32]
 8106be4:	683b      	ldr	r3, [r7, #0]
 8106be6:	9300      	str	r3, [sp, #0]
 8106be8:	2305      	movs	r3, #5
 8106bea:	687a      	ldr	r2, [r7, #4]
 8106bec:	68b9      	ldr	r1, [r7, #8]
 8106bee:	68f8      	ldr	r0, [r7, #12]
 8106bf0:	47a0      	blx	r4
 8106bf2:	6178      	str	r0, [r7, #20]
 8106bf4:	e03e      	b.n	8106c74 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8106bf6:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8106bfa:	e00c      	b.n	8106c16 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8106bfc:	69fb      	ldr	r3, [r7, #28]
 8106bfe:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8106c00:	69bb      	ldr	r3, [r7, #24]
 8106c02:	701a      	strb	r2, [r3, #0]
			dest++;
 8106c04:	69bb      	ldr	r3, [r7, #24]
 8106c06:	3301      	adds	r3, #1
 8106c08:	61bb      	str	r3, [r7, #24]
			ptr++;
 8106c0a:	69fb      	ldr	r3, [r7, #28]
 8106c0c:	3301      	adds	r3, #1
 8106c0e:	61fb      	str	r3, [r7, #28]
			len--;
 8106c10:	683b      	ldr	r3, [r7, #0]
 8106c12:	3b01      	subs	r3, #1
 8106c14:	603b      	str	r3, [r7, #0]
		while ( len && (
 8106c16:	683b      	ldr	r3, [r7, #0]
 8106c18:	2b00      	cmp	r3, #0
 8106c1a:	d017      	beq.n	8106c4c <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8106c1c:	69bb      	ldr	r3, [r7, #24]
 8106c1e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8106c22:	2b00      	cmp	r3, #0
 8106c24:	d1ea      	bne.n	8106bfc <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8106c26:	69fb      	ldr	r3, [r7, #28]
 8106c28:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8106c2c:	2b00      	cmp	r3, #0
 8106c2e:	d1e5      	bne.n	8106bfc <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8106c30:	e00c      	b.n	8106c4c <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8106c32:	69fb      	ldr	r3, [r7, #28]
 8106c34:	681a      	ldr	r2, [r3, #0]
 8106c36:	69bb      	ldr	r3, [r7, #24]
 8106c38:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8106c3a:	69bb      	ldr	r3, [r7, #24]
 8106c3c:	3304      	adds	r3, #4
 8106c3e:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8106c40:	69fb      	ldr	r3, [r7, #28]
 8106c42:	3304      	adds	r3, #4
 8106c44:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8106c46:	683b      	ldr	r3, [r7, #0]
 8106c48:	3b04      	subs	r3, #4
 8106c4a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8106c4c:	683b      	ldr	r3, [r7, #0]
 8106c4e:	2b03      	cmp	r3, #3
 8106c50:	dcef      	bgt.n	8106c32 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8106c52:	e00c      	b.n	8106c6e <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8106c54:	69fb      	ldr	r3, [r7, #28]
 8106c56:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8106c58:	69bb      	ldr	r3, [r7, #24]
 8106c5a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8106c5c:	69bb      	ldr	r3, [r7, #24]
 8106c5e:	3301      	adds	r3, #1
 8106c60:	61bb      	str	r3, [r7, #24]
 8106c62:	69fb      	ldr	r3, [r7, #28]
 8106c64:	3301      	adds	r3, #1
 8106c66:	61fb      	str	r3, [r7, #28]
 8106c68:	683b      	ldr	r3, [r7, #0]
 8106c6a:	3b01      	subs	r3, #1
 8106c6c:	603b      	str	r3, [r7, #0]
 8106c6e:	683b      	ldr	r3, [r7, #0]
 8106c70:	2b00      	cmp	r3, #0
 8106c72:	d1ef      	bne.n	8106c54 <metal_io_block_read+0xc4>
	}
	return retlen;
 8106c74:	697b      	ldr	r3, [r7, #20]
}
 8106c76:	4618      	mov	r0, r3
 8106c78:	3724      	adds	r7, #36	; 0x24
 8106c7a:	46bd      	mov	sp, r7
 8106c7c:	bd90      	pop	{r4, r7, pc}

08106c7e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8106c7e:	b590      	push	{r4, r7, lr}
 8106c80:	b08b      	sub	sp, #44	; 0x2c
 8106c82:	af02      	add	r7, sp, #8
 8106c84:	60f8      	str	r0, [r7, #12]
 8106c86:	60b9      	str	r1, [r7, #8]
 8106c88:	607a      	str	r2, [r7, #4]
 8106c8a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8106c8c:	68b9      	ldr	r1, [r7, #8]
 8106c8e:	68f8      	ldr	r0, [r7, #12]
 8106c90:	f7ff ff14 	bl	8106abc <metal_io_virt>
 8106c94:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8106c9a:	68fb      	ldr	r3, [r7, #12]
 8106c9c:	689b      	ldr	r3, [r3, #8]
 8106c9e:	68ba      	ldr	r2, [r7, #8]
 8106ca0:	429a      	cmp	r2, r3
 8106ca2:	d902      	bls.n	8106caa <metal_io_block_write+0x2c>
		return -ERANGE;
 8106ca4:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8106ca8:	e05b      	b.n	8106d62 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8106caa:	683a      	ldr	r2, [r7, #0]
 8106cac:	68bb      	ldr	r3, [r7, #8]
 8106cae:	441a      	add	r2, r3
 8106cb0:	68fb      	ldr	r3, [r7, #12]
 8106cb2:	689b      	ldr	r3, [r3, #8]
 8106cb4:	429a      	cmp	r2, r3
 8106cb6:	d904      	bls.n	8106cc2 <metal_io_block_write+0x44>
		len = io->size - offset;
 8106cb8:	68fb      	ldr	r3, [r7, #12]
 8106cba:	689a      	ldr	r2, [r3, #8]
 8106cbc:	68bb      	ldr	r3, [r7, #8]
 8106cbe:	1ad3      	subs	r3, r2, r3
 8106cc0:	603b      	str	r3, [r7, #0]
	retlen = len;
 8106cc2:	683b      	ldr	r3, [r7, #0]
 8106cc4:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8106cc6:	68fb      	ldr	r3, [r7, #12]
 8106cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106cca:	2b00      	cmp	r3, #0
 8106ccc:	d017      	beq.n	8106cfe <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8106cce:	68fb      	ldr	r3, [r7, #12]
 8106cd0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8106cd2:	683b      	ldr	r3, [r7, #0]
 8106cd4:	9300      	str	r3, [sp, #0]
 8106cd6:	2305      	movs	r3, #5
 8106cd8:	687a      	ldr	r2, [r7, #4]
 8106cda:	68b9      	ldr	r1, [r7, #8]
 8106cdc:	68f8      	ldr	r0, [r7, #12]
 8106cde:	47a0      	blx	r4
 8106ce0:	6178      	str	r0, [r7, #20]
 8106ce2:	e03d      	b.n	8106d60 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8106ce4:	69bb      	ldr	r3, [r7, #24]
 8106ce6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8106ce8:	69fb      	ldr	r3, [r7, #28]
 8106cea:	701a      	strb	r2, [r3, #0]
			ptr++;
 8106cec:	69fb      	ldr	r3, [r7, #28]
 8106cee:	3301      	adds	r3, #1
 8106cf0:	61fb      	str	r3, [r7, #28]
			source++;
 8106cf2:	69bb      	ldr	r3, [r7, #24]
 8106cf4:	3301      	adds	r3, #1
 8106cf6:	61bb      	str	r3, [r7, #24]
			len--;
 8106cf8:	683b      	ldr	r3, [r7, #0]
 8106cfa:	3b01      	subs	r3, #1
 8106cfc:	603b      	str	r3, [r7, #0]
		while ( len && (
 8106cfe:	683b      	ldr	r3, [r7, #0]
 8106d00:	2b00      	cmp	r3, #0
 8106d02:	d017      	beq.n	8106d34 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8106d04:	69fb      	ldr	r3, [r7, #28]
 8106d06:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8106d0a:	2b00      	cmp	r3, #0
 8106d0c:	d1ea      	bne.n	8106ce4 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8106d0e:	69bb      	ldr	r3, [r7, #24]
 8106d10:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8106d14:	2b00      	cmp	r3, #0
 8106d16:	d1e5      	bne.n	8106ce4 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8106d18:	e00c      	b.n	8106d34 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8106d1a:	69bb      	ldr	r3, [r7, #24]
 8106d1c:	681a      	ldr	r2, [r3, #0]
 8106d1e:	69fb      	ldr	r3, [r7, #28]
 8106d20:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8106d22:	69fb      	ldr	r3, [r7, #28]
 8106d24:	3304      	adds	r3, #4
 8106d26:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8106d28:	69bb      	ldr	r3, [r7, #24]
 8106d2a:	3304      	adds	r3, #4
 8106d2c:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8106d2e:	683b      	ldr	r3, [r7, #0]
 8106d30:	3b04      	subs	r3, #4
 8106d32:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8106d34:	683b      	ldr	r3, [r7, #0]
 8106d36:	2b03      	cmp	r3, #3
 8106d38:	dcef      	bgt.n	8106d1a <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8106d3a:	e00c      	b.n	8106d56 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8106d3c:	69bb      	ldr	r3, [r7, #24]
 8106d3e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8106d40:	69fb      	ldr	r3, [r7, #28]
 8106d42:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8106d44:	69fb      	ldr	r3, [r7, #28]
 8106d46:	3301      	adds	r3, #1
 8106d48:	61fb      	str	r3, [r7, #28]
 8106d4a:	69bb      	ldr	r3, [r7, #24]
 8106d4c:	3301      	adds	r3, #1
 8106d4e:	61bb      	str	r3, [r7, #24]
 8106d50:	683b      	ldr	r3, [r7, #0]
 8106d52:	3b01      	subs	r3, #1
 8106d54:	603b      	str	r3, [r7, #0]
 8106d56:	683b      	ldr	r3, [r7, #0]
 8106d58:	2b00      	cmp	r3, #0
 8106d5a:	d1ef      	bne.n	8106d3c <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8106d5c:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8106d60:	697b      	ldr	r3, [r7, #20]
}
 8106d62:	4618      	mov	r0, r3
 8106d64:	3724      	adds	r7, #36	; 0x24
 8106d66:	46bd      	mov	sp, r7
 8106d68:	bd90      	pop	{r4, r7, pc}

08106d6a <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8106d6a:	b40e      	push	{r1, r2, r3}
 8106d6c:	b480      	push	{r7}
 8106d6e:	b082      	sub	sp, #8
 8106d70:	af00      	add	r7, sp, #0
 8106d72:	4603      	mov	r3, r0
 8106d74:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8106d76:	bf00      	nop
 8106d78:	3708      	adds	r7, #8
 8106d7a:	46bd      	mov	sp, r7
 8106d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d80:	b003      	add	sp, #12
 8106d82:	4770      	bx	lr

08106d84 <metal_io_virt>:
{
 8106d84:	b480      	push	{r7}
 8106d86:	b083      	sub	sp, #12
 8106d88:	af00      	add	r7, sp, #0
 8106d8a:	6078      	str	r0, [r7, #4]
 8106d8c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106d8e:	687b      	ldr	r3, [r7, #4]
 8106d90:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8106d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106d96:	d009      	beq.n	8106dac <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106d98:	687b      	ldr	r3, [r7, #4]
 8106d9a:	689b      	ldr	r3, [r3, #8]
 8106d9c:	683a      	ldr	r2, [r7, #0]
 8106d9e:	429a      	cmp	r2, r3
 8106da0:	d804      	bhi.n	8106dac <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8106da2:	687b      	ldr	r3, [r7, #4]
 8106da4:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8106da6:	683b      	ldr	r3, [r7, #0]
 8106da8:	4413      	add	r3, r2
 8106daa:	e000      	b.n	8106dae <metal_io_virt+0x2a>
 8106dac:	2300      	movs	r3, #0
}
 8106dae:	4618      	mov	r0, r3
 8106db0:	370c      	adds	r7, #12
 8106db2:	46bd      	mov	sp, r7
 8106db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106db8:	4770      	bx	lr

08106dba <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8106dba:	b480      	push	{r7}
 8106dbc:	b085      	sub	sp, #20
 8106dbe:	af00      	add	r7, sp, #0
 8106dc0:	6078      	str	r0, [r7, #4]
 8106dc2:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	681b      	ldr	r3, [r3, #0]
 8106dc8:	683a      	ldr	r2, [r7, #0]
 8106dca:	1ad3      	subs	r3, r2, r3
 8106dcc:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8106dce:	687b      	ldr	r3, [r7, #4]
 8106dd0:	689b      	ldr	r3, [r3, #8]
 8106dd2:	68fa      	ldr	r2, [r7, #12]
 8106dd4:	429a      	cmp	r2, r3
 8106dd6:	d201      	bcs.n	8106ddc <metal_io_virt_to_offset+0x22>
 8106dd8:	68fb      	ldr	r3, [r7, #12]
 8106dda:	e001      	b.n	8106de0 <metal_io_virt_to_offset+0x26>
 8106ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8106de0:	4618      	mov	r0, r3
 8106de2:	3714      	adds	r7, #20
 8106de4:	46bd      	mov	sp, r7
 8106de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dea:	4770      	bx	lr

08106dec <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8106dec:	b590      	push	{r4, r7, lr}
 8106dee:	b08d      	sub	sp, #52	; 0x34
 8106df0:	af00      	add	r7, sp, #0
 8106df2:	60f8      	str	r0, [r7, #12]
 8106df4:	60b9      	str	r1, [r7, #8]
 8106df6:	603b      	str	r3, [r7, #0]
 8106df8:	4613      	mov	r3, r2
 8106dfa:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8106dfc:	68b9      	ldr	r1, [r7, #8]
 8106dfe:	68f8      	ldr	r0, [r7, #12]
 8106e00:	f7ff ffc0 	bl	8106d84 <metal_io_virt>
 8106e04:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8106e06:	68fb      	ldr	r3, [r7, #12]
 8106e08:	699b      	ldr	r3, [r3, #24]
 8106e0a:	2b00      	cmp	r3, #0
 8106e0c:	d009      	beq.n	8106e22 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8106e0e:	68fb      	ldr	r3, [r7, #12]
 8106e10:	699c      	ldr	r4, [r3, #24]
 8106e12:	79fa      	ldrb	r2, [r7, #7]
 8106e14:	683b      	ldr	r3, [r7, #0]
 8106e16:	68b9      	ldr	r1, [r7, #8]
 8106e18:	68f8      	ldr	r0, [r7, #12]
 8106e1a:	47a0      	blx	r4
 8106e1c:	4602      	mov	r2, r0
 8106e1e:	460b      	mov	r3, r1
 8106e20:	e057      	b.n	8106ed2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 8106e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e24:	2b00      	cmp	r3, #0
 8106e26:	d011      	beq.n	8106e4c <metal_io_read+0x60>
 8106e28:	683b      	ldr	r3, [r7, #0]
 8106e2a:	2b01      	cmp	r3, #1
 8106e2c:	d10e      	bne.n	8106e4c <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8106e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8106e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e34:	f3bf 8f5b 	dmb	ish
 8106e38:	781b      	ldrb	r3, [r3, #0]
 8106e3a:	f3bf 8f5b 	dmb	ish
 8106e3e:	b2db      	uxtb	r3, r3
 8106e40:	76fb      	strb	r3, [r7, #27]
 8106e42:	7efb      	ldrb	r3, [r7, #27]
 8106e44:	b2da      	uxtb	r2, r3
 8106e46:	f04f 0300 	mov.w	r3, #0
 8106e4a:	e042      	b.n	8106ed2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 8106e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e4e:	2b00      	cmp	r3, #0
 8106e50:	d011      	beq.n	8106e76 <metal_io_read+0x8a>
 8106e52:	683b      	ldr	r3, [r7, #0]
 8106e54:	2b02      	cmp	r3, #2
 8106e56:	d10e      	bne.n	8106e76 <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8106e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8106e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106e5e:	f3bf 8f5b 	dmb	ish
 8106e62:	881b      	ldrh	r3, [r3, #0]
 8106e64:	f3bf 8f5b 	dmb	ish
 8106e68:	b29b      	uxth	r3, r3
 8106e6a:	833b      	strh	r3, [r7, #24]
 8106e6c:	8b3b      	ldrh	r3, [r7, #24]
 8106e6e:	b29a      	uxth	r2, r3
 8106e70:	f04f 0300 	mov.w	r3, #0
 8106e74:	e02d      	b.n	8106ed2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 8106e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e78:	2b00      	cmp	r3, #0
 8106e7a:	d010      	beq.n	8106e9e <metal_io_read+0xb2>
 8106e7c:	683b      	ldr	r3, [r7, #0]
 8106e7e:	2b04      	cmp	r3, #4
 8106e80:	d10d      	bne.n	8106e9e <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8106e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e84:	623b      	str	r3, [r7, #32]
 8106e86:	6a3b      	ldr	r3, [r7, #32]
 8106e88:	f3bf 8f5b 	dmb	ish
 8106e8c:	681b      	ldr	r3, [r3, #0]
 8106e8e:	f3bf 8f5b 	dmb	ish
 8106e92:	617b      	str	r3, [r7, #20]
 8106e94:	697b      	ldr	r3, [r7, #20]
 8106e96:	461a      	mov	r2, r3
 8106e98:	f04f 0300 	mov.w	r3, #0
 8106e9c:	e019      	b.n	8106ed2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 8106e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106ea0:	2b00      	cmp	r3, #0
 8106ea2:	d010      	beq.n	8106ec6 <metal_io_read+0xda>
 8106ea4:	683b      	ldr	r3, [r7, #0]
 8106ea6:	2b04      	cmp	r3, #4
 8106ea8:	d10d      	bne.n	8106ec6 <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8106eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106eac:	61fb      	str	r3, [r7, #28]
 8106eae:	69fb      	ldr	r3, [r7, #28]
 8106eb0:	f3bf 8f5b 	dmb	ish
 8106eb4:	681b      	ldr	r3, [r3, #0]
 8106eb6:	f3bf 8f5b 	dmb	ish
 8106eba:	613b      	str	r3, [r7, #16]
 8106ebc:	693b      	ldr	r3, [r7, #16]
 8106ebe:	461a      	mov	r2, r3
 8106ec0:	f04f 0300 	mov.w	r3, #0
 8106ec4:	e005      	b.n	8106ed2 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8106ec6:	4b05      	ldr	r3, [pc, #20]	; (8106edc <metal_io_read+0xf0>)
 8106ec8:	4a05      	ldr	r2, [pc, #20]	; (8106ee0 <metal_io_read+0xf4>)
 8106eca:	21f0      	movs	r1, #240	; 0xf0
 8106ecc:	4805      	ldr	r0, [pc, #20]	; (8106ee4 <metal_io_read+0xf8>)
 8106ece:	f001 fe3b 	bl	8108b48 <__assert_func>
	return 0; /* quiet compiler */
}
 8106ed2:	4610      	mov	r0, r2
 8106ed4:	4619      	mov	r1, r3
 8106ed6:	3734      	adds	r7, #52	; 0x34
 8106ed8:	46bd      	mov	sp, r7
 8106eda:	bd90      	pop	{r4, r7, pc}
 8106edc:	08109d90 	.word	0x08109d90
 8106ee0:	08109f30 	.word	0x08109f30
 8106ee4:	08109d94 	.word	0x08109d94

08106ee8 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8106ee8:	b580      	push	{r7, lr}
 8106eea:	b082      	sub	sp, #8
 8106eec:	af00      	add	r7, sp, #0
 8106eee:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8106ef0:	6878      	ldr	r0, [r7, #4]
 8106ef2:	f001 ff7d 	bl	8108df0 <malloc>
 8106ef6:	4603      	mov	r3, r0
}
 8106ef8:	4618      	mov	r0, r3
 8106efa:	3708      	adds	r7, #8
 8106efc:	46bd      	mov	sp, r7
 8106efe:	bd80      	pop	{r7, pc}

08106f00 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8106f00:	b580      	push	{r7, lr}
 8106f02:	b082      	sub	sp, #8
 8106f04:	af00      	add	r7, sp, #0
 8106f06:	6078      	str	r0, [r7, #4]
	free(ptr);
 8106f08:	6878      	ldr	r0, [r7, #4]
 8106f0a:	f001 ff79 	bl	8108e00 <free>
}
 8106f0e:	bf00      	nop
 8106f10:	3708      	adds	r7, #8
 8106f12:	46bd      	mov	sp, r7
 8106f14:	bd80      	pop	{r7, pc}

08106f16 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8106f16:	b580      	push	{r7, lr}
 8106f18:	b084      	sub	sp, #16
 8106f1a:	af00      	add	r7, sp, #0
 8106f1c:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8106f1e:	687b      	ldr	r3, [r7, #4]
 8106f20:	3307      	adds	r3, #7
 8106f22:	00db      	lsls	r3, r3, #3
 8106f24:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8106f26:	68f8      	ldr	r0, [r7, #12]
 8106f28:	f7ff ffde 	bl	8106ee8 <metal_allocate_memory>
 8106f2c:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8106f2e:	68bb      	ldr	r3, [r7, #8]
 8106f30:	2b00      	cmp	r3, #0
 8106f32:	d004      	beq.n	8106f3e <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8106f34:	68fa      	ldr	r2, [r7, #12]
 8106f36:	2100      	movs	r1, #0
 8106f38:	68b8      	ldr	r0, [r7, #8]
 8106f3a:	f001 ff77 	bl	8108e2c <memset>
	}

	return vqs;
 8106f3e:	68bb      	ldr	r3, [r7, #8]
}
 8106f40:	4618      	mov	r0, r3
 8106f42:	3710      	adds	r7, #16
 8106f44:	46bd      	mov	sp, r7
 8106f46:	bd80      	pop	{r7, pc}

08106f48 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8106f48:	b580      	push	{r7, lr}
 8106f4a:	b086      	sub	sp, #24
 8106f4c:	af00      	add	r7, sp, #0
 8106f4e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8106f50:	687b      	ldr	r3, [r7, #4]
 8106f52:	891b      	ldrh	r3, [r3, #8]
 8106f54:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8106f56:	687b      	ldr	r3, [r7, #4]
 8106f58:	681b      	ldr	r3, [r3, #0]
 8106f5a:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8106f5c:	693b      	ldr	r3, [r7, #16]
 8106f5e:	3b18      	subs	r3, #24
 8106f60:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 8106f62:	693b      	ldr	r3, [r7, #16]
 8106f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106f66:	697a      	ldr	r2, [r7, #20]
 8106f68:	429a      	cmp	r2, r3
 8106f6a:	d905      	bls.n	8106f78 <rproc_virtio_virtqueue_notify+0x30>
 8106f6c:	4b0d      	ldr	r3, [pc, #52]	; (8106fa4 <rproc_virtio_virtqueue_notify+0x5c>)
 8106f6e:	4a0e      	ldr	r2, [pc, #56]	; (8106fa8 <rproc_virtio_virtqueue_notify+0x60>)
 8106f70:	2133      	movs	r1, #51	; 0x33
 8106f72:	480e      	ldr	r0, [pc, #56]	; (8106fac <rproc_virtio_virtqueue_notify+0x64>)
 8106f74:	f001 fde8 	bl	8108b48 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8106f78:	693b      	ldr	r3, [r7, #16]
 8106f7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8106f7c:	697a      	ldr	r2, [r7, #20]
 8106f7e:	4613      	mov	r3, r2
 8106f80:	005b      	lsls	r3, r3, #1
 8106f82:	4413      	add	r3, r2
 8106f84:	00db      	lsls	r3, r3, #3
 8106f86:	440b      	add	r3, r1
 8106f88:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8106f8a:	68fb      	ldr	r3, [r7, #12]
 8106f8c:	691b      	ldr	r3, [r3, #16]
 8106f8e:	68fa      	ldr	r2, [r7, #12]
 8106f90:	6810      	ldr	r0, [r2, #0]
 8106f92:	68ba      	ldr	r2, [r7, #8]
 8106f94:	6912      	ldr	r2, [r2, #16]
 8106f96:	4611      	mov	r1, r2
 8106f98:	4798      	blx	r3
}
 8106f9a:	bf00      	nop
 8106f9c:	3718      	adds	r7, #24
 8106f9e:	46bd      	mov	sp, r7
 8106fa0:	bd80      	pop	{r7, pc}
 8106fa2:	bf00      	nop
 8106fa4:	08109ddc 	.word	0x08109ddc
 8106fa8:	08109f10 	.word	0x08109f10
 8106fac:	08109df8 	.word	0x08109df8

08106fb0 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8106fb0:	b580      	push	{r7, lr}
 8106fb2:	b086      	sub	sp, #24
 8106fb4:	af00      	add	r7, sp, #0
 8106fb6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8106fb8:	687b      	ldr	r3, [r7, #4]
 8106fba:	3b18      	subs	r3, #24
 8106fbc:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8106fbe:	697b      	ldr	r3, [r7, #20]
 8106fc0:	689b      	ldr	r3, [r3, #8]
 8106fc2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8106fc4:	697b      	ldr	r3, [r7, #20]
 8106fc6:	68db      	ldr	r3, [r3, #12]
 8106fc8:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8106fca:	693b      	ldr	r3, [r7, #16]
 8106fcc:	3318      	adds	r3, #24
 8106fce:	4619      	mov	r1, r3
 8106fd0:	68f8      	ldr	r0, [r7, #12]
 8106fd2:	f7ff fef2 	bl	8106dba <metal_io_virt_to_offset>
 8106fd6:	4601      	mov	r1, r0
 8106fd8:	2301      	movs	r3, #1
 8106fda:	2205      	movs	r2, #5
 8106fdc:	68f8      	ldr	r0, [r7, #12]
 8106fde:	f7ff ff05 	bl	8106dec <metal_io_read>
 8106fe2:	4602      	mov	r2, r0
 8106fe4:	460b      	mov	r3, r1
 8106fe6:	4613      	mov	r3, r2
 8106fe8:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8106fea:	7afb      	ldrb	r3, [r7, #11]
}
 8106fec:	4618      	mov	r0, r3
 8106fee:	3718      	adds	r7, #24
 8106ff0:	46bd      	mov	sp, r7
 8106ff2:	bd80      	pop	{r7, pc}

08106ff4 <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8106ff4:	b580      	push	{r7, lr}
 8106ff6:	b086      	sub	sp, #24
 8106ff8:	af00      	add	r7, sp, #0
 8106ffa:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8106ffc:	687b      	ldr	r3, [r7, #4]
 8106ffe:	3b18      	subs	r3, #24
 8107000:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8107002:	697b      	ldr	r3, [r7, #20]
 8107004:	689b      	ldr	r3, [r3, #8]
 8107006:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8107008:	697b      	ldr	r3, [r7, #20]
 810700a:	68db      	ldr	r3, [r3, #12]
 810700c:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 810700e:	693b      	ldr	r3, [r7, #16]
 8107010:	330c      	adds	r3, #12
 8107012:	4619      	mov	r1, r3
 8107014:	68f8      	ldr	r0, [r7, #12]
 8107016:	f7ff fed0 	bl	8106dba <metal_io_virt_to_offset>
 810701a:	4601      	mov	r1, r0
 810701c:	2304      	movs	r3, #4
 810701e:	2205      	movs	r2, #5
 8107020:	68f8      	ldr	r0, [r7, #12]
 8107022:	f7ff fee3 	bl	8106dec <metal_io_read>
 8107026:	4602      	mov	r2, r0
 8107028:	460b      	mov	r3, r1
 810702a:	4613      	mov	r3, r2
 810702c:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 810702e:	68bb      	ldr	r3, [r7, #8]
}
 8107030:	4618      	mov	r0, r3
 8107032:	3718      	adds	r7, #24
 8107034:	46bd      	mov	sp, r7
 8107036:	bd80      	pop	{r7, pc}

08107038 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8107038:	b480      	push	{r7}
 810703a:	b083      	sub	sp, #12
 810703c:	af00      	add	r7, sp, #0
 810703e:	6078      	str	r0, [r7, #4]
 8107040:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8107042:	2300      	movs	r3, #0
}
 8107044:	4618      	mov	r0, r3
 8107046:	370c      	adds	r7, #12
 8107048:	46bd      	mov	sp, r7
 810704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810704e:	4770      	bx	lr

08107050 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8107050:	b480      	push	{r7}
 8107052:	b085      	sub	sp, #20
 8107054:	af00      	add	r7, sp, #0
 8107056:	60f8      	str	r0, [r7, #12]
 8107058:	60b9      	str	r1, [r7, #8]
 810705a:	607a      	str	r2, [r7, #4]
 810705c:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 810705e:	bf00      	nop
 8107060:	3714      	adds	r7, #20
 8107062:	46bd      	mov	sp, r7
 8107064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107068:	4770      	bx	lr
	...

0810706c <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 810706c:	b580      	push	{r7, lr}
 810706e:	b08e      	sub	sp, #56	; 0x38
 8107070:	af00      	add	r7, sp, #0
 8107072:	60f8      	str	r0, [r7, #12]
 8107074:	60b9      	str	r1, [r7, #8]
 8107076:	607a      	str	r2, [r7, #4]
 8107078:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 810707a:	687b      	ldr	r3, [r7, #4]
 810707c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 810707e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107080:	7e5b      	ldrb	r3, [r3, #25]
 8107082:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8107084:	2050      	movs	r0, #80	; 0x50
 8107086:	f7ff ff2f 	bl	8106ee8 <metal_allocate_memory>
 810708a:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 810708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810708e:	2b00      	cmp	r3, #0
 8107090:	d101      	bne.n	8107096 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8107092:	2300      	movs	r3, #0
 8107094:	e092      	b.n	81071bc <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8107096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8107098:	4613      	mov	r3, r2
 810709a:	005b      	lsls	r3, r3, #1
 810709c:	4413      	add	r3, r2
 810709e:	00db      	lsls	r3, r3, #3
 81070a0:	4618      	mov	r0, r3
 81070a2:	f7ff ff21 	bl	8106ee8 <metal_allocate_memory>
 81070a6:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 81070a8:	6a3b      	ldr	r3, [r7, #32]
 81070aa:	2b00      	cmp	r3, #0
 81070ac:	f000 8081 	beq.w	81071b2 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 81070b0:	2250      	movs	r2, #80	; 0x50
 81070b2:	2100      	movs	r1, #0
 81070b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81070b6:	f001 feb9 	bl	8108e2c <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 81070ba:	2218      	movs	r2, #24
 81070bc:	2100      	movs	r1, #0
 81070be:	6a38      	ldr	r0, [r7, #32]
 81070c0:	f001 feb4 	bl	8108e2c <memset>
	vdev = &rpvdev->vdev;
 81070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81070c6:	3318      	adds	r3, #24
 81070c8:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 81070ca:	2300      	movs	r3, #0
 81070cc:	637b      	str	r3, [r7, #52]	; 0x34
 81070ce:	e025      	b.n	810711c <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 81070d0:	2300      	movs	r3, #0
 81070d2:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 81070d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81070d6:	4613      	mov	r3, r2
 81070d8:	009b      	lsls	r3, r3, #2
 81070da:	4413      	add	r3, r2
 81070dc:	009b      	lsls	r3, r3, #2
 81070de:	3318      	adds	r3, #24
 81070e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81070e2:	4413      	add	r3, r2
 81070e4:	3304      	adds	r3, #4
 81070e6:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 81070e8:	68fb      	ldr	r3, [r7, #12]
 81070ea:	2b00      	cmp	r3, #0
 81070ec:	d102      	bne.n	81070f4 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 81070ee:	69bb      	ldr	r3, [r7, #24]
 81070f0:	689b      	ldr	r3, [r3, #8]
 81070f2:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 81070f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81070f6:	f7ff ff0e 	bl	8106f16 <virtqueue_allocate>
 81070fa:	6178      	str	r0, [r7, #20]
		if (!vq)
 81070fc:	697b      	ldr	r3, [r7, #20]
 81070fe:	2b00      	cmp	r3, #0
 8107100:	d031      	beq.n	8107166 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 8107102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107104:	4613      	mov	r3, r2
 8107106:	005b      	lsls	r3, r3, #1
 8107108:	4413      	add	r3, r2
 810710a:	00db      	lsls	r3, r3, #3
 810710c:	461a      	mov	r2, r3
 810710e:	6a3b      	ldr	r3, [r7, #32]
 8107110:	4413      	add	r3, r2
 8107112:	697a      	ldr	r2, [r7, #20]
 8107114:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8107116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107118:	3301      	adds	r3, #1
 810711a:	637b      	str	r3, [r7, #52]	; 0x34
 810711c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107120:	429a      	cmp	r2, r3
 8107122:	d3d5      	bcc.n	81070d0 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8107124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8107128:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 810712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810712c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810712e:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8107130:	69fb      	ldr	r3, [r7, #28]
 8107132:	6a3a      	ldr	r2, [r7, #32]
 8107134:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8107136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810713a:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 810713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810713e:	683a      	ldr	r2, [r7, #0]
 8107140:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 8107142:	69fb      	ldr	r3, [r7, #28]
 8107144:	68ba      	ldr	r2, [r7, #8]
 8107146:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8107148:	69fb      	ldr	r3, [r7, #28]
 810714a:	68fa      	ldr	r2, [r7, #12]
 810714c:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 810714e:	69fb      	ldr	r3, [r7, #28]
 8107150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8107152:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8107154:	69fb      	ldr	r3, [r7, #28]
 8107156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8107158:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 810715a:	69fb      	ldr	r3, [r7, #28]
 810715c:	4a19      	ldr	r2, [pc, #100]	; (81071c4 <rproc_virtio_create_vdev+0x158>)
 810715e:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8107160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107162:	3318      	adds	r3, #24
 8107164:	e02a      	b.n	81071bc <rproc_virtio_create_vdev+0x150>
			goto err1;
 8107166:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8107168:	2300      	movs	r3, #0
 810716a:	637b      	str	r3, [r7, #52]	; 0x34
 810716c:	e019      	b.n	81071a2 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 810716e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107170:	4613      	mov	r3, r2
 8107172:	005b      	lsls	r3, r3, #1
 8107174:	4413      	add	r3, r2
 8107176:	00db      	lsls	r3, r3, #3
 8107178:	461a      	mov	r2, r3
 810717a:	6a3b      	ldr	r3, [r7, #32]
 810717c:	4413      	add	r3, r2
 810717e:	681b      	ldr	r3, [r3, #0]
 8107180:	2b00      	cmp	r3, #0
 8107182:	d00b      	beq.n	810719c <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8107184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107186:	4613      	mov	r3, r2
 8107188:	005b      	lsls	r3, r3, #1
 810718a:	4413      	add	r3, r2
 810718c:	00db      	lsls	r3, r3, #3
 810718e:	461a      	mov	r2, r3
 8107190:	6a3b      	ldr	r3, [r7, #32]
 8107192:	4413      	add	r3, r2
 8107194:	681b      	ldr	r3, [r3, #0]
 8107196:	4618      	mov	r0, r3
 8107198:	f7ff feb2 	bl	8106f00 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 810719c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810719e:	3301      	adds	r3, #1
 81071a0:	637b      	str	r3, [r7, #52]	; 0x34
 81071a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81071a6:	429a      	cmp	r2, r3
 81071a8:	d3e1      	bcc.n	810716e <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 81071aa:	6a38      	ldr	r0, [r7, #32]
 81071ac:	f7ff fea8 	bl	8106f00 <metal_free_memory>
 81071b0:	e000      	b.n	81071b4 <rproc_virtio_create_vdev+0x148>
		goto err0;
 81071b2:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 81071b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81071b6:	f7ff fea3 	bl	8106f00 <metal_free_memory>
	return NULL;
 81071ba:	2300      	movs	r3, #0
}
 81071bc:	4618      	mov	r0, r3
 81071be:	3738      	adds	r7, #56	; 0x38
 81071c0:	46bd      	mov	sp, r7
 81071c2:	bd80      	pop	{r7, pc}
 81071c4:	08109eec 	.word	0x08109eec

081071c8 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 81071c8:	b480      	push	{r7}
 81071ca:	b087      	sub	sp, #28
 81071cc:	af00      	add	r7, sp, #0
 81071ce:	60f8      	str	r0, [r7, #12]
 81071d0:	60b9      	str	r1, [r7, #8]
 81071d2:	607a      	str	r2, [r7, #4]
 81071d4:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 81071d6:	68fb      	ldr	r3, [r7, #12]
 81071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81071da:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 81071dc:	68ba      	ldr	r2, [r7, #8]
 81071de:	697b      	ldr	r3, [r7, #20]
 81071e0:	429a      	cmp	r2, r3
 81071e2:	d302      	bcc.n	81071ea <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 81071e4:	f06f 0301 	mvn.w	r3, #1
 81071e8:	e019      	b.n	810721e <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 81071ea:	68fb      	ldr	r3, [r7, #12]
 81071ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81071ee:	68ba      	ldr	r2, [r7, #8]
 81071f0:	4613      	mov	r3, r2
 81071f2:	005b      	lsls	r3, r3, #1
 81071f4:	4413      	add	r3, r2
 81071f6:	00db      	lsls	r3, r3, #3
 81071f8:	440b      	add	r3, r1
 81071fa:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 81071fc:	693b      	ldr	r3, [r7, #16]
 81071fe:	6a3a      	ldr	r2, [r7, #32]
 8107200:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 8107202:	693b      	ldr	r3, [r7, #16]
 8107204:	687a      	ldr	r2, [r7, #4]
 8107206:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8107208:	693b      	ldr	r3, [r7, #16]
 810720a:	683a      	ldr	r2, [r7, #0]
 810720c:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 810720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107210:	b29a      	uxth	r2, r3
 8107212:	693b      	ldr	r3, [r7, #16]
 8107214:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8107216:	693b      	ldr	r3, [r7, #16]
 8107218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810721a:	609a      	str	r2, [r3, #8]

	return 0;
 810721c:	2300      	movs	r3, #0
}
 810721e:	4618      	mov	r0, r3
 8107220:	371c      	adds	r7, #28
 8107222:	46bd      	mov	sp, r7
 8107224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107228:	4770      	bx	lr

0810722a <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 810722a:	b580      	push	{r7, lr}
 810722c:	b086      	sub	sp, #24
 810722e:	af00      	add	r7, sp, #0
 8107230:	6078      	str	r0, [r7, #4]
 8107232:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8107234:	687b      	ldr	r3, [r7, #4]
 8107236:	2b00      	cmp	r3, #0
 8107238:	d102      	bne.n	8107240 <rproc_virtio_notified+0x16>
		return -EINVAL;
 810723a:	f06f 0315 	mvn.w	r3, #21
 810723e:	e02c      	b.n	810729a <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8107240:	687b      	ldr	r3, [r7, #4]
 8107242:	681b      	ldr	r3, [r3, #0]
 8107244:	683a      	ldr	r2, [r7, #0]
 8107246:	429a      	cmp	r2, r3
 8107248:	d101      	bne.n	810724e <rproc_virtio_notified+0x24>
		return 0;
 810724a:	2300      	movs	r3, #0
 810724c:	e025      	b.n	810729a <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 810724e:	687b      	ldr	r3, [r7, #4]
 8107250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107252:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8107254:	2300      	movs	r3, #0
 8107256:	617b      	str	r3, [r7, #20]
 8107258:	e01a      	b.n	8107290 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 810725a:	687b      	ldr	r3, [r7, #4]
 810725c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 810725e:	697a      	ldr	r2, [r7, #20]
 8107260:	4613      	mov	r3, r2
 8107262:	005b      	lsls	r3, r3, #1
 8107264:	4413      	add	r3, r2
 8107266:	00db      	lsls	r3, r3, #3
 8107268:	440b      	add	r3, r1
 810726a:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 810726c:	68fb      	ldr	r3, [r7, #12]
 810726e:	691b      	ldr	r3, [r3, #16]
 8107270:	683a      	ldr	r2, [r7, #0]
 8107272:	429a      	cmp	r2, r3
 8107274:	d003      	beq.n	810727e <rproc_virtio_notified+0x54>
 8107276:	683b      	ldr	r3, [r7, #0]
 8107278:	f1b3 3fff 	cmp.w	r3, #4294967295
 810727c:	d105      	bne.n	810728a <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 810727e:	68fb      	ldr	r3, [r7, #12]
 8107280:	681b      	ldr	r3, [r3, #0]
 8107282:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8107284:	68b8      	ldr	r0, [r7, #8]
 8107286:	f001 fa19 	bl	81086bc <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 810728a:	697b      	ldr	r3, [r7, #20]
 810728c:	3301      	adds	r3, #1
 810728e:	617b      	str	r3, [r7, #20]
 8107290:	697a      	ldr	r2, [r7, #20]
 8107292:	693b      	ldr	r3, [r7, #16]
 8107294:	429a      	cmp	r2, r3
 8107296:	d3e0      	bcc.n	810725a <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8107298:	2300      	movs	r3, #0
}
 810729a:	4618      	mov	r0, r3
 810729c:	3718      	adds	r7, #24
 810729e:	46bd      	mov	sp, r7
 81072a0:	bd80      	pop	{r7, pc}

081072a2 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 81072a2:	b580      	push	{r7, lr}
 81072a4:	b084      	sub	sp, #16
 81072a6:	af00      	add	r7, sp, #0
 81072a8:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 81072aa:	687b      	ldr	r3, [r7, #4]
 81072ac:	699b      	ldr	r3, [r3, #24]
 81072ae:	2b00      	cmp	r3, #0
 81072b0:	d00a      	beq.n	81072c8 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 81072b2:	6878      	ldr	r0, [r7, #4]
 81072b4:	f7ff fe7c 	bl	8106fb0 <rproc_virtio_get_status>
 81072b8:	4603      	mov	r3, r0
 81072ba:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 81072bc:	7bfb      	ldrb	r3, [r7, #15]
 81072be:	f003 0304 	and.w	r3, r3, #4
 81072c2:	2b00      	cmp	r3, #0
 81072c4:	d102      	bne.n	81072cc <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 81072c6:	e7f4      	b.n	81072b2 <rproc_virtio_wait_remote_ready+0x10>
		return;
 81072c8:	bf00      	nop
 81072ca:	e000      	b.n	81072ce <rproc_virtio_wait_remote_ready+0x2c>
			return;
 81072cc:	bf00      	nop
	}
}
 81072ce:	3710      	adds	r7, #16
 81072d0:	46bd      	mov	sp, r7
 81072d2:	bd80      	pop	{r7, pc}

081072d4 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 81072d4:	b480      	push	{r7}
 81072d6:	b083      	sub	sp, #12
 81072d8:	af00      	add	r7, sp, #0
 81072da:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 81072dc:	bf00      	nop
 81072de:	687b      	ldr	r3, [r7, #4]
 81072e0:	2201      	movs	r2, #1
 81072e2:	4611      	mov	r1, r2
 81072e4:	f3bf 8f5b 	dmb	ish
 81072e8:	e8d3 2f4f 	ldrexb	r2, [r3]
 81072ec:	e8c3 1f40 	strexb	r0, r1, [r3]
 81072f0:	2800      	cmp	r0, #0
 81072f2:	d1f9      	bne.n	81072e8 <__metal_mutex_acquire+0x14>
 81072f4:	f3bf 8f5b 	dmb	ish
 81072f8:	b2d3      	uxtb	r3, r2
 81072fa:	2b00      	cmp	r3, #0
 81072fc:	d1ef      	bne.n	81072de <__metal_mutex_acquire+0xa>
		;
	}
}
 81072fe:	bf00      	nop
 8107300:	bf00      	nop
 8107302:	370c      	adds	r7, #12
 8107304:	46bd      	mov	sp, r7
 8107306:	f85d 7b04 	ldr.w	r7, [sp], #4
 810730a:	4770      	bx	lr

0810730c <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 810730c:	b480      	push	{r7}
 810730e:	b083      	sub	sp, #12
 8107310:	af00      	add	r7, sp, #0
 8107312:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8107314:	687b      	ldr	r3, [r7, #4]
 8107316:	f3bf 8f5b 	dmb	ish
 810731a:	2200      	movs	r2, #0
 810731c:	701a      	strb	r2, [r3, #0]
 810731e:	f3bf 8f5b 	dmb	ish
}
 8107322:	bf00      	nop
 8107324:	370c      	adds	r7, #12
 8107326:	46bd      	mov	sp, r7
 8107328:	f85d 7b04 	ldr.w	r7, [sp], #4
 810732c:	4770      	bx	lr

0810732e <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 810732e:	b580      	push	{r7, lr}
 8107330:	b082      	sub	sp, #8
 8107332:	af00      	add	r7, sp, #0
 8107334:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8107336:	6878      	ldr	r0, [r7, #4]
 8107338:	f7ff ffcc 	bl	81072d4 <__metal_mutex_acquire>
}
 810733c:	bf00      	nop
 810733e:	3708      	adds	r7, #8
 8107340:	46bd      	mov	sp, r7
 8107342:	bd80      	pop	{r7, pc}

08107344 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8107344:	b580      	push	{r7, lr}
 8107346:	b082      	sub	sp, #8
 8107348:	af00      	add	r7, sp, #0
 810734a:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 810734c:	6878      	ldr	r0, [r7, #4]
 810734e:	f7ff ffdd 	bl	810730c <__metal_mutex_release>
}
 8107352:	bf00      	nop
 8107354:	3708      	adds	r7, #8
 8107356:	46bd      	mov	sp, r7
 8107358:	bd80      	pop	{r7, pc}

0810735a <metal_list_add_before>:
{
 810735a:	b480      	push	{r7}
 810735c:	b083      	sub	sp, #12
 810735e:	af00      	add	r7, sp, #0
 8107360:	6078      	str	r0, [r7, #4]
 8107362:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8107364:	687b      	ldr	r3, [r7, #4]
 8107366:	685a      	ldr	r2, [r3, #4]
 8107368:	683b      	ldr	r3, [r7, #0]
 810736a:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 810736c:	683b      	ldr	r3, [r7, #0]
 810736e:	687a      	ldr	r2, [r7, #4]
 8107370:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8107372:	683b      	ldr	r3, [r7, #0]
 8107374:	681b      	ldr	r3, [r3, #0]
 8107376:	683a      	ldr	r2, [r7, #0]
 8107378:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 810737a:	683b      	ldr	r3, [r7, #0]
 810737c:	685b      	ldr	r3, [r3, #4]
 810737e:	683a      	ldr	r2, [r7, #0]
 8107380:	601a      	str	r2, [r3, #0]
}
 8107382:	bf00      	nop
 8107384:	370c      	adds	r7, #12
 8107386:	46bd      	mov	sp, r7
 8107388:	f85d 7b04 	ldr.w	r7, [sp], #4
 810738c:	4770      	bx	lr

0810738e <metal_list_add_tail>:
{
 810738e:	b580      	push	{r7, lr}
 8107390:	b082      	sub	sp, #8
 8107392:	af00      	add	r7, sp, #0
 8107394:	6078      	str	r0, [r7, #4]
 8107396:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8107398:	6839      	ldr	r1, [r7, #0]
 810739a:	6878      	ldr	r0, [r7, #4]
 810739c:	f7ff ffdd 	bl	810735a <metal_list_add_before>
}
 81073a0:	bf00      	nop
 81073a2:	3708      	adds	r7, #8
 81073a4:	46bd      	mov	sp, r7
 81073a6:	bd80      	pop	{r7, pc}

081073a8 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 81073a8:	b480      	push	{r7}
 81073aa:	b083      	sub	sp, #12
 81073ac:	af00      	add	r7, sp, #0
 81073ae:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 81073b0:	687b      	ldr	r3, [r7, #4]
 81073b2:	681b      	ldr	r3, [r3, #0]
 81073b4:	687a      	ldr	r2, [r7, #4]
 81073b6:	6852      	ldr	r2, [r2, #4]
 81073b8:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 81073ba:	687b      	ldr	r3, [r7, #4]
 81073bc:	685b      	ldr	r3, [r3, #4]
 81073be:	687a      	ldr	r2, [r7, #4]
 81073c0:	6812      	ldr	r2, [r2, #0]
 81073c2:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 81073c4:	687b      	ldr	r3, [r7, #4]
 81073c6:	687a      	ldr	r2, [r7, #4]
 81073c8:	605a      	str	r2, [r3, #4]
 81073ca:	687b      	ldr	r3, [r7, #4]
 81073cc:	685a      	ldr	r2, [r3, #4]
 81073ce:	687b      	ldr	r3, [r7, #4]
 81073d0:	601a      	str	r2, [r3, #0]
}
 81073d2:	bf00      	nop
 81073d4:	370c      	adds	r7, #12
 81073d6:	46bd      	mov	sp, r7
 81073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073dc:	4770      	bx	lr

081073de <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 81073de:	b480      	push	{r7}
 81073e0:	b083      	sub	sp, #12
 81073e2:	af00      	add	r7, sp, #0
 81073e4:	6078      	str	r0, [r7, #4]
 81073e6:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 81073e8:	683b      	ldr	r3, [r7, #0]
 81073ea:	095b      	lsrs	r3, r3, #5
 81073ec:	009a      	lsls	r2, r3, #2
 81073ee:	6879      	ldr	r1, [r7, #4]
 81073f0:	440a      	add	r2, r1
 81073f2:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 81073f4:	683a      	ldr	r2, [r7, #0]
 81073f6:	f002 021f 	and.w	r2, r2, #31
 81073fa:	2001      	movs	r0, #1
 81073fc:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8107400:	009b      	lsls	r3, r3, #2
 8107402:	6878      	ldr	r0, [r7, #4]
 8107404:	4403      	add	r3, r0
 8107406:	430a      	orrs	r2, r1
 8107408:	601a      	str	r2, [r3, #0]
}
 810740a:	bf00      	nop
 810740c:	370c      	adds	r7, #12
 810740e:	46bd      	mov	sp, r7
 8107410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107414:	4770      	bx	lr

08107416 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8107416:	b480      	push	{r7}
 8107418:	b083      	sub	sp, #12
 810741a:	af00      	add	r7, sp, #0
 810741c:	6078      	str	r0, [r7, #4]
 810741e:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8107420:	683b      	ldr	r3, [r7, #0]
 8107422:	095b      	lsrs	r3, r3, #5
 8107424:	009b      	lsls	r3, r3, #2
 8107426:	687a      	ldr	r2, [r7, #4]
 8107428:	4413      	add	r3, r2
 810742a:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 810742c:	683b      	ldr	r3, [r7, #0]
 810742e:	f003 031f 	and.w	r3, r3, #31
 8107432:	2101      	movs	r1, #1
 8107434:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8107438:	4013      	ands	r3, r2
}
 810743a:	4618      	mov	r0, r3
 810743c:	370c      	adds	r7, #12
 810743e:	46bd      	mov	sp, r7
 8107440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107444:	4770      	bx	lr

08107446 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8107446:	b480      	push	{r7}
 8107448:	b083      	sub	sp, #12
 810744a:	af00      	add	r7, sp, #0
 810744c:	6078      	str	r0, [r7, #4]
 810744e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8107450:	683b      	ldr	r3, [r7, #0]
 8107452:	095b      	lsrs	r3, r3, #5
 8107454:	009a      	lsls	r2, r3, #2
 8107456:	6879      	ldr	r1, [r7, #4]
 8107458:	440a      	add	r2, r1
 810745a:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 810745c:	683a      	ldr	r2, [r7, #0]
 810745e:	f002 021f 	and.w	r2, r2, #31
 8107462:	2001      	movs	r0, #1
 8107464:	fa00 f202 	lsl.w	r2, r0, r2
 8107468:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 810746a:	009b      	lsls	r3, r3, #2
 810746c:	6878      	ldr	r0, [r7, #4]
 810746e:	4403      	add	r3, r0
 8107470:	400a      	ands	r2, r1
 8107472:	601a      	str	r2, [r3, #0]
}
 8107474:	bf00      	nop
 8107476:	370c      	adds	r7, #12
 8107478:	46bd      	mov	sp, r7
 810747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810747e:	4770      	bx	lr

08107480 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8107480:	b580      	push	{r7, lr}
 8107482:	b082      	sub	sp, #8
 8107484:	af00      	add	r7, sp, #0
 8107486:	6078      	str	r0, [r7, #4]
 8107488:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 810748a:	6839      	ldr	r1, [r7, #0]
 810748c:	6878      	ldr	r0, [r7, #4]
 810748e:	f7ff ffc2 	bl	8107416 <metal_bitmap_is_bit_set>
 8107492:	4603      	mov	r3, r0
 8107494:	2b00      	cmp	r3, #0
 8107496:	bf0c      	ite	eq
 8107498:	2301      	moveq	r3, #1
 810749a:	2300      	movne	r3, #0
 810749c:	b2db      	uxtb	r3, r3
}
 810749e:	4618      	mov	r0, r3
 81074a0:	3708      	adds	r7, #8
 81074a2:	46bd      	mov	sp, r7
 81074a4:	bd80      	pop	{r7, pc}

081074a6 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 81074a6:	b580      	push	{r7, lr}
 81074a8:	b086      	sub	sp, #24
 81074aa:	af00      	add	r7, sp, #0
 81074ac:	60f8      	str	r0, [r7, #12]
 81074ae:	60b9      	str	r1, [r7, #8]
 81074b0:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 81074b2:	68bb      	ldr	r3, [r7, #8]
 81074b4:	617b      	str	r3, [r7, #20]
 81074b6:	e002      	b.n	81074be <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 81074b8:	697b      	ldr	r3, [r7, #20]
 81074ba:	3301      	adds	r3, #1
 81074bc:	617b      	str	r3, [r7, #20]
	for (bit = start;
 81074be:	697a      	ldr	r2, [r7, #20]
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	429a      	cmp	r2, r3
 81074c4:	d207      	bcs.n	81074d6 <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 81074c6:	697b      	ldr	r3, [r7, #20]
 81074c8:	4619      	mov	r1, r3
 81074ca:	68f8      	ldr	r0, [r7, #12]
 81074cc:	f7ff ffd8 	bl	8107480 <metal_bitmap_is_bit_clear>
 81074d0:	4603      	mov	r3, r0
 81074d2:	2b00      	cmp	r3, #0
 81074d4:	d0f0      	beq.n	81074b8 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 81074d6:	697b      	ldr	r3, [r7, #20]
}
 81074d8:	4618      	mov	r0, r3
 81074da:	3718      	adds	r7, #24
 81074dc:	46bd      	mov	sp, r7
 81074de:	bd80      	pop	{r7, pc}

081074e0 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 81074e0:	b580      	push	{r7, lr}
 81074e2:	b084      	sub	sp, #16
 81074e4:	af00      	add	r7, sp, #0
 81074e6:	60f8      	str	r0, [r7, #12]
 81074e8:	60b9      	str	r1, [r7, #8]
 81074ea:	607a      	str	r2, [r7, #4]
 81074ec:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 81074ee:	68fb      	ldr	r3, [r7, #12]
 81074f0:	2220      	movs	r2, #32
 81074f2:	68b9      	ldr	r1, [r7, #8]
 81074f4:	4618      	mov	r0, r3
 81074f6:	f002 f908 	bl	810970a <strncpy>
	ept->addr = src;
 81074fa:	68fb      	ldr	r3, [r7, #12]
 81074fc:	687a      	ldr	r2, [r7, #4]
 81074fe:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8107500:	68fb      	ldr	r3, [r7, #12]
 8107502:	683a      	ldr	r2, [r7, #0]
 8107504:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8107506:	68fb      	ldr	r3, [r7, #12]
 8107508:	69ba      	ldr	r2, [r7, #24]
 810750a:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 810750c:	68fb      	ldr	r3, [r7, #12]
 810750e:	69fa      	ldr	r2, [r7, #28]
 8107510:	631a      	str	r2, [r3, #48]	; 0x30
}
 8107512:	bf00      	nop
 8107514:	3710      	adds	r7, #16
 8107516:	46bd      	mov	sp, r7
 8107518:	bd80      	pop	{r7, pc}

0810751a <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 810751a:	b580      	push	{r7, lr}
 810751c:	b084      	sub	sp, #16
 810751e:	af00      	add	r7, sp, #0
 8107520:	6078      	str	r0, [r7, #4]
 8107522:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8107524:	f04f 33ff 	mov.w	r3, #4294967295
 8107528:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 810752a:	683b      	ldr	r3, [r7, #0]
 810752c:	461a      	mov	r2, r3
 810752e:	2100      	movs	r1, #0
 8107530:	6878      	ldr	r0, [r7, #4]
 8107532:	f7ff ffb8 	bl	81074a6 <metal_bitmap_next_clear_bit>
 8107536:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8107538:	683b      	ldr	r3, [r7, #0]
 810753a:	68ba      	ldr	r2, [r7, #8]
 810753c:	429a      	cmp	r2, r3
 810753e:	d206      	bcs.n	810754e <rpmsg_get_address+0x34>
		addr = nextbit;
 8107540:	68bb      	ldr	r3, [r7, #8]
 8107542:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8107544:	68bb      	ldr	r3, [r7, #8]
 8107546:	4619      	mov	r1, r3
 8107548:	6878      	ldr	r0, [r7, #4]
 810754a:	f7ff ff48 	bl	81073de <metal_bitmap_set_bit>
	}

	return addr;
 810754e:	68fb      	ldr	r3, [r7, #12]
}
 8107550:	4618      	mov	r0, r3
 8107552:	3710      	adds	r7, #16
 8107554:	46bd      	mov	sp, r7
 8107556:	bd80      	pop	{r7, pc}

08107558 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8107558:	b580      	push	{r7, lr}
 810755a:	b084      	sub	sp, #16
 810755c:	af00      	add	r7, sp, #0
 810755e:	60f8      	str	r0, [r7, #12]
 8107560:	60b9      	str	r1, [r7, #8]
 8107562:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8107564:	687a      	ldr	r2, [r7, #4]
 8107566:	68bb      	ldr	r3, [r7, #8]
 8107568:	429a      	cmp	r2, r3
 810756a:	da03      	bge.n	8107574 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 810756c:	6879      	ldr	r1, [r7, #4]
 810756e:	68f8      	ldr	r0, [r7, #12]
 8107570:	f7ff ff69 	bl	8107446 <metal_bitmap_clear_bit>
}
 8107574:	bf00      	nop
 8107576:	3710      	adds	r7, #16
 8107578:	46bd      	mov	sp, r7
 810757a:	bd80      	pop	{r7, pc}

0810757c <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 810757c:	b580      	push	{r7, lr}
 810757e:	b084      	sub	sp, #16
 8107580:	af00      	add	r7, sp, #0
 8107582:	60f8      	str	r0, [r7, #12]
 8107584:	60b9      	str	r1, [r7, #8]
 8107586:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8107588:	687a      	ldr	r2, [r7, #4]
 810758a:	68bb      	ldr	r3, [r7, #8]
 810758c:	429a      	cmp	r2, r3
 810758e:	da05      	bge.n	810759c <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8107590:	6879      	ldr	r1, [r7, #4]
 8107592:	68f8      	ldr	r0, [r7, #12]
 8107594:	f7ff ff3f 	bl	8107416 <metal_bitmap_is_bit_set>
 8107598:	4603      	mov	r3, r0
 810759a:	e000      	b.n	810759e <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 810759c:	4b02      	ldr	r3, [pc, #8]	; (81075a8 <rpmsg_is_address_set+0x2c>)
}
 810759e:	4618      	mov	r0, r3
 81075a0:	3710      	adds	r7, #16
 81075a2:	46bd      	mov	sp, r7
 81075a4:	bd80      	pop	{r7, pc}
 81075a6:	bf00      	nop
 81075a8:	fffff82d 	.word	0xfffff82d

081075ac <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 81075ac:	b580      	push	{r7, lr}
 81075ae:	b084      	sub	sp, #16
 81075b0:	af00      	add	r7, sp, #0
 81075b2:	60f8      	str	r0, [r7, #12]
 81075b4:	60b9      	str	r1, [r7, #8]
 81075b6:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 81075b8:	687a      	ldr	r2, [r7, #4]
 81075ba:	68bb      	ldr	r3, [r7, #8]
 81075bc:	429a      	cmp	r2, r3
 81075be:	da05      	bge.n	81075cc <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 81075c0:	6879      	ldr	r1, [r7, #4]
 81075c2:	68f8      	ldr	r0, [r7, #12]
 81075c4:	f7ff ff0b 	bl	81073de <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 81075c8:	2300      	movs	r3, #0
 81075ca:	e000      	b.n	81075ce <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 81075cc:	4b02      	ldr	r3, [pc, #8]	; (81075d8 <rpmsg_set_address+0x2c>)
	}
}
 81075ce:	4618      	mov	r0, r3
 81075d0:	3710      	adds	r7, #16
 81075d2:	46bd      	mov	sp, r7
 81075d4:	bd80      	pop	{r7, pc}
 81075d6:	bf00      	nop
 81075d8:	fffff82d 	.word	0xfffff82d

081075dc <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 81075dc:	b590      	push	{r4, r7, lr}
 81075de:	b089      	sub	sp, #36	; 0x24
 81075e0:	af02      	add	r7, sp, #8
 81075e2:	60f8      	str	r0, [r7, #12]
 81075e4:	60b9      	str	r1, [r7, #8]
 81075e6:	607a      	str	r2, [r7, #4]
 81075e8:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 81075ea:	68fb      	ldr	r3, [r7, #12]
 81075ec:	2b00      	cmp	r3, #0
 81075ee:	d00a      	beq.n	8107606 <rpmsg_send_offchannel_raw+0x2a>
 81075f0:	68fb      	ldr	r3, [r7, #12]
 81075f2:	6a1b      	ldr	r3, [r3, #32]
 81075f4:	2b00      	cmp	r3, #0
 81075f6:	d006      	beq.n	8107606 <rpmsg_send_offchannel_raw+0x2a>
 81075f8:	683b      	ldr	r3, [r7, #0]
 81075fa:	2b00      	cmp	r3, #0
 81075fc:	d003      	beq.n	8107606 <rpmsg_send_offchannel_raw+0x2a>
 81075fe:	687b      	ldr	r3, [r7, #4]
 8107600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107604:	d101      	bne.n	810760a <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8107606:	4b0d      	ldr	r3, [pc, #52]	; (810763c <rpmsg_send_offchannel_raw+0x60>)
 8107608:	e014      	b.n	8107634 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 810760a:	68fb      	ldr	r3, [r7, #12]
 810760c:	6a1b      	ldr	r3, [r3, #32]
 810760e:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8107610:	697b      	ldr	r3, [r7, #20]
 8107612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8107614:	2b00      	cmp	r3, #0
 8107616:	d00c      	beq.n	8107632 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8107618:	697b      	ldr	r3, [r7, #20]
 810761a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 810761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810761e:	9301      	str	r3, [sp, #4]
 8107620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107622:	9300      	str	r3, [sp, #0]
 8107624:	683b      	ldr	r3, [r7, #0]
 8107626:	687a      	ldr	r2, [r7, #4]
 8107628:	68b9      	ldr	r1, [r7, #8]
 810762a:	6978      	ldr	r0, [r7, #20]
 810762c:	47a0      	blx	r4
 810762e:	4603      	mov	r3, r0
 8107630:	e000      	b.n	8107634 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8107632:	4b02      	ldr	r3, [pc, #8]	; (810763c <rpmsg_send_offchannel_raw+0x60>)
}
 8107634:	4618      	mov	r0, r3
 8107636:	371c      	adds	r7, #28
 8107638:	46bd      	mov	sp, r7
 810763a:	bd90      	pop	{r4, r7, pc}
 810763c:	fffff82d 	.word	0xfffff82d

08107640 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8107640:	b580      	push	{r7, lr}
 8107642:	b090      	sub	sp, #64	; 0x40
 8107644:	af02      	add	r7, sp, #8
 8107646:	6078      	str	r0, [r7, #4]
 8107648:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 810764a:	683b      	ldr	r3, [r7, #0]
 810764c:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 810764e:	687b      	ldr	r3, [r7, #4]
 8107650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107652:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8107654:	6879      	ldr	r1, [r7, #4]
 8107656:	f107 030c 	add.w	r3, r7, #12
 810765a:	2220      	movs	r2, #32
 810765c:	4618      	mov	r0, r3
 810765e:	f002 f854 	bl	810970a <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8107662:	687b      	ldr	r3, [r7, #4]
 8107664:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8107666:	f107 030c 	add.w	r3, r7, #12
 810766a:	2201      	movs	r2, #1
 810766c:	9201      	str	r2, [sp, #4]
 810766e:	2228      	movs	r2, #40	; 0x28
 8107670:	9200      	str	r2, [sp, #0]
 8107672:	2235      	movs	r2, #53	; 0x35
 8107674:	6878      	ldr	r0, [r7, #4]
 8107676:	f7ff ffb1 	bl	81075dc <rpmsg_send_offchannel_raw>
 810767a:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 810767c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810767e:	2b00      	cmp	r3, #0
 8107680:	da01      	bge.n	8107686 <rpmsg_send_ns_message+0x46>
		return ret;
 8107682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107684:	e000      	b.n	8107688 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8107686:	2300      	movs	r3, #0
}
 8107688:	4618      	mov	r0, r3
 810768a:	3738      	adds	r7, #56	; 0x38
 810768c:	46bd      	mov	sp, r7
 810768e:	bd80      	pop	{r7, pc}

08107690 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8107690:	b580      	push	{r7, lr}
 8107692:	b088      	sub	sp, #32
 8107694:	af00      	add	r7, sp, #0
 8107696:	60f8      	str	r0, [r7, #12]
 8107698:	60b9      	str	r1, [r7, #8]
 810769a:	607a      	str	r2, [r7, #4]
 810769c:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 810769e:	68fb      	ldr	r3, [r7, #12]
 81076a0:	681b      	ldr	r3, [r3, #0]
 81076a2:	61fb      	str	r3, [r7, #28]
 81076a4:	e04b      	b.n	810773e <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 81076a6:	2300      	movs	r3, #0
 81076a8:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 81076aa:	69fb      	ldr	r3, [r7, #28]
 81076ac:	3b34      	subs	r3, #52	; 0x34
 81076ae:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 81076b0:	687b      	ldr	r3, [r7, #4]
 81076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81076b6:	d006      	beq.n	81076c6 <rpmsg_get_endpoint+0x36>
 81076b8:	697b      	ldr	r3, [r7, #20]
 81076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81076bc:	687a      	ldr	r2, [r7, #4]
 81076be:	429a      	cmp	r2, r3
 81076c0:	d101      	bne.n	81076c6 <rpmsg_get_endpoint+0x36>
			return ept;
 81076c2:	697b      	ldr	r3, [r7, #20]
 81076c4:	e040      	b.n	8107748 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 81076c6:	697b      	ldr	r3, [r7, #20]
 81076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81076ca:	687a      	ldr	r2, [r7, #4]
 81076cc:	429a      	cmp	r2, r3
 81076ce:	d106      	bne.n	81076de <rpmsg_get_endpoint+0x4e>
 81076d0:	697b      	ldr	r3, [r7, #20]
 81076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81076d4:	683a      	ldr	r2, [r7, #0]
 81076d6:	429a      	cmp	r2, r3
 81076d8:	d101      	bne.n	81076de <rpmsg_get_endpoint+0x4e>
			return ept;
 81076da:	697b      	ldr	r3, [r7, #20]
 81076dc:	e034      	b.n	8107748 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 81076de:	68bb      	ldr	r3, [r7, #8]
 81076e0:	2b00      	cmp	r3, #0
 81076e2:	d00c      	beq.n	81076fe <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 81076e4:	697b      	ldr	r3, [r7, #20]
 81076e6:	2220      	movs	r2, #32
 81076e8:	68b9      	ldr	r1, [r7, #8]
 81076ea:	4618      	mov	r0, r3
 81076ec:	f001 fffb 	bl	81096e6 <strncmp>
 81076f0:	4603      	mov	r3, r0
 81076f2:	2b00      	cmp	r3, #0
 81076f4:	bf0c      	ite	eq
 81076f6:	2301      	moveq	r3, #1
 81076f8:	2300      	movne	r3, #0
 81076fa:	b2db      	uxtb	r3, r3
 81076fc:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 81076fe:	68bb      	ldr	r3, [r7, #8]
 8107700:	2b00      	cmp	r3, #0
 8107702:	d018      	beq.n	8107736 <rpmsg_get_endpoint+0xa6>
 8107704:	69bb      	ldr	r3, [r7, #24]
 8107706:	2b00      	cmp	r3, #0
 8107708:	d015      	beq.n	8107736 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 810770a:	683b      	ldr	r3, [r7, #0]
 810770c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107710:	d006      	beq.n	8107720 <rpmsg_get_endpoint+0x90>
 8107712:	697b      	ldr	r3, [r7, #20]
 8107714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107716:	683a      	ldr	r2, [r7, #0]
 8107718:	429a      	cmp	r2, r3
 810771a:	d101      	bne.n	8107720 <rpmsg_get_endpoint+0x90>
			return ept;
 810771c:	697b      	ldr	r3, [r7, #20]
 810771e:	e013      	b.n	8107748 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8107720:	687b      	ldr	r3, [r7, #4]
 8107722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107726:	d107      	bne.n	8107738 <rpmsg_get_endpoint+0xa8>
 8107728:	697b      	ldr	r3, [r7, #20]
 810772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107730:	d102      	bne.n	8107738 <rpmsg_get_endpoint+0xa8>
			return ept;
 8107732:	697b      	ldr	r3, [r7, #20]
 8107734:	e008      	b.n	8107748 <rpmsg_get_endpoint+0xb8>
			continue;
 8107736:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8107738:	69fb      	ldr	r3, [r7, #28]
 810773a:	681b      	ldr	r3, [r3, #0]
 810773c:	61fb      	str	r3, [r7, #28]
 810773e:	68fb      	ldr	r3, [r7, #12]
 8107740:	69fa      	ldr	r2, [r7, #28]
 8107742:	429a      	cmp	r2, r3
 8107744:	d1af      	bne.n	81076a6 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8107746:	2300      	movs	r3, #0
}
 8107748:	4618      	mov	r0, r3
 810774a:	3720      	adds	r7, #32
 810774c:	46bd      	mov	sp, r7
 810774e:	bd80      	pop	{r7, pc}

08107750 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8107750:	b580      	push	{r7, lr}
 8107752:	b084      	sub	sp, #16
 8107754:	af00      	add	r7, sp, #0
 8107756:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8107758:	687b      	ldr	r3, [r7, #4]
 810775a:	2b00      	cmp	r3, #0
 810775c:	d016      	beq.n	810778c <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 810775e:	687b      	ldr	r3, [r7, #4]
 8107760:	6a1b      	ldr	r3, [r3, #32]
 8107762:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8107764:	687b      	ldr	r3, [r7, #4]
 8107766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107768:	f1b3 3fff 	cmp.w	r3, #4294967295
 810776c:	d008      	beq.n	8107780 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 810776e:	68fb      	ldr	r3, [r7, #12]
 8107770:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8107774:	687b      	ldr	r3, [r7, #4]
 8107776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8107778:	461a      	mov	r2, r3
 810777a:	2180      	movs	r1, #128	; 0x80
 810777c:	f7ff feec 	bl	8107558 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8107780:	687b      	ldr	r3, [r7, #4]
 8107782:	3334      	adds	r3, #52	; 0x34
 8107784:	4618      	mov	r0, r3
 8107786:	f7ff fe0f 	bl	81073a8 <metal_list_del>
 810778a:	e000      	b.n	810778e <rpmsg_unregister_endpoint+0x3e>
		return;
 810778c:	bf00      	nop
}
 810778e:	3710      	adds	r7, #16
 8107790:	46bd      	mov	sp, r7
 8107792:	bd80      	pop	{r7, pc}

08107794 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8107794:	b580      	push	{r7, lr}
 8107796:	b082      	sub	sp, #8
 8107798:	af00      	add	r7, sp, #0
 810779a:	6078      	str	r0, [r7, #4]
 810779c:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 810779e:	683b      	ldr	r3, [r7, #0]
 81077a0:	687a      	ldr	r2, [r7, #4]
 81077a2:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 81077a4:	687a      	ldr	r2, [r7, #4]
 81077a6:	683b      	ldr	r3, [r7, #0]
 81077a8:	3334      	adds	r3, #52	; 0x34
 81077aa:	4619      	mov	r1, r3
 81077ac:	4610      	mov	r0, r2
 81077ae:	f7ff fdee 	bl	810738e <metal_list_add_tail>
	return RPMSG_SUCCESS;
 81077b2:	2300      	movs	r3, #0
}
 81077b4:	4618      	mov	r0, r3
 81077b6:	3708      	adds	r7, #8
 81077b8:	46bd      	mov	sp, r7
 81077ba:	bd80      	pop	{r7, pc}

081077bc <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 81077bc:	b580      	push	{r7, lr}
 81077be:	b088      	sub	sp, #32
 81077c0:	af02      	add	r7, sp, #8
 81077c2:	60f8      	str	r0, [r7, #12]
 81077c4:	60b9      	str	r1, [r7, #8]
 81077c6:	607a      	str	r2, [r7, #4]
 81077c8:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 81077ca:	683b      	ldr	r3, [r7, #0]
 81077cc:	613b      	str	r3, [r7, #16]

	if (!ept)
 81077ce:	68fb      	ldr	r3, [r7, #12]
 81077d0:	2b00      	cmp	r3, #0
 81077d2:	d101      	bne.n	81077d8 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 81077d4:	4b37      	ldr	r3, [pc, #220]	; (81078b4 <rpmsg_create_ept+0xf8>)
 81077d6:	e068      	b.n	81078aa <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 81077d8:	68bb      	ldr	r3, [r7, #8]
 81077da:	3358      	adds	r3, #88	; 0x58
 81077dc:	4618      	mov	r0, r3
 81077de:	f7ff fda6 	bl	810732e <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 81077e2:	683b      	ldr	r3, [r7, #0]
 81077e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81077e8:	d018      	beq.n	810781c <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 81077ea:	68bb      	ldr	r3, [r7, #8]
 81077ec:	3348      	adds	r3, #72	; 0x48
 81077ee:	683a      	ldr	r2, [r7, #0]
 81077f0:	2180      	movs	r1, #128	; 0x80
 81077f2:	4618      	mov	r0, r3
 81077f4:	f7ff fec2 	bl	810757c <rpmsg_is_address_set>
 81077f8:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 81077fa:	697b      	ldr	r3, [r7, #20]
 81077fc:	2b00      	cmp	r3, #0
 81077fe:	d107      	bne.n	8107810 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8107800:	68bb      	ldr	r3, [r7, #8]
 8107802:	3348      	adds	r3, #72	; 0x48
 8107804:	683a      	ldr	r2, [r7, #0]
 8107806:	2180      	movs	r1, #128	; 0x80
 8107808:	4618      	mov	r0, r3
 810780a:	f7ff fecf 	bl	81075ac <rpmsg_set_address>
 810780e:	e00c      	b.n	810782a <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8107810:	697b      	ldr	r3, [r7, #20]
 8107812:	2b00      	cmp	r3, #0
 8107814:	dd40      	ble.n	8107898 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8107816:	2300      	movs	r3, #0
 8107818:	617b      	str	r3, [r7, #20]
			goto ret_status;
 810781a:	e040      	b.n	810789e <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 810781c:	68bb      	ldr	r3, [r7, #8]
 810781e:	3348      	adds	r3, #72	; 0x48
 8107820:	2180      	movs	r1, #128	; 0x80
 8107822:	4618      	mov	r0, r3
 8107824:	f7ff fe79 	bl	810751a <rpmsg_get_address>
 8107828:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 810782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810782c:	9301      	str	r3, [sp, #4]
 810782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107830:	9300      	str	r3, [sp, #0]
 8107832:	6a3b      	ldr	r3, [r7, #32]
 8107834:	693a      	ldr	r2, [r7, #16]
 8107836:	6879      	ldr	r1, [r7, #4]
 8107838:	68f8      	ldr	r0, [r7, #12]
 810783a:	f7ff fe51 	bl	81074e0 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 810783e:	68f9      	ldr	r1, [r7, #12]
 8107840:	68b8      	ldr	r0, [r7, #8]
 8107842:	f7ff ffa7 	bl	8107794 <rpmsg_register_endpoint>
 8107846:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8107848:	697b      	ldr	r3, [r7, #20]
 810784a:	2b00      	cmp	r3, #0
 810784c:	da06      	bge.n	810785c <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 810784e:	68bb      	ldr	r3, [r7, #8]
 8107850:	3348      	adds	r3, #72	; 0x48
 8107852:	693a      	ldr	r2, [r7, #16]
 8107854:	2180      	movs	r1, #128	; 0x80
 8107856:	4618      	mov	r0, r3
 8107858:	f7ff fe7e 	bl	8107558 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 810785c:	697b      	ldr	r3, [r7, #20]
 810785e:	2b00      	cmp	r3, #0
 8107860:	d11c      	bne.n	810789c <rpmsg_create_ept+0xe0>
 8107862:	68fb      	ldr	r3, [r7, #12]
 8107864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107866:	f1b3 3fff 	cmp.w	r3, #4294967295
 810786a:	d117      	bne.n	810789c <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 810786c:	68bb      	ldr	r3, [r7, #8]
 810786e:	3358      	adds	r3, #88	; 0x58
 8107870:	4618      	mov	r0, r3
 8107872:	f7ff fd67 	bl	8107344 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8107876:	2100      	movs	r1, #0
 8107878:	68f8      	ldr	r0, [r7, #12]
 810787a:	f7ff fee1 	bl	8107640 <rpmsg_send_ns_message>
 810787e:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8107880:	68bb      	ldr	r3, [r7, #8]
 8107882:	3358      	adds	r3, #88	; 0x58
 8107884:	4618      	mov	r0, r3
 8107886:	f7ff fd52 	bl	810732e <metal_mutex_acquire>
		if (status)
 810788a:	697b      	ldr	r3, [r7, #20]
 810788c:	2b00      	cmp	r3, #0
 810788e:	d005      	beq.n	810789c <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8107890:	68f8      	ldr	r0, [r7, #12]
 8107892:	f7ff ff5d 	bl	8107750 <rpmsg_unregister_endpoint>
 8107896:	e002      	b.n	810789e <rpmsg_create_ept+0xe2>
			goto ret_status;
 8107898:	bf00      	nop
 810789a:	e000      	b.n	810789e <rpmsg_create_ept+0xe2>
	}

ret_status:
 810789c:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 810789e:	68bb      	ldr	r3, [r7, #8]
 81078a0:	3358      	adds	r3, #88	; 0x58
 81078a2:	4618      	mov	r0, r3
 81078a4:	f7ff fd4e 	bl	8107344 <metal_mutex_release>
	return status;
 81078a8:	697b      	ldr	r3, [r7, #20]
}
 81078aa:	4618      	mov	r0, r3
 81078ac:	3718      	adds	r7, #24
 81078ae:	46bd      	mov	sp, r7
 81078b0:	bd80      	pop	{r7, pc}
 81078b2:	bf00      	nop
 81078b4:	fffff82d 	.word	0xfffff82d

081078b8 <__metal_cache_invalidate>:
{
 81078b8:	b580      	push	{r7, lr}
 81078ba:	b082      	sub	sp, #8
 81078bc:	af00      	add	r7, sp, #0
 81078be:	6078      	str	r0, [r7, #4]
 81078c0:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 81078c2:	6839      	ldr	r1, [r7, #0]
 81078c4:	6878      	ldr	r0, [r7, #4]
 81078c6:	f000 fc56 	bl	8108176 <metal_machine_cache_invalidate>
}
 81078ca:	bf00      	nop
 81078cc:	3708      	adds	r7, #8
 81078ce:	46bd      	mov	sp, r7
 81078d0:	bd80      	pop	{r7, pc}

081078d2 <metal_cache_invalidate>:
{
 81078d2:	b580      	push	{r7, lr}
 81078d4:	b082      	sub	sp, #8
 81078d6:	af00      	add	r7, sp, #0
 81078d8:	6078      	str	r0, [r7, #4]
 81078da:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 81078dc:	6839      	ldr	r1, [r7, #0]
 81078de:	6878      	ldr	r0, [r7, #4]
 81078e0:	f7ff ffea 	bl	81078b8 <__metal_cache_invalidate>
}
 81078e4:	bf00      	nop
 81078e6:	3708      	adds	r7, #8
 81078e8:	46bd      	mov	sp, r7
 81078ea:	bd80      	pop	{r7, pc}

081078ec <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 81078ec:	b480      	push	{r7}
 81078ee:	b083      	sub	sp, #12
 81078f0:	af00      	add	r7, sp, #0
 81078f2:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 81078f4:	2300      	movs	r3, #0
}
 81078f6:	4618      	mov	r0, r3
 81078f8:	370c      	adds	r7, #12
 81078fa:	46bd      	mov	sp, r7
 81078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107900:	4770      	bx	lr

08107902 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8107902:	b580      	push	{r7, lr}
 8107904:	b082      	sub	sp, #8
 8107906:	af00      	add	r7, sp, #0
 8107908:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 810790a:	6878      	ldr	r0, [r7, #4]
 810790c:	f7ff ffee 	bl	81078ec <__metal_sleep_usec>
 8107910:	4603      	mov	r3, r0
}
 8107912:	4618      	mov	r0, r3
 8107914:	3708      	adds	r7, #8
 8107916:	46bd      	mov	sp, r7
 8107918:	bd80      	pop	{r7, pc}

0810791a <metal_list_init>:
{
 810791a:	b480      	push	{r7}
 810791c:	b083      	sub	sp, #12
 810791e:	af00      	add	r7, sp, #0
 8107920:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8107922:	687b      	ldr	r3, [r7, #4]
 8107924:	687a      	ldr	r2, [r7, #4]
 8107926:	605a      	str	r2, [r3, #4]
 8107928:	687b      	ldr	r3, [r7, #4]
 810792a:	685a      	ldr	r2, [r3, #4]
 810792c:	687b      	ldr	r3, [r7, #4]
 810792e:	601a      	str	r2, [r3, #0]
}
 8107930:	bf00      	nop
 8107932:	370c      	adds	r7, #12
 8107934:	46bd      	mov	sp, r7
 8107936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810793a:	4770      	bx	lr

0810793c <metal_io_virt_to_offset>:
{
 810793c:	b480      	push	{r7}
 810793e:	b085      	sub	sp, #20
 8107940:	af00      	add	r7, sp, #0
 8107942:	6078      	str	r0, [r7, #4]
 8107944:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8107946:	687b      	ldr	r3, [r7, #4]
 8107948:	681b      	ldr	r3, [r3, #0]
 810794a:	683a      	ldr	r2, [r7, #0]
 810794c:	1ad3      	subs	r3, r2, r3
 810794e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8107950:	687b      	ldr	r3, [r7, #4]
 8107952:	689b      	ldr	r3, [r3, #8]
 8107954:	68fa      	ldr	r2, [r7, #12]
 8107956:	429a      	cmp	r2, r3
 8107958:	d201      	bcs.n	810795e <metal_io_virt_to_offset+0x22>
 810795a:	68fb      	ldr	r3, [r7, #12]
 810795c:	e001      	b.n	8107962 <metal_io_virt_to_offset+0x26>
 810795e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8107962:	4618      	mov	r0, r3
 8107964:	3714      	adds	r7, #20
 8107966:	46bd      	mov	sp, r7
 8107968:	f85d 7b04 	ldr.w	r7, [sp], #4
 810796c:	4770      	bx	lr

0810796e <__metal_mutex_init>:
{
 810796e:	b480      	push	{r7}
 8107970:	b085      	sub	sp, #20
 8107972:	af00      	add	r7, sp, #0
 8107974:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8107976:	687b      	ldr	r3, [r7, #4]
 8107978:	60fb      	str	r3, [r7, #12]
 810797a:	2300      	movs	r3, #0
 810797c:	60bb      	str	r3, [r7, #8]
 810797e:	68bb      	ldr	r3, [r7, #8]
 8107980:	461a      	mov	r2, r3
 8107982:	68fb      	ldr	r3, [r7, #12]
 8107984:	f3bf 8f5b 	dmb	ish
 8107988:	601a      	str	r2, [r3, #0]
 810798a:	f3bf 8f5b 	dmb	ish
}
 810798e:	bf00      	nop
 8107990:	3714      	adds	r7, #20
 8107992:	46bd      	mov	sp, r7
 8107994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107998:	4770      	bx	lr

0810799a <__metal_mutex_acquire>:
{
 810799a:	b480      	push	{r7}
 810799c:	b083      	sub	sp, #12
 810799e:	af00      	add	r7, sp, #0
 81079a0:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 81079a2:	bf00      	nop
 81079a4:	687b      	ldr	r3, [r7, #4]
 81079a6:	2201      	movs	r2, #1
 81079a8:	4611      	mov	r1, r2
 81079aa:	f3bf 8f5b 	dmb	ish
 81079ae:	e8d3 2f4f 	ldrexb	r2, [r3]
 81079b2:	e8c3 1f40 	strexb	r0, r1, [r3]
 81079b6:	2800      	cmp	r0, #0
 81079b8:	d1f9      	bne.n	81079ae <__metal_mutex_acquire+0x14>
 81079ba:	f3bf 8f5b 	dmb	ish
 81079be:	b2d3      	uxtb	r3, r2
 81079c0:	2b00      	cmp	r3, #0
 81079c2:	d1ef      	bne.n	81079a4 <__metal_mutex_acquire+0xa>
}
 81079c4:	bf00      	nop
 81079c6:	bf00      	nop
 81079c8:	370c      	adds	r7, #12
 81079ca:	46bd      	mov	sp, r7
 81079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079d0:	4770      	bx	lr

081079d2 <__metal_mutex_release>:
{
 81079d2:	b480      	push	{r7}
 81079d4:	b083      	sub	sp, #12
 81079d6:	af00      	add	r7, sp, #0
 81079d8:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 81079da:	687b      	ldr	r3, [r7, #4]
 81079dc:	f3bf 8f5b 	dmb	ish
 81079e0:	2200      	movs	r2, #0
 81079e2:	701a      	strb	r2, [r3, #0]
 81079e4:	f3bf 8f5b 	dmb	ish
}
 81079e8:	bf00      	nop
 81079ea:	370c      	adds	r7, #12
 81079ec:	46bd      	mov	sp, r7
 81079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079f2:	4770      	bx	lr

081079f4 <metal_mutex_init>:
{
 81079f4:	b580      	push	{r7, lr}
 81079f6:	b082      	sub	sp, #8
 81079f8:	af00      	add	r7, sp, #0
 81079fa:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 81079fc:	6878      	ldr	r0, [r7, #4]
 81079fe:	f7ff ffb6 	bl	810796e <__metal_mutex_init>
}
 8107a02:	bf00      	nop
 8107a04:	3708      	adds	r7, #8
 8107a06:	46bd      	mov	sp, r7
 8107a08:	bd80      	pop	{r7, pc}

08107a0a <metal_mutex_acquire>:
{
 8107a0a:	b580      	push	{r7, lr}
 8107a0c:	b082      	sub	sp, #8
 8107a0e:	af00      	add	r7, sp, #0
 8107a10:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8107a12:	6878      	ldr	r0, [r7, #4]
 8107a14:	f7ff ffc1 	bl	810799a <__metal_mutex_acquire>
}
 8107a18:	bf00      	nop
 8107a1a:	3708      	adds	r7, #8
 8107a1c:	46bd      	mov	sp, r7
 8107a1e:	bd80      	pop	{r7, pc}

08107a20 <metal_mutex_release>:
{
 8107a20:	b580      	push	{r7, lr}
 8107a22:	b082      	sub	sp, #8
 8107a24:	af00      	add	r7, sp, #0
 8107a26:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8107a28:	6878      	ldr	r0, [r7, #4]
 8107a2a:	f7ff ffd2 	bl	81079d2 <__metal_mutex_release>
}
 8107a2e:	bf00      	nop
 8107a30:	3708      	adds	r7, #8
 8107a32:	46bd      	mov	sp, r7
 8107a34:	bd80      	pop	{r7, pc}

08107a36 <rpmsg_init_ept>:
{
 8107a36:	b580      	push	{r7, lr}
 8107a38:	b084      	sub	sp, #16
 8107a3a:	af00      	add	r7, sp, #0
 8107a3c:	60f8      	str	r0, [r7, #12]
 8107a3e:	60b9      	str	r1, [r7, #8]
 8107a40:	607a      	str	r2, [r7, #4]
 8107a42:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8107a44:	68fb      	ldr	r3, [r7, #12]
 8107a46:	2220      	movs	r2, #32
 8107a48:	68b9      	ldr	r1, [r7, #8]
 8107a4a:	4618      	mov	r0, r3
 8107a4c:	f001 fe5d 	bl	810970a <strncpy>
	ept->addr = src;
 8107a50:	68fb      	ldr	r3, [r7, #12]
 8107a52:	687a      	ldr	r2, [r7, #4]
 8107a54:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8107a56:	68fb      	ldr	r3, [r7, #12]
 8107a58:	683a      	ldr	r2, [r7, #0]
 8107a5a:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8107a5c:	68fb      	ldr	r3, [r7, #12]
 8107a5e:	69ba      	ldr	r2, [r7, #24]
 8107a60:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8107a62:	68fb      	ldr	r3, [r7, #12]
 8107a64:	69fa      	ldr	r2, [r7, #28]
 8107a66:	631a      	str	r2, [r3, #48]	; 0x30
}
 8107a68:	bf00      	nop
 8107a6a:	3710      	adds	r7, #16
 8107a6c:	46bd      	mov	sp, r7
 8107a6e:	bd80      	pop	{r7, pc}

08107a70 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8107a70:	b480      	push	{r7}
 8107a72:	b083      	sub	sp, #12
 8107a74:	af00      	add	r7, sp, #0
 8107a76:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8107a78:	687b      	ldr	r3, [r7, #4]
 8107a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107a7c:	699b      	ldr	r3, [r3, #24]
}
 8107a7e:	4618      	mov	r0, r3
 8107a80:	370c      	adds	r7, #12
 8107a82:	46bd      	mov	sp, r7
 8107a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a88:	4770      	bx	lr

08107a8a <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8107a8a:	b580      	push	{r7, lr}
 8107a8c:	b082      	sub	sp, #8
 8107a8e:	af00      	add	r7, sp, #0
 8107a90:	6078      	str	r0, [r7, #4]
 8107a92:	460b      	mov	r3, r1
 8107a94:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8107a96:	687b      	ldr	r3, [r7, #4]
 8107a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107a9a:	6a1b      	ldr	r3, [r3, #32]
 8107a9c:	685b      	ldr	r3, [r3, #4]
 8107a9e:	687a      	ldr	r2, [r7, #4]
 8107aa0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8107aa2:	78f9      	ldrb	r1, [r7, #3]
 8107aa4:	4610      	mov	r0, r2
 8107aa6:	4798      	blx	r3
}
 8107aa8:	bf00      	nop
 8107aaa:	3708      	adds	r7, #8
 8107aac:	46bd      	mov	sp, r7
 8107aae:	bd80      	pop	{r7, pc}

08107ab0 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8107ab0:	b580      	push	{r7, lr}
 8107ab2:	b082      	sub	sp, #8
 8107ab4:	af00      	add	r7, sp, #0
 8107ab6:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8107ab8:	687b      	ldr	r3, [r7, #4]
 8107aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107abc:	6a1b      	ldr	r3, [r3, #32]
 8107abe:	681b      	ldr	r3, [r3, #0]
 8107ac0:	687a      	ldr	r2, [r7, #4]
 8107ac2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8107ac4:	4610      	mov	r0, r2
 8107ac6:	4798      	blx	r3
 8107ac8:	4603      	mov	r3, r0
}
 8107aca:	4618      	mov	r0, r3
 8107acc:	3708      	adds	r7, #8
 8107ace:	46bd      	mov	sp, r7
 8107ad0:	bd80      	pop	{r7, pc}

08107ad2 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8107ad2:	b580      	push	{r7, lr}
 8107ad4:	b082      	sub	sp, #8
 8107ad6:	af00      	add	r7, sp, #0
 8107ad8:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8107ada:	687b      	ldr	r3, [r7, #4]
 8107adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107ade:	6a1b      	ldr	r3, [r3, #32]
 8107ae0:	689b      	ldr	r3, [r3, #8]
 8107ae2:	687a      	ldr	r2, [r7, #4]
 8107ae4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8107ae6:	4610      	mov	r0, r2
 8107ae8:	4798      	blx	r3
 8107aea:	4603      	mov	r3, r0
}
 8107aec:	4618      	mov	r0, r3
 8107aee:	3708      	adds	r7, #8
 8107af0:	46bd      	mov	sp, r7
 8107af2:	bd80      	pop	{r7, pc}

08107af4 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8107af4:	b580      	push	{r7, lr}
 8107af6:	b086      	sub	sp, #24
 8107af8:	af02      	add	r7, sp, #8
 8107afa:	60f8      	str	r0, [r7, #12]
 8107afc:	60b9      	str	r1, [r7, #8]
 8107afe:	607a      	str	r2, [r7, #4]
 8107b00:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8107b02:	68fb      	ldr	r3, [r7, #12]
 8107b04:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8107b06:	68b9      	ldr	r1, [r7, #8]
 8107b08:	69bb      	ldr	r3, [r7, #24]
 8107b0a:	9300      	str	r3, [sp, #0]
 8107b0c:	683b      	ldr	r3, [r7, #0]
 8107b0e:	687a      	ldr	r2, [r7, #4]
 8107b10:	f000 fb4a 	bl	81081a8 <virtio_create_virtqueues>
 8107b14:	4603      	mov	r3, r0
					callbacks);
}
 8107b16:	4618      	mov	r0, r3
 8107b18:	3710      	adds	r7, #16
 8107b1a:	46bd      	mov	sp, r7
 8107b1c:	bd80      	pop	{r7, pc}

08107b1e <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8107b1e:	b580      	push	{r7, lr}
 8107b20:	b082      	sub	sp, #8
 8107b22:	af00      	add	r7, sp, #0
 8107b24:	6078      	str	r0, [r7, #4]
 8107b26:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8107b28:	f04f 33ff 	mov.w	r3, #4294967295
 8107b2c:	683a      	ldr	r2, [r7, #0]
 8107b2e:	2100      	movs	r1, #0
 8107b30:	6878      	ldr	r0, [r7, #4]
 8107b32:	f7ff fdad 	bl	8107690 <rpmsg_get_endpoint>
 8107b36:	4603      	mov	r3, r0
}
 8107b38:	4618      	mov	r0, r3
 8107b3a:	3708      	adds	r7, #8
 8107b3c:	46bd      	mov	sp, r7
 8107b3e:	bd80      	pop	{r7, pc}

08107b40 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8107b40:	b480      	push	{r7}
 8107b42:	b085      	sub	sp, #20
 8107b44:	af00      	add	r7, sp, #0
 8107b46:	60f8      	str	r0, [r7, #12]
 8107b48:	60b9      	str	r1, [r7, #8]
 8107b4a:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8107b4c:	68fb      	ldr	r3, [r7, #12]
 8107b4e:	2b00      	cmp	r3, #0
 8107b50:	d01d      	beq.n	8107b8e <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8107b52:	68fb      	ldr	r3, [r7, #12]
 8107b54:	68ba      	ldr	r2, [r7, #8]
 8107b56:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8107b58:	687b      	ldr	r3, [r7, #4]
 8107b5a:	f003 0303 	and.w	r3, r3, #3
 8107b5e:	2b00      	cmp	r3, #0
 8107b60:	d004      	beq.n	8107b6c <rpmsg_virtio_init_shm_pool+0x2c>
 8107b62:	687b      	ldr	r3, [r7, #4]
 8107b64:	f023 0303 	bic.w	r3, r3, #3
 8107b68:	3304      	adds	r3, #4
 8107b6a:	e000      	b.n	8107b6e <rpmsg_virtio_init_shm_pool+0x2e>
 8107b6c:	687b      	ldr	r3, [r7, #4]
 8107b6e:	68fa      	ldr	r2, [r7, #12]
 8107b70:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8107b72:	687b      	ldr	r3, [r7, #4]
 8107b74:	f003 0303 	and.w	r3, r3, #3
 8107b78:	2b00      	cmp	r3, #0
 8107b7a:	d004      	beq.n	8107b86 <rpmsg_virtio_init_shm_pool+0x46>
 8107b7c:	687b      	ldr	r3, [r7, #4]
 8107b7e:	f023 0303 	bic.w	r3, r3, #3
 8107b82:	3304      	adds	r3, #4
 8107b84:	e000      	b.n	8107b88 <rpmsg_virtio_init_shm_pool+0x48>
 8107b86:	687b      	ldr	r3, [r7, #4]
 8107b88:	68fa      	ldr	r2, [r7, #12]
 8107b8a:	6053      	str	r3, [r2, #4]
 8107b8c:	e000      	b.n	8107b90 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8107b8e:	bf00      	nop
}
 8107b90:	3714      	adds	r7, #20
 8107b92:	46bd      	mov	sp, r7
 8107b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b98:	4770      	bx	lr

08107b9a <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8107b9a:	b580      	push	{r7, lr}
 8107b9c:	b086      	sub	sp, #24
 8107b9e:	af00      	add	r7, sp, #0
 8107ba0:	60f8      	str	r0, [r7, #12]
 8107ba2:	60b9      	str	r1, [r7, #8]
 8107ba4:	607a      	str	r2, [r7, #4]
 8107ba6:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8107ba8:	68f8      	ldr	r0, [r7, #12]
 8107baa:	f7ff ff61 	bl	8107a70 <rpmsg_virtio_get_role>
 8107bae:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8107bb0:	697b      	ldr	r3, [r7, #20]
 8107bb2:	2b01      	cmp	r3, #1
 8107bb4:	d106      	bne.n	8107bc4 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 8107bb6:	68fb      	ldr	r3, [r7, #12]
 8107bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8107bba:	8879      	ldrh	r1, [r7, #2]
 8107bbc:	687a      	ldr	r2, [r7, #4]
 8107bbe:	4618      	mov	r0, r3
 8107bc0:	f000 fc9c 	bl	81084fc <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8107bc4:	bf00      	nop
 8107bc6:	3718      	adds	r7, #24
 8107bc8:	46bd      	mov	sp, r7
 8107bca:	bd80      	pop	{r7, pc}

08107bcc <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8107bcc:	b580      	push	{r7, lr}
 8107bce:	b086      	sub	sp, #24
 8107bd0:	af00      	add	r7, sp, #0
 8107bd2:	60f8      	str	r0, [r7, #12]
 8107bd4:	60b9      	str	r1, [r7, #8]
 8107bd6:	607a      	str	r2, [r7, #4]
 8107bd8:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8107bda:	68f8      	ldr	r0, [r7, #12]
 8107bdc:	f7ff ff48 	bl	8107a70 <rpmsg_virtio_get_role>
 8107be0:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8107be2:	697b      	ldr	r3, [r7, #20]
 8107be4:	2b01      	cmp	r3, #1
 8107be6:	d108      	bne.n	8107bfa <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 8107be8:	68fb      	ldr	r3, [r7, #12]
 8107bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107bec:	8879      	ldrh	r1, [r7, #2]
 8107bee:	687a      	ldr	r2, [r7, #4]
 8107bf0:	4618      	mov	r0, r3
 8107bf2:	f000 fc83 	bl	81084fc <virtqueue_add_consumed_buffer>
 8107bf6:	4603      	mov	r3, r0
 8107bf8:	e000      	b.n	8107bfc <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8107bfa:	2300      	movs	r3, #0
}
 8107bfc:	4618      	mov	r0, r3
 8107bfe:	3718      	adds	r7, #24
 8107c00:	46bd      	mov	sp, r7
 8107c02:	bd80      	pop	{r7, pc}

08107c04 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8107c04:	b580      	push	{r7, lr}
 8107c06:	b086      	sub	sp, #24
 8107c08:	af00      	add	r7, sp, #0
 8107c0a:	60f8      	str	r0, [r7, #12]
 8107c0c:	60b9      	str	r1, [r7, #8]
 8107c0e:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8107c10:	68f8      	ldr	r0, [r7, #12]
 8107c12:	f7ff ff2d 	bl	8107a70 <rpmsg_virtio_get_role>
 8107c16:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8107c18:	2300      	movs	r3, #0
 8107c1a:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8107c1c:	693b      	ldr	r3, [r7, #16]
 8107c1e:	2b01      	cmp	r3, #1
 8107c20:	d107      	bne.n	8107c32 <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 8107c22:	68fb      	ldr	r3, [r7, #12]
 8107c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107c26:	68ba      	ldr	r2, [r7, #8]
 8107c28:	6879      	ldr	r1, [r7, #4]
 8107c2a:	4618      	mov	r0, r3
 8107c2c:	f000 fc20 	bl	8108470 <virtqueue_get_available_buffer>
 8107c30:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8107c32:	697b      	ldr	r3, [r7, #20]
}
 8107c34:	4618      	mov	r0, r3
 8107c36:	3718      	adds	r7, #24
 8107c38:	46bd      	mov	sp, r7
 8107c3a:	bd80      	pop	{r7, pc}

08107c3c <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8107c3c:	b580      	push	{r7, lr}
 8107c3e:	b086      	sub	sp, #24
 8107c40:	af00      	add	r7, sp, #0
 8107c42:	60f8      	str	r0, [r7, #12]
 8107c44:	60b9      	str	r1, [r7, #8]
 8107c46:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8107c48:	68f8      	ldr	r0, [r7, #12]
 8107c4a:	f7ff ff11 	bl	8107a70 <rpmsg_virtio_get_role>
 8107c4e:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8107c50:	2300      	movs	r3, #0
 8107c52:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8107c54:	693b      	ldr	r3, [r7, #16]
 8107c56:	2b01      	cmp	r3, #1
 8107c58:	d107      	bne.n	8107c6a <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 8107c5a:	68fb      	ldr	r3, [r7, #12]
 8107c5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8107c5e:	68ba      	ldr	r2, [r7, #8]
 8107c60:	6879      	ldr	r1, [r7, #4]
 8107c62:	4618      	mov	r0, r3
 8107c64:	f000 fc04 	bl	8108470 <virtqueue_get_available_buffer>
 8107c68:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8107c6a:	697b      	ldr	r3, [r7, #20]
 8107c6c:	2b00      	cmp	r3, #0
 8107c6e:	d005      	beq.n	8107c7c <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8107c70:	68bb      	ldr	r3, [r7, #8]
 8107c72:	681b      	ldr	r3, [r3, #0]
 8107c74:	4619      	mov	r1, r3
 8107c76:	6978      	ldr	r0, [r7, #20]
 8107c78:	f7ff fe2b 	bl	81078d2 <metal_cache_invalidate>
	}

	return data;
 8107c7c:	697b      	ldr	r3, [r7, #20]
}
 8107c7e:	4618      	mov	r0, r3
 8107c80:	3718      	adds	r7, #24
 8107c82:	46bd      	mov	sp, r7
 8107c84:	bd80      	pop	{r7, pc}

08107c86 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 8107c86:	b580      	push	{r7, lr}
 8107c88:	b084      	sub	sp, #16
 8107c8a:	af00      	add	r7, sp, #0
 8107c8c:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 8107c8e:	6878      	ldr	r0, [r7, #4]
 8107c90:	f7ff ff0e 	bl	8107ab0 <rpmsg_virtio_get_status>
 8107c94:	4603      	mov	r3, r0
 8107c96:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 8107c98:	7bfb      	ldrb	r3, [r7, #15]
 8107c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107c9e:	2b00      	cmp	r3, #0
 8107ca0:	d004      	beq.n	8107cac <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 8107ca2:	2100      	movs	r1, #0
 8107ca4:	6878      	ldr	r0, [r7, #4]
 8107ca6:	f7ff fef0 	bl	8107a8a <rpmsg_virtio_set_status>
 8107caa:	e7f0      	b.n	8107c8e <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 8107cac:	7bfb      	ldrb	r3, [r7, #15]
 8107cae:	f003 0304 	and.w	r3, r3, #4
 8107cb2:	2b00      	cmp	r3, #0
 8107cb4:	d0eb      	beq.n	8107c8e <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 8107cb6:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 8107cb8:	4618      	mov	r0, r3
 8107cba:	3710      	adds	r7, #16
 8107cbc:	46bd      	mov	sp, r7
 8107cbe:	bd80      	pop	{r7, pc}

08107cc0 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8107cc0:	b580      	push	{r7, lr}
 8107cc2:	b084      	sub	sp, #16
 8107cc4:	af00      	add	r7, sp, #0
 8107cc6:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8107cc8:	6878      	ldr	r0, [r7, #4]
 8107cca:	f7ff fed1 	bl	8107a70 <rpmsg_virtio_get_role>
 8107cce:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8107cd0:	2300      	movs	r3, #0
 8107cd2:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8107cd4:	68bb      	ldr	r3, [r7, #8]
 8107cd6:	2b01      	cmp	r3, #1
 8107cd8:	d107      	bne.n	8107cea <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 8107cda:	687b      	ldr	r3, [r7, #4]
 8107cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107cde:	4618      	mov	r0, r3
 8107ce0:	f000 fc86 	bl	81085f0 <virtqueue_get_desc_size>
 8107ce4:	4603      	mov	r3, r0
 8107ce6:	3b10      	subs	r3, #16
		length =
 8107ce8:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8107cea:	68fb      	ldr	r3, [r7, #12]
}
 8107cec:	4618      	mov	r0, r3
 8107cee:	3710      	adds	r7, #16
 8107cf0:	46bd      	mov	sp, r7
 8107cf2:	bd80      	pop	{r7, pc}

08107cf4 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8107cf4:	b580      	push	{r7, lr}
 8107cf6:	b090      	sub	sp, #64	; 0x40
 8107cf8:	af00      	add	r7, sp, #0
 8107cfa:	60f8      	str	r0, [r7, #12]
 8107cfc:	60b9      	str	r1, [r7, #8]
 8107cfe:	607a      	str	r2, [r7, #4]
 8107d00:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8107d02:	2300      	movs	r3, #0
 8107d04:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 8107d06:	2300      	movs	r3, #0
 8107d08:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8107d0a:	68fb      	ldr	r3, [r7, #12]
 8107d0c:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8107d0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8107d10:	f7ff fece 	bl	8107ab0 <rpmsg_virtio_get_status>
 8107d14:	4603      	mov	r3, r0
 8107d16:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8107d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d1a:	f003 0304 	and.w	r3, r3, #4
 8107d1e:	2b00      	cmp	r3, #0
 8107d20:	d101      	bne.n	8107d26 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8107d22:	4b45      	ldr	r3, [pc, #276]	; (8107e38 <rpmsg_virtio_send_offchannel_raw+0x144>)
 8107d24:	e083      	b.n	8107e2e <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 8107d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107d28:	2b00      	cmp	r3, #0
 8107d2a:	d003      	beq.n	8107d34 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8107d2c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8107d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8107d32:	e001      	b.n	8107d38 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8107d34:	2300      	movs	r3, #0
 8107d36:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8107d38:	68fb      	ldr	r3, [r7, #12]
 8107d3a:	3358      	adds	r3, #88	; 0x58
 8107d3c:	4618      	mov	r0, r3
 8107d3e:	f7ff fe64 	bl	8107a0a <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8107d42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8107d44:	f7ff ffbc 	bl	8107cc0 <_rpmsg_virtio_get_buffer_size>
 8107d48:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 8107d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8107d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107d4e:	429a      	cmp	r2, r3
 8107d50:	dc08      	bgt.n	8107d64 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8107d52:	f107 0216 	add.w	r2, r7, #22
 8107d56:	f107 0310 	add.w	r3, r7, #16
 8107d5a:	4619      	mov	r1, r3
 8107d5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8107d5e:	f7ff ff51 	bl	8107c04 <rpmsg_virtio_get_tx_buffer>
 8107d62:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8107d64:	68fb      	ldr	r3, [r7, #12]
 8107d66:	3358      	adds	r3, #88	; 0x58
 8107d68:	4618      	mov	r0, r3
 8107d6a:	f7ff fe59 	bl	8107a20 <metal_mutex_release>
		if (buffer || !tick_count)
 8107d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107d70:	2b00      	cmp	r3, #0
 8107d72:	d10e      	bne.n	8107d92 <rpmsg_virtio_send_offchannel_raw+0x9e>
 8107d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d76:	2b00      	cmp	r3, #0
 8107d78:	d00b      	beq.n	8107d92 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8107d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107d7c:	2b00      	cmp	r3, #0
 8107d7e:	d001      	beq.n	8107d84 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8107d80:	4b2e      	ldr	r3, [pc, #184]	; (8107e3c <rpmsg_virtio_send_offchannel_raw+0x148>)
 8107d82:	e054      	b.n	8107e2e <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8107d84:	200a      	movs	r0, #10
 8107d86:	f7ff fdbc 	bl	8107902 <metal_sleep_usec>
		tick_count--;
 8107d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d8c:	3b01      	subs	r3, #1
 8107d8e:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8107d90:	e7d2      	b.n	8107d38 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8107d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107d94:	2b00      	cmp	r3, #0
 8107d96:	d101      	bne.n	8107d9c <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8107d98:	4b29      	ldr	r3, [pc, #164]	; (8107e40 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8107d9a:	e048      	b.n	8107e2e <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8107d9c:	687b      	ldr	r3, [r7, #4]
 8107d9e:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8107da0:	68bb      	ldr	r3, [r7, #8]
 8107da2:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8107da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8107da6:	b29b      	uxth	r3, r3
 8107da8:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 8107daa:	2300      	movs	r3, #0
 8107dac:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8107dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107db2:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8107db4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8107db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107db8:	f7ff fdc0 	bl	810793c <metal_io_virt_to_offset>
 8107dbc:	4601      	mov	r1, r0
 8107dbe:	f107 0218 	add.w	r2, r7, #24
 8107dc2:	2310      	movs	r3, #16
 8107dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107dc6:	f7fe ff5a 	bl	8106c7e <metal_io_block_write>
 8107dca:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8107dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107dce:	2b10      	cmp	r3, #16
 8107dd0:	d000      	beq.n	8107dd4 <rpmsg_virtio_send_offchannel_raw+0xe0>
 8107dd2:	e7fe      	b.n	8107dd2 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8107dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107dd6:	3310      	adds	r3, #16
 8107dd8:	4619      	mov	r1, r3
 8107dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107ddc:	f7ff fdae 	bl	810793c <metal_io_virt_to_offset>
 8107de0:	4601      	mov	r1, r0
 8107de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8107de4:	683a      	ldr	r2, [r7, #0]
 8107de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107de8:	f7fe ff49 	bl	8106c7e <metal_io_block_write>
 8107dec:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8107dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8107df2:	429a      	cmp	r2, r3
 8107df4:	d000      	beq.n	8107df8 <rpmsg_virtio_send_offchannel_raw+0x104>
 8107df6:	e7fe      	b.n	8107df6 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 8107df8:	68fb      	ldr	r3, [r7, #12]
 8107dfa:	3358      	adds	r3, #88	; 0x58
 8107dfc:	4618      	mov	r0, r3
 8107dfe:	f7ff fe04 	bl	8107a0a <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8107e02:	693a      	ldr	r2, [r7, #16]
 8107e04:	8afb      	ldrh	r3, [r7, #22]
 8107e06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8107e08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8107e0a:	f7ff fedf 	bl	8107bcc <rpmsg_virtio_enqueue_buffer>
 8107e0e:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8107e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107e12:	2b00      	cmp	r3, #0
 8107e14:	d000      	beq.n	8107e18 <rpmsg_virtio_send_offchannel_raw+0x124>
 8107e16:	e7fe      	b.n	8107e16 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8107e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107e1c:	4618      	mov	r0, r3
 8107e1e:	f000 fbd1 	bl	81085c4 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8107e22:	68fb      	ldr	r3, [r7, #12]
 8107e24:	3358      	adds	r3, #88	; 0x58
 8107e26:	4618      	mov	r0, r3
 8107e28:	f7ff fdfa 	bl	8107a20 <metal_mutex_release>

	return size;
 8107e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8107e2e:	4618      	mov	r0, r3
 8107e30:	3740      	adds	r7, #64	; 0x40
 8107e32:	46bd      	mov	sp, r7
 8107e34:	bd80      	pop	{r7, pc}
 8107e36:	bf00      	nop
 8107e38:	fffff82c 	.word	0xfffff82c
 8107e3c:	fffff82b 	.word	0xfffff82b
 8107e40:	fffff82e 	.word	0xfffff82e

08107e44 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8107e44:	b480      	push	{r7}
 8107e46:	b083      	sub	sp, #12
 8107e48:	af00      	add	r7, sp, #0
 8107e4a:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 8107e4c:	bf00      	nop
 8107e4e:	370c      	adds	r7, #12
 8107e50:	46bd      	mov	sp, r7
 8107e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e56:	4770      	bx	lr

08107e58 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8107e58:	b590      	push	{r4, r7, lr}
 8107e5a:	b08d      	sub	sp, #52	; 0x34
 8107e5c:	af02      	add	r7, sp, #8
 8107e5e:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8107e60:	687b      	ldr	r3, [r7, #4]
 8107e62:	681b      	ldr	r3, [r3, #0]
 8107e64:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8107e66:	6a3b      	ldr	r3, [r7, #32]
 8107e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107e6a:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8107e6c:	69fb      	ldr	r3, [r7, #28]
 8107e6e:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8107e70:	69bb      	ldr	r3, [r7, #24]
 8107e72:	3358      	adds	r3, #88	; 0x58
 8107e74:	4618      	mov	r0, r3
 8107e76:	f7ff fdc8 	bl	8107a0a <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8107e7a:	f107 020a 	add.w	r2, r7, #10
 8107e7e:	f107 030c 	add.w	r3, r7, #12
 8107e82:	4619      	mov	r1, r3
 8107e84:	69f8      	ldr	r0, [r7, #28]
 8107e86:	f7ff fed9 	bl	8107c3c <rpmsg_virtio_get_rx_buffer>
 8107e8a:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8107e8c:	69bb      	ldr	r3, [r7, #24]
 8107e8e:	3358      	adds	r3, #88	; 0x58
 8107e90:	4618      	mov	r0, r3
 8107e92:	f7ff fdc5 	bl	8107a20 <metal_mutex_release>

	while (rp_hdr) {
 8107e96:	e04c      	b.n	8107f32 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8107e98:	69bb      	ldr	r3, [r7, #24]
 8107e9a:	3358      	adds	r3, #88	; 0x58
 8107e9c:	4618      	mov	r0, r3
 8107e9e:	f7ff fdb4 	bl	8107a0a <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8107ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107ea4:	685b      	ldr	r3, [r3, #4]
 8107ea6:	4619      	mov	r1, r3
 8107ea8:	69b8      	ldr	r0, [r7, #24]
 8107eaa:	f7ff fe38 	bl	8107b1e <rpmsg_get_ept_from_addr>
 8107eae:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8107eb0:	69bb      	ldr	r3, [r7, #24]
 8107eb2:	3358      	adds	r3, #88	; 0x58
 8107eb4:	4618      	mov	r0, r3
 8107eb6:	f7ff fdb3 	bl	8107a20 <metal_mutex_release>

		if (!ept)
 8107eba:	697b      	ldr	r3, [r7, #20]
 8107ebc:	2b00      	cmp	r3, #0
 8107ebe:	d03c      	beq.n	8107f3a <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8107ec0:	697b      	ldr	r3, [r7, #20]
 8107ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107ec8:	d103      	bne.n	8107ed2 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8107eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107ecc:	681a      	ldr	r2, [r3, #0]
 8107ece:	697b      	ldr	r3, [r7, #20]
 8107ed0:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8107ed2:	697b      	ldr	r3, [r7, #20]
 8107ed4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8107ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107ed8:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8107edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107ede:	899b      	ldrh	r3, [r3, #12]
 8107ee0:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8107ee2:	4618      	mov	r0, r3
 8107ee4:	697b      	ldr	r3, [r7, #20]
 8107ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107ee8:	697b      	ldr	r3, [r7, #20]
 8107eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107eec:	9300      	str	r3, [sp, #0]
 8107eee:	4613      	mov	r3, r2
 8107ef0:	4602      	mov	r2, r0
 8107ef2:	6978      	ldr	r0, [r7, #20]
 8107ef4:	47a0      	blx	r4
 8107ef6:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8107ef8:	693b      	ldr	r3, [r7, #16]
 8107efa:	2b00      	cmp	r3, #0
 8107efc:	d000      	beq.n	8107f00 <rpmsg_virtio_rx_callback+0xa8>
 8107efe:	e7fe      	b.n	8107efe <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8107f00:	69bb      	ldr	r3, [r7, #24]
 8107f02:	3358      	adds	r3, #88	; 0x58
 8107f04:	4618      	mov	r0, r3
 8107f06:	f7ff fd80 	bl	8107a0a <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8107f0a:	68fa      	ldr	r2, [r7, #12]
 8107f0c:	897b      	ldrh	r3, [r7, #10]
 8107f0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8107f10:	69f8      	ldr	r0, [r7, #28]
 8107f12:	f7ff fe42 	bl	8107b9a <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8107f16:	f107 020a 	add.w	r2, r7, #10
 8107f1a:	f107 030c 	add.w	r3, r7, #12
 8107f1e:	4619      	mov	r1, r3
 8107f20:	69f8      	ldr	r0, [r7, #28]
 8107f22:	f7ff fe8b 	bl	8107c3c <rpmsg_virtio_get_rx_buffer>
 8107f26:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 8107f28:	69bb      	ldr	r3, [r7, #24]
 8107f2a:	3358      	adds	r3, #88	; 0x58
 8107f2c:	4618      	mov	r0, r3
 8107f2e:	f7ff fd77 	bl	8107a20 <metal_mutex_release>
	while (rp_hdr) {
 8107f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107f34:	2b00      	cmp	r3, #0
 8107f36:	d1af      	bne.n	8107e98 <rpmsg_virtio_rx_callback+0x40>
 8107f38:	e000      	b.n	8107f3c <rpmsg_virtio_rx_callback+0xe4>
			return;
 8107f3a:	bf00      	nop
	}
}
 8107f3c:	372c      	adds	r7, #44	; 0x2c
 8107f3e:	46bd      	mov	sp, r7
 8107f40:	bd90      	pop	{r4, r7, pc}

08107f42 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8107f42:	b580      	push	{r7, lr}
 8107f44:	b092      	sub	sp, #72	; 0x48
 8107f46:	af00      	add	r7, sp, #0
 8107f48:	60f8      	str	r0, [r7, #12]
 8107f4a:	60b9      	str	r1, [r7, #8]
 8107f4c:	607a      	str	r2, [r7, #4]
 8107f4e:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8107f50:	68fb      	ldr	r3, [r7, #12]
 8107f52:	6a1b      	ldr	r3, [r3, #32]
 8107f54:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8107f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8107f58:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 8107f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8107f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8107f60:	68bb      	ldr	r3, [r7, #8]
 8107f62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 8107f64:	687b      	ldr	r3, [r7, #4]
 8107f66:	2b28      	cmp	r3, #40	; 0x28
 8107f68:	d001      	beq.n	8107f6e <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8107f6a:	2300      	movs	r3, #0
 8107f6c:	e057      	b.n	810801e <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8107f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8107f70:	4619      	mov	r1, r3
 8107f72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8107f74:	f7ff fce2 	bl	810793c <metal_io_virt_to_offset>
 8107f78:	4601      	mov	r1, r0
 8107f7a:	f107 0210 	add.w	r2, r7, #16
 8107f7e:	2320      	movs	r3, #32
 8107f80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8107f82:	f7fe fe05 	bl	8106b90 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8107f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107f88:	6a1b      	ldr	r3, [r3, #32]
 8107f8a:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8107f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8107f8e:	3358      	adds	r3, #88	; 0x58
 8107f90:	4618      	mov	r0, r3
 8107f92:	f7ff fd3a 	bl	8107a0a <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8107f96:	f107 0110 	add.w	r1, r7, #16
 8107f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8107fa0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8107fa2:	f7ff fb75 	bl	8107690 <rpmsg_get_endpoint>
 8107fa6:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8107fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107fac:	f003 0301 	and.w	r3, r3, #1
 8107fb0:	2b00      	cmp	r3, #0
 8107fb2:	d017      	beq.n	8107fe4 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8107fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107fb6:	2b00      	cmp	r3, #0
 8107fb8:	d003      	beq.n	8107fc2 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8107fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8107fc0:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 8107fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8107fc4:	3358      	adds	r3, #88	; 0x58
 8107fc6:	4618      	mov	r0, r3
 8107fc8:	f7ff fd2a 	bl	8107a20 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8107fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107fce:	2b00      	cmp	r3, #0
 8107fd0:	d024      	beq.n	810801c <rpmsg_virtio_ns_callback+0xda>
 8107fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107fd6:	2b00      	cmp	r3, #0
 8107fd8:	d020      	beq.n	810801c <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8107fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107fde:	68f8      	ldr	r0, [r7, #12]
 8107fe0:	4798      	blx	r3
 8107fe2:	e01b      	b.n	810801c <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8107fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107fe6:	2b00      	cmp	r3, #0
 8107fe8:	d110      	bne.n	810800c <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8107fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8107fec:	3358      	adds	r3, #88	; 0x58
 8107fee:	4618      	mov	r0, r3
 8107ff0:	f7ff fd16 	bl	8107a20 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8107ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8107ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107ff8:	2b00      	cmp	r3, #0
 8107ffa:	d00f      	beq.n	810801c <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8107ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8107ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8108000:	f107 0110 	add.w	r1, r7, #16
 8108004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8108006:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8108008:	4798      	blx	r3
 810800a:	e007      	b.n	810801c <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 810800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810800e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8108010:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 8108012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108014:	3358      	adds	r3, #88	; 0x58
 8108016:	4618      	mov	r0, r3
 8108018:	f7ff fd02 	bl	8107a20 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 810801c:	2300      	movs	r3, #0
}
 810801e:	4618      	mov	r0, r3
 8108020:	3748      	adds	r7, #72	; 0x48
 8108022:	46bd      	mov	sp, r7
 8108024:	bd80      	pop	{r7, pc}
	...

08108028 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8108028:	b580      	push	{r7, lr}
 810802a:	b090      	sub	sp, #64	; 0x40
 810802c:	af02      	add	r7, sp, #8
 810802e:	60f8      	str	r0, [r7, #12]
 8108030:	60b9      	str	r1, [r7, #8]
 8108032:	607a      	str	r2, [r7, #4]
 8108034:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8108036:	68fb      	ldr	r3, [r7, #12]
 8108038:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
 810803a:	2264      	movs	r2, #100	; 0x64
 810803c:	2100      	movs	r1, #0
 810803e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108040:	f000 fef4 	bl	8108e2c <memset>
	metal_mutex_init(&rdev->lock);
 8108044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108046:	3358      	adds	r3, #88	; 0x58
 8108048:	4618      	mov	r0, r3
 810804a:	f7ff fcd3 	bl	81079f4 <metal_mutex_init>
	rvdev->vdev = vdev;
 810804e:	68fb      	ldr	r3, [r7, #12]
 8108050:	68ba      	ldr	r2, [r7, #8]
 8108052:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8108054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108056:	687a      	ldr	r2, [r7, #4]
 8108058:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 810805a:	68bb      	ldr	r3, [r7, #8]
 810805c:	68fa      	ldr	r2, [r7, #12]
 810805e:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8108060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108062:	4a38      	ldr	r2, [pc, #224]	; (8108144 <rpmsg_init_vdev+0x11c>)
 8108064:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8108066:	68f8      	ldr	r0, [r7, #12]
 8108068:	f7ff fd02 	bl	8107a70 <rpmsg_virtio_get_role>
 810806c:	62f8      	str	r0, [r7, #44]	; 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 810806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108070:	2b01      	cmp	r3, #1
 8108072:	d112      	bne.n	810809a <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 8108074:	4b34      	ldr	r3, [pc, #208]	; (8108148 <rpmsg_init_vdev+0x120>)
 8108076:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 8108078:	4b34      	ldr	r3, [pc, #208]	; (810814c <rpmsg_init_vdev+0x124>)
 810807a:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 810807c:	4b34      	ldr	r3, [pc, #208]	; (8108150 <rpmsg_init_vdev+0x128>)
 810807e:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 8108080:	4b34      	ldr	r3, [pc, #208]	; (8108154 <rpmsg_init_vdev+0x12c>)
 8108082:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 8108084:	68bb      	ldr	r3, [r7, #8]
 8108086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108088:	3318      	adds	r3, #24
 810808a:	681a      	ldr	r2, [r3, #0]
 810808c:	68fb      	ldr	r3, [r7, #12]
 810808e:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 8108090:	68bb      	ldr	r3, [r7, #8]
 8108092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108094:	681a      	ldr	r2, [r3, #0]
 8108096:	68fb      	ldr	r3, [r7, #12]
 8108098:	66da      	str	r2, [r3, #108]	; 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 810809a:	68fb      	ldr	r3, [r7, #12]
 810809c:	683a      	ldr	r2, [r7, #0]
 810809e:	671a      	str	r2, [r3, #112]	; 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81080a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81080a2:	2b01      	cmp	r3, #1
 81080a4:	d102      	bne.n	81080ac <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 81080a6:	68f8      	ldr	r0, [r7, #12]
 81080a8:	f7ff fded 	bl	8107c86 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 81080ac:	f107 0218 	add.w	r2, r7, #24
 81080b0:	f107 0310 	add.w	r3, r7, #16
 81080b4:	9300      	str	r3, [sp, #0]
 81080b6:	4613      	mov	r3, r2
 81080b8:	2202      	movs	r2, #2
 81080ba:	2100      	movs	r1, #0
 81080bc:	68f8      	ldr	r0, [r7, #12]
 81080be:	f7ff fd19 	bl	8107af4 <rpmsg_virtio_create_virtqueues>
 81080c2:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 81080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81080c6:	2b00      	cmp	r3, #0
 81080c8:	d001      	beq.n	81080ce <rpmsg_init_vdev+0xa6>
		return status;
 81080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81080cc:	e035      	b.n	810813a <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 81080ce:	2300      	movs	r3, #0
 81080d0:	637b      	str	r3, [r7, #52]	; 0x34
 81080d2:	e00f      	b.n	81080f4 <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 81080d4:	68bb      	ldr	r3, [r7, #8]
 81080d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81080d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81080da:	4613      	mov	r3, r2
 81080dc:	005b      	lsls	r3, r3, #1
 81080de:	4413      	add	r3, r2
 81080e0:	00db      	lsls	r3, r3, #3
 81080e2:	440b      	add	r3, r1
 81080e4:	681b      	ldr	r3, [r3, #0]
 81080e6:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 81080e8:	6a3b      	ldr	r3, [r7, #32]
 81080ea:	683a      	ldr	r2, [r7, #0]
 81080ec:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 81080ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81080f0:	3301      	adds	r3, #1
 81080f2:	637b      	str	r3, [r7, #52]	; 0x34
 81080f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81080f6:	2b01      	cmp	r3, #1
 81080f8:	d9ec      	bls.n	81080d4 <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 81080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81080fc:	4618      	mov	r0, r3
 81080fe:	f7ff fc0c 	bl	810791a <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8108102:	68f8      	ldr	r0, [r7, #12]
 8108104:	f7ff fce5 	bl	8107ad2 <rpmsg_virtio_get_features>
 8108108:	6278      	str	r0, [r7, #36]	; 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 810810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810810c:	f003 0301 	and.w	r3, r3, #1
 8108110:	2b00      	cmp	r3, #0
 8108112:	d011      	beq.n	8108138 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 8108114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108116:	f103 0008 	add.w	r0, r3, #8
 810811a:	2300      	movs	r3, #0
 810811c:	9301      	str	r3, [sp, #4]
 810811e:	4b0e      	ldr	r3, [pc, #56]	; (8108158 <rpmsg_init_vdev+0x130>)
 8108120:	9300      	str	r3, [sp, #0]
 8108122:	2335      	movs	r3, #53	; 0x35
 8108124:	2235      	movs	r2, #53	; 0x35
 8108126:	490d      	ldr	r1, [pc, #52]	; (810815c <rpmsg_init_vdev+0x134>)
 8108128:	f7ff fc85 	bl	8107a36 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 810812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810812e:	3308      	adds	r3, #8
 8108130:	4619      	mov	r1, r3
 8108132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8108134:	f7ff fb2e 	bl	8107794 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8108138:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 810813a:	4618      	mov	r0, r3
 810813c:	3738      	adds	r7, #56	; 0x38
 810813e:	46bd      	mov	sp, r7
 8108140:	bd80      	pop	{r7, pc}
 8108142:	bf00      	nop
 8108144:	08107cf5 	.word	0x08107cf5
 8108148:	08109e84 	.word	0x08109e84
 810814c:	08109e8c 	.word	0x08109e8c
 8108150:	08107e45 	.word	0x08107e45
 8108154:	08107e59 	.word	0x08107e59
 8108158:	08107f43 	.word	0x08107f43
 810815c:	08109e94 	.word	0x08109e94

08108160 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8108160:	b480      	push	{r7}
 8108162:	b083      	sub	sp, #12
 8108164:	af00      	add	r7, sp, #0
 8108166:	6078      	str	r0, [r7, #4]
 8108168:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 810816a:	bf00      	nop
 810816c:	370c      	adds	r7, #12
 810816e:	46bd      	mov	sp, r7
 8108170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108174:	4770      	bx	lr

08108176 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8108176:	b480      	push	{r7}
 8108178:	b083      	sub	sp, #12
 810817a:	af00      	add	r7, sp, #0
 810817c:	6078      	str	r0, [r7, #4]
 810817e:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8108180:	bf00      	nop
 8108182:	370c      	adds	r7, #12
 8108184:	46bd      	mov	sp, r7
 8108186:	f85d 7b04 	ldr.w	r7, [sp], #4
 810818a:	4770      	bx	lr

0810818c <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 810818c:	b480      	push	{r7}
 810818e:	b085      	sub	sp, #20
 8108190:	af00      	add	r7, sp, #0
 8108192:	60f8      	str	r0, [r7, #12]
 8108194:	60b9      	str	r1, [r7, #8]
 8108196:	607a      	str	r2, [r7, #4]
 8108198:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 810819a:	68fb      	ldr	r3, [r7, #12]
}
 810819c:	4618      	mov	r0, r3
 810819e:	3714      	adds	r7, #20
 81081a0:	46bd      	mov	sp, r7
 81081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081a6:	4770      	bx	lr

081081a8 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 81081a8:	b590      	push	{r4, r7, lr}
 81081aa:	b08f      	sub	sp, #60	; 0x3c
 81081ac:	af04      	add	r7, sp, #16
 81081ae:	60f8      	str	r0, [r7, #12]
 81081b0:	60b9      	str	r1, [r7, #8]
 81081b2:	607a      	str	r2, [r7, #4]
 81081b4:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 81081b6:	68fb      	ldr	r3, [r7, #12]
 81081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81081ba:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 81081bc:	687a      	ldr	r2, [r7, #4]
 81081be:	6a3b      	ldr	r3, [r7, #32]
 81081c0:	429a      	cmp	r2, r3
 81081c2:	d902      	bls.n	81081ca <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 81081c4:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 81081c8:	e036      	b.n	8108238 <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 81081ca:	2300      	movs	r3, #0
 81081cc:	627b      	str	r3, [r7, #36]	; 0x24
 81081ce:	e02e      	b.n	810822e <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 81081d0:	68fb      	ldr	r3, [r7, #12]
 81081d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81081d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81081d6:	4613      	mov	r3, r2
 81081d8:	005b      	lsls	r3, r3, #1
 81081da:	4413      	add	r3, r2
 81081dc:	00db      	lsls	r3, r3, #3
 81081de:	440b      	add	r3, r1
 81081e0:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 81081e2:	69fb      	ldr	r3, [r7, #28]
 81081e4:	3304      	adds	r3, #4
 81081e6:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 81081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081ea:	b298      	uxth	r0, r3
 81081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081ee:	009b      	lsls	r3, r3, #2
 81081f0:	683a      	ldr	r2, [r7, #0]
 81081f2:	4413      	add	r3, r2
 81081f4:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 81081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081f8:	009b      	lsls	r3, r3, #2
 81081fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81081fc:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 81081fe:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8108200:	68fa      	ldr	r2, [r7, #12]
 8108202:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8108204:	6a12      	ldr	r2, [r2, #32]
 8108206:	69f9      	ldr	r1, [r7, #28]
 8108208:	6809      	ldr	r1, [r1, #0]
 810820a:	9102      	str	r1, [sp, #8]
 810820c:	9201      	str	r2, [sp, #4]
 810820e:	9300      	str	r3, [sp, #0]
 8108210:	69bb      	ldr	r3, [r7, #24]
 8108212:	4622      	mov	r2, r4
 8108214:	4601      	mov	r1, r0
 8108216:	68f8      	ldr	r0, [r7, #12]
 8108218:	f000 f8f6 	bl	8108408 <virtqueue_create>
 810821c:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 810821e:	697b      	ldr	r3, [r7, #20]
 8108220:	2b00      	cmp	r3, #0
 8108222:	d001      	beq.n	8108228 <virtio_create_virtqueues+0x80>
			return ret;
 8108224:	697b      	ldr	r3, [r7, #20]
 8108226:	e007      	b.n	8108238 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 8108228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810822a:	3301      	adds	r3, #1
 810822c:	627b      	str	r3, [r7, #36]	; 0x24
 810822e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108230:	687b      	ldr	r3, [r7, #4]
 8108232:	429a      	cmp	r2, r3
 8108234:	d3cc      	bcc.n	81081d0 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8108236:	2300      	movs	r3, #0
}
 8108238:	4618      	mov	r0, r3
 810823a:	372c      	adds	r7, #44	; 0x2c
 810823c:	46bd      	mov	sp, r7
 810823e:	bd90      	pop	{r4, r7, pc}

08108240 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8108240:	b480      	push	{r7}
 8108242:	b085      	sub	sp, #20
 8108244:	af00      	add	r7, sp, #0
 8108246:	60f8      	str	r0, [r7, #12]
 8108248:	60b9      	str	r1, [r7, #8]
 810824a:	607a      	str	r2, [r7, #4]
 810824c:	603b      	str	r3, [r7, #0]
	vr->num = num;
 810824e:	68fb      	ldr	r3, [r7, #12]
 8108250:	68ba      	ldr	r2, [r7, #8]
 8108252:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8108254:	68fb      	ldr	r3, [r7, #12]
 8108256:	687a      	ldr	r2, [r7, #4]
 8108258:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 810825a:	68bb      	ldr	r3, [r7, #8]
 810825c:	011b      	lsls	r3, r3, #4
 810825e:	687a      	ldr	r2, [r7, #4]
 8108260:	441a      	add	r2, r3
 8108262:	68fb      	ldr	r3, [r7, #12]
 8108264:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8108266:	68fb      	ldr	r3, [r7, #12]
 8108268:	689a      	ldr	r2, [r3, #8]
 810826a:	68bb      	ldr	r3, [r7, #8]
 810826c:	005b      	lsls	r3, r3, #1
 810826e:	4413      	add	r3, r2
 8108270:	3304      	adds	r3, #4
 8108272:	461a      	mov	r2, r3
 8108274:	683b      	ldr	r3, [r7, #0]
 8108276:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8108278:	1c5a      	adds	r2, r3, #1
 810827a:	683b      	ldr	r3, [r7, #0]
 810827c:	425b      	negs	r3, r3
 810827e:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8108280:	461a      	mov	r2, r3
 8108282:	68fb      	ldr	r3, [r7, #12]
 8108284:	60da      	str	r2, [r3, #12]
}
 8108286:	bf00      	nop
 8108288:	3714      	adds	r7, #20
 810828a:	46bd      	mov	sp, r7
 810828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108290:	4770      	bx	lr

08108292 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8108292:	b480      	push	{r7}
 8108294:	b083      	sub	sp, #12
 8108296:	af00      	add	r7, sp, #0
 8108298:	4603      	mov	r3, r0
 810829a:	80fb      	strh	r3, [r7, #6]
 810829c:	460b      	mov	r3, r1
 810829e:	80bb      	strh	r3, [r7, #4]
 81082a0:	4613      	mov	r3, r2
 81082a2:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 81082a4:	88ba      	ldrh	r2, [r7, #4]
 81082a6:	88fb      	ldrh	r3, [r7, #6]
 81082a8:	1ad3      	subs	r3, r2, r3
 81082aa:	b29b      	uxth	r3, r3
 81082ac:	3b01      	subs	r3, #1
 81082ae:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 81082b0:	88b9      	ldrh	r1, [r7, #4]
 81082b2:	887b      	ldrh	r3, [r7, #2]
 81082b4:	1acb      	subs	r3, r1, r3
 81082b6:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 81082b8:	429a      	cmp	r2, r3
 81082ba:	bf34      	ite	cc
 81082bc:	2301      	movcc	r3, #1
 81082be:	2300      	movcs	r3, #0
 81082c0:	b2db      	uxtb	r3, r3
}
 81082c2:	4618      	mov	r0, r3
 81082c4:	370c      	adds	r7, #12
 81082c6:	46bd      	mov	sp, r7
 81082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082cc:	4770      	bx	lr

081082ce <metal_io_virt>:
{
 81082ce:	b480      	push	{r7}
 81082d0:	b083      	sub	sp, #12
 81082d2:	af00      	add	r7, sp, #0
 81082d4:	6078      	str	r0, [r7, #4]
 81082d6:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81082d8:	687b      	ldr	r3, [r7, #4]
 81082da:	681b      	ldr	r3, [r3, #0]
		: NULL);
 81082dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81082e0:	d009      	beq.n	81082f6 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81082e2:	687b      	ldr	r3, [r7, #4]
 81082e4:	689b      	ldr	r3, [r3, #8]
 81082e6:	683a      	ldr	r2, [r7, #0]
 81082e8:	429a      	cmp	r2, r3
 81082ea:	d804      	bhi.n	81082f6 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 81082ec:	687b      	ldr	r3, [r7, #4]
 81082ee:	681a      	ldr	r2, [r3, #0]
		: NULL);
 81082f0:	683b      	ldr	r3, [r7, #0]
 81082f2:	4413      	add	r3, r2
 81082f4:	e000      	b.n	81082f8 <metal_io_virt+0x2a>
 81082f6:	2300      	movs	r3, #0
}
 81082f8:	4618      	mov	r0, r3
 81082fa:	370c      	adds	r7, #12
 81082fc:	46bd      	mov	sp, r7
 81082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108302:	4770      	bx	lr

08108304 <metal_io_phys>:
{
 8108304:	b480      	push	{r7}
 8108306:	b085      	sub	sp, #20
 8108308:	af00      	add	r7, sp, #0
 810830a:	6078      	str	r0, [r7, #4]
 810830c:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 810830e:	687b      	ldr	r3, [r7, #4]
 8108310:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8108312:	2b1f      	cmp	r3, #31
 8108314:	d805      	bhi.n	8108322 <metal_io_phys+0x1e>
 8108316:	687b      	ldr	r3, [r7, #4]
 8108318:	68db      	ldr	r3, [r3, #12]
 810831a:	683a      	ldr	r2, [r7, #0]
 810831c:	fa22 f303 	lsr.w	r3, r2, r3
 8108320:	e000      	b.n	8108324 <metal_io_phys+0x20>
 8108322:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8108324:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8108326:	687b      	ldr	r3, [r7, #4]
 8108328:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 810832a:	2b00      	cmp	r3, #0
 810832c:	d010      	beq.n	8108350 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 810832e:	687b      	ldr	r3, [r7, #4]
 8108330:	689b      	ldr	r3, [r3, #8]
 8108332:	683a      	ldr	r2, [r7, #0]
 8108334:	429a      	cmp	r2, r3
 8108336:	d80b      	bhi.n	8108350 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8108338:	687b      	ldr	r3, [r7, #4]
 810833a:	685a      	ldr	r2, [r3, #4]
 810833c:	68fb      	ldr	r3, [r7, #12]
 810833e:	009b      	lsls	r3, r3, #2
 8108340:	4413      	add	r3, r2
 8108342:	681a      	ldr	r2, [r3, #0]
 8108344:	687b      	ldr	r3, [r7, #4]
 8108346:	6919      	ldr	r1, [r3, #16]
 8108348:	683b      	ldr	r3, [r7, #0]
 810834a:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 810834c:	4413      	add	r3, r2
 810834e:	e001      	b.n	8108354 <metal_io_phys+0x50>
 8108350:	f04f 33ff 	mov.w	r3, #4294967295
}
 8108354:	4618      	mov	r0, r3
 8108356:	3714      	adds	r7, #20
 8108358:	46bd      	mov	sp, r7
 810835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810835e:	4770      	bx	lr

08108360 <metal_io_phys_to_offset>:
{
 8108360:	b580      	push	{r7, lr}
 8108362:	b084      	sub	sp, #16
 8108364:	af00      	add	r7, sp, #0
 8108366:	6078      	str	r0, [r7, #4]
 8108368:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 810836a:	687b      	ldr	r3, [r7, #4]
 810836c:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 810836e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108372:	d105      	bne.n	8108380 <metal_io_phys_to_offset+0x20>
 8108374:	687b      	ldr	r3, [r7, #4]
 8108376:	685b      	ldr	r3, [r3, #4]
 8108378:	681b      	ldr	r3, [r3, #0]
 810837a:	683a      	ldr	r2, [r7, #0]
 810837c:	1ad3      	subs	r3, r2, r3
 810837e:	e003      	b.n	8108388 <metal_io_phys_to_offset+0x28>
 8108380:	687b      	ldr	r3, [r7, #4]
 8108382:	691a      	ldr	r2, [r3, #16]
 8108384:	683b      	ldr	r3, [r7, #0]
 8108386:	4013      	ands	r3, r2
	unsigned long offset =
 8108388:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 810838a:	68f9      	ldr	r1, [r7, #12]
 810838c:	6878      	ldr	r0, [r7, #4]
 810838e:	f7ff ffb9 	bl	8108304 <metal_io_phys>
 8108392:	4602      	mov	r2, r0
 8108394:	683b      	ldr	r3, [r7, #0]
 8108396:	4293      	cmp	r3, r2
 8108398:	d101      	bne.n	810839e <metal_io_phys_to_offset+0x3e>
			return offset;
 810839a:	68fb      	ldr	r3, [r7, #12]
 810839c:	e00c      	b.n	81083b8 <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 810839e:	687b      	ldr	r3, [r7, #4]
 81083a0:	691a      	ldr	r2, [r3, #16]
 81083a2:	68fb      	ldr	r3, [r7, #12]
 81083a4:	4413      	add	r3, r2
 81083a6:	3301      	adds	r3, #1
 81083a8:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 81083aa:	687b      	ldr	r3, [r7, #4]
 81083ac:	689b      	ldr	r3, [r3, #8]
 81083ae:	68fa      	ldr	r2, [r7, #12]
 81083b0:	429a      	cmp	r2, r3
 81083b2:	d3ea      	bcc.n	810838a <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 81083b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81083b8:	4618      	mov	r0, r3
 81083ba:	3710      	adds	r7, #16
 81083bc:	46bd      	mov	sp, r7
 81083be:	bd80      	pop	{r7, pc}

081083c0 <metal_io_phys_to_virt>:
{
 81083c0:	b580      	push	{r7, lr}
 81083c2:	b082      	sub	sp, #8
 81083c4:	af00      	add	r7, sp, #0
 81083c6:	6078      	str	r0, [r7, #4]
 81083c8:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 81083ca:	6839      	ldr	r1, [r7, #0]
 81083cc:	6878      	ldr	r0, [r7, #4]
 81083ce:	f7ff ffc7 	bl	8108360 <metal_io_phys_to_offset>
 81083d2:	4603      	mov	r3, r0
 81083d4:	4619      	mov	r1, r3
 81083d6:	6878      	ldr	r0, [r7, #4]
 81083d8:	f7ff ff79 	bl	81082ce <metal_io_virt>
 81083dc:	4603      	mov	r3, r0
}
 81083de:	4618      	mov	r0, r3
 81083e0:	3708      	adds	r7, #8
 81083e2:	46bd      	mov	sp, r7
 81083e4:	bd80      	pop	{r7, pc}

081083e6 <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 81083e6:	b580      	push	{r7, lr}
 81083e8:	b084      	sub	sp, #16
 81083ea:	af00      	add	r7, sp, #0
 81083ec:	6078      	str	r0, [r7, #4]
 81083ee:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 81083f0:	687b      	ldr	r3, [r7, #4]
 81083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083f4:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 81083f6:	6839      	ldr	r1, [r7, #0]
 81083f8:	68f8      	ldr	r0, [r7, #12]
 81083fa:	f7ff ffe1 	bl	81083c0 <metal_io_phys_to_virt>
 81083fe:	4603      	mov	r3, r0
}
 8108400:	4618      	mov	r0, r3
 8108402:	3710      	adds	r7, #16
 8108404:	46bd      	mov	sp, r7
 8108406:	bd80      	pop	{r7, pc}

08108408 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8108408:	b580      	push	{r7, lr}
 810840a:	b086      	sub	sp, #24
 810840c:	af00      	add	r7, sp, #0
 810840e:	60f8      	str	r0, [r7, #12]
 8108410:	607a      	str	r2, [r7, #4]
 8108412:	603b      	str	r3, [r7, #0]
 8108414:	460b      	mov	r3, r1
 8108416:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8108418:	2300      	movs	r3, #0
 810841a:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 810841c:	697b      	ldr	r3, [r7, #20]
 810841e:	2b00      	cmp	r3, #0
 8108420:	d121      	bne.n	8108466 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8108422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108424:	68fa      	ldr	r2, [r7, #12]
 8108426:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8108428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810842a:	687a      	ldr	r2, [r7, #4]
 810842c:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 810842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108430:	897a      	ldrh	r2, [r7, #10]
 8108432:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8108434:	683b      	ldr	r3, [r7, #0]
 8108436:	891a      	ldrh	r2, [r3, #8]
 8108438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810843a:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 810843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810843e:	895a      	ldrh	r2, [r3, #10]
 8108440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108442:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8108444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108446:	6a3a      	ldr	r2, [r7, #32]
 8108448:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 810844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810844c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810844e:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8108450:	683b      	ldr	r3, [r7, #0]
 8108452:	6819      	ldr	r1, [r3, #0]
 8108454:	683b      	ldr	r3, [r7, #0]
 8108456:	685b      	ldr	r3, [r3, #4]
 8108458:	461a      	mov	r2, r3
 810845a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810845c:	f000 f8fb 	bl	8108656 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8108460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8108462:	f000 f885 	bl	8108570 <virtqueue_disable_cb>
	}

	return (status);
 8108466:	697b      	ldr	r3, [r7, #20]
}
 8108468:	4618      	mov	r0, r3
 810846a:	3718      	adds	r7, #24
 810846c:	46bd      	mov	sp, r7
 810846e:	bd80      	pop	{r7, pc}

08108470 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 8108470:	b580      	push	{r7, lr}
 8108472:	b086      	sub	sp, #24
 8108474:	af00      	add	r7, sp, #0
 8108476:	60f8      	str	r0, [r7, #12]
 8108478:	60b9      	str	r1, [r7, #8]
 810847a:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 810847c:	2300      	movs	r3, #0
 810847e:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 8108480:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8108484:	68fb      	ldr	r3, [r7, #12]
 8108486:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8108488:	68fb      	ldr	r3, [r7, #12]
 810848a:	6a1b      	ldr	r3, [r3, #32]
 810848c:	885b      	ldrh	r3, [r3, #2]
 810848e:	429a      	cmp	r2, r3
 8108490:	d101      	bne.n	8108496 <virtqueue_get_available_buffer+0x26>
		return NULL;
 8108492:	2300      	movs	r3, #0
 8108494:	e02e      	b.n	81084f4 <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 8108496:	68fb      	ldr	r3, [r7, #12]
 8108498:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 810849a:	1c5a      	adds	r2, r3, #1
 810849c:	b291      	uxth	r1, r2
 810849e:	68fa      	ldr	r2, [r7, #12]
 81084a0:	8691      	strh	r1, [r2, #52]	; 0x34
 81084a2:	b21a      	sxth	r2, r3
 81084a4:	68fb      	ldr	r3, [r7, #12]
 81084a6:	895b      	ldrh	r3, [r3, #10]
 81084a8:	3b01      	subs	r3, #1
 81084aa:	b29b      	uxth	r3, r3
 81084ac:	b21b      	sxth	r3, r3
 81084ae:	4013      	ands	r3, r2
 81084b0:	b21b      	sxth	r3, r3
 81084b2:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 81084b4:	68fb      	ldr	r3, [r7, #12]
 81084b6:	6a1a      	ldr	r2, [r3, #32]
 81084b8:	8afb      	ldrh	r3, [r7, #22]
 81084ba:	005b      	lsls	r3, r3, #1
 81084bc:	4413      	add	r3, r2
 81084be:	889a      	ldrh	r2, [r3, #4]
 81084c0:	68bb      	ldr	r3, [r7, #8]
 81084c2:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 81084c4:	68fb      	ldr	r3, [r7, #12]
 81084c6:	69da      	ldr	r2, [r3, #28]
 81084c8:	68bb      	ldr	r3, [r7, #8]
 81084ca:	881b      	ldrh	r3, [r3, #0]
 81084cc:	011b      	lsls	r3, r3, #4
 81084ce:	4413      	add	r3, r2
 81084d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81084d4:	4613      	mov	r3, r2
 81084d6:	4619      	mov	r1, r3
 81084d8:	68f8      	ldr	r0, [r7, #12]
 81084da:	f7ff ff84 	bl	81083e6 <virtqueue_phys_to_virt>
 81084de:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 81084e0:	68fb      	ldr	r3, [r7, #12]
 81084e2:	69da      	ldr	r2, [r3, #28]
 81084e4:	68bb      	ldr	r3, [r7, #8]
 81084e6:	881b      	ldrh	r3, [r3, #0]
 81084e8:	011b      	lsls	r3, r3, #4
 81084ea:	4413      	add	r3, r2
 81084ec:	689a      	ldr	r2, [r3, #8]
 81084ee:	687b      	ldr	r3, [r7, #4]
 81084f0:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 81084f2:	693b      	ldr	r3, [r7, #16]
}
 81084f4:	4618      	mov	r0, r3
 81084f6:	3718      	adds	r7, #24
 81084f8:	46bd      	mov	sp, r7
 81084fa:	bd80      	pop	{r7, pc}

081084fc <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 81084fc:	b480      	push	{r7}
 81084fe:	b087      	sub	sp, #28
 8108500:	af00      	add	r7, sp, #0
 8108502:	60f8      	str	r0, [r7, #12]
 8108504:	460b      	mov	r3, r1
 8108506:	607a      	str	r2, [r7, #4]
 8108508:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 810850a:	2300      	movs	r3, #0
 810850c:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 810850e:	68fb      	ldr	r3, [r7, #12]
 8108510:	895b      	ldrh	r3, [r3, #10]
 8108512:	897a      	ldrh	r2, [r7, #10]
 8108514:	429a      	cmp	r2, r3
 8108516:	d901      	bls.n	810851c <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 8108518:	4b14      	ldr	r3, [pc, #80]	; (810856c <virtqueue_add_consumed_buffer+0x70>)
 810851a:	e021      	b.n	8108560 <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 810851c:	68fb      	ldr	r3, [r7, #12]
 810851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108520:	885b      	ldrh	r3, [r3, #2]
 8108522:	b21a      	sxth	r2, r3
 8108524:	68fb      	ldr	r3, [r7, #12]
 8108526:	895b      	ldrh	r3, [r3, #10]
 8108528:	3b01      	subs	r3, #1
 810852a:	b29b      	uxth	r3, r3
 810852c:	b21b      	sxth	r3, r3
 810852e:	4013      	ands	r3, r2
 8108530:	b21b      	sxth	r3, r3
 8108532:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 8108534:	68fb      	ldr	r3, [r7, #12]
 8108536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8108538:	8a7b      	ldrh	r3, [r7, #18]
 810853a:	00db      	lsls	r3, r3, #3
 810853c:	4413      	add	r3, r2
 810853e:	3304      	adds	r3, #4
 8108540:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 8108542:	897a      	ldrh	r2, [r7, #10]
 8108544:	697b      	ldr	r3, [r7, #20]
 8108546:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 8108548:	697b      	ldr	r3, [r7, #20]
 810854a:	687a      	ldr	r2, [r7, #4]
 810854c:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 810854e:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 8108552:	68fb      	ldr	r3, [r7, #12]
 8108554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108556:	885a      	ldrh	r2, [r3, #2]
 8108558:	3201      	adds	r2, #1
 810855a:	b292      	uxth	r2, r2
 810855c:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 810855e:	2300      	movs	r3, #0
}
 8108560:	4618      	mov	r0, r3
 8108562:	371c      	adds	r7, #28
 8108564:	46bd      	mov	sp, r7
 8108566:	f85d 7b04 	ldr.w	r7, [sp], #4
 810856a:	4770      	bx	lr
 810856c:	fffff441 	.word	0xfffff441

08108570 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8108570:	b480      	push	{r7}
 8108572:	b083      	sub	sp, #12
 8108574:	af00      	add	r7, sp, #0
 8108576:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8108578:	687b      	ldr	r3, [r7, #4]
 810857a:	68db      	ldr	r3, [r3, #12]
 810857c:	f003 0302 	and.w	r3, r3, #2
 8108580:	2b00      	cmp	r3, #0
 8108582:	d010      	beq.n	81085a6 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8108584:	687b      	ldr	r3, [r7, #4]
 8108586:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8108588:	687b      	ldr	r3, [r7, #4]
 810858a:	895b      	ldrh	r3, [r3, #10]
 810858c:	1ad3      	subs	r3, r2, r3
 810858e:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8108590:	687b      	ldr	r3, [r7, #4]
 8108592:	6a1a      	ldr	r2, [r3, #32]
 8108594:	687b      	ldr	r3, [r7, #4]
 8108596:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8108598:	3901      	subs	r1, #1
 810859a:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 810859c:	005b      	lsls	r3, r3, #1
 810859e:	4413      	add	r3, r2
 81085a0:	460a      	mov	r2, r1
 81085a2:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 81085a4:	e008      	b.n	81085b8 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 81085a6:	687b      	ldr	r3, [r7, #4]
 81085a8:	6a1b      	ldr	r3, [r3, #32]
 81085aa:	881a      	ldrh	r2, [r3, #0]
 81085ac:	687b      	ldr	r3, [r7, #4]
 81085ae:	6a1b      	ldr	r3, [r3, #32]
 81085b0:	f042 0201 	orr.w	r2, r2, #1
 81085b4:	b292      	uxth	r2, r2
 81085b6:	801a      	strh	r2, [r3, #0]
}
 81085b8:	bf00      	nop
 81085ba:	370c      	adds	r7, #12
 81085bc:	46bd      	mov	sp, r7
 81085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085c2:	4770      	bx	lr

081085c4 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 81085c4:	b580      	push	{r7, lr}
 81085c6:	b082      	sub	sp, #8
 81085c8:	af00      	add	r7, sp, #0
 81085ca:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 81085cc:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 81085d0:	6878      	ldr	r0, [r7, #4]
 81085d2:	f000 f885 	bl	81086e0 <vq_ring_must_notify_host>
 81085d6:	4603      	mov	r3, r0
 81085d8:	2b00      	cmp	r3, #0
 81085da:	d002      	beq.n	81085e2 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 81085dc:	6878      	ldr	r0, [r7, #4]
 81085de:	f000 f8b5 	bl	810874c <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 81085e2:	687b      	ldr	r3, [r7, #4]
 81085e4:	2200      	movs	r2, #0
 81085e6:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 81085e8:	bf00      	nop
 81085ea:	3708      	adds	r7, #8
 81085ec:	46bd      	mov	sp, r7
 81085ee:	bd80      	pop	{r7, pc}

081085f0 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 81085f0:	b480      	push	{r7}
 81085f2:	b085      	sub	sp, #20
 81085f4:	af00      	add	r7, sp, #0
 81085f6:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 81085f8:	2300      	movs	r3, #0
 81085fa:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 81085fc:	2300      	movs	r3, #0
 81085fe:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 8108600:	2300      	movs	r3, #0
 8108602:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8108604:	687b      	ldr	r3, [r7, #4]
 8108606:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8108608:	687b      	ldr	r3, [r7, #4]
 810860a:	6a1b      	ldr	r3, [r3, #32]
 810860c:	885b      	ldrh	r3, [r3, #2]
 810860e:	429a      	cmp	r2, r3
 8108610:	d101      	bne.n	8108616 <virtqueue_get_desc_size+0x26>
		return 0;
 8108612:	2300      	movs	r3, #0
 8108614:	e019      	b.n	810864a <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 8108616:	687b      	ldr	r3, [r7, #4]
 8108618:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 810861a:	b21a      	sxth	r2, r3
 810861c:	687b      	ldr	r3, [r7, #4]
 810861e:	895b      	ldrh	r3, [r3, #10]
 8108620:	3b01      	subs	r3, #1
 8108622:	b29b      	uxth	r3, r3
 8108624:	b21b      	sxth	r3, r3
 8108626:	4013      	ands	r3, r2
 8108628:	b21b      	sxth	r3, r3
 810862a:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 810862c:	687b      	ldr	r3, [r7, #4]
 810862e:	6a1a      	ldr	r2, [r3, #32]
 8108630:	89fb      	ldrh	r3, [r7, #14]
 8108632:	005b      	lsls	r3, r3, #1
 8108634:	4413      	add	r3, r2
 8108636:	889b      	ldrh	r3, [r3, #4]
 8108638:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 810863a:	687b      	ldr	r3, [r7, #4]
 810863c:	69da      	ldr	r2, [r3, #28]
 810863e:	89bb      	ldrh	r3, [r7, #12]
 8108640:	011b      	lsls	r3, r3, #4
 8108642:	4413      	add	r3, r2
 8108644:	689b      	ldr	r3, [r3, #8]
 8108646:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 8108648:	68bb      	ldr	r3, [r7, #8]
}
 810864a:	4618      	mov	r0, r3
 810864c:	3714      	adds	r7, #20
 810864e:	46bd      	mov	sp, r7
 8108650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108654:	4770      	bx	lr

08108656 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8108656:	b580      	push	{r7, lr}
 8108658:	b088      	sub	sp, #32
 810865a:	af00      	add	r7, sp, #0
 810865c:	60f8      	str	r0, [r7, #12]
 810865e:	60b9      	str	r1, [r7, #8]
 8108660:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8108662:	68fb      	ldr	r3, [r7, #12]
 8108664:	895b      	ldrh	r3, [r3, #10]
 8108666:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8108668:	68fb      	ldr	r3, [r7, #12]
 810866a:	3318      	adds	r3, #24
 810866c:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 810866e:	69b9      	ldr	r1, [r7, #24]
 8108670:	687b      	ldr	r3, [r7, #4]
 8108672:	68ba      	ldr	r2, [r7, #8]
 8108674:	6978      	ldr	r0, [r7, #20]
 8108676:	f7ff fde3 	bl	8108240 <vring_init>

	for (i = 0; i < size - 1; i++)
 810867a:	2300      	movs	r3, #0
 810867c:	61fb      	str	r3, [r7, #28]
 810867e:	e00c      	b.n	810869a <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8108680:	69fb      	ldr	r3, [r7, #28]
 8108682:	b29a      	uxth	r2, r3
 8108684:	697b      	ldr	r3, [r7, #20]
 8108686:	6859      	ldr	r1, [r3, #4]
 8108688:	69fb      	ldr	r3, [r7, #28]
 810868a:	011b      	lsls	r3, r3, #4
 810868c:	440b      	add	r3, r1
 810868e:	3201      	adds	r2, #1
 8108690:	b292      	uxth	r2, r2
 8108692:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8108694:	69fb      	ldr	r3, [r7, #28]
 8108696:	3301      	adds	r3, #1
 8108698:	61fb      	str	r3, [r7, #28]
 810869a:	69bb      	ldr	r3, [r7, #24]
 810869c:	3b01      	subs	r3, #1
 810869e:	69fa      	ldr	r2, [r7, #28]
 81086a0:	429a      	cmp	r2, r3
 81086a2:	dbed      	blt.n	8108680 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 81086a4:	697b      	ldr	r3, [r7, #20]
 81086a6:	685a      	ldr	r2, [r3, #4]
 81086a8:	69fb      	ldr	r3, [r7, #28]
 81086aa:	011b      	lsls	r3, r3, #4
 81086ac:	4413      	add	r3, r2
 81086ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 81086b2:	81da      	strh	r2, [r3, #14]
}
 81086b4:	bf00      	nop
 81086b6:	3720      	adds	r7, #32
 81086b8:	46bd      	mov	sp, r7
 81086ba:	bd80      	pop	{r7, pc}

081086bc <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 81086bc:	b580      	push	{r7, lr}
 81086be:	b082      	sub	sp, #8
 81086c0:	af00      	add	r7, sp, #0
 81086c2:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 81086c4:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 81086c8:	687b      	ldr	r3, [r7, #4]
 81086ca:	691b      	ldr	r3, [r3, #16]
 81086cc:	2b00      	cmp	r3, #0
 81086ce:	d003      	beq.n	81086d8 <virtqueue_notification+0x1c>
		vq->callback(vq);
 81086d0:	687b      	ldr	r3, [r7, #4]
 81086d2:	691b      	ldr	r3, [r3, #16]
 81086d4:	6878      	ldr	r0, [r7, #4]
 81086d6:	4798      	blx	r3
}
 81086d8:	bf00      	nop
 81086da:	3708      	adds	r7, #8
 81086dc:	46bd      	mov	sp, r7
 81086de:	bd80      	pop	{r7, pc}

081086e0 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 81086e0:	b580      	push	{r7, lr}
 81086e2:	b084      	sub	sp, #16
 81086e4:	af00      	add	r7, sp, #0
 81086e6:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 81086e8:	687b      	ldr	r3, [r7, #4]
 81086ea:	68db      	ldr	r3, [r3, #12]
 81086ec:	f003 0302 	and.w	r3, r3, #2
 81086f0:	2b00      	cmp	r3, #0
 81086f2:	d01d      	beq.n	8108730 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 81086f4:	687b      	ldr	r3, [r7, #4]
 81086f6:	6a1b      	ldr	r3, [r3, #32]
 81086f8:	885b      	ldrh	r3, [r3, #2]
 81086fa:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 81086fc:	687b      	ldr	r3, [r7, #4]
 81086fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108700:	89fa      	ldrh	r2, [r7, #14]
 8108702:	1ad3      	subs	r3, r2, r3
 8108704:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8108706:	687b      	ldr	r3, [r7, #4]
 8108708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810870a:	687b      	ldr	r3, [r7, #4]
 810870c:	699b      	ldr	r3, [r3, #24]
 810870e:	00db      	lsls	r3, r3, #3
 8108710:	4413      	add	r3, r2
 8108712:	685b      	ldr	r3, [r3, #4]
 8108714:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8108716:	89ba      	ldrh	r2, [r7, #12]
 8108718:	89f9      	ldrh	r1, [r7, #14]
 810871a:	897b      	ldrh	r3, [r7, #10]
 810871c:	4618      	mov	r0, r3
 810871e:	f7ff fdb8 	bl	8108292 <vring_need_event>
 8108722:	4603      	mov	r3, r0
 8108724:	2b00      	cmp	r3, #0
 8108726:	bf14      	ite	ne
 8108728:	2301      	movne	r3, #1
 810872a:	2300      	moveq	r3, #0
 810872c:	b2db      	uxtb	r3, r3
 810872e:	e009      	b.n	8108744 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8108730:	687b      	ldr	r3, [r7, #4]
 8108732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108734:	881b      	ldrh	r3, [r3, #0]
 8108736:	f003 0301 	and.w	r3, r3, #1
 810873a:	2b00      	cmp	r3, #0
 810873c:	bf0c      	ite	eq
 810873e:	2301      	moveq	r3, #1
 8108740:	2300      	movne	r3, #0
 8108742:	b2db      	uxtb	r3, r3
}
 8108744:	4618      	mov	r0, r3
 8108746:	3710      	adds	r7, #16
 8108748:	46bd      	mov	sp, r7
 810874a:	bd80      	pop	{r7, pc}

0810874c <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 810874c:	b580      	push	{r7, lr}
 810874e:	b082      	sub	sp, #8
 8108750:	af00      	add	r7, sp, #0
 8108752:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8108754:	687b      	ldr	r3, [r7, #4]
 8108756:	695b      	ldr	r3, [r3, #20]
 8108758:	2b00      	cmp	r3, #0
 810875a:	d003      	beq.n	8108764 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 810875c:	687b      	ldr	r3, [r7, #4]
 810875e:	695b      	ldr	r3, [r3, #20]
 8108760:	6878      	ldr	r0, [r7, #4]
 8108762:	4798      	blx	r3
}
 8108764:	bf00      	nop
 8108766:	3708      	adds	r7, #8
 8108768:	46bd      	mov	sp, r7
 810876a:	bd80      	pop	{r7, pc}

0810876c <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 810876c:	b580      	push	{r7, lr}
 810876e:	b082      	sub	sp, #8
 8108770:	af00      	add	r7, sp, #0
 8108772:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8108774:	4b04      	ldr	r3, [pc, #16]	; (8108788 <HAL_HSEM_FreeCallback+0x1c>)
 8108776:	2201      	movs	r2, #1
 8108778:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810877a:	2001      	movs	r0, #1
 810877c:	f7f8 fe9c 	bl	81014b8 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8108780:	bf00      	nop
 8108782:	3708      	adds	r7, #8
 8108784:	46bd      	mov	sp, r7
 8108786:	bd80      	pop	{r7, pc}
 8108788:	10004afc 	.word	0x10004afc

0810878c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 810878c:	b580      	push	{r7, lr}
 810878e:	b082      	sub	sp, #8
 8108790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8108792:	4b0b      	ldr	r3, [pc, #44]	; (81087c0 <MAILBOX_Init+0x34>)
 8108794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8108798:	4a09      	ldr	r2, [pc, #36]	; (81087c0 <MAILBOX_Init+0x34>)
 810879a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810879e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81087a2:	4b07      	ldr	r3, [pc, #28]	; (81087c0 <MAILBOX_Init+0x34>)
 81087a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81087a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81087ac:	607b      	str	r3, [r7, #4]
 81087ae:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81087b0:	2001      	movs	r0, #1
 81087b2:	f7f8 fe81 	bl	81014b8 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 81087b6:	2300      	movs	r3, #0
}
 81087b8:	4618      	mov	r0, r3
 81087ba:	3708      	adds	r7, #8
 81087bc:	46bd      	mov	sp, r7
 81087be:	bd80      	pop	{r7, pc}
 81087c0:	58024400 	.word	0x58024400

081087c4 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 81087c4:	b580      	push	{r7, lr}
 81087c6:	b082      	sub	sp, #8
 81087c8:	af00      	add	r7, sp, #0
 81087ca:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 81087cc:	4b09      	ldr	r3, [pc, #36]	; (81087f4 <MAILBOX_Poll+0x30>)
 81087ce:	681b      	ldr	r3, [r3, #0]
 81087d0:	2b01      	cmp	r3, #1
 81087d2:	d108      	bne.n	81087e6 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 81087d4:	2101      	movs	r1, #1
 81087d6:	6878      	ldr	r0, [r7, #4]
 81087d8:	f7fe fd27 	bl	810722a <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 81087dc:	4b05      	ldr	r3, [pc, #20]	; (81087f4 <MAILBOX_Poll+0x30>)
 81087de:	2200      	movs	r2, #0
 81087e0:	601a      	str	r2, [r3, #0]
    return 0;
 81087e2:	2300      	movs	r3, #0
 81087e4:	e001      	b.n	81087ea <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 81087e6:	f06f 030a 	mvn.w	r3, #10
}
 81087ea:	4618      	mov	r0, r3
 81087ec:	3708      	adds	r7, #8
 81087ee:	46bd      	mov	sp, r7
 81087f0:	bd80      	pop	{r7, pc}
 81087f2:	bf00      	nop
 81087f4:	10004afc 	.word	0x10004afc

081087f8 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 81087f8:	b580      	push	{r7, lr}
 81087fa:	b082      	sub	sp, #8
 81087fc:	af00      	add	r7, sp, #0
 81087fe:	6078      	str	r0, [r7, #4]
 8108800:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 8108802:	2001      	movs	r0, #1
 8108804:	f7f8 fe2a 	bl	810145c <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 8108808:	2100      	movs	r1, #0
 810880a:	2001      	movs	r0, #1
 810880c:	f7f8 fe40 	bl	8101490 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8108810:	2300      	movs	r3, #0
}
 8108812:	4618      	mov	r0, r3
 8108814:	3708      	adds	r7, #8
 8108816:	46bd      	mov	sp, r7
 8108818:	bd80      	pop	{r7, pc}

0810881a <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 810881a:	b480      	push	{r7}
 810881c:	b083      	sub	sp, #12
 810881e:	af00      	add	r7, sp, #0
 8108820:	6078      	str	r0, [r7, #4]
 8108822:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8108824:	687b      	ldr	r3, [r7, #4]
 8108826:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8108828:	683a      	ldr	r2, [r7, #0]
 810882a:	429a      	cmp	r2, r3
 810882c:	d209      	bcs.n	8108842 <metal_device_io_region+0x28>
 810882e:	683a      	ldr	r2, [r7, #0]
 8108830:	4613      	mov	r3, r2
 8108832:	005b      	lsls	r3, r3, #1
 8108834:	4413      	add	r3, r2
 8108836:	011b      	lsls	r3, r3, #4
 8108838:	3308      	adds	r3, #8
 810883a:	687a      	ldr	r2, [r7, #4]
 810883c:	4413      	add	r3, r2
 810883e:	3304      	adds	r3, #4
 8108840:	e000      	b.n	8108844 <metal_device_io_region+0x2a>
 8108842:	2300      	movs	r3, #0
}
 8108844:	4618      	mov	r0, r3
 8108846:	370c      	adds	r7, #12
 8108848:	46bd      	mov	sp, r7
 810884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810884e:	4770      	bx	lr

08108850 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8108850:	b590      	push	{r4, r7, lr}
 8108852:	b08d      	sub	sp, #52	; 0x34
 8108854:	af04      	add	r7, sp, #16
 8108856:	6078      	str	r0, [r7, #4]
  int status = 0;
 8108858:	2300      	movs	r3, #0
 810885a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 810885c:	2300      	movs	r3, #0
 810885e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8108860:	4a41      	ldr	r2, [pc, #260]	; (8108968 <OPENAMP_shmem_init+0x118>)
 8108862:	f107 0310 	add.w	r3, r7, #16
 8108866:	e892 0003 	ldmia.w	r2, {r0, r1}
 810886a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 810886e:	2300      	movs	r3, #0
 8108870:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8108872:	2300      	movs	r3, #0
 8108874:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8108876:	f107 0310 	add.w	r3, r7, #16
 810887a:	4618      	mov	r0, r3
 810887c:	f7fe f8ec 	bl	8106a58 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8108880:	483a      	ldr	r0, [pc, #232]	; (810896c <OPENAMP_shmem_init+0x11c>)
 8108882:	f7fd ff91 	bl	81067a8 <metal_register_generic_device>
 8108886:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8108888:	69fb      	ldr	r3, [r7, #28]
 810888a:	2b00      	cmp	r3, #0
 810888c:	d001      	beq.n	8108892 <OPENAMP_shmem_init+0x42>
    return status;
 810888e:	69fb      	ldr	r3, [r7, #28]
 8108890:	e066      	b.n	8108960 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8108892:	f107 0318 	add.w	r3, r7, #24
 8108896:	461a      	mov	r2, r3
 8108898:	4935      	ldr	r1, [pc, #212]	; (8108970 <OPENAMP_shmem_init+0x120>)
 810889a:	4836      	ldr	r0, [pc, #216]	; (8108974 <OPENAMP_shmem_init+0x124>)
 810889c:	f7fd ff46 	bl	810672c <metal_device_open>
 81088a0:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 81088a2:	69fb      	ldr	r3, [r7, #28]
 81088a4:	2b00      	cmp	r3, #0
 81088a6:	d001      	beq.n	81088ac <OPENAMP_shmem_init+0x5c>
    return status;
 81088a8:	69fb      	ldr	r3, [r7, #28]
 81088aa:	e059      	b.n	8108960 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 81088ac:	4a32      	ldr	r2, [pc, #200]	; (8108978 <OPENAMP_shmem_init+0x128>)
 81088ae:	4b33      	ldr	r3, [pc, #204]	; (810897c <OPENAMP_shmem_init+0x12c>)
 81088b0:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 81088b2:	69bb      	ldr	r3, [r7, #24]
 81088b4:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 81088b8:	4a31      	ldr	r2, [pc, #196]	; (8108980 <OPENAMP_shmem_init+0x130>)
 81088ba:	4b2f      	ldr	r3, [pc, #188]	; (8108978 <OPENAMP_shmem_init+0x128>)
 81088bc:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 81088be:	461a      	mov	r2, r3
 81088c0:	2300      	movs	r3, #0
 81088c2:	9302      	str	r3, [sp, #8]
 81088c4:	2300      	movs	r3, #0
 81088c6:	9301      	str	r3, [sp, #4]
 81088c8:	f04f 33ff 	mov.w	r3, #4294967295
 81088cc:	9300      	str	r3, [sp, #0]
 81088ce:	4613      	mov	r3, r2
 81088d0:	4a2a      	ldr	r2, [pc, #168]	; (810897c <OPENAMP_shmem_init+0x12c>)
 81088d2:	4929      	ldr	r1, [pc, #164]	; (8108978 <OPENAMP_shmem_init+0x128>)
 81088d4:	f7fe f90d 	bl	8106af2 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 81088d8:	69bb      	ldr	r3, [r7, #24]
 81088da:	2100      	movs	r1, #0
 81088dc:	4618      	mov	r0, r3
 81088de:	f7ff ff9c 	bl	810881a <metal_device_io_region>
 81088e2:	4603      	mov	r3, r0
 81088e4:	4a27      	ldr	r2, [pc, #156]	; (8108984 <OPENAMP_shmem_init+0x134>)
 81088e6:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 81088e8:	4b26      	ldr	r3, [pc, #152]	; (8108984 <OPENAMP_shmem_init+0x134>)
 81088ea:	681b      	ldr	r3, [r3, #0]
 81088ec:	2b00      	cmp	r3, #0
 81088ee:	d102      	bne.n	81088f6 <OPENAMP_shmem_init+0xa6>
    return -1;
 81088f0:	f04f 33ff 	mov.w	r3, #4294967295
 81088f4:	e034      	b.n	8108960 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 81088f6:	f107 0208 	add.w	r2, r7, #8
 81088fa:	f107 030c 	add.w	r3, r7, #12
 81088fe:	4619      	mov	r1, r3
 8108900:	6878      	ldr	r0, [r7, #4]
 8108902:	f000 f905 	bl	8108b10 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8108906:	68fb      	ldr	r3, [r7, #12]
 8108908:	4a1f      	ldr	r2, [pc, #124]	; (8108988 <OPENAMP_shmem_init+0x138>)
 810890a:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 810890c:	4b1e      	ldr	r3, [pc, #120]	; (8108988 <OPENAMP_shmem_init+0x138>)
 810890e:	681b      	ldr	r3, [r3, #0]
 8108910:	2b00      	cmp	r3, #0
 8108912:	d102      	bne.n	810891a <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8108914:	f04f 33ff 	mov.w	r3, #4294967295
 8108918:	e022      	b.n	8108960 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 810891a:	69bb      	ldr	r3, [r7, #24]
 810891c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8108920:	4b19      	ldr	r3, [pc, #100]	; (8108988 <OPENAMP_shmem_init+0x138>)
 8108922:	6819      	ldr	r1, [r3, #0]
 8108924:	4b18      	ldr	r3, [pc, #96]	; (8108988 <OPENAMP_shmem_init+0x138>)
 8108926:	681a      	ldr	r2, [r3, #0]
 8108928:	68bb      	ldr	r3, [r7, #8]
 810892a:	461c      	mov	r4, r3
 810892c:	2300      	movs	r3, #0
 810892e:	9302      	str	r3, [sp, #8]
 8108930:	2300      	movs	r3, #0
 8108932:	9301      	str	r3, [sp, #4]
 8108934:	f04f 33ff 	mov.w	r3, #4294967295
 8108938:	9300      	str	r3, [sp, #0]
 810893a:	4623      	mov	r3, r4
 810893c:	f7fe f8d9 	bl	8106af2 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8108940:	69bb      	ldr	r3, [r7, #24]
 8108942:	2101      	movs	r1, #1
 8108944:	4618      	mov	r0, r3
 8108946:	f7ff ff68 	bl	810881a <metal_device_io_region>
 810894a:	4603      	mov	r3, r0
 810894c:	4a0f      	ldr	r2, [pc, #60]	; (810898c <OPENAMP_shmem_init+0x13c>)
 810894e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8108950:	4b0e      	ldr	r3, [pc, #56]	; (810898c <OPENAMP_shmem_init+0x13c>)
 8108952:	681b      	ldr	r3, [r3, #0]
 8108954:	2b00      	cmp	r3, #0
 8108956:	d102      	bne.n	810895e <OPENAMP_shmem_init+0x10e>
    return -1;
 8108958:	f04f 33ff 	mov.w	r3, #4294967295
 810895c:	e000      	b.n	8108960 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 810895e:	2300      	movs	r3, #0
}
 8108960:	4618      	mov	r0, r3
 8108962:	3724      	adds	r7, #36	; 0x24
 8108964:	46bd      	mov	sp, r7
 8108966:	bd90      	pop	{r4, r7, pc}
 8108968:	08109eac 	.word	0x08109eac
 810896c:	10000040 	.word	0x10000040
 8108970:	08109e98 	.word	0x08109e98
 8108974:	08109ea4 	.word	0x08109ea4
 8108978:	38000400 	.word	0x38000400
 810897c:	10004b90 	.word	0x10004b90
 8108980:	38010000 	.word	0x38010000
 8108984:	10004b00 	.word	0x10004b00
 8108988:	10004b08 	.word	0x10004b08
 810898c:	10004b04 	.word	0x10004b04

08108990 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8108990:	b590      	push	{r4, r7, lr}
 8108992:	b08b      	sub	sp, #44	; 0x2c
 8108994:	af04      	add	r7, sp, #16
 8108996:	6078      	str	r0, [r7, #4]
 8108998:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 810899a:	2300      	movs	r3, #0
 810899c:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 810899e:	2300      	movs	r3, #0
 81089a0:	613b      	str	r3, [r7, #16]
  int status = 0;
 81089a2:	2300      	movs	r3, #0
 81089a4:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 81089a6:	f7ff fef1 	bl	810878c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 81089aa:	6878      	ldr	r0, [r7, #4]
 81089ac:	f7ff ff50 	bl	8108850 <OPENAMP_shmem_init>
 81089b0:	60f8      	str	r0, [r7, #12]
  if(status)
 81089b2:	68fb      	ldr	r3, [r7, #12]
 81089b4:	2b00      	cmp	r3, #0
 81089b6:	d001      	beq.n	81089bc <MX_OPENAMP_Init+0x2c>
  {
    return status;
 81089b8:	68fb      	ldr	r3, [r7, #12]
 81089ba:	e06a      	b.n	8108a92 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 81089bc:	6878      	ldr	r0, [r7, #4]
 81089be:	4b37      	ldr	r3, [pc, #220]	; (8108a9c <MX_OPENAMP_Init+0x10c>)
 81089c0:	681b      	ldr	r3, [r3, #0]
 81089c2:	f103 0218 	add.w	r2, r3, #24
 81089c6:	4b36      	ldr	r3, [pc, #216]	; (8108aa0 <MX_OPENAMP_Init+0x110>)
 81089c8:	681b      	ldr	r3, [r3, #0]
 81089ca:	2100      	movs	r1, #0
 81089cc:	9102      	str	r1, [sp, #8]
 81089ce:	4935      	ldr	r1, [pc, #212]	; (8108aa4 <MX_OPENAMP_Init+0x114>)
 81089d0:	9101      	str	r1, [sp, #4]
 81089d2:	2100      	movs	r1, #0
 81089d4:	9100      	str	r1, [sp, #0]
 81089d6:	21ff      	movs	r1, #255	; 0xff
 81089d8:	f7fe fb48 	bl	810706c <rproc_virtio_create_vdev>
 81089dc:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 81089de:	693b      	ldr	r3, [r7, #16]
 81089e0:	2b00      	cmp	r3, #0
 81089e2:	d102      	bne.n	81089ea <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 81089e4:	f04f 33ff 	mov.w	r3, #4294967295
 81089e8:	e053      	b.n	8108a92 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 81089ea:	6938      	ldr	r0, [r7, #16]
 81089ec:	f7fe fc59 	bl	81072a2 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 81089f0:	4b2a      	ldr	r3, [pc, #168]	; (8108a9c <MX_OPENAMP_Init+0x10c>)
 81089f2:	681b      	ldr	r3, [r3, #0]
 81089f4:	3334      	adds	r3, #52	; 0x34
 81089f6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 81089f8:	697b      	ldr	r3, [r7, #20]
 81089fa:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 81089fc:	697b      	ldr	r3, [r7, #20]
 81089fe:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8108a00:	461c      	mov	r4, r3
 8108a02:	4b29      	ldr	r3, [pc, #164]	; (8108aa8 <MX_OPENAMP_Init+0x118>)
 8108a04:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8108a06:	697a      	ldr	r2, [r7, #20]
 8108a08:	6892      	ldr	r2, [r2, #8]
 8108a0a:	6979      	ldr	r1, [r7, #20]
 8108a0c:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8108a0e:	9102      	str	r1, [sp, #8]
 8108a10:	9201      	str	r2, [sp, #4]
 8108a12:	9300      	str	r3, [sp, #0]
 8108a14:	4623      	mov	r3, r4
 8108a16:	4602      	mov	r2, r0
 8108a18:	2100      	movs	r1, #0
 8108a1a:	6938      	ldr	r0, [r7, #16]
 8108a1c:	f7fe fbd4 	bl	81071c8 <rproc_virtio_init_vring>
 8108a20:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8108a22:	68fb      	ldr	r3, [r7, #12]
 8108a24:	2b00      	cmp	r3, #0
 8108a26:	d001      	beq.n	8108a2c <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8108a28:	68fb      	ldr	r3, [r7, #12]
 8108a2a:	e032      	b.n	8108a92 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8108a2c:	4b1b      	ldr	r3, [pc, #108]	; (8108a9c <MX_OPENAMP_Init+0x10c>)
 8108a2e:	681b      	ldr	r3, [r3, #0]
 8108a30:	3348      	adds	r3, #72	; 0x48
 8108a32:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8108a34:	697b      	ldr	r3, [r7, #20]
 8108a36:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8108a38:	697b      	ldr	r3, [r7, #20]
 8108a3a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8108a3c:	461c      	mov	r4, r3
 8108a3e:	4b1a      	ldr	r3, [pc, #104]	; (8108aa8 <MX_OPENAMP_Init+0x118>)
 8108a40:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8108a42:	697a      	ldr	r2, [r7, #20]
 8108a44:	6892      	ldr	r2, [r2, #8]
 8108a46:	6979      	ldr	r1, [r7, #20]
 8108a48:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8108a4a:	9102      	str	r1, [sp, #8]
 8108a4c:	9201      	str	r2, [sp, #4]
 8108a4e:	9300      	str	r3, [sp, #0]
 8108a50:	4623      	mov	r3, r4
 8108a52:	4602      	mov	r2, r0
 8108a54:	2101      	movs	r1, #1
 8108a56:	6938      	ldr	r0, [r7, #16]
 8108a58:	f7fe fbb6 	bl	81071c8 <rproc_virtio_init_vring>
 8108a5c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8108a5e:	68fb      	ldr	r3, [r7, #12]
 8108a60:	2b00      	cmp	r3, #0
 8108a62:	d001      	beq.n	8108a68 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8108a64:	68fb      	ldr	r3, [r7, #12]
 8108a66:	e014      	b.n	8108a92 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8108a68:	4b10      	ldr	r3, [pc, #64]	; (8108aac <MX_OPENAMP_Init+0x11c>)
 8108a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108a6e:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8108a70:	4a0f      	ldr	r2, [pc, #60]	; (8108ab0 <MX_OPENAMP_Init+0x120>)
 8108a72:	4b0e      	ldr	r3, [pc, #56]	; (8108aac <MX_OPENAMP_Init+0x11c>)
 8108a74:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8108a76:	461a      	mov	r2, r3
 8108a78:	480e      	ldr	r0, [pc, #56]	; (8108ab4 <MX_OPENAMP_Init+0x124>)
 8108a7a:	f7ff f861 	bl	8107b40 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8108a7e:	4b0a      	ldr	r3, [pc, #40]	; (8108aa8 <MX_OPENAMP_Init+0x118>)
 8108a80:	681b      	ldr	r3, [r3, #0]
 8108a82:	4a0c      	ldr	r2, [pc, #48]	; (8108ab4 <MX_OPENAMP_Init+0x124>)
 8108a84:	9200      	str	r2, [sp, #0]
 8108a86:	683a      	ldr	r2, [r7, #0]
 8108a88:	6939      	ldr	r1, [r7, #16]
 8108a8a:	480b      	ldr	r0, [pc, #44]	; (8108ab8 <MX_OPENAMP_Init+0x128>)
 8108a8c:	f7ff facc 	bl	8108028 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8108a90:	2300      	movs	r3, #0
}
 8108a92:	4618      	mov	r0, r3
 8108a94:	371c      	adds	r7, #28
 8108a96:	46bd      	mov	sp, r7
 8108a98:	bd90      	pop	{r4, r7, pc}
 8108a9a:	bf00      	nop
 8108a9c:	10004b08 	.word	0x10004b08
 8108aa0:	10004b04 	.word	0x10004b04
 8108aa4:	081087f9 	.word	0x081087f9
 8108aa8:	10004b00 	.word	0x10004b00
 8108aac:	38000400 	.word	0x38000400
 8108ab0:	38010000 	.word	0x38010000
 8108ab4:	10004b0c 	.word	0x10004b0c
 8108ab8:	10004b18 	.word	0x10004b18

08108abc <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8108abc:	b580      	push	{r7, lr}
 8108abe:	b08a      	sub	sp, #40	; 0x28
 8108ac0:	af04      	add	r7, sp, #16
 8108ac2:	60f8      	str	r0, [r7, #12]
 8108ac4:	60b9      	str	r1, [r7, #8]
 8108ac6:	607a      	str	r2, [r7, #4]
 8108ac8:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8108aca:	2300      	movs	r3, #0
 8108acc:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8108ace:	6a3b      	ldr	r3, [r7, #32]
 8108ad0:	9302      	str	r3, [sp, #8]
 8108ad2:	683b      	ldr	r3, [r7, #0]
 8108ad4:	9301      	str	r3, [sp, #4]
 8108ad6:	687b      	ldr	r3, [r7, #4]
 8108ad8:	9300      	str	r3, [sp, #0]
 8108ada:	f04f 33ff 	mov.w	r3, #4294967295
 8108ade:	68ba      	ldr	r2, [r7, #8]
 8108ae0:	4904      	ldr	r1, [pc, #16]	; (8108af4 <OPENAMP_create_endpoint+0x38>)
 8108ae2:	68f8      	ldr	r0, [r7, #12]
 8108ae4:	f7fe fe6a 	bl	81077bc <rpmsg_create_ept>
 8108ae8:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8108aea:	697b      	ldr	r3, [r7, #20]
}
 8108aec:	4618      	mov	r0, r3
 8108aee:	3718      	adds	r7, #24
 8108af0:	46bd      	mov	sp, r7
 8108af2:	bd80      	pop	{r7, pc}
 8108af4:	10004b18 	.word	0x10004b18

08108af8 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8108af8:	b580      	push	{r7, lr}
 8108afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8108afc:	4b03      	ldr	r3, [pc, #12]	; (8108b0c <OPENAMP_check_for_message+0x14>)
 8108afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108b00:	4618      	mov	r0, r3
 8108b02:	f7ff fe5f 	bl	81087c4 <MAILBOX_Poll>
}
 8108b06:	bf00      	nop
 8108b08:	bd80      	pop	{r7, pc}
 8108b0a:	bf00      	nop
 8108b0c:	10004b18 	.word	0x10004b18

08108b10 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8108b10:	b480      	push	{r7}
 8108b12:	b085      	sub	sp, #20
 8108b14:	af00      	add	r7, sp, #0
 8108b16:	60f8      	str	r0, [r7, #12]
 8108b18:	60b9      	str	r1, [r7, #8]
 8108b1a:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 8108b1c:	bf00      	nop
 8108b1e:	4b08      	ldr	r3, [pc, #32]	; (8108b40 <resource_table_init+0x30>)
 8108b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8108b22:	4a08      	ldr	r2, [pc, #32]	; (8108b44 <resource_table_init+0x34>)
 8108b24:	4293      	cmp	r3, r2
 8108b26:	d1fa      	bne.n	8108b1e <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8108b28:	687b      	ldr	r3, [r7, #4]
 8108b2a:	228c      	movs	r2, #140	; 0x8c
 8108b2c:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8108b2e:	68bb      	ldr	r3, [r7, #8]
 8108b30:	4a03      	ldr	r2, [pc, #12]	; (8108b40 <resource_table_init+0x30>)
 8108b32:	601a      	str	r2, [r3, #0]
}
 8108b34:	bf00      	nop
 8108b36:	3714      	adds	r7, #20
 8108b38:	46bd      	mov	sp, r7
 8108b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b3e:	4770      	bx	lr
 8108b40:	38000000 	.word	0x38000000
 8108b44:	38000400 	.word	0x38000400

08108b48 <__assert_func>:
 8108b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8108b4a:	4614      	mov	r4, r2
 8108b4c:	461a      	mov	r2, r3
 8108b4e:	4b09      	ldr	r3, [pc, #36]	; (8108b74 <__assert_func+0x2c>)
 8108b50:	681b      	ldr	r3, [r3, #0]
 8108b52:	4605      	mov	r5, r0
 8108b54:	68d8      	ldr	r0, [r3, #12]
 8108b56:	b14c      	cbz	r4, 8108b6c <__assert_func+0x24>
 8108b58:	4b07      	ldr	r3, [pc, #28]	; (8108b78 <__assert_func+0x30>)
 8108b5a:	9100      	str	r1, [sp, #0]
 8108b5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8108b60:	4906      	ldr	r1, [pc, #24]	; (8108b7c <__assert_func+0x34>)
 8108b62:	462b      	mov	r3, r5
 8108b64:	f000 f8ea 	bl	8108d3c <fiprintf>
 8108b68:	f000 feb4 	bl	81098d4 <abort>
 8108b6c:	4b04      	ldr	r3, [pc, #16]	; (8108b80 <__assert_func+0x38>)
 8108b6e:	461c      	mov	r4, r3
 8108b70:	e7f3      	b.n	8108b5a <__assert_func+0x12>
 8108b72:	bf00      	nop
 8108b74:	100000bc 	.word	0x100000bc
 8108b78:	08109f3e 	.word	0x08109f3e
 8108b7c:	08109f4b 	.word	0x08109f4b
 8108b80:	08109f79 	.word	0x08109f79

08108b84 <__errno>:
 8108b84:	4b01      	ldr	r3, [pc, #4]	; (8108b8c <__errno+0x8>)
 8108b86:	6818      	ldr	r0, [r3, #0]
 8108b88:	4770      	bx	lr
 8108b8a:	bf00      	nop
 8108b8c:	100000bc 	.word	0x100000bc

08108b90 <std>:
 8108b90:	2300      	movs	r3, #0
 8108b92:	b510      	push	{r4, lr}
 8108b94:	4604      	mov	r4, r0
 8108b96:	e9c0 3300 	strd	r3, r3, [r0]
 8108b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8108b9e:	6083      	str	r3, [r0, #8]
 8108ba0:	8181      	strh	r1, [r0, #12]
 8108ba2:	6643      	str	r3, [r0, #100]	; 0x64
 8108ba4:	81c2      	strh	r2, [r0, #14]
 8108ba6:	6183      	str	r3, [r0, #24]
 8108ba8:	4619      	mov	r1, r3
 8108baa:	2208      	movs	r2, #8
 8108bac:	305c      	adds	r0, #92	; 0x5c
 8108bae:	f000 f93d 	bl	8108e2c <memset>
 8108bb2:	4b05      	ldr	r3, [pc, #20]	; (8108bc8 <std+0x38>)
 8108bb4:	6263      	str	r3, [r4, #36]	; 0x24
 8108bb6:	4b05      	ldr	r3, [pc, #20]	; (8108bcc <std+0x3c>)
 8108bb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8108bba:	4b05      	ldr	r3, [pc, #20]	; (8108bd0 <std+0x40>)
 8108bbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8108bbe:	4b05      	ldr	r3, [pc, #20]	; (8108bd4 <std+0x44>)
 8108bc0:	6224      	str	r4, [r4, #32]
 8108bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8108bc4:	bd10      	pop	{r4, pc}
 8108bc6:	bf00      	nop
 8108bc8:	08109661 	.word	0x08109661
 8108bcc:	08109683 	.word	0x08109683
 8108bd0:	081096bb 	.word	0x081096bb
 8108bd4:	081096df 	.word	0x081096df

08108bd8 <_cleanup_r>:
 8108bd8:	4901      	ldr	r1, [pc, #4]	; (8108be0 <_cleanup_r+0x8>)
 8108bda:	f000 b8c1 	b.w	8108d60 <_fwalk_reent>
 8108bde:	bf00      	nop
 8108be0:	08109a11 	.word	0x08109a11

08108be4 <__sfmoreglue>:
 8108be4:	b570      	push	{r4, r5, r6, lr}
 8108be6:	1e4a      	subs	r2, r1, #1
 8108be8:	2568      	movs	r5, #104	; 0x68
 8108bea:	4355      	muls	r5, r2
 8108bec:	460e      	mov	r6, r1
 8108bee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8108bf2:	f000 f973 	bl	8108edc <_malloc_r>
 8108bf6:	4604      	mov	r4, r0
 8108bf8:	b140      	cbz	r0, 8108c0c <__sfmoreglue+0x28>
 8108bfa:	2100      	movs	r1, #0
 8108bfc:	e9c0 1600 	strd	r1, r6, [r0]
 8108c00:	300c      	adds	r0, #12
 8108c02:	60a0      	str	r0, [r4, #8]
 8108c04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8108c08:	f000 f910 	bl	8108e2c <memset>
 8108c0c:	4620      	mov	r0, r4
 8108c0e:	bd70      	pop	{r4, r5, r6, pc}

08108c10 <__sfp_lock_acquire>:
 8108c10:	4801      	ldr	r0, [pc, #4]	; (8108c18 <__sfp_lock_acquire+0x8>)
 8108c12:	f000 b8ea 	b.w	8108dea <__retarget_lock_acquire_recursive>
 8108c16:	bf00      	nop
 8108c18:	10004d3c 	.word	0x10004d3c

08108c1c <__sfp_lock_release>:
 8108c1c:	4801      	ldr	r0, [pc, #4]	; (8108c24 <__sfp_lock_release+0x8>)
 8108c1e:	f000 b8e5 	b.w	8108dec <__retarget_lock_release_recursive>
 8108c22:	bf00      	nop
 8108c24:	10004d3c 	.word	0x10004d3c

08108c28 <__sinit_lock_acquire>:
 8108c28:	4801      	ldr	r0, [pc, #4]	; (8108c30 <__sinit_lock_acquire+0x8>)
 8108c2a:	f000 b8de 	b.w	8108dea <__retarget_lock_acquire_recursive>
 8108c2e:	bf00      	nop
 8108c30:	10004d37 	.word	0x10004d37

08108c34 <__sinit_lock_release>:
 8108c34:	4801      	ldr	r0, [pc, #4]	; (8108c3c <__sinit_lock_release+0x8>)
 8108c36:	f000 b8d9 	b.w	8108dec <__retarget_lock_release_recursive>
 8108c3a:	bf00      	nop
 8108c3c:	10004d37 	.word	0x10004d37

08108c40 <__sinit>:
 8108c40:	b510      	push	{r4, lr}
 8108c42:	4604      	mov	r4, r0
 8108c44:	f7ff fff0 	bl	8108c28 <__sinit_lock_acquire>
 8108c48:	69a3      	ldr	r3, [r4, #24]
 8108c4a:	b11b      	cbz	r3, 8108c54 <__sinit+0x14>
 8108c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108c50:	f7ff bff0 	b.w	8108c34 <__sinit_lock_release>
 8108c54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8108c58:	6523      	str	r3, [r4, #80]	; 0x50
 8108c5a:	4b13      	ldr	r3, [pc, #76]	; (8108ca8 <__sinit+0x68>)
 8108c5c:	4a13      	ldr	r2, [pc, #76]	; (8108cac <__sinit+0x6c>)
 8108c5e:	681b      	ldr	r3, [r3, #0]
 8108c60:	62a2      	str	r2, [r4, #40]	; 0x28
 8108c62:	42a3      	cmp	r3, r4
 8108c64:	bf04      	itt	eq
 8108c66:	2301      	moveq	r3, #1
 8108c68:	61a3      	streq	r3, [r4, #24]
 8108c6a:	4620      	mov	r0, r4
 8108c6c:	f000 f820 	bl	8108cb0 <__sfp>
 8108c70:	6060      	str	r0, [r4, #4]
 8108c72:	4620      	mov	r0, r4
 8108c74:	f000 f81c 	bl	8108cb0 <__sfp>
 8108c78:	60a0      	str	r0, [r4, #8]
 8108c7a:	4620      	mov	r0, r4
 8108c7c:	f000 f818 	bl	8108cb0 <__sfp>
 8108c80:	2200      	movs	r2, #0
 8108c82:	60e0      	str	r0, [r4, #12]
 8108c84:	2104      	movs	r1, #4
 8108c86:	6860      	ldr	r0, [r4, #4]
 8108c88:	f7ff ff82 	bl	8108b90 <std>
 8108c8c:	68a0      	ldr	r0, [r4, #8]
 8108c8e:	2201      	movs	r2, #1
 8108c90:	2109      	movs	r1, #9
 8108c92:	f7ff ff7d 	bl	8108b90 <std>
 8108c96:	68e0      	ldr	r0, [r4, #12]
 8108c98:	2202      	movs	r2, #2
 8108c9a:	2112      	movs	r1, #18
 8108c9c:	f7ff ff78 	bl	8108b90 <std>
 8108ca0:	2301      	movs	r3, #1
 8108ca2:	61a3      	str	r3, [r4, #24]
 8108ca4:	e7d2      	b.n	8108c4c <__sinit+0xc>
 8108ca6:	bf00      	nop
 8108ca8:	08109fdc 	.word	0x08109fdc
 8108cac:	08108bd9 	.word	0x08108bd9

08108cb0 <__sfp>:
 8108cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108cb2:	4607      	mov	r7, r0
 8108cb4:	f7ff ffac 	bl	8108c10 <__sfp_lock_acquire>
 8108cb8:	4b1e      	ldr	r3, [pc, #120]	; (8108d34 <__sfp+0x84>)
 8108cba:	681e      	ldr	r6, [r3, #0]
 8108cbc:	69b3      	ldr	r3, [r6, #24]
 8108cbe:	b913      	cbnz	r3, 8108cc6 <__sfp+0x16>
 8108cc0:	4630      	mov	r0, r6
 8108cc2:	f7ff ffbd 	bl	8108c40 <__sinit>
 8108cc6:	3648      	adds	r6, #72	; 0x48
 8108cc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8108ccc:	3b01      	subs	r3, #1
 8108cce:	d503      	bpl.n	8108cd8 <__sfp+0x28>
 8108cd0:	6833      	ldr	r3, [r6, #0]
 8108cd2:	b30b      	cbz	r3, 8108d18 <__sfp+0x68>
 8108cd4:	6836      	ldr	r6, [r6, #0]
 8108cd6:	e7f7      	b.n	8108cc8 <__sfp+0x18>
 8108cd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8108cdc:	b9d5      	cbnz	r5, 8108d14 <__sfp+0x64>
 8108cde:	4b16      	ldr	r3, [pc, #88]	; (8108d38 <__sfp+0x88>)
 8108ce0:	60e3      	str	r3, [r4, #12]
 8108ce2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8108ce6:	6665      	str	r5, [r4, #100]	; 0x64
 8108ce8:	f000 f87e 	bl	8108de8 <__retarget_lock_init_recursive>
 8108cec:	f7ff ff96 	bl	8108c1c <__sfp_lock_release>
 8108cf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8108cf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8108cf8:	6025      	str	r5, [r4, #0]
 8108cfa:	61a5      	str	r5, [r4, #24]
 8108cfc:	2208      	movs	r2, #8
 8108cfe:	4629      	mov	r1, r5
 8108d00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8108d04:	f000 f892 	bl	8108e2c <memset>
 8108d08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8108d0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8108d10:	4620      	mov	r0, r4
 8108d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108d14:	3468      	adds	r4, #104	; 0x68
 8108d16:	e7d9      	b.n	8108ccc <__sfp+0x1c>
 8108d18:	2104      	movs	r1, #4
 8108d1a:	4638      	mov	r0, r7
 8108d1c:	f7ff ff62 	bl	8108be4 <__sfmoreglue>
 8108d20:	4604      	mov	r4, r0
 8108d22:	6030      	str	r0, [r6, #0]
 8108d24:	2800      	cmp	r0, #0
 8108d26:	d1d5      	bne.n	8108cd4 <__sfp+0x24>
 8108d28:	f7ff ff78 	bl	8108c1c <__sfp_lock_release>
 8108d2c:	230c      	movs	r3, #12
 8108d2e:	603b      	str	r3, [r7, #0]
 8108d30:	e7ee      	b.n	8108d10 <__sfp+0x60>
 8108d32:	bf00      	nop
 8108d34:	08109fdc 	.word	0x08109fdc
 8108d38:	ffff0001 	.word	0xffff0001

08108d3c <fiprintf>:
 8108d3c:	b40e      	push	{r1, r2, r3}
 8108d3e:	b503      	push	{r0, r1, lr}
 8108d40:	4601      	mov	r1, r0
 8108d42:	ab03      	add	r3, sp, #12
 8108d44:	4805      	ldr	r0, [pc, #20]	; (8108d5c <fiprintf+0x20>)
 8108d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8108d4a:	6800      	ldr	r0, [r0, #0]
 8108d4c:	9301      	str	r3, [sp, #4]
 8108d4e:	f000 f949 	bl	8108fe4 <_vfiprintf_r>
 8108d52:	b002      	add	sp, #8
 8108d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8108d58:	b003      	add	sp, #12
 8108d5a:	4770      	bx	lr
 8108d5c:	100000bc 	.word	0x100000bc

08108d60 <_fwalk_reent>:
 8108d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108d64:	4606      	mov	r6, r0
 8108d66:	4688      	mov	r8, r1
 8108d68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8108d6c:	2700      	movs	r7, #0
 8108d6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8108d72:	f1b9 0901 	subs.w	r9, r9, #1
 8108d76:	d505      	bpl.n	8108d84 <_fwalk_reent+0x24>
 8108d78:	6824      	ldr	r4, [r4, #0]
 8108d7a:	2c00      	cmp	r4, #0
 8108d7c:	d1f7      	bne.n	8108d6e <_fwalk_reent+0xe>
 8108d7e:	4638      	mov	r0, r7
 8108d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108d84:	89ab      	ldrh	r3, [r5, #12]
 8108d86:	2b01      	cmp	r3, #1
 8108d88:	d907      	bls.n	8108d9a <_fwalk_reent+0x3a>
 8108d8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8108d8e:	3301      	adds	r3, #1
 8108d90:	d003      	beq.n	8108d9a <_fwalk_reent+0x3a>
 8108d92:	4629      	mov	r1, r5
 8108d94:	4630      	mov	r0, r6
 8108d96:	47c0      	blx	r8
 8108d98:	4307      	orrs	r7, r0
 8108d9a:	3568      	adds	r5, #104	; 0x68
 8108d9c:	e7e9      	b.n	8108d72 <_fwalk_reent+0x12>
	...

08108da0 <__libc_init_array>:
 8108da0:	b570      	push	{r4, r5, r6, lr}
 8108da2:	4d0d      	ldr	r5, [pc, #52]	; (8108dd8 <__libc_init_array+0x38>)
 8108da4:	4c0d      	ldr	r4, [pc, #52]	; (8108ddc <__libc_init_array+0x3c>)
 8108da6:	1b64      	subs	r4, r4, r5
 8108da8:	10a4      	asrs	r4, r4, #2
 8108daa:	2600      	movs	r6, #0
 8108dac:	42a6      	cmp	r6, r4
 8108dae:	d109      	bne.n	8108dc4 <__libc_init_array+0x24>
 8108db0:	4d0b      	ldr	r5, [pc, #44]	; (8108de0 <__libc_init_array+0x40>)
 8108db2:	4c0c      	ldr	r4, [pc, #48]	; (8108de4 <__libc_init_array+0x44>)
 8108db4:	f000 ff62 	bl	8109c7c <_init>
 8108db8:	1b64      	subs	r4, r4, r5
 8108dba:	10a4      	asrs	r4, r4, #2
 8108dbc:	2600      	movs	r6, #0
 8108dbe:	42a6      	cmp	r6, r4
 8108dc0:	d105      	bne.n	8108dce <__libc_init_array+0x2e>
 8108dc2:	bd70      	pop	{r4, r5, r6, pc}
 8108dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8108dc8:	4798      	blx	r3
 8108dca:	3601      	adds	r6, #1
 8108dcc:	e7ee      	b.n	8108dac <__libc_init_array+0xc>
 8108dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8108dd2:	4798      	blx	r3
 8108dd4:	3601      	adds	r6, #1
 8108dd6:	e7f2      	b.n	8108dbe <__libc_init_array+0x1e>
 8108dd8:	0810a014 	.word	0x0810a014
 8108ddc:	0810a014 	.word	0x0810a014
 8108de0:	0810a014 	.word	0x0810a014
 8108de4:	0810a018 	.word	0x0810a018

08108de8 <__retarget_lock_init_recursive>:
 8108de8:	4770      	bx	lr

08108dea <__retarget_lock_acquire_recursive>:
 8108dea:	4770      	bx	lr

08108dec <__retarget_lock_release_recursive>:
 8108dec:	4770      	bx	lr
	...

08108df0 <malloc>:
 8108df0:	4b02      	ldr	r3, [pc, #8]	; (8108dfc <malloc+0xc>)
 8108df2:	4601      	mov	r1, r0
 8108df4:	6818      	ldr	r0, [r3, #0]
 8108df6:	f000 b871 	b.w	8108edc <_malloc_r>
 8108dfa:	bf00      	nop
 8108dfc:	100000bc 	.word	0x100000bc

08108e00 <free>:
 8108e00:	4b02      	ldr	r3, [pc, #8]	; (8108e0c <free+0xc>)
 8108e02:	4601      	mov	r1, r0
 8108e04:	6818      	ldr	r0, [r3, #0]
 8108e06:	f000 b819 	b.w	8108e3c <_free_r>
 8108e0a:	bf00      	nop
 8108e0c:	100000bc 	.word	0x100000bc

08108e10 <memcpy>:
 8108e10:	440a      	add	r2, r1
 8108e12:	4291      	cmp	r1, r2
 8108e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8108e18:	d100      	bne.n	8108e1c <memcpy+0xc>
 8108e1a:	4770      	bx	lr
 8108e1c:	b510      	push	{r4, lr}
 8108e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8108e26:	4291      	cmp	r1, r2
 8108e28:	d1f9      	bne.n	8108e1e <memcpy+0xe>
 8108e2a:	bd10      	pop	{r4, pc}

08108e2c <memset>:
 8108e2c:	4402      	add	r2, r0
 8108e2e:	4603      	mov	r3, r0
 8108e30:	4293      	cmp	r3, r2
 8108e32:	d100      	bne.n	8108e36 <memset+0xa>
 8108e34:	4770      	bx	lr
 8108e36:	f803 1b01 	strb.w	r1, [r3], #1
 8108e3a:	e7f9      	b.n	8108e30 <memset+0x4>

08108e3c <_free_r>:
 8108e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8108e3e:	2900      	cmp	r1, #0
 8108e40:	d048      	beq.n	8108ed4 <_free_r+0x98>
 8108e42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8108e46:	9001      	str	r0, [sp, #4]
 8108e48:	2b00      	cmp	r3, #0
 8108e4a:	f1a1 0404 	sub.w	r4, r1, #4
 8108e4e:	bfb8      	it	lt
 8108e50:	18e4      	addlt	r4, r4, r3
 8108e52:	f000 fe8f 	bl	8109b74 <__malloc_lock>
 8108e56:	4a20      	ldr	r2, [pc, #128]	; (8108ed8 <_free_r+0x9c>)
 8108e58:	9801      	ldr	r0, [sp, #4]
 8108e5a:	6813      	ldr	r3, [r2, #0]
 8108e5c:	4615      	mov	r5, r2
 8108e5e:	b933      	cbnz	r3, 8108e6e <_free_r+0x32>
 8108e60:	6063      	str	r3, [r4, #4]
 8108e62:	6014      	str	r4, [r2, #0]
 8108e64:	b003      	add	sp, #12
 8108e66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8108e6a:	f000 be89 	b.w	8109b80 <__malloc_unlock>
 8108e6e:	42a3      	cmp	r3, r4
 8108e70:	d90b      	bls.n	8108e8a <_free_r+0x4e>
 8108e72:	6821      	ldr	r1, [r4, #0]
 8108e74:	1862      	adds	r2, r4, r1
 8108e76:	4293      	cmp	r3, r2
 8108e78:	bf04      	itt	eq
 8108e7a:	681a      	ldreq	r2, [r3, #0]
 8108e7c:	685b      	ldreq	r3, [r3, #4]
 8108e7e:	6063      	str	r3, [r4, #4]
 8108e80:	bf04      	itt	eq
 8108e82:	1852      	addeq	r2, r2, r1
 8108e84:	6022      	streq	r2, [r4, #0]
 8108e86:	602c      	str	r4, [r5, #0]
 8108e88:	e7ec      	b.n	8108e64 <_free_r+0x28>
 8108e8a:	461a      	mov	r2, r3
 8108e8c:	685b      	ldr	r3, [r3, #4]
 8108e8e:	b10b      	cbz	r3, 8108e94 <_free_r+0x58>
 8108e90:	42a3      	cmp	r3, r4
 8108e92:	d9fa      	bls.n	8108e8a <_free_r+0x4e>
 8108e94:	6811      	ldr	r1, [r2, #0]
 8108e96:	1855      	adds	r5, r2, r1
 8108e98:	42a5      	cmp	r5, r4
 8108e9a:	d10b      	bne.n	8108eb4 <_free_r+0x78>
 8108e9c:	6824      	ldr	r4, [r4, #0]
 8108e9e:	4421      	add	r1, r4
 8108ea0:	1854      	adds	r4, r2, r1
 8108ea2:	42a3      	cmp	r3, r4
 8108ea4:	6011      	str	r1, [r2, #0]
 8108ea6:	d1dd      	bne.n	8108e64 <_free_r+0x28>
 8108ea8:	681c      	ldr	r4, [r3, #0]
 8108eaa:	685b      	ldr	r3, [r3, #4]
 8108eac:	6053      	str	r3, [r2, #4]
 8108eae:	4421      	add	r1, r4
 8108eb0:	6011      	str	r1, [r2, #0]
 8108eb2:	e7d7      	b.n	8108e64 <_free_r+0x28>
 8108eb4:	d902      	bls.n	8108ebc <_free_r+0x80>
 8108eb6:	230c      	movs	r3, #12
 8108eb8:	6003      	str	r3, [r0, #0]
 8108eba:	e7d3      	b.n	8108e64 <_free_r+0x28>
 8108ebc:	6825      	ldr	r5, [r4, #0]
 8108ebe:	1961      	adds	r1, r4, r5
 8108ec0:	428b      	cmp	r3, r1
 8108ec2:	bf04      	itt	eq
 8108ec4:	6819      	ldreq	r1, [r3, #0]
 8108ec6:	685b      	ldreq	r3, [r3, #4]
 8108ec8:	6063      	str	r3, [r4, #4]
 8108eca:	bf04      	itt	eq
 8108ecc:	1949      	addeq	r1, r1, r5
 8108ece:	6021      	streq	r1, [r4, #0]
 8108ed0:	6054      	str	r4, [r2, #4]
 8108ed2:	e7c7      	b.n	8108e64 <_free_r+0x28>
 8108ed4:	b003      	add	sp, #12
 8108ed6:	bd30      	pop	{r4, r5, pc}
 8108ed8:	10004b94 	.word	0x10004b94

08108edc <_malloc_r>:
 8108edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108ede:	1ccd      	adds	r5, r1, #3
 8108ee0:	f025 0503 	bic.w	r5, r5, #3
 8108ee4:	3508      	adds	r5, #8
 8108ee6:	2d0c      	cmp	r5, #12
 8108ee8:	bf38      	it	cc
 8108eea:	250c      	movcc	r5, #12
 8108eec:	2d00      	cmp	r5, #0
 8108eee:	4606      	mov	r6, r0
 8108ef0:	db01      	blt.n	8108ef6 <_malloc_r+0x1a>
 8108ef2:	42a9      	cmp	r1, r5
 8108ef4:	d903      	bls.n	8108efe <_malloc_r+0x22>
 8108ef6:	230c      	movs	r3, #12
 8108ef8:	6033      	str	r3, [r6, #0]
 8108efa:	2000      	movs	r0, #0
 8108efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108efe:	f000 fe39 	bl	8109b74 <__malloc_lock>
 8108f02:	4921      	ldr	r1, [pc, #132]	; (8108f88 <_malloc_r+0xac>)
 8108f04:	680a      	ldr	r2, [r1, #0]
 8108f06:	4614      	mov	r4, r2
 8108f08:	b99c      	cbnz	r4, 8108f32 <_malloc_r+0x56>
 8108f0a:	4f20      	ldr	r7, [pc, #128]	; (8108f8c <_malloc_r+0xb0>)
 8108f0c:	683b      	ldr	r3, [r7, #0]
 8108f0e:	b923      	cbnz	r3, 8108f1a <_malloc_r+0x3e>
 8108f10:	4621      	mov	r1, r4
 8108f12:	4630      	mov	r0, r6
 8108f14:	f000 fb94 	bl	8109640 <_sbrk_r>
 8108f18:	6038      	str	r0, [r7, #0]
 8108f1a:	4629      	mov	r1, r5
 8108f1c:	4630      	mov	r0, r6
 8108f1e:	f000 fb8f 	bl	8109640 <_sbrk_r>
 8108f22:	1c43      	adds	r3, r0, #1
 8108f24:	d123      	bne.n	8108f6e <_malloc_r+0x92>
 8108f26:	230c      	movs	r3, #12
 8108f28:	6033      	str	r3, [r6, #0]
 8108f2a:	4630      	mov	r0, r6
 8108f2c:	f000 fe28 	bl	8109b80 <__malloc_unlock>
 8108f30:	e7e3      	b.n	8108efa <_malloc_r+0x1e>
 8108f32:	6823      	ldr	r3, [r4, #0]
 8108f34:	1b5b      	subs	r3, r3, r5
 8108f36:	d417      	bmi.n	8108f68 <_malloc_r+0x8c>
 8108f38:	2b0b      	cmp	r3, #11
 8108f3a:	d903      	bls.n	8108f44 <_malloc_r+0x68>
 8108f3c:	6023      	str	r3, [r4, #0]
 8108f3e:	441c      	add	r4, r3
 8108f40:	6025      	str	r5, [r4, #0]
 8108f42:	e004      	b.n	8108f4e <_malloc_r+0x72>
 8108f44:	6863      	ldr	r3, [r4, #4]
 8108f46:	42a2      	cmp	r2, r4
 8108f48:	bf0c      	ite	eq
 8108f4a:	600b      	streq	r3, [r1, #0]
 8108f4c:	6053      	strne	r3, [r2, #4]
 8108f4e:	4630      	mov	r0, r6
 8108f50:	f000 fe16 	bl	8109b80 <__malloc_unlock>
 8108f54:	f104 000b 	add.w	r0, r4, #11
 8108f58:	1d23      	adds	r3, r4, #4
 8108f5a:	f020 0007 	bic.w	r0, r0, #7
 8108f5e:	1ac2      	subs	r2, r0, r3
 8108f60:	d0cc      	beq.n	8108efc <_malloc_r+0x20>
 8108f62:	1a1b      	subs	r3, r3, r0
 8108f64:	50a3      	str	r3, [r4, r2]
 8108f66:	e7c9      	b.n	8108efc <_malloc_r+0x20>
 8108f68:	4622      	mov	r2, r4
 8108f6a:	6864      	ldr	r4, [r4, #4]
 8108f6c:	e7cc      	b.n	8108f08 <_malloc_r+0x2c>
 8108f6e:	1cc4      	adds	r4, r0, #3
 8108f70:	f024 0403 	bic.w	r4, r4, #3
 8108f74:	42a0      	cmp	r0, r4
 8108f76:	d0e3      	beq.n	8108f40 <_malloc_r+0x64>
 8108f78:	1a21      	subs	r1, r4, r0
 8108f7a:	4630      	mov	r0, r6
 8108f7c:	f000 fb60 	bl	8109640 <_sbrk_r>
 8108f80:	3001      	adds	r0, #1
 8108f82:	d1dd      	bne.n	8108f40 <_malloc_r+0x64>
 8108f84:	e7cf      	b.n	8108f26 <_malloc_r+0x4a>
 8108f86:	bf00      	nop
 8108f88:	10004b94 	.word	0x10004b94
 8108f8c:	10004b98 	.word	0x10004b98

08108f90 <__sfputc_r>:
 8108f90:	6893      	ldr	r3, [r2, #8]
 8108f92:	3b01      	subs	r3, #1
 8108f94:	2b00      	cmp	r3, #0
 8108f96:	b410      	push	{r4}
 8108f98:	6093      	str	r3, [r2, #8]
 8108f9a:	da08      	bge.n	8108fae <__sfputc_r+0x1e>
 8108f9c:	6994      	ldr	r4, [r2, #24]
 8108f9e:	42a3      	cmp	r3, r4
 8108fa0:	db01      	blt.n	8108fa6 <__sfputc_r+0x16>
 8108fa2:	290a      	cmp	r1, #10
 8108fa4:	d103      	bne.n	8108fae <__sfputc_r+0x1e>
 8108fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108faa:	f000 bbc1 	b.w	8109730 <__swbuf_r>
 8108fae:	6813      	ldr	r3, [r2, #0]
 8108fb0:	1c58      	adds	r0, r3, #1
 8108fb2:	6010      	str	r0, [r2, #0]
 8108fb4:	7019      	strb	r1, [r3, #0]
 8108fb6:	4608      	mov	r0, r1
 8108fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108fbc:	4770      	bx	lr

08108fbe <__sfputs_r>:
 8108fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108fc0:	4606      	mov	r6, r0
 8108fc2:	460f      	mov	r7, r1
 8108fc4:	4614      	mov	r4, r2
 8108fc6:	18d5      	adds	r5, r2, r3
 8108fc8:	42ac      	cmp	r4, r5
 8108fca:	d101      	bne.n	8108fd0 <__sfputs_r+0x12>
 8108fcc:	2000      	movs	r0, #0
 8108fce:	e007      	b.n	8108fe0 <__sfputs_r+0x22>
 8108fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108fd4:	463a      	mov	r2, r7
 8108fd6:	4630      	mov	r0, r6
 8108fd8:	f7ff ffda 	bl	8108f90 <__sfputc_r>
 8108fdc:	1c43      	adds	r3, r0, #1
 8108fde:	d1f3      	bne.n	8108fc8 <__sfputs_r+0xa>
 8108fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08108fe4 <_vfiprintf_r>:
 8108fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108fe8:	460d      	mov	r5, r1
 8108fea:	b09d      	sub	sp, #116	; 0x74
 8108fec:	4614      	mov	r4, r2
 8108fee:	4698      	mov	r8, r3
 8108ff0:	4606      	mov	r6, r0
 8108ff2:	b118      	cbz	r0, 8108ffc <_vfiprintf_r+0x18>
 8108ff4:	6983      	ldr	r3, [r0, #24]
 8108ff6:	b90b      	cbnz	r3, 8108ffc <_vfiprintf_r+0x18>
 8108ff8:	f7ff fe22 	bl	8108c40 <__sinit>
 8108ffc:	4b89      	ldr	r3, [pc, #548]	; (8109224 <_vfiprintf_r+0x240>)
 8108ffe:	429d      	cmp	r5, r3
 8109000:	d11b      	bne.n	810903a <_vfiprintf_r+0x56>
 8109002:	6875      	ldr	r5, [r6, #4]
 8109004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8109006:	07d9      	lsls	r1, r3, #31
 8109008:	d405      	bmi.n	8109016 <_vfiprintf_r+0x32>
 810900a:	89ab      	ldrh	r3, [r5, #12]
 810900c:	059a      	lsls	r2, r3, #22
 810900e:	d402      	bmi.n	8109016 <_vfiprintf_r+0x32>
 8109010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8109012:	f7ff feea 	bl	8108dea <__retarget_lock_acquire_recursive>
 8109016:	89ab      	ldrh	r3, [r5, #12]
 8109018:	071b      	lsls	r3, r3, #28
 810901a:	d501      	bpl.n	8109020 <_vfiprintf_r+0x3c>
 810901c:	692b      	ldr	r3, [r5, #16]
 810901e:	b9eb      	cbnz	r3, 810905c <_vfiprintf_r+0x78>
 8109020:	4629      	mov	r1, r5
 8109022:	4630      	mov	r0, r6
 8109024:	f000 fbe8 	bl	81097f8 <__swsetup_r>
 8109028:	b1c0      	cbz	r0, 810905c <_vfiprintf_r+0x78>
 810902a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810902c:	07dc      	lsls	r4, r3, #31
 810902e:	d50e      	bpl.n	810904e <_vfiprintf_r+0x6a>
 8109030:	f04f 30ff 	mov.w	r0, #4294967295
 8109034:	b01d      	add	sp, #116	; 0x74
 8109036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810903a:	4b7b      	ldr	r3, [pc, #492]	; (8109228 <_vfiprintf_r+0x244>)
 810903c:	429d      	cmp	r5, r3
 810903e:	d101      	bne.n	8109044 <_vfiprintf_r+0x60>
 8109040:	68b5      	ldr	r5, [r6, #8]
 8109042:	e7df      	b.n	8109004 <_vfiprintf_r+0x20>
 8109044:	4b79      	ldr	r3, [pc, #484]	; (810922c <_vfiprintf_r+0x248>)
 8109046:	429d      	cmp	r5, r3
 8109048:	bf08      	it	eq
 810904a:	68f5      	ldreq	r5, [r6, #12]
 810904c:	e7da      	b.n	8109004 <_vfiprintf_r+0x20>
 810904e:	89ab      	ldrh	r3, [r5, #12]
 8109050:	0598      	lsls	r0, r3, #22
 8109052:	d4ed      	bmi.n	8109030 <_vfiprintf_r+0x4c>
 8109054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8109056:	f7ff fec9 	bl	8108dec <__retarget_lock_release_recursive>
 810905a:	e7e9      	b.n	8109030 <_vfiprintf_r+0x4c>
 810905c:	2300      	movs	r3, #0
 810905e:	9309      	str	r3, [sp, #36]	; 0x24
 8109060:	2320      	movs	r3, #32
 8109062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8109066:	f8cd 800c 	str.w	r8, [sp, #12]
 810906a:	2330      	movs	r3, #48	; 0x30
 810906c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8109230 <_vfiprintf_r+0x24c>
 8109070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8109074:	f04f 0901 	mov.w	r9, #1
 8109078:	4623      	mov	r3, r4
 810907a:	469a      	mov	sl, r3
 810907c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8109080:	b10a      	cbz	r2, 8109086 <_vfiprintf_r+0xa2>
 8109082:	2a25      	cmp	r2, #37	; 0x25
 8109084:	d1f9      	bne.n	810907a <_vfiprintf_r+0x96>
 8109086:	ebba 0b04 	subs.w	fp, sl, r4
 810908a:	d00b      	beq.n	81090a4 <_vfiprintf_r+0xc0>
 810908c:	465b      	mov	r3, fp
 810908e:	4622      	mov	r2, r4
 8109090:	4629      	mov	r1, r5
 8109092:	4630      	mov	r0, r6
 8109094:	f7ff ff93 	bl	8108fbe <__sfputs_r>
 8109098:	3001      	adds	r0, #1
 810909a:	f000 80aa 	beq.w	81091f2 <_vfiprintf_r+0x20e>
 810909e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81090a0:	445a      	add	r2, fp
 81090a2:	9209      	str	r2, [sp, #36]	; 0x24
 81090a4:	f89a 3000 	ldrb.w	r3, [sl]
 81090a8:	2b00      	cmp	r3, #0
 81090aa:	f000 80a2 	beq.w	81091f2 <_vfiprintf_r+0x20e>
 81090ae:	2300      	movs	r3, #0
 81090b0:	f04f 32ff 	mov.w	r2, #4294967295
 81090b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81090b8:	f10a 0a01 	add.w	sl, sl, #1
 81090bc:	9304      	str	r3, [sp, #16]
 81090be:	9307      	str	r3, [sp, #28]
 81090c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81090c4:	931a      	str	r3, [sp, #104]	; 0x68
 81090c6:	4654      	mov	r4, sl
 81090c8:	2205      	movs	r2, #5
 81090ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 81090ce:	4858      	ldr	r0, [pc, #352]	; (8109230 <_vfiprintf_r+0x24c>)
 81090d0:	f7f7 f916 	bl	8100300 <memchr>
 81090d4:	9a04      	ldr	r2, [sp, #16]
 81090d6:	b9d8      	cbnz	r0, 8109110 <_vfiprintf_r+0x12c>
 81090d8:	06d1      	lsls	r1, r2, #27
 81090da:	bf44      	itt	mi
 81090dc:	2320      	movmi	r3, #32
 81090de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81090e2:	0713      	lsls	r3, r2, #28
 81090e4:	bf44      	itt	mi
 81090e6:	232b      	movmi	r3, #43	; 0x2b
 81090e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81090ec:	f89a 3000 	ldrb.w	r3, [sl]
 81090f0:	2b2a      	cmp	r3, #42	; 0x2a
 81090f2:	d015      	beq.n	8109120 <_vfiprintf_r+0x13c>
 81090f4:	9a07      	ldr	r2, [sp, #28]
 81090f6:	4654      	mov	r4, sl
 81090f8:	2000      	movs	r0, #0
 81090fa:	f04f 0c0a 	mov.w	ip, #10
 81090fe:	4621      	mov	r1, r4
 8109100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8109104:	3b30      	subs	r3, #48	; 0x30
 8109106:	2b09      	cmp	r3, #9
 8109108:	d94e      	bls.n	81091a8 <_vfiprintf_r+0x1c4>
 810910a:	b1b0      	cbz	r0, 810913a <_vfiprintf_r+0x156>
 810910c:	9207      	str	r2, [sp, #28]
 810910e:	e014      	b.n	810913a <_vfiprintf_r+0x156>
 8109110:	eba0 0308 	sub.w	r3, r0, r8
 8109114:	fa09 f303 	lsl.w	r3, r9, r3
 8109118:	4313      	orrs	r3, r2
 810911a:	9304      	str	r3, [sp, #16]
 810911c:	46a2      	mov	sl, r4
 810911e:	e7d2      	b.n	81090c6 <_vfiprintf_r+0xe2>
 8109120:	9b03      	ldr	r3, [sp, #12]
 8109122:	1d19      	adds	r1, r3, #4
 8109124:	681b      	ldr	r3, [r3, #0]
 8109126:	9103      	str	r1, [sp, #12]
 8109128:	2b00      	cmp	r3, #0
 810912a:	bfbb      	ittet	lt
 810912c:	425b      	neglt	r3, r3
 810912e:	f042 0202 	orrlt.w	r2, r2, #2
 8109132:	9307      	strge	r3, [sp, #28]
 8109134:	9307      	strlt	r3, [sp, #28]
 8109136:	bfb8      	it	lt
 8109138:	9204      	strlt	r2, [sp, #16]
 810913a:	7823      	ldrb	r3, [r4, #0]
 810913c:	2b2e      	cmp	r3, #46	; 0x2e
 810913e:	d10c      	bne.n	810915a <_vfiprintf_r+0x176>
 8109140:	7863      	ldrb	r3, [r4, #1]
 8109142:	2b2a      	cmp	r3, #42	; 0x2a
 8109144:	d135      	bne.n	81091b2 <_vfiprintf_r+0x1ce>
 8109146:	9b03      	ldr	r3, [sp, #12]
 8109148:	1d1a      	adds	r2, r3, #4
 810914a:	681b      	ldr	r3, [r3, #0]
 810914c:	9203      	str	r2, [sp, #12]
 810914e:	2b00      	cmp	r3, #0
 8109150:	bfb8      	it	lt
 8109152:	f04f 33ff 	movlt.w	r3, #4294967295
 8109156:	3402      	adds	r4, #2
 8109158:	9305      	str	r3, [sp, #20]
 810915a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8109240 <_vfiprintf_r+0x25c>
 810915e:	7821      	ldrb	r1, [r4, #0]
 8109160:	2203      	movs	r2, #3
 8109162:	4650      	mov	r0, sl
 8109164:	f7f7 f8cc 	bl	8100300 <memchr>
 8109168:	b140      	cbz	r0, 810917c <_vfiprintf_r+0x198>
 810916a:	2340      	movs	r3, #64	; 0x40
 810916c:	eba0 000a 	sub.w	r0, r0, sl
 8109170:	fa03 f000 	lsl.w	r0, r3, r0
 8109174:	9b04      	ldr	r3, [sp, #16]
 8109176:	4303      	orrs	r3, r0
 8109178:	3401      	adds	r4, #1
 810917a:	9304      	str	r3, [sp, #16]
 810917c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8109180:	482c      	ldr	r0, [pc, #176]	; (8109234 <_vfiprintf_r+0x250>)
 8109182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8109186:	2206      	movs	r2, #6
 8109188:	f7f7 f8ba 	bl	8100300 <memchr>
 810918c:	2800      	cmp	r0, #0
 810918e:	d03f      	beq.n	8109210 <_vfiprintf_r+0x22c>
 8109190:	4b29      	ldr	r3, [pc, #164]	; (8109238 <_vfiprintf_r+0x254>)
 8109192:	bb1b      	cbnz	r3, 81091dc <_vfiprintf_r+0x1f8>
 8109194:	9b03      	ldr	r3, [sp, #12]
 8109196:	3307      	adds	r3, #7
 8109198:	f023 0307 	bic.w	r3, r3, #7
 810919c:	3308      	adds	r3, #8
 810919e:	9303      	str	r3, [sp, #12]
 81091a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81091a2:	443b      	add	r3, r7
 81091a4:	9309      	str	r3, [sp, #36]	; 0x24
 81091a6:	e767      	b.n	8109078 <_vfiprintf_r+0x94>
 81091a8:	fb0c 3202 	mla	r2, ip, r2, r3
 81091ac:	460c      	mov	r4, r1
 81091ae:	2001      	movs	r0, #1
 81091b0:	e7a5      	b.n	81090fe <_vfiprintf_r+0x11a>
 81091b2:	2300      	movs	r3, #0
 81091b4:	3401      	adds	r4, #1
 81091b6:	9305      	str	r3, [sp, #20]
 81091b8:	4619      	mov	r1, r3
 81091ba:	f04f 0c0a 	mov.w	ip, #10
 81091be:	4620      	mov	r0, r4
 81091c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81091c4:	3a30      	subs	r2, #48	; 0x30
 81091c6:	2a09      	cmp	r2, #9
 81091c8:	d903      	bls.n	81091d2 <_vfiprintf_r+0x1ee>
 81091ca:	2b00      	cmp	r3, #0
 81091cc:	d0c5      	beq.n	810915a <_vfiprintf_r+0x176>
 81091ce:	9105      	str	r1, [sp, #20]
 81091d0:	e7c3      	b.n	810915a <_vfiprintf_r+0x176>
 81091d2:	fb0c 2101 	mla	r1, ip, r1, r2
 81091d6:	4604      	mov	r4, r0
 81091d8:	2301      	movs	r3, #1
 81091da:	e7f0      	b.n	81091be <_vfiprintf_r+0x1da>
 81091dc:	ab03      	add	r3, sp, #12
 81091de:	9300      	str	r3, [sp, #0]
 81091e0:	462a      	mov	r2, r5
 81091e2:	4b16      	ldr	r3, [pc, #88]	; (810923c <_vfiprintf_r+0x258>)
 81091e4:	a904      	add	r1, sp, #16
 81091e6:	4630      	mov	r0, r6
 81091e8:	f3af 8000 	nop.w
 81091ec:	4607      	mov	r7, r0
 81091ee:	1c78      	adds	r0, r7, #1
 81091f0:	d1d6      	bne.n	81091a0 <_vfiprintf_r+0x1bc>
 81091f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81091f4:	07d9      	lsls	r1, r3, #31
 81091f6:	d405      	bmi.n	8109204 <_vfiprintf_r+0x220>
 81091f8:	89ab      	ldrh	r3, [r5, #12]
 81091fa:	059a      	lsls	r2, r3, #22
 81091fc:	d402      	bmi.n	8109204 <_vfiprintf_r+0x220>
 81091fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8109200:	f7ff fdf4 	bl	8108dec <__retarget_lock_release_recursive>
 8109204:	89ab      	ldrh	r3, [r5, #12]
 8109206:	065b      	lsls	r3, r3, #25
 8109208:	f53f af12 	bmi.w	8109030 <_vfiprintf_r+0x4c>
 810920c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810920e:	e711      	b.n	8109034 <_vfiprintf_r+0x50>
 8109210:	ab03      	add	r3, sp, #12
 8109212:	9300      	str	r3, [sp, #0]
 8109214:	462a      	mov	r2, r5
 8109216:	4b09      	ldr	r3, [pc, #36]	; (810923c <_vfiprintf_r+0x258>)
 8109218:	a904      	add	r1, sp, #16
 810921a:	4630      	mov	r0, r6
 810921c:	f000 f880 	bl	8109320 <_printf_i>
 8109220:	e7e4      	b.n	81091ec <_vfiprintf_r+0x208>
 8109222:	bf00      	nop
 8109224:	08109f9c 	.word	0x08109f9c
 8109228:	08109fbc 	.word	0x08109fbc
 810922c:	08109f7c 	.word	0x08109f7c
 8109230:	08109fe0 	.word	0x08109fe0
 8109234:	08109fea 	.word	0x08109fea
 8109238:	00000000 	.word	0x00000000
 810923c:	08108fbf 	.word	0x08108fbf
 8109240:	08109fe6 	.word	0x08109fe6

08109244 <_printf_common>:
 8109244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109248:	4616      	mov	r6, r2
 810924a:	4699      	mov	r9, r3
 810924c:	688a      	ldr	r2, [r1, #8]
 810924e:	690b      	ldr	r3, [r1, #16]
 8109250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8109254:	4293      	cmp	r3, r2
 8109256:	bfb8      	it	lt
 8109258:	4613      	movlt	r3, r2
 810925a:	6033      	str	r3, [r6, #0]
 810925c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8109260:	4607      	mov	r7, r0
 8109262:	460c      	mov	r4, r1
 8109264:	b10a      	cbz	r2, 810926a <_printf_common+0x26>
 8109266:	3301      	adds	r3, #1
 8109268:	6033      	str	r3, [r6, #0]
 810926a:	6823      	ldr	r3, [r4, #0]
 810926c:	0699      	lsls	r1, r3, #26
 810926e:	bf42      	ittt	mi
 8109270:	6833      	ldrmi	r3, [r6, #0]
 8109272:	3302      	addmi	r3, #2
 8109274:	6033      	strmi	r3, [r6, #0]
 8109276:	6825      	ldr	r5, [r4, #0]
 8109278:	f015 0506 	ands.w	r5, r5, #6
 810927c:	d106      	bne.n	810928c <_printf_common+0x48>
 810927e:	f104 0a19 	add.w	sl, r4, #25
 8109282:	68e3      	ldr	r3, [r4, #12]
 8109284:	6832      	ldr	r2, [r6, #0]
 8109286:	1a9b      	subs	r3, r3, r2
 8109288:	42ab      	cmp	r3, r5
 810928a:	dc26      	bgt.n	81092da <_printf_common+0x96>
 810928c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8109290:	1e13      	subs	r3, r2, #0
 8109292:	6822      	ldr	r2, [r4, #0]
 8109294:	bf18      	it	ne
 8109296:	2301      	movne	r3, #1
 8109298:	0692      	lsls	r2, r2, #26
 810929a:	d42b      	bmi.n	81092f4 <_printf_common+0xb0>
 810929c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81092a0:	4649      	mov	r1, r9
 81092a2:	4638      	mov	r0, r7
 81092a4:	47c0      	blx	r8
 81092a6:	3001      	adds	r0, #1
 81092a8:	d01e      	beq.n	81092e8 <_printf_common+0xa4>
 81092aa:	6823      	ldr	r3, [r4, #0]
 81092ac:	68e5      	ldr	r5, [r4, #12]
 81092ae:	6832      	ldr	r2, [r6, #0]
 81092b0:	f003 0306 	and.w	r3, r3, #6
 81092b4:	2b04      	cmp	r3, #4
 81092b6:	bf08      	it	eq
 81092b8:	1aad      	subeq	r5, r5, r2
 81092ba:	68a3      	ldr	r3, [r4, #8]
 81092bc:	6922      	ldr	r2, [r4, #16]
 81092be:	bf0c      	ite	eq
 81092c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81092c4:	2500      	movne	r5, #0
 81092c6:	4293      	cmp	r3, r2
 81092c8:	bfc4      	itt	gt
 81092ca:	1a9b      	subgt	r3, r3, r2
 81092cc:	18ed      	addgt	r5, r5, r3
 81092ce:	2600      	movs	r6, #0
 81092d0:	341a      	adds	r4, #26
 81092d2:	42b5      	cmp	r5, r6
 81092d4:	d11a      	bne.n	810930c <_printf_common+0xc8>
 81092d6:	2000      	movs	r0, #0
 81092d8:	e008      	b.n	81092ec <_printf_common+0xa8>
 81092da:	2301      	movs	r3, #1
 81092dc:	4652      	mov	r2, sl
 81092de:	4649      	mov	r1, r9
 81092e0:	4638      	mov	r0, r7
 81092e2:	47c0      	blx	r8
 81092e4:	3001      	adds	r0, #1
 81092e6:	d103      	bne.n	81092f0 <_printf_common+0xac>
 81092e8:	f04f 30ff 	mov.w	r0, #4294967295
 81092ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81092f0:	3501      	adds	r5, #1
 81092f2:	e7c6      	b.n	8109282 <_printf_common+0x3e>
 81092f4:	18e1      	adds	r1, r4, r3
 81092f6:	1c5a      	adds	r2, r3, #1
 81092f8:	2030      	movs	r0, #48	; 0x30
 81092fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81092fe:	4422      	add	r2, r4
 8109300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8109304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8109308:	3302      	adds	r3, #2
 810930a:	e7c7      	b.n	810929c <_printf_common+0x58>
 810930c:	2301      	movs	r3, #1
 810930e:	4622      	mov	r2, r4
 8109310:	4649      	mov	r1, r9
 8109312:	4638      	mov	r0, r7
 8109314:	47c0      	blx	r8
 8109316:	3001      	adds	r0, #1
 8109318:	d0e6      	beq.n	81092e8 <_printf_common+0xa4>
 810931a:	3601      	adds	r6, #1
 810931c:	e7d9      	b.n	81092d2 <_printf_common+0x8e>
	...

08109320 <_printf_i>:
 8109320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109324:	460c      	mov	r4, r1
 8109326:	4691      	mov	r9, r2
 8109328:	7e27      	ldrb	r7, [r4, #24]
 810932a:	990c      	ldr	r1, [sp, #48]	; 0x30
 810932c:	2f78      	cmp	r7, #120	; 0x78
 810932e:	4680      	mov	r8, r0
 8109330:	469a      	mov	sl, r3
 8109332:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8109336:	d807      	bhi.n	8109348 <_printf_i+0x28>
 8109338:	2f62      	cmp	r7, #98	; 0x62
 810933a:	d80a      	bhi.n	8109352 <_printf_i+0x32>
 810933c:	2f00      	cmp	r7, #0
 810933e:	f000 80d8 	beq.w	81094f2 <_printf_i+0x1d2>
 8109342:	2f58      	cmp	r7, #88	; 0x58
 8109344:	f000 80a3 	beq.w	810948e <_printf_i+0x16e>
 8109348:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810934c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8109350:	e03a      	b.n	81093c8 <_printf_i+0xa8>
 8109352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8109356:	2b15      	cmp	r3, #21
 8109358:	d8f6      	bhi.n	8109348 <_printf_i+0x28>
 810935a:	a001      	add	r0, pc, #4	; (adr r0, 8109360 <_printf_i+0x40>)
 810935c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8109360:	081093b9 	.word	0x081093b9
 8109364:	081093cd 	.word	0x081093cd
 8109368:	08109349 	.word	0x08109349
 810936c:	08109349 	.word	0x08109349
 8109370:	08109349 	.word	0x08109349
 8109374:	08109349 	.word	0x08109349
 8109378:	081093cd 	.word	0x081093cd
 810937c:	08109349 	.word	0x08109349
 8109380:	08109349 	.word	0x08109349
 8109384:	08109349 	.word	0x08109349
 8109388:	08109349 	.word	0x08109349
 810938c:	081094d9 	.word	0x081094d9
 8109390:	081093fd 	.word	0x081093fd
 8109394:	081094bb 	.word	0x081094bb
 8109398:	08109349 	.word	0x08109349
 810939c:	08109349 	.word	0x08109349
 81093a0:	081094fb 	.word	0x081094fb
 81093a4:	08109349 	.word	0x08109349
 81093a8:	081093fd 	.word	0x081093fd
 81093ac:	08109349 	.word	0x08109349
 81093b0:	08109349 	.word	0x08109349
 81093b4:	081094c3 	.word	0x081094c3
 81093b8:	680b      	ldr	r3, [r1, #0]
 81093ba:	1d1a      	adds	r2, r3, #4
 81093bc:	681b      	ldr	r3, [r3, #0]
 81093be:	600a      	str	r2, [r1, #0]
 81093c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81093c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81093c8:	2301      	movs	r3, #1
 81093ca:	e0a3      	b.n	8109514 <_printf_i+0x1f4>
 81093cc:	6825      	ldr	r5, [r4, #0]
 81093ce:	6808      	ldr	r0, [r1, #0]
 81093d0:	062e      	lsls	r6, r5, #24
 81093d2:	f100 0304 	add.w	r3, r0, #4
 81093d6:	d50a      	bpl.n	81093ee <_printf_i+0xce>
 81093d8:	6805      	ldr	r5, [r0, #0]
 81093da:	600b      	str	r3, [r1, #0]
 81093dc:	2d00      	cmp	r5, #0
 81093de:	da03      	bge.n	81093e8 <_printf_i+0xc8>
 81093e0:	232d      	movs	r3, #45	; 0x2d
 81093e2:	426d      	negs	r5, r5
 81093e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81093e8:	485e      	ldr	r0, [pc, #376]	; (8109564 <_printf_i+0x244>)
 81093ea:	230a      	movs	r3, #10
 81093ec:	e019      	b.n	8109422 <_printf_i+0x102>
 81093ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 81093f2:	6805      	ldr	r5, [r0, #0]
 81093f4:	600b      	str	r3, [r1, #0]
 81093f6:	bf18      	it	ne
 81093f8:	b22d      	sxthne	r5, r5
 81093fa:	e7ef      	b.n	81093dc <_printf_i+0xbc>
 81093fc:	680b      	ldr	r3, [r1, #0]
 81093fe:	6825      	ldr	r5, [r4, #0]
 8109400:	1d18      	adds	r0, r3, #4
 8109402:	6008      	str	r0, [r1, #0]
 8109404:	0628      	lsls	r0, r5, #24
 8109406:	d501      	bpl.n	810940c <_printf_i+0xec>
 8109408:	681d      	ldr	r5, [r3, #0]
 810940a:	e002      	b.n	8109412 <_printf_i+0xf2>
 810940c:	0669      	lsls	r1, r5, #25
 810940e:	d5fb      	bpl.n	8109408 <_printf_i+0xe8>
 8109410:	881d      	ldrh	r5, [r3, #0]
 8109412:	4854      	ldr	r0, [pc, #336]	; (8109564 <_printf_i+0x244>)
 8109414:	2f6f      	cmp	r7, #111	; 0x6f
 8109416:	bf0c      	ite	eq
 8109418:	2308      	moveq	r3, #8
 810941a:	230a      	movne	r3, #10
 810941c:	2100      	movs	r1, #0
 810941e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8109422:	6866      	ldr	r6, [r4, #4]
 8109424:	60a6      	str	r6, [r4, #8]
 8109426:	2e00      	cmp	r6, #0
 8109428:	bfa2      	ittt	ge
 810942a:	6821      	ldrge	r1, [r4, #0]
 810942c:	f021 0104 	bicge.w	r1, r1, #4
 8109430:	6021      	strge	r1, [r4, #0]
 8109432:	b90d      	cbnz	r5, 8109438 <_printf_i+0x118>
 8109434:	2e00      	cmp	r6, #0
 8109436:	d04d      	beq.n	81094d4 <_printf_i+0x1b4>
 8109438:	4616      	mov	r6, r2
 810943a:	fbb5 f1f3 	udiv	r1, r5, r3
 810943e:	fb03 5711 	mls	r7, r3, r1, r5
 8109442:	5dc7      	ldrb	r7, [r0, r7]
 8109444:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8109448:	462f      	mov	r7, r5
 810944a:	42bb      	cmp	r3, r7
 810944c:	460d      	mov	r5, r1
 810944e:	d9f4      	bls.n	810943a <_printf_i+0x11a>
 8109450:	2b08      	cmp	r3, #8
 8109452:	d10b      	bne.n	810946c <_printf_i+0x14c>
 8109454:	6823      	ldr	r3, [r4, #0]
 8109456:	07df      	lsls	r7, r3, #31
 8109458:	d508      	bpl.n	810946c <_printf_i+0x14c>
 810945a:	6923      	ldr	r3, [r4, #16]
 810945c:	6861      	ldr	r1, [r4, #4]
 810945e:	4299      	cmp	r1, r3
 8109460:	bfde      	ittt	le
 8109462:	2330      	movle	r3, #48	; 0x30
 8109464:	f806 3c01 	strble.w	r3, [r6, #-1]
 8109468:	f106 36ff 	addle.w	r6, r6, #4294967295
 810946c:	1b92      	subs	r2, r2, r6
 810946e:	6122      	str	r2, [r4, #16]
 8109470:	f8cd a000 	str.w	sl, [sp]
 8109474:	464b      	mov	r3, r9
 8109476:	aa03      	add	r2, sp, #12
 8109478:	4621      	mov	r1, r4
 810947a:	4640      	mov	r0, r8
 810947c:	f7ff fee2 	bl	8109244 <_printf_common>
 8109480:	3001      	adds	r0, #1
 8109482:	d14c      	bne.n	810951e <_printf_i+0x1fe>
 8109484:	f04f 30ff 	mov.w	r0, #4294967295
 8109488:	b004      	add	sp, #16
 810948a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810948e:	4835      	ldr	r0, [pc, #212]	; (8109564 <_printf_i+0x244>)
 8109490:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8109494:	6823      	ldr	r3, [r4, #0]
 8109496:	680e      	ldr	r6, [r1, #0]
 8109498:	061f      	lsls	r7, r3, #24
 810949a:	f856 5b04 	ldr.w	r5, [r6], #4
 810949e:	600e      	str	r6, [r1, #0]
 81094a0:	d514      	bpl.n	81094cc <_printf_i+0x1ac>
 81094a2:	07d9      	lsls	r1, r3, #31
 81094a4:	bf44      	itt	mi
 81094a6:	f043 0320 	orrmi.w	r3, r3, #32
 81094aa:	6023      	strmi	r3, [r4, #0]
 81094ac:	b91d      	cbnz	r5, 81094b6 <_printf_i+0x196>
 81094ae:	6823      	ldr	r3, [r4, #0]
 81094b0:	f023 0320 	bic.w	r3, r3, #32
 81094b4:	6023      	str	r3, [r4, #0]
 81094b6:	2310      	movs	r3, #16
 81094b8:	e7b0      	b.n	810941c <_printf_i+0xfc>
 81094ba:	6823      	ldr	r3, [r4, #0]
 81094bc:	f043 0320 	orr.w	r3, r3, #32
 81094c0:	6023      	str	r3, [r4, #0]
 81094c2:	2378      	movs	r3, #120	; 0x78
 81094c4:	4828      	ldr	r0, [pc, #160]	; (8109568 <_printf_i+0x248>)
 81094c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81094ca:	e7e3      	b.n	8109494 <_printf_i+0x174>
 81094cc:	065e      	lsls	r6, r3, #25
 81094ce:	bf48      	it	mi
 81094d0:	b2ad      	uxthmi	r5, r5
 81094d2:	e7e6      	b.n	81094a2 <_printf_i+0x182>
 81094d4:	4616      	mov	r6, r2
 81094d6:	e7bb      	b.n	8109450 <_printf_i+0x130>
 81094d8:	680b      	ldr	r3, [r1, #0]
 81094da:	6826      	ldr	r6, [r4, #0]
 81094dc:	6960      	ldr	r0, [r4, #20]
 81094de:	1d1d      	adds	r5, r3, #4
 81094e0:	600d      	str	r5, [r1, #0]
 81094e2:	0635      	lsls	r5, r6, #24
 81094e4:	681b      	ldr	r3, [r3, #0]
 81094e6:	d501      	bpl.n	81094ec <_printf_i+0x1cc>
 81094e8:	6018      	str	r0, [r3, #0]
 81094ea:	e002      	b.n	81094f2 <_printf_i+0x1d2>
 81094ec:	0671      	lsls	r1, r6, #25
 81094ee:	d5fb      	bpl.n	81094e8 <_printf_i+0x1c8>
 81094f0:	8018      	strh	r0, [r3, #0]
 81094f2:	2300      	movs	r3, #0
 81094f4:	6123      	str	r3, [r4, #16]
 81094f6:	4616      	mov	r6, r2
 81094f8:	e7ba      	b.n	8109470 <_printf_i+0x150>
 81094fa:	680b      	ldr	r3, [r1, #0]
 81094fc:	1d1a      	adds	r2, r3, #4
 81094fe:	600a      	str	r2, [r1, #0]
 8109500:	681e      	ldr	r6, [r3, #0]
 8109502:	6862      	ldr	r2, [r4, #4]
 8109504:	2100      	movs	r1, #0
 8109506:	4630      	mov	r0, r6
 8109508:	f7f6 fefa 	bl	8100300 <memchr>
 810950c:	b108      	cbz	r0, 8109512 <_printf_i+0x1f2>
 810950e:	1b80      	subs	r0, r0, r6
 8109510:	6060      	str	r0, [r4, #4]
 8109512:	6863      	ldr	r3, [r4, #4]
 8109514:	6123      	str	r3, [r4, #16]
 8109516:	2300      	movs	r3, #0
 8109518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810951c:	e7a8      	b.n	8109470 <_printf_i+0x150>
 810951e:	6923      	ldr	r3, [r4, #16]
 8109520:	4632      	mov	r2, r6
 8109522:	4649      	mov	r1, r9
 8109524:	4640      	mov	r0, r8
 8109526:	47d0      	blx	sl
 8109528:	3001      	adds	r0, #1
 810952a:	d0ab      	beq.n	8109484 <_printf_i+0x164>
 810952c:	6823      	ldr	r3, [r4, #0]
 810952e:	079b      	lsls	r3, r3, #30
 8109530:	d413      	bmi.n	810955a <_printf_i+0x23a>
 8109532:	68e0      	ldr	r0, [r4, #12]
 8109534:	9b03      	ldr	r3, [sp, #12]
 8109536:	4298      	cmp	r0, r3
 8109538:	bfb8      	it	lt
 810953a:	4618      	movlt	r0, r3
 810953c:	e7a4      	b.n	8109488 <_printf_i+0x168>
 810953e:	2301      	movs	r3, #1
 8109540:	4632      	mov	r2, r6
 8109542:	4649      	mov	r1, r9
 8109544:	4640      	mov	r0, r8
 8109546:	47d0      	blx	sl
 8109548:	3001      	adds	r0, #1
 810954a:	d09b      	beq.n	8109484 <_printf_i+0x164>
 810954c:	3501      	adds	r5, #1
 810954e:	68e3      	ldr	r3, [r4, #12]
 8109550:	9903      	ldr	r1, [sp, #12]
 8109552:	1a5b      	subs	r3, r3, r1
 8109554:	42ab      	cmp	r3, r5
 8109556:	dcf2      	bgt.n	810953e <_printf_i+0x21e>
 8109558:	e7eb      	b.n	8109532 <_printf_i+0x212>
 810955a:	2500      	movs	r5, #0
 810955c:	f104 0619 	add.w	r6, r4, #25
 8109560:	e7f5      	b.n	810954e <_printf_i+0x22e>
 8109562:	bf00      	nop
 8109564:	08109ff1 	.word	0x08109ff1
 8109568:	0810a002 	.word	0x0810a002

0810956c <cleanup_glue>:
 810956c:	b538      	push	{r3, r4, r5, lr}
 810956e:	460c      	mov	r4, r1
 8109570:	6809      	ldr	r1, [r1, #0]
 8109572:	4605      	mov	r5, r0
 8109574:	b109      	cbz	r1, 810957a <cleanup_glue+0xe>
 8109576:	f7ff fff9 	bl	810956c <cleanup_glue>
 810957a:	4621      	mov	r1, r4
 810957c:	4628      	mov	r0, r5
 810957e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8109582:	f7ff bc5b 	b.w	8108e3c <_free_r>
	...

08109588 <_reclaim_reent>:
 8109588:	4b2c      	ldr	r3, [pc, #176]	; (810963c <_reclaim_reent+0xb4>)
 810958a:	681b      	ldr	r3, [r3, #0]
 810958c:	4283      	cmp	r3, r0
 810958e:	b570      	push	{r4, r5, r6, lr}
 8109590:	4604      	mov	r4, r0
 8109592:	d051      	beq.n	8109638 <_reclaim_reent+0xb0>
 8109594:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8109596:	b143      	cbz	r3, 81095aa <_reclaim_reent+0x22>
 8109598:	68db      	ldr	r3, [r3, #12]
 810959a:	2b00      	cmp	r3, #0
 810959c:	d14a      	bne.n	8109634 <_reclaim_reent+0xac>
 810959e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81095a0:	6819      	ldr	r1, [r3, #0]
 81095a2:	b111      	cbz	r1, 81095aa <_reclaim_reent+0x22>
 81095a4:	4620      	mov	r0, r4
 81095a6:	f7ff fc49 	bl	8108e3c <_free_r>
 81095aa:	6961      	ldr	r1, [r4, #20]
 81095ac:	b111      	cbz	r1, 81095b4 <_reclaim_reent+0x2c>
 81095ae:	4620      	mov	r0, r4
 81095b0:	f7ff fc44 	bl	8108e3c <_free_r>
 81095b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 81095b6:	b111      	cbz	r1, 81095be <_reclaim_reent+0x36>
 81095b8:	4620      	mov	r0, r4
 81095ba:	f7ff fc3f 	bl	8108e3c <_free_r>
 81095be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 81095c0:	b111      	cbz	r1, 81095c8 <_reclaim_reent+0x40>
 81095c2:	4620      	mov	r0, r4
 81095c4:	f7ff fc3a 	bl	8108e3c <_free_r>
 81095c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 81095ca:	b111      	cbz	r1, 81095d2 <_reclaim_reent+0x4a>
 81095cc:	4620      	mov	r0, r4
 81095ce:	f7ff fc35 	bl	8108e3c <_free_r>
 81095d2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 81095d4:	b111      	cbz	r1, 81095dc <_reclaim_reent+0x54>
 81095d6:	4620      	mov	r0, r4
 81095d8:	f7ff fc30 	bl	8108e3c <_free_r>
 81095dc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 81095de:	b111      	cbz	r1, 81095e6 <_reclaim_reent+0x5e>
 81095e0:	4620      	mov	r0, r4
 81095e2:	f7ff fc2b 	bl	8108e3c <_free_r>
 81095e6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 81095e8:	b111      	cbz	r1, 81095f0 <_reclaim_reent+0x68>
 81095ea:	4620      	mov	r0, r4
 81095ec:	f7ff fc26 	bl	8108e3c <_free_r>
 81095f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81095f2:	b111      	cbz	r1, 81095fa <_reclaim_reent+0x72>
 81095f4:	4620      	mov	r0, r4
 81095f6:	f7ff fc21 	bl	8108e3c <_free_r>
 81095fa:	69a3      	ldr	r3, [r4, #24]
 81095fc:	b1e3      	cbz	r3, 8109638 <_reclaim_reent+0xb0>
 81095fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8109600:	4620      	mov	r0, r4
 8109602:	4798      	blx	r3
 8109604:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8109606:	b1b9      	cbz	r1, 8109638 <_reclaim_reent+0xb0>
 8109608:	4620      	mov	r0, r4
 810960a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 810960e:	f7ff bfad 	b.w	810956c <cleanup_glue>
 8109612:	5949      	ldr	r1, [r1, r5]
 8109614:	b941      	cbnz	r1, 8109628 <_reclaim_reent+0xa0>
 8109616:	3504      	adds	r5, #4
 8109618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810961a:	2d80      	cmp	r5, #128	; 0x80
 810961c:	68d9      	ldr	r1, [r3, #12]
 810961e:	d1f8      	bne.n	8109612 <_reclaim_reent+0x8a>
 8109620:	4620      	mov	r0, r4
 8109622:	f7ff fc0b 	bl	8108e3c <_free_r>
 8109626:	e7ba      	b.n	810959e <_reclaim_reent+0x16>
 8109628:	680e      	ldr	r6, [r1, #0]
 810962a:	4620      	mov	r0, r4
 810962c:	f7ff fc06 	bl	8108e3c <_free_r>
 8109630:	4631      	mov	r1, r6
 8109632:	e7ef      	b.n	8109614 <_reclaim_reent+0x8c>
 8109634:	2500      	movs	r5, #0
 8109636:	e7ef      	b.n	8109618 <_reclaim_reent+0x90>
 8109638:	bd70      	pop	{r4, r5, r6, pc}
 810963a:	bf00      	nop
 810963c:	100000bc 	.word	0x100000bc

08109640 <_sbrk_r>:
 8109640:	b538      	push	{r3, r4, r5, lr}
 8109642:	4d06      	ldr	r5, [pc, #24]	; (810965c <_sbrk_r+0x1c>)
 8109644:	2300      	movs	r3, #0
 8109646:	4604      	mov	r4, r0
 8109648:	4608      	mov	r0, r1
 810964a:	602b      	str	r3, [r5, #0]
 810964c:	f7f7 fa72 	bl	8100b34 <_sbrk>
 8109650:	1c43      	adds	r3, r0, #1
 8109652:	d102      	bne.n	810965a <_sbrk_r+0x1a>
 8109654:	682b      	ldr	r3, [r5, #0]
 8109656:	b103      	cbz	r3, 810965a <_sbrk_r+0x1a>
 8109658:	6023      	str	r3, [r4, #0]
 810965a:	bd38      	pop	{r3, r4, r5, pc}
 810965c:	10004d40 	.word	0x10004d40

08109660 <__sread>:
 8109660:	b510      	push	{r4, lr}
 8109662:	460c      	mov	r4, r1
 8109664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109668:	f000 fa90 	bl	8109b8c <_read_r>
 810966c:	2800      	cmp	r0, #0
 810966e:	bfab      	itete	ge
 8109670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8109672:	89a3      	ldrhlt	r3, [r4, #12]
 8109674:	181b      	addge	r3, r3, r0
 8109676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810967a:	bfac      	ite	ge
 810967c:	6563      	strge	r3, [r4, #84]	; 0x54
 810967e:	81a3      	strhlt	r3, [r4, #12]
 8109680:	bd10      	pop	{r4, pc}

08109682 <__swrite>:
 8109682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109686:	461f      	mov	r7, r3
 8109688:	898b      	ldrh	r3, [r1, #12]
 810968a:	05db      	lsls	r3, r3, #23
 810968c:	4605      	mov	r5, r0
 810968e:	460c      	mov	r4, r1
 8109690:	4616      	mov	r6, r2
 8109692:	d505      	bpl.n	81096a0 <__swrite+0x1e>
 8109694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109698:	2302      	movs	r3, #2
 810969a:	2200      	movs	r2, #0
 810969c:	f000 f9f4 	bl	8109a88 <_lseek_r>
 81096a0:	89a3      	ldrh	r3, [r4, #12]
 81096a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81096a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81096aa:	81a3      	strh	r3, [r4, #12]
 81096ac:	4632      	mov	r2, r6
 81096ae:	463b      	mov	r3, r7
 81096b0:	4628      	mov	r0, r5
 81096b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81096b6:	f000 b88d 	b.w	81097d4 <_write_r>

081096ba <__sseek>:
 81096ba:	b510      	push	{r4, lr}
 81096bc:	460c      	mov	r4, r1
 81096be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81096c2:	f000 f9e1 	bl	8109a88 <_lseek_r>
 81096c6:	1c43      	adds	r3, r0, #1
 81096c8:	89a3      	ldrh	r3, [r4, #12]
 81096ca:	bf15      	itete	ne
 81096cc:	6560      	strne	r0, [r4, #84]	; 0x54
 81096ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 81096d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 81096d6:	81a3      	strheq	r3, [r4, #12]
 81096d8:	bf18      	it	ne
 81096da:	81a3      	strhne	r3, [r4, #12]
 81096dc:	bd10      	pop	{r4, pc}

081096de <__sclose>:
 81096de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81096e2:	f000 b8ff 	b.w	81098e4 <_close_r>

081096e6 <strncmp>:
 81096e6:	b510      	push	{r4, lr}
 81096e8:	b16a      	cbz	r2, 8109706 <strncmp+0x20>
 81096ea:	3901      	subs	r1, #1
 81096ec:	1884      	adds	r4, r0, r2
 81096ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81096f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 81096f6:	4293      	cmp	r3, r2
 81096f8:	d103      	bne.n	8109702 <strncmp+0x1c>
 81096fa:	42a0      	cmp	r0, r4
 81096fc:	d001      	beq.n	8109702 <strncmp+0x1c>
 81096fe:	2b00      	cmp	r3, #0
 8109700:	d1f5      	bne.n	81096ee <strncmp+0x8>
 8109702:	1a98      	subs	r0, r3, r2
 8109704:	bd10      	pop	{r4, pc}
 8109706:	4610      	mov	r0, r2
 8109708:	e7fc      	b.n	8109704 <strncmp+0x1e>

0810970a <strncpy>:
 810970a:	b510      	push	{r4, lr}
 810970c:	3901      	subs	r1, #1
 810970e:	4603      	mov	r3, r0
 8109710:	b132      	cbz	r2, 8109720 <strncpy+0x16>
 8109712:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8109716:	f803 4b01 	strb.w	r4, [r3], #1
 810971a:	3a01      	subs	r2, #1
 810971c:	2c00      	cmp	r4, #0
 810971e:	d1f7      	bne.n	8109710 <strncpy+0x6>
 8109720:	441a      	add	r2, r3
 8109722:	2100      	movs	r1, #0
 8109724:	4293      	cmp	r3, r2
 8109726:	d100      	bne.n	810972a <strncpy+0x20>
 8109728:	bd10      	pop	{r4, pc}
 810972a:	f803 1b01 	strb.w	r1, [r3], #1
 810972e:	e7f9      	b.n	8109724 <strncpy+0x1a>

08109730 <__swbuf_r>:
 8109730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109732:	460e      	mov	r6, r1
 8109734:	4614      	mov	r4, r2
 8109736:	4605      	mov	r5, r0
 8109738:	b118      	cbz	r0, 8109742 <__swbuf_r+0x12>
 810973a:	6983      	ldr	r3, [r0, #24]
 810973c:	b90b      	cbnz	r3, 8109742 <__swbuf_r+0x12>
 810973e:	f7ff fa7f 	bl	8108c40 <__sinit>
 8109742:	4b21      	ldr	r3, [pc, #132]	; (81097c8 <__swbuf_r+0x98>)
 8109744:	429c      	cmp	r4, r3
 8109746:	d12b      	bne.n	81097a0 <__swbuf_r+0x70>
 8109748:	686c      	ldr	r4, [r5, #4]
 810974a:	69a3      	ldr	r3, [r4, #24]
 810974c:	60a3      	str	r3, [r4, #8]
 810974e:	89a3      	ldrh	r3, [r4, #12]
 8109750:	071a      	lsls	r2, r3, #28
 8109752:	d52f      	bpl.n	81097b4 <__swbuf_r+0x84>
 8109754:	6923      	ldr	r3, [r4, #16]
 8109756:	b36b      	cbz	r3, 81097b4 <__swbuf_r+0x84>
 8109758:	6923      	ldr	r3, [r4, #16]
 810975a:	6820      	ldr	r0, [r4, #0]
 810975c:	1ac0      	subs	r0, r0, r3
 810975e:	6963      	ldr	r3, [r4, #20]
 8109760:	b2f6      	uxtb	r6, r6
 8109762:	4283      	cmp	r3, r0
 8109764:	4637      	mov	r7, r6
 8109766:	dc04      	bgt.n	8109772 <__swbuf_r+0x42>
 8109768:	4621      	mov	r1, r4
 810976a:	4628      	mov	r0, r5
 810976c:	f000 f950 	bl	8109a10 <_fflush_r>
 8109770:	bb30      	cbnz	r0, 81097c0 <__swbuf_r+0x90>
 8109772:	68a3      	ldr	r3, [r4, #8]
 8109774:	3b01      	subs	r3, #1
 8109776:	60a3      	str	r3, [r4, #8]
 8109778:	6823      	ldr	r3, [r4, #0]
 810977a:	1c5a      	adds	r2, r3, #1
 810977c:	6022      	str	r2, [r4, #0]
 810977e:	701e      	strb	r6, [r3, #0]
 8109780:	6963      	ldr	r3, [r4, #20]
 8109782:	3001      	adds	r0, #1
 8109784:	4283      	cmp	r3, r0
 8109786:	d004      	beq.n	8109792 <__swbuf_r+0x62>
 8109788:	89a3      	ldrh	r3, [r4, #12]
 810978a:	07db      	lsls	r3, r3, #31
 810978c:	d506      	bpl.n	810979c <__swbuf_r+0x6c>
 810978e:	2e0a      	cmp	r6, #10
 8109790:	d104      	bne.n	810979c <__swbuf_r+0x6c>
 8109792:	4621      	mov	r1, r4
 8109794:	4628      	mov	r0, r5
 8109796:	f000 f93b 	bl	8109a10 <_fflush_r>
 810979a:	b988      	cbnz	r0, 81097c0 <__swbuf_r+0x90>
 810979c:	4638      	mov	r0, r7
 810979e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81097a0:	4b0a      	ldr	r3, [pc, #40]	; (81097cc <__swbuf_r+0x9c>)
 81097a2:	429c      	cmp	r4, r3
 81097a4:	d101      	bne.n	81097aa <__swbuf_r+0x7a>
 81097a6:	68ac      	ldr	r4, [r5, #8]
 81097a8:	e7cf      	b.n	810974a <__swbuf_r+0x1a>
 81097aa:	4b09      	ldr	r3, [pc, #36]	; (81097d0 <__swbuf_r+0xa0>)
 81097ac:	429c      	cmp	r4, r3
 81097ae:	bf08      	it	eq
 81097b0:	68ec      	ldreq	r4, [r5, #12]
 81097b2:	e7ca      	b.n	810974a <__swbuf_r+0x1a>
 81097b4:	4621      	mov	r1, r4
 81097b6:	4628      	mov	r0, r5
 81097b8:	f000 f81e 	bl	81097f8 <__swsetup_r>
 81097bc:	2800      	cmp	r0, #0
 81097be:	d0cb      	beq.n	8109758 <__swbuf_r+0x28>
 81097c0:	f04f 37ff 	mov.w	r7, #4294967295
 81097c4:	e7ea      	b.n	810979c <__swbuf_r+0x6c>
 81097c6:	bf00      	nop
 81097c8:	08109f9c 	.word	0x08109f9c
 81097cc:	08109fbc 	.word	0x08109fbc
 81097d0:	08109f7c 	.word	0x08109f7c

081097d4 <_write_r>:
 81097d4:	b538      	push	{r3, r4, r5, lr}
 81097d6:	4d07      	ldr	r5, [pc, #28]	; (81097f4 <_write_r+0x20>)
 81097d8:	4604      	mov	r4, r0
 81097da:	4608      	mov	r0, r1
 81097dc:	4611      	mov	r1, r2
 81097de:	2200      	movs	r2, #0
 81097e0:	602a      	str	r2, [r5, #0]
 81097e2:	461a      	mov	r2, r3
 81097e4:	f7f7 f955 	bl	8100a92 <_write>
 81097e8:	1c43      	adds	r3, r0, #1
 81097ea:	d102      	bne.n	81097f2 <_write_r+0x1e>
 81097ec:	682b      	ldr	r3, [r5, #0]
 81097ee:	b103      	cbz	r3, 81097f2 <_write_r+0x1e>
 81097f0:	6023      	str	r3, [r4, #0]
 81097f2:	bd38      	pop	{r3, r4, r5, pc}
 81097f4:	10004d40 	.word	0x10004d40

081097f8 <__swsetup_r>:
 81097f8:	4b32      	ldr	r3, [pc, #200]	; (81098c4 <__swsetup_r+0xcc>)
 81097fa:	b570      	push	{r4, r5, r6, lr}
 81097fc:	681d      	ldr	r5, [r3, #0]
 81097fe:	4606      	mov	r6, r0
 8109800:	460c      	mov	r4, r1
 8109802:	b125      	cbz	r5, 810980e <__swsetup_r+0x16>
 8109804:	69ab      	ldr	r3, [r5, #24]
 8109806:	b913      	cbnz	r3, 810980e <__swsetup_r+0x16>
 8109808:	4628      	mov	r0, r5
 810980a:	f7ff fa19 	bl	8108c40 <__sinit>
 810980e:	4b2e      	ldr	r3, [pc, #184]	; (81098c8 <__swsetup_r+0xd0>)
 8109810:	429c      	cmp	r4, r3
 8109812:	d10f      	bne.n	8109834 <__swsetup_r+0x3c>
 8109814:	686c      	ldr	r4, [r5, #4]
 8109816:	89a3      	ldrh	r3, [r4, #12]
 8109818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810981c:	0719      	lsls	r1, r3, #28
 810981e:	d42c      	bmi.n	810987a <__swsetup_r+0x82>
 8109820:	06dd      	lsls	r5, r3, #27
 8109822:	d411      	bmi.n	8109848 <__swsetup_r+0x50>
 8109824:	2309      	movs	r3, #9
 8109826:	6033      	str	r3, [r6, #0]
 8109828:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810982c:	81a3      	strh	r3, [r4, #12]
 810982e:	f04f 30ff 	mov.w	r0, #4294967295
 8109832:	e03e      	b.n	81098b2 <__swsetup_r+0xba>
 8109834:	4b25      	ldr	r3, [pc, #148]	; (81098cc <__swsetup_r+0xd4>)
 8109836:	429c      	cmp	r4, r3
 8109838:	d101      	bne.n	810983e <__swsetup_r+0x46>
 810983a:	68ac      	ldr	r4, [r5, #8]
 810983c:	e7eb      	b.n	8109816 <__swsetup_r+0x1e>
 810983e:	4b24      	ldr	r3, [pc, #144]	; (81098d0 <__swsetup_r+0xd8>)
 8109840:	429c      	cmp	r4, r3
 8109842:	bf08      	it	eq
 8109844:	68ec      	ldreq	r4, [r5, #12]
 8109846:	e7e6      	b.n	8109816 <__swsetup_r+0x1e>
 8109848:	0758      	lsls	r0, r3, #29
 810984a:	d512      	bpl.n	8109872 <__swsetup_r+0x7a>
 810984c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810984e:	b141      	cbz	r1, 8109862 <__swsetup_r+0x6a>
 8109850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8109854:	4299      	cmp	r1, r3
 8109856:	d002      	beq.n	810985e <__swsetup_r+0x66>
 8109858:	4630      	mov	r0, r6
 810985a:	f7ff faef 	bl	8108e3c <_free_r>
 810985e:	2300      	movs	r3, #0
 8109860:	6363      	str	r3, [r4, #52]	; 0x34
 8109862:	89a3      	ldrh	r3, [r4, #12]
 8109864:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8109868:	81a3      	strh	r3, [r4, #12]
 810986a:	2300      	movs	r3, #0
 810986c:	6063      	str	r3, [r4, #4]
 810986e:	6923      	ldr	r3, [r4, #16]
 8109870:	6023      	str	r3, [r4, #0]
 8109872:	89a3      	ldrh	r3, [r4, #12]
 8109874:	f043 0308 	orr.w	r3, r3, #8
 8109878:	81a3      	strh	r3, [r4, #12]
 810987a:	6923      	ldr	r3, [r4, #16]
 810987c:	b94b      	cbnz	r3, 8109892 <__swsetup_r+0x9a>
 810987e:	89a3      	ldrh	r3, [r4, #12]
 8109880:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8109884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109888:	d003      	beq.n	8109892 <__swsetup_r+0x9a>
 810988a:	4621      	mov	r1, r4
 810988c:	4630      	mov	r0, r6
 810988e:	f000 f931 	bl	8109af4 <__smakebuf_r>
 8109892:	89a0      	ldrh	r0, [r4, #12]
 8109894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8109898:	f010 0301 	ands.w	r3, r0, #1
 810989c:	d00a      	beq.n	81098b4 <__swsetup_r+0xbc>
 810989e:	2300      	movs	r3, #0
 81098a0:	60a3      	str	r3, [r4, #8]
 81098a2:	6963      	ldr	r3, [r4, #20]
 81098a4:	425b      	negs	r3, r3
 81098a6:	61a3      	str	r3, [r4, #24]
 81098a8:	6923      	ldr	r3, [r4, #16]
 81098aa:	b943      	cbnz	r3, 81098be <__swsetup_r+0xc6>
 81098ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 81098b0:	d1ba      	bne.n	8109828 <__swsetup_r+0x30>
 81098b2:	bd70      	pop	{r4, r5, r6, pc}
 81098b4:	0781      	lsls	r1, r0, #30
 81098b6:	bf58      	it	pl
 81098b8:	6963      	ldrpl	r3, [r4, #20]
 81098ba:	60a3      	str	r3, [r4, #8]
 81098bc:	e7f4      	b.n	81098a8 <__swsetup_r+0xb0>
 81098be:	2000      	movs	r0, #0
 81098c0:	e7f7      	b.n	81098b2 <__swsetup_r+0xba>
 81098c2:	bf00      	nop
 81098c4:	100000bc 	.word	0x100000bc
 81098c8:	08109f9c 	.word	0x08109f9c
 81098cc:	08109fbc 	.word	0x08109fbc
 81098d0:	08109f7c 	.word	0x08109f7c

081098d4 <abort>:
 81098d4:	b508      	push	{r3, lr}
 81098d6:	2006      	movs	r0, #6
 81098d8:	f000 f992 	bl	8109c00 <raise>
 81098dc:	2001      	movs	r0, #1
 81098de:	f7f7 f8b1 	bl	8100a44 <_exit>
	...

081098e4 <_close_r>:
 81098e4:	b538      	push	{r3, r4, r5, lr}
 81098e6:	4d06      	ldr	r5, [pc, #24]	; (8109900 <_close_r+0x1c>)
 81098e8:	2300      	movs	r3, #0
 81098ea:	4604      	mov	r4, r0
 81098ec:	4608      	mov	r0, r1
 81098ee:	602b      	str	r3, [r5, #0]
 81098f0:	f7f7 f8eb 	bl	8100aca <_close>
 81098f4:	1c43      	adds	r3, r0, #1
 81098f6:	d102      	bne.n	81098fe <_close_r+0x1a>
 81098f8:	682b      	ldr	r3, [r5, #0]
 81098fa:	b103      	cbz	r3, 81098fe <_close_r+0x1a>
 81098fc:	6023      	str	r3, [r4, #0]
 81098fe:	bd38      	pop	{r3, r4, r5, pc}
 8109900:	10004d40 	.word	0x10004d40

08109904 <__sflush_r>:
 8109904:	898a      	ldrh	r2, [r1, #12]
 8109906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810990a:	4605      	mov	r5, r0
 810990c:	0710      	lsls	r0, r2, #28
 810990e:	460c      	mov	r4, r1
 8109910:	d458      	bmi.n	81099c4 <__sflush_r+0xc0>
 8109912:	684b      	ldr	r3, [r1, #4]
 8109914:	2b00      	cmp	r3, #0
 8109916:	dc05      	bgt.n	8109924 <__sflush_r+0x20>
 8109918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810991a:	2b00      	cmp	r3, #0
 810991c:	dc02      	bgt.n	8109924 <__sflush_r+0x20>
 810991e:	2000      	movs	r0, #0
 8109920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8109926:	2e00      	cmp	r6, #0
 8109928:	d0f9      	beq.n	810991e <__sflush_r+0x1a>
 810992a:	2300      	movs	r3, #0
 810992c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8109930:	682f      	ldr	r7, [r5, #0]
 8109932:	602b      	str	r3, [r5, #0]
 8109934:	d032      	beq.n	810999c <__sflush_r+0x98>
 8109936:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8109938:	89a3      	ldrh	r3, [r4, #12]
 810993a:	075a      	lsls	r2, r3, #29
 810993c:	d505      	bpl.n	810994a <__sflush_r+0x46>
 810993e:	6863      	ldr	r3, [r4, #4]
 8109940:	1ac0      	subs	r0, r0, r3
 8109942:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8109944:	b10b      	cbz	r3, 810994a <__sflush_r+0x46>
 8109946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8109948:	1ac0      	subs	r0, r0, r3
 810994a:	2300      	movs	r3, #0
 810994c:	4602      	mov	r2, r0
 810994e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8109950:	6a21      	ldr	r1, [r4, #32]
 8109952:	4628      	mov	r0, r5
 8109954:	47b0      	blx	r6
 8109956:	1c43      	adds	r3, r0, #1
 8109958:	89a3      	ldrh	r3, [r4, #12]
 810995a:	d106      	bne.n	810996a <__sflush_r+0x66>
 810995c:	6829      	ldr	r1, [r5, #0]
 810995e:	291d      	cmp	r1, #29
 8109960:	d82c      	bhi.n	81099bc <__sflush_r+0xb8>
 8109962:	4a2a      	ldr	r2, [pc, #168]	; (8109a0c <__sflush_r+0x108>)
 8109964:	40ca      	lsrs	r2, r1
 8109966:	07d6      	lsls	r6, r2, #31
 8109968:	d528      	bpl.n	81099bc <__sflush_r+0xb8>
 810996a:	2200      	movs	r2, #0
 810996c:	6062      	str	r2, [r4, #4]
 810996e:	04d9      	lsls	r1, r3, #19
 8109970:	6922      	ldr	r2, [r4, #16]
 8109972:	6022      	str	r2, [r4, #0]
 8109974:	d504      	bpl.n	8109980 <__sflush_r+0x7c>
 8109976:	1c42      	adds	r2, r0, #1
 8109978:	d101      	bne.n	810997e <__sflush_r+0x7a>
 810997a:	682b      	ldr	r3, [r5, #0]
 810997c:	b903      	cbnz	r3, 8109980 <__sflush_r+0x7c>
 810997e:	6560      	str	r0, [r4, #84]	; 0x54
 8109980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8109982:	602f      	str	r7, [r5, #0]
 8109984:	2900      	cmp	r1, #0
 8109986:	d0ca      	beq.n	810991e <__sflush_r+0x1a>
 8109988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810998c:	4299      	cmp	r1, r3
 810998e:	d002      	beq.n	8109996 <__sflush_r+0x92>
 8109990:	4628      	mov	r0, r5
 8109992:	f7ff fa53 	bl	8108e3c <_free_r>
 8109996:	2000      	movs	r0, #0
 8109998:	6360      	str	r0, [r4, #52]	; 0x34
 810999a:	e7c1      	b.n	8109920 <__sflush_r+0x1c>
 810999c:	6a21      	ldr	r1, [r4, #32]
 810999e:	2301      	movs	r3, #1
 81099a0:	4628      	mov	r0, r5
 81099a2:	47b0      	blx	r6
 81099a4:	1c41      	adds	r1, r0, #1
 81099a6:	d1c7      	bne.n	8109938 <__sflush_r+0x34>
 81099a8:	682b      	ldr	r3, [r5, #0]
 81099aa:	2b00      	cmp	r3, #0
 81099ac:	d0c4      	beq.n	8109938 <__sflush_r+0x34>
 81099ae:	2b1d      	cmp	r3, #29
 81099b0:	d001      	beq.n	81099b6 <__sflush_r+0xb2>
 81099b2:	2b16      	cmp	r3, #22
 81099b4:	d101      	bne.n	81099ba <__sflush_r+0xb6>
 81099b6:	602f      	str	r7, [r5, #0]
 81099b8:	e7b1      	b.n	810991e <__sflush_r+0x1a>
 81099ba:	89a3      	ldrh	r3, [r4, #12]
 81099bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81099c0:	81a3      	strh	r3, [r4, #12]
 81099c2:	e7ad      	b.n	8109920 <__sflush_r+0x1c>
 81099c4:	690f      	ldr	r7, [r1, #16]
 81099c6:	2f00      	cmp	r7, #0
 81099c8:	d0a9      	beq.n	810991e <__sflush_r+0x1a>
 81099ca:	0793      	lsls	r3, r2, #30
 81099cc:	680e      	ldr	r6, [r1, #0]
 81099ce:	bf08      	it	eq
 81099d0:	694b      	ldreq	r3, [r1, #20]
 81099d2:	600f      	str	r7, [r1, #0]
 81099d4:	bf18      	it	ne
 81099d6:	2300      	movne	r3, #0
 81099d8:	eba6 0807 	sub.w	r8, r6, r7
 81099dc:	608b      	str	r3, [r1, #8]
 81099de:	f1b8 0f00 	cmp.w	r8, #0
 81099e2:	dd9c      	ble.n	810991e <__sflush_r+0x1a>
 81099e4:	6a21      	ldr	r1, [r4, #32]
 81099e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 81099e8:	4643      	mov	r3, r8
 81099ea:	463a      	mov	r2, r7
 81099ec:	4628      	mov	r0, r5
 81099ee:	47b0      	blx	r6
 81099f0:	2800      	cmp	r0, #0
 81099f2:	dc06      	bgt.n	8109a02 <__sflush_r+0xfe>
 81099f4:	89a3      	ldrh	r3, [r4, #12]
 81099f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81099fa:	81a3      	strh	r3, [r4, #12]
 81099fc:	f04f 30ff 	mov.w	r0, #4294967295
 8109a00:	e78e      	b.n	8109920 <__sflush_r+0x1c>
 8109a02:	4407      	add	r7, r0
 8109a04:	eba8 0800 	sub.w	r8, r8, r0
 8109a08:	e7e9      	b.n	81099de <__sflush_r+0xda>
 8109a0a:	bf00      	nop
 8109a0c:	20400001 	.word	0x20400001

08109a10 <_fflush_r>:
 8109a10:	b538      	push	{r3, r4, r5, lr}
 8109a12:	690b      	ldr	r3, [r1, #16]
 8109a14:	4605      	mov	r5, r0
 8109a16:	460c      	mov	r4, r1
 8109a18:	b913      	cbnz	r3, 8109a20 <_fflush_r+0x10>
 8109a1a:	2500      	movs	r5, #0
 8109a1c:	4628      	mov	r0, r5
 8109a1e:	bd38      	pop	{r3, r4, r5, pc}
 8109a20:	b118      	cbz	r0, 8109a2a <_fflush_r+0x1a>
 8109a22:	6983      	ldr	r3, [r0, #24]
 8109a24:	b90b      	cbnz	r3, 8109a2a <_fflush_r+0x1a>
 8109a26:	f7ff f90b 	bl	8108c40 <__sinit>
 8109a2a:	4b14      	ldr	r3, [pc, #80]	; (8109a7c <_fflush_r+0x6c>)
 8109a2c:	429c      	cmp	r4, r3
 8109a2e:	d11b      	bne.n	8109a68 <_fflush_r+0x58>
 8109a30:	686c      	ldr	r4, [r5, #4]
 8109a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8109a36:	2b00      	cmp	r3, #0
 8109a38:	d0ef      	beq.n	8109a1a <_fflush_r+0xa>
 8109a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8109a3c:	07d0      	lsls	r0, r2, #31
 8109a3e:	d404      	bmi.n	8109a4a <_fflush_r+0x3a>
 8109a40:	0599      	lsls	r1, r3, #22
 8109a42:	d402      	bmi.n	8109a4a <_fflush_r+0x3a>
 8109a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8109a46:	f7ff f9d0 	bl	8108dea <__retarget_lock_acquire_recursive>
 8109a4a:	4628      	mov	r0, r5
 8109a4c:	4621      	mov	r1, r4
 8109a4e:	f7ff ff59 	bl	8109904 <__sflush_r>
 8109a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8109a54:	07da      	lsls	r2, r3, #31
 8109a56:	4605      	mov	r5, r0
 8109a58:	d4e0      	bmi.n	8109a1c <_fflush_r+0xc>
 8109a5a:	89a3      	ldrh	r3, [r4, #12]
 8109a5c:	059b      	lsls	r3, r3, #22
 8109a5e:	d4dd      	bmi.n	8109a1c <_fflush_r+0xc>
 8109a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8109a62:	f7ff f9c3 	bl	8108dec <__retarget_lock_release_recursive>
 8109a66:	e7d9      	b.n	8109a1c <_fflush_r+0xc>
 8109a68:	4b05      	ldr	r3, [pc, #20]	; (8109a80 <_fflush_r+0x70>)
 8109a6a:	429c      	cmp	r4, r3
 8109a6c:	d101      	bne.n	8109a72 <_fflush_r+0x62>
 8109a6e:	68ac      	ldr	r4, [r5, #8]
 8109a70:	e7df      	b.n	8109a32 <_fflush_r+0x22>
 8109a72:	4b04      	ldr	r3, [pc, #16]	; (8109a84 <_fflush_r+0x74>)
 8109a74:	429c      	cmp	r4, r3
 8109a76:	bf08      	it	eq
 8109a78:	68ec      	ldreq	r4, [r5, #12]
 8109a7a:	e7da      	b.n	8109a32 <_fflush_r+0x22>
 8109a7c:	08109f9c 	.word	0x08109f9c
 8109a80:	08109fbc 	.word	0x08109fbc
 8109a84:	08109f7c 	.word	0x08109f7c

08109a88 <_lseek_r>:
 8109a88:	b538      	push	{r3, r4, r5, lr}
 8109a8a:	4d07      	ldr	r5, [pc, #28]	; (8109aa8 <_lseek_r+0x20>)
 8109a8c:	4604      	mov	r4, r0
 8109a8e:	4608      	mov	r0, r1
 8109a90:	4611      	mov	r1, r2
 8109a92:	2200      	movs	r2, #0
 8109a94:	602a      	str	r2, [r5, #0]
 8109a96:	461a      	mov	r2, r3
 8109a98:	f7f7 f83e 	bl	8100b18 <_lseek>
 8109a9c:	1c43      	adds	r3, r0, #1
 8109a9e:	d102      	bne.n	8109aa6 <_lseek_r+0x1e>
 8109aa0:	682b      	ldr	r3, [r5, #0]
 8109aa2:	b103      	cbz	r3, 8109aa6 <_lseek_r+0x1e>
 8109aa4:	6023      	str	r3, [r4, #0]
 8109aa6:	bd38      	pop	{r3, r4, r5, pc}
 8109aa8:	10004d40 	.word	0x10004d40

08109aac <__swhatbuf_r>:
 8109aac:	b570      	push	{r4, r5, r6, lr}
 8109aae:	460e      	mov	r6, r1
 8109ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109ab4:	2900      	cmp	r1, #0
 8109ab6:	b096      	sub	sp, #88	; 0x58
 8109ab8:	4614      	mov	r4, r2
 8109aba:	461d      	mov	r5, r3
 8109abc:	da07      	bge.n	8109ace <__swhatbuf_r+0x22>
 8109abe:	2300      	movs	r3, #0
 8109ac0:	602b      	str	r3, [r5, #0]
 8109ac2:	89b3      	ldrh	r3, [r6, #12]
 8109ac4:	061a      	lsls	r2, r3, #24
 8109ac6:	d410      	bmi.n	8109aea <__swhatbuf_r+0x3e>
 8109ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8109acc:	e00e      	b.n	8109aec <__swhatbuf_r+0x40>
 8109ace:	466a      	mov	r2, sp
 8109ad0:	f000 f8b2 	bl	8109c38 <_fstat_r>
 8109ad4:	2800      	cmp	r0, #0
 8109ad6:	dbf2      	blt.n	8109abe <__swhatbuf_r+0x12>
 8109ad8:	9a01      	ldr	r2, [sp, #4]
 8109ada:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8109ade:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8109ae2:	425a      	negs	r2, r3
 8109ae4:	415a      	adcs	r2, r3
 8109ae6:	602a      	str	r2, [r5, #0]
 8109ae8:	e7ee      	b.n	8109ac8 <__swhatbuf_r+0x1c>
 8109aea:	2340      	movs	r3, #64	; 0x40
 8109aec:	2000      	movs	r0, #0
 8109aee:	6023      	str	r3, [r4, #0]
 8109af0:	b016      	add	sp, #88	; 0x58
 8109af2:	bd70      	pop	{r4, r5, r6, pc}

08109af4 <__smakebuf_r>:
 8109af4:	898b      	ldrh	r3, [r1, #12]
 8109af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8109af8:	079d      	lsls	r5, r3, #30
 8109afa:	4606      	mov	r6, r0
 8109afc:	460c      	mov	r4, r1
 8109afe:	d507      	bpl.n	8109b10 <__smakebuf_r+0x1c>
 8109b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8109b04:	6023      	str	r3, [r4, #0]
 8109b06:	6123      	str	r3, [r4, #16]
 8109b08:	2301      	movs	r3, #1
 8109b0a:	6163      	str	r3, [r4, #20]
 8109b0c:	b002      	add	sp, #8
 8109b0e:	bd70      	pop	{r4, r5, r6, pc}
 8109b10:	ab01      	add	r3, sp, #4
 8109b12:	466a      	mov	r2, sp
 8109b14:	f7ff ffca 	bl	8109aac <__swhatbuf_r>
 8109b18:	9900      	ldr	r1, [sp, #0]
 8109b1a:	4605      	mov	r5, r0
 8109b1c:	4630      	mov	r0, r6
 8109b1e:	f7ff f9dd 	bl	8108edc <_malloc_r>
 8109b22:	b948      	cbnz	r0, 8109b38 <__smakebuf_r+0x44>
 8109b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8109b28:	059a      	lsls	r2, r3, #22
 8109b2a:	d4ef      	bmi.n	8109b0c <__smakebuf_r+0x18>
 8109b2c:	f023 0303 	bic.w	r3, r3, #3
 8109b30:	f043 0302 	orr.w	r3, r3, #2
 8109b34:	81a3      	strh	r3, [r4, #12]
 8109b36:	e7e3      	b.n	8109b00 <__smakebuf_r+0xc>
 8109b38:	4b0d      	ldr	r3, [pc, #52]	; (8109b70 <__smakebuf_r+0x7c>)
 8109b3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8109b3c:	89a3      	ldrh	r3, [r4, #12]
 8109b3e:	6020      	str	r0, [r4, #0]
 8109b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8109b44:	81a3      	strh	r3, [r4, #12]
 8109b46:	9b00      	ldr	r3, [sp, #0]
 8109b48:	6163      	str	r3, [r4, #20]
 8109b4a:	9b01      	ldr	r3, [sp, #4]
 8109b4c:	6120      	str	r0, [r4, #16]
 8109b4e:	b15b      	cbz	r3, 8109b68 <__smakebuf_r+0x74>
 8109b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8109b54:	4630      	mov	r0, r6
 8109b56:	f000 f881 	bl	8109c5c <_isatty_r>
 8109b5a:	b128      	cbz	r0, 8109b68 <__smakebuf_r+0x74>
 8109b5c:	89a3      	ldrh	r3, [r4, #12]
 8109b5e:	f023 0303 	bic.w	r3, r3, #3
 8109b62:	f043 0301 	orr.w	r3, r3, #1
 8109b66:	81a3      	strh	r3, [r4, #12]
 8109b68:	89a0      	ldrh	r0, [r4, #12]
 8109b6a:	4305      	orrs	r5, r0
 8109b6c:	81a5      	strh	r5, [r4, #12]
 8109b6e:	e7cd      	b.n	8109b0c <__smakebuf_r+0x18>
 8109b70:	08108bd9 	.word	0x08108bd9

08109b74 <__malloc_lock>:
 8109b74:	4801      	ldr	r0, [pc, #4]	; (8109b7c <__malloc_lock+0x8>)
 8109b76:	f7ff b938 	b.w	8108dea <__retarget_lock_acquire_recursive>
 8109b7a:	bf00      	nop
 8109b7c:	10004d38 	.word	0x10004d38

08109b80 <__malloc_unlock>:
 8109b80:	4801      	ldr	r0, [pc, #4]	; (8109b88 <__malloc_unlock+0x8>)
 8109b82:	f7ff b933 	b.w	8108dec <__retarget_lock_release_recursive>
 8109b86:	bf00      	nop
 8109b88:	10004d38 	.word	0x10004d38

08109b8c <_read_r>:
 8109b8c:	b538      	push	{r3, r4, r5, lr}
 8109b8e:	4d07      	ldr	r5, [pc, #28]	; (8109bac <_read_r+0x20>)
 8109b90:	4604      	mov	r4, r0
 8109b92:	4608      	mov	r0, r1
 8109b94:	4611      	mov	r1, r2
 8109b96:	2200      	movs	r2, #0
 8109b98:	602a      	str	r2, [r5, #0]
 8109b9a:	461a      	mov	r2, r3
 8109b9c:	f7f6 ff5c 	bl	8100a58 <_read>
 8109ba0:	1c43      	adds	r3, r0, #1
 8109ba2:	d102      	bne.n	8109baa <_read_r+0x1e>
 8109ba4:	682b      	ldr	r3, [r5, #0]
 8109ba6:	b103      	cbz	r3, 8109baa <_read_r+0x1e>
 8109ba8:	6023      	str	r3, [r4, #0]
 8109baa:	bd38      	pop	{r3, r4, r5, pc}
 8109bac:	10004d40 	.word	0x10004d40

08109bb0 <_raise_r>:
 8109bb0:	291f      	cmp	r1, #31
 8109bb2:	b538      	push	{r3, r4, r5, lr}
 8109bb4:	4604      	mov	r4, r0
 8109bb6:	460d      	mov	r5, r1
 8109bb8:	d904      	bls.n	8109bc4 <_raise_r+0x14>
 8109bba:	2316      	movs	r3, #22
 8109bbc:	6003      	str	r3, [r0, #0]
 8109bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8109bc2:	bd38      	pop	{r3, r4, r5, pc}
 8109bc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8109bc6:	b112      	cbz	r2, 8109bce <_raise_r+0x1e>
 8109bc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8109bcc:	b94b      	cbnz	r3, 8109be2 <_raise_r+0x32>
 8109bce:	4620      	mov	r0, r4
 8109bd0:	f000 f830 	bl	8109c34 <_getpid_r>
 8109bd4:	462a      	mov	r2, r5
 8109bd6:	4601      	mov	r1, r0
 8109bd8:	4620      	mov	r0, r4
 8109bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8109bde:	f000 b817 	b.w	8109c10 <_kill_r>
 8109be2:	2b01      	cmp	r3, #1
 8109be4:	d00a      	beq.n	8109bfc <_raise_r+0x4c>
 8109be6:	1c59      	adds	r1, r3, #1
 8109be8:	d103      	bne.n	8109bf2 <_raise_r+0x42>
 8109bea:	2316      	movs	r3, #22
 8109bec:	6003      	str	r3, [r0, #0]
 8109bee:	2001      	movs	r0, #1
 8109bf0:	e7e7      	b.n	8109bc2 <_raise_r+0x12>
 8109bf2:	2400      	movs	r4, #0
 8109bf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8109bf8:	4628      	mov	r0, r5
 8109bfa:	4798      	blx	r3
 8109bfc:	2000      	movs	r0, #0
 8109bfe:	e7e0      	b.n	8109bc2 <_raise_r+0x12>

08109c00 <raise>:
 8109c00:	4b02      	ldr	r3, [pc, #8]	; (8109c0c <raise+0xc>)
 8109c02:	4601      	mov	r1, r0
 8109c04:	6818      	ldr	r0, [r3, #0]
 8109c06:	f7ff bfd3 	b.w	8109bb0 <_raise_r>
 8109c0a:	bf00      	nop
 8109c0c:	100000bc 	.word	0x100000bc

08109c10 <_kill_r>:
 8109c10:	b538      	push	{r3, r4, r5, lr}
 8109c12:	4d07      	ldr	r5, [pc, #28]	; (8109c30 <_kill_r+0x20>)
 8109c14:	2300      	movs	r3, #0
 8109c16:	4604      	mov	r4, r0
 8109c18:	4608      	mov	r0, r1
 8109c1a:	4611      	mov	r1, r2
 8109c1c:	602b      	str	r3, [r5, #0]
 8109c1e:	f7f6 ff01 	bl	8100a24 <_kill>
 8109c22:	1c43      	adds	r3, r0, #1
 8109c24:	d102      	bne.n	8109c2c <_kill_r+0x1c>
 8109c26:	682b      	ldr	r3, [r5, #0]
 8109c28:	b103      	cbz	r3, 8109c2c <_kill_r+0x1c>
 8109c2a:	6023      	str	r3, [r4, #0]
 8109c2c:	bd38      	pop	{r3, r4, r5, pc}
 8109c2e:	bf00      	nop
 8109c30:	10004d40 	.word	0x10004d40

08109c34 <_getpid_r>:
 8109c34:	f7f6 beee 	b.w	8100a14 <_getpid>

08109c38 <_fstat_r>:
 8109c38:	b538      	push	{r3, r4, r5, lr}
 8109c3a:	4d07      	ldr	r5, [pc, #28]	; (8109c58 <_fstat_r+0x20>)
 8109c3c:	2300      	movs	r3, #0
 8109c3e:	4604      	mov	r4, r0
 8109c40:	4608      	mov	r0, r1
 8109c42:	4611      	mov	r1, r2
 8109c44:	602b      	str	r3, [r5, #0]
 8109c46:	f7f6 ff4c 	bl	8100ae2 <_fstat>
 8109c4a:	1c43      	adds	r3, r0, #1
 8109c4c:	d102      	bne.n	8109c54 <_fstat_r+0x1c>
 8109c4e:	682b      	ldr	r3, [r5, #0]
 8109c50:	b103      	cbz	r3, 8109c54 <_fstat_r+0x1c>
 8109c52:	6023      	str	r3, [r4, #0]
 8109c54:	bd38      	pop	{r3, r4, r5, pc}
 8109c56:	bf00      	nop
 8109c58:	10004d40 	.word	0x10004d40

08109c5c <_isatty_r>:
 8109c5c:	b538      	push	{r3, r4, r5, lr}
 8109c5e:	4d06      	ldr	r5, [pc, #24]	; (8109c78 <_isatty_r+0x1c>)
 8109c60:	2300      	movs	r3, #0
 8109c62:	4604      	mov	r4, r0
 8109c64:	4608      	mov	r0, r1
 8109c66:	602b      	str	r3, [r5, #0]
 8109c68:	f7f6 ff4b 	bl	8100b02 <_isatty>
 8109c6c:	1c43      	adds	r3, r0, #1
 8109c6e:	d102      	bne.n	8109c76 <_isatty_r+0x1a>
 8109c70:	682b      	ldr	r3, [r5, #0]
 8109c72:	b103      	cbz	r3, 8109c76 <_isatty_r+0x1a>
 8109c74:	6023      	str	r3, [r4, #0]
 8109c76:	bd38      	pop	{r3, r4, r5, pc}
 8109c78:	10004d40 	.word	0x10004d40

08109c7c <_init>:
 8109c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109c7e:	bf00      	nop
 8109c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8109c82:	bc08      	pop	{r3}
 8109c84:	469e      	mov	lr, r3
 8109c86:	4770      	bx	lr

08109c88 <_fini>:
 8109c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109c8a:	bf00      	nop
 8109c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8109c8e:	bc08      	pop	{r3}
 8109c90:	469e      	mov	lr, r3
 8109c92:	4770      	bx	lr
