
SelfDriving_RTOS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114e0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  08011780  08011780  00021780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011afc  08011afc  00030150  2**0
                  CONTENTS
  4 .ARM          00000008  08011afc  08011afc  00021afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b04  08011b04  00030150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b04  08011b04  00021b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b08  08011b08  00021b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  24000000  08011b0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046e4  24000150  08011c5c  00030150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004834  08011c5c  00034834  2**0
                  ALLOC
 11 .data_RAM_D2  00000000  30000000  30000000  00030150  2**0
                  CONTENTS
 12 .bss_RAM_D2   00000000  30000000  30000000  00030150  2**0
                  CONTENTS
 13 .openamp_section 0000008c  38000000  08011c5c  00040000  2**2
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 15 .debug_info   000578cb  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00009e52  00000000  00000000  00087a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000025b8  00000000  00000000  000918a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002268  00000000  00000000  00093e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004627a  00000000  00000000  000960c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000394fc  00000000  00000000  000dc33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0019441e  00000000  00000000  00115836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  002a9c54  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a468  00000000  00000000  002a9ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000150 	.word	0x24000150
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011768 	.word	0x08011768

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000154 	.word	0x24000154
 80002dc:	08011768 	.word	0x08011768

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b96e 	b.w	8000694 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468c      	mov	ip, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8083 	bne.w	80004e6 <__udivmoddi4+0x116>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d947      	bls.n	8000476 <__udivmoddi4+0xa6>
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	b142      	cbz	r2, 80003fe <__udivmoddi4+0x2e>
 80003ec:	f1c2 0020 	rsb	r0, r2, #32
 80003f0:	fa24 f000 	lsr.w	r0, r4, r0
 80003f4:	4091      	lsls	r1, r2
 80003f6:	4097      	lsls	r7, r2
 80003f8:	ea40 0c01 	orr.w	ip, r0, r1
 80003fc:	4094      	lsls	r4, r2
 80003fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fbbc f6f8 	udiv	r6, ip, r8
 8000408:	fa1f fe87 	uxth.w	lr, r7
 800040c:	fb08 c116 	mls	r1, r8, r6, ip
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb06 f10e 	mul.w	r1, r6, lr
 8000418:	4299      	cmp	r1, r3
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x60>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000422:	f080 8119 	bcs.w	8000658 <__udivmoddi4+0x288>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 8116 	bls.w	8000658 <__udivmoddi4+0x288>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3310 	mls	r3, r8, r0, r3
 800043c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	45a6      	cmp	lr, r4
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x8c>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f100 33ff 	add.w	r3, r0, #4294967295
 800044e:	f080 8105 	bcs.w	800065c <__udivmoddi4+0x28c>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f240 8102 	bls.w	800065c <__udivmoddi4+0x28c>
 8000458:	3802      	subs	r0, #2
 800045a:	443c      	add	r4, r7
 800045c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	2600      	movs	r6, #0
 8000466:	b11d      	cbz	r5, 8000470 <__udivmoddi4+0xa0>
 8000468:	40d4      	lsrs	r4, r2
 800046a:	2300      	movs	r3, #0
 800046c:	e9c5 4300 	strd	r4, r3, [r5]
 8000470:	4631      	mov	r1, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	b902      	cbnz	r2, 800047a <__udivmoddi4+0xaa>
 8000478:	deff      	udf	#255	; 0xff
 800047a:	fab2 f282 	clz	r2, r2
 800047e:	2a00      	cmp	r2, #0
 8000480:	d150      	bne.n	8000524 <__udivmoddi4+0x154>
 8000482:	1bcb      	subs	r3, r1, r7
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	fa1f f887 	uxth.w	r8, r7
 800048c:	2601      	movs	r6, #1
 800048e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000492:	0c21      	lsrs	r1, r4, #16
 8000494:	fb0e 331c 	mls	r3, lr, ip, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb08 f30c 	mul.w	r3, r8, ip
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0xe4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0xe2>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	f200 80e9 	bhi.w	8000684 <__udivmoddi4+0x2b4>
 80004b2:	4684      	mov	ip, r0
 80004b4:	1ac9      	subs	r1, r1, r3
 80004b6:	b2a3      	uxth	r3, r4
 80004b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004c4:	fb08 f800 	mul.w	r8, r8, r0
 80004c8:	45a0      	cmp	r8, r4
 80004ca:	d907      	bls.n	80004dc <__udivmoddi4+0x10c>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x10a>
 80004d4:	45a0      	cmp	r8, r4
 80004d6:	f200 80d9 	bhi.w	800068c <__udivmoddi4+0x2bc>
 80004da:	4618      	mov	r0, r3
 80004dc:	eba4 0408 	sub.w	r4, r4, r8
 80004e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004e4:	e7bf      	b.n	8000466 <__udivmoddi4+0x96>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d909      	bls.n	80004fe <__udivmoddi4+0x12e>
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	f000 80b1 	beq.w	8000652 <__udivmoddi4+0x282>
 80004f0:	2600      	movs	r6, #0
 80004f2:	e9c5 0100 	strd	r0, r1, [r5]
 80004f6:	4630      	mov	r0, r6
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	fab3 f683 	clz	r6, r3
 8000502:	2e00      	cmp	r6, #0
 8000504:	d14a      	bne.n	800059c <__udivmoddi4+0x1cc>
 8000506:	428b      	cmp	r3, r1
 8000508:	d302      	bcc.n	8000510 <__udivmoddi4+0x140>
 800050a:	4282      	cmp	r2, r0
 800050c:	f200 80b8 	bhi.w	8000680 <__udivmoddi4+0x2b0>
 8000510:	1a84      	subs	r4, r0, r2
 8000512:	eb61 0103 	sbc.w	r1, r1, r3
 8000516:	2001      	movs	r0, #1
 8000518:	468c      	mov	ip, r1
 800051a:	2d00      	cmp	r5, #0
 800051c:	d0a8      	beq.n	8000470 <__udivmoddi4+0xa0>
 800051e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000522:	e7a5      	b.n	8000470 <__udivmoddi4+0xa0>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f603 	lsr.w	r6, r0, r3
 800052c:	4097      	lsls	r7, r2
 800052e:	fa01 f002 	lsl.w	r0, r1, r2
 8000532:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000536:	40d9      	lsrs	r1, r3
 8000538:	4330      	orrs	r0, r6
 800053a:	0c03      	lsrs	r3, r0, #16
 800053c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000540:	fa1f f887 	uxth.w	r8, r7
 8000544:	fb0e 1116 	mls	r1, lr, r6, r1
 8000548:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054c:	fb06 f108 	mul.w	r1, r6, r8
 8000550:	4299      	cmp	r1, r3
 8000552:	fa04 f402 	lsl.w	r4, r4, r2
 8000556:	d909      	bls.n	800056c <__udivmoddi4+0x19c>
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	f106 3cff 	add.w	ip, r6, #4294967295
 800055e:	f080 808d 	bcs.w	800067c <__udivmoddi4+0x2ac>
 8000562:	4299      	cmp	r1, r3
 8000564:	f240 808a 	bls.w	800067c <__udivmoddi4+0x2ac>
 8000568:	3e02      	subs	r6, #2
 800056a:	443b      	add	r3, r7
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b281      	uxth	r1, r0
 8000570:	fbb3 f0fe 	udiv	r0, r3, lr
 8000574:	fb0e 3310 	mls	r3, lr, r0, r3
 8000578:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057c:	fb00 f308 	mul.w	r3, r0, r8
 8000580:	428b      	cmp	r3, r1
 8000582:	d907      	bls.n	8000594 <__udivmoddi4+0x1c4>
 8000584:	1879      	adds	r1, r7, r1
 8000586:	f100 3cff 	add.w	ip, r0, #4294967295
 800058a:	d273      	bcs.n	8000674 <__udivmoddi4+0x2a4>
 800058c:	428b      	cmp	r3, r1
 800058e:	d971      	bls.n	8000674 <__udivmoddi4+0x2a4>
 8000590:	3802      	subs	r0, #2
 8000592:	4439      	add	r1, r7
 8000594:	1acb      	subs	r3, r1, r3
 8000596:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800059a:	e778      	b.n	800048e <__udivmoddi4+0xbe>
 800059c:	f1c6 0c20 	rsb	ip, r6, #32
 80005a0:	fa03 f406 	lsl.w	r4, r3, r6
 80005a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005a8:	431c      	orrs	r4, r3
 80005aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ae:	fa01 f306 	lsl.w	r3, r1, r6
 80005b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ba:	431f      	orrs	r7, r3
 80005bc:	0c3b      	lsrs	r3, r7, #16
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fa1f f884 	uxth.w	r8, r4
 80005c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ce:	fb09 fa08 	mul.w	sl, r9, r8
 80005d2:	458a      	cmp	sl, r1
 80005d4:	fa02 f206 	lsl.w	r2, r2, r6
 80005d8:	fa00 f306 	lsl.w	r3, r0, r6
 80005dc:	d908      	bls.n	80005f0 <__udivmoddi4+0x220>
 80005de:	1861      	adds	r1, r4, r1
 80005e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005e4:	d248      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 80005e6:	458a      	cmp	sl, r1
 80005e8:	d946      	bls.n	8000678 <__udivmoddi4+0x2a8>
 80005ea:	f1a9 0902 	sub.w	r9, r9, #2
 80005ee:	4421      	add	r1, r4
 80005f0:	eba1 010a 	sub.w	r1, r1, sl
 80005f4:	b2bf      	uxth	r7, r7
 80005f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000602:	fb00 f808 	mul.w	r8, r0, r8
 8000606:	45b8      	cmp	r8, r7
 8000608:	d907      	bls.n	800061a <__udivmoddi4+0x24a>
 800060a:	19e7      	adds	r7, r4, r7
 800060c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000610:	d22e      	bcs.n	8000670 <__udivmoddi4+0x2a0>
 8000612:	45b8      	cmp	r8, r7
 8000614:	d92c      	bls.n	8000670 <__udivmoddi4+0x2a0>
 8000616:	3802      	subs	r0, #2
 8000618:	4427      	add	r7, r4
 800061a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800061e:	eba7 0708 	sub.w	r7, r7, r8
 8000622:	fba0 8902 	umull	r8, r9, r0, r2
 8000626:	454f      	cmp	r7, r9
 8000628:	46c6      	mov	lr, r8
 800062a:	4649      	mov	r1, r9
 800062c:	d31a      	bcc.n	8000664 <__udivmoddi4+0x294>
 800062e:	d017      	beq.n	8000660 <__udivmoddi4+0x290>
 8000630:	b15d      	cbz	r5, 800064a <__udivmoddi4+0x27a>
 8000632:	ebb3 020e 	subs.w	r2, r3, lr
 8000636:	eb67 0701 	sbc.w	r7, r7, r1
 800063a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800063e:	40f2      	lsrs	r2, r6
 8000640:	ea4c 0202 	orr.w	r2, ip, r2
 8000644:	40f7      	lsrs	r7, r6
 8000646:	e9c5 2700 	strd	r2, r7, [r5]
 800064a:	2600      	movs	r6, #0
 800064c:	4631      	mov	r1, r6
 800064e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e70b      	b.n	8000470 <__udivmoddi4+0xa0>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e9      	b.n	8000430 <__udivmoddi4+0x60>
 800065c:	4618      	mov	r0, r3
 800065e:	e6fd      	b.n	800045c <__udivmoddi4+0x8c>
 8000660:	4543      	cmp	r3, r8
 8000662:	d2e5      	bcs.n	8000630 <__udivmoddi4+0x260>
 8000664:	ebb8 0e02 	subs.w	lr, r8, r2
 8000668:	eb69 0104 	sbc.w	r1, r9, r4
 800066c:	3801      	subs	r0, #1
 800066e:	e7df      	b.n	8000630 <__udivmoddi4+0x260>
 8000670:	4608      	mov	r0, r1
 8000672:	e7d2      	b.n	800061a <__udivmoddi4+0x24a>
 8000674:	4660      	mov	r0, ip
 8000676:	e78d      	b.n	8000594 <__udivmoddi4+0x1c4>
 8000678:	4681      	mov	r9, r0
 800067a:	e7b9      	b.n	80005f0 <__udivmoddi4+0x220>
 800067c:	4666      	mov	r6, ip
 800067e:	e775      	b.n	800056c <__udivmoddi4+0x19c>
 8000680:	4630      	mov	r0, r6
 8000682:	e74a      	b.n	800051a <__udivmoddi4+0x14a>
 8000684:	f1ac 0c02 	sub.w	ip, ip, #2
 8000688:	4439      	add	r1, r7
 800068a:	e713      	b.n	80004b4 <__udivmoddi4+0xe4>
 800068c:	3802      	subs	r0, #2
 800068e:	443c      	add	r4, r7
 8000690:	e724      	b.n	80004dc <__udivmoddi4+0x10c>
 8000692:	bf00      	nop

08000694 <__aeabi_idiv0>:
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <rpmsg_recv_callback+0x30>)
 80006ac:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <rpmsg_recv_callback+0x34>)
 80006b2:	6013      	str	r3, [r2, #0]
	message_received=1;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <rpmsg_recv_callback+0x38>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
//	parseRecievedMessages((uint8_t)received_data);
	return 0;
 80006ba:	2300      	movs	r3, #0
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	24000274 	.word	0x24000274
 80006cc:	2400016c 	.word	0x2400016c
 80006d0:	240002bc 	.word	0x240002bc

080006d4 <receive_message>:
//}
#endif

#ifdef CORE_CM7
unsigned int receive_message(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 80006d8:	e001      	b.n	80006de <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 80006da:	f00f fcb1 	bl	8010040 <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <receive_message+0x28>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d103      	bne.n	80006ee <receive_message+0x1a>
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <receive_message+0x2c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d0f5      	beq.n	80006da <receive_message+0x6>
	}
	message_received = 0;
 80006ee:	4b03      	ldr	r3, [pc, #12]	; (80006fc <receive_message+0x28>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]

	return received_data;
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <receive_message+0x30>)
 80006f6:	681b      	ldr	r3, [r3, #0]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	240002bc 	.word	0x240002bc
 8000700:	24000278 	.word	0x24000278
 8000704:	24000274 	.word	0x24000274

08000708 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <service_destroy_cb+0x1c>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	24000278 	.word	0x24000278

08000728 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af02      	add	r7, sp, #8
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <new_service_cb+0x2c>)
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <new_service_cb+0x30>)
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <new_service_cb+0x34>)
 8000740:	f00f fc60 	bl	8010004 <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <new_service_cb+0x38>)
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	08000709 	.word	0x08000709
 8000758:	08000699 	.word	0x08000699
 800075c:	2400027c 	.word	0x2400027c
 8000760:	24000278 	.word	0x24000278

08000764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000768:	4b3f      	ldr	r3, [pc, #252]	; (8000868 <SystemInit+0x104>)
 800076a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800076e:	4a3e      	ldr	r2, [pc, #248]	; (8000868 <SystemInit+0x104>)
 8000770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000778:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <SystemInit+0x104>)
 800077a:	691b      	ldr	r3, [r3, #16]
 800077c:	4a3a      	ldr	r2, [pc, #232]	; (8000868 <SystemInit+0x104>)
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000784:	4b39      	ldr	r3, [pc, #228]	; (800086c <SystemInit+0x108>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f003 030f 	and.w	r3, r3, #15
 800078c:	2b06      	cmp	r3, #6
 800078e:	d807      	bhi.n	80007a0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000790:	4b36      	ldr	r3, [pc, #216]	; (800086c <SystemInit+0x108>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f023 030f 	bic.w	r3, r3, #15
 8000798:	4a34      	ldr	r2, [pc, #208]	; (800086c <SystemInit+0x108>)
 800079a:	f043 0307 	orr.w	r3, r3, #7
 800079e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007a0:	4b33      	ldr	r3, [pc, #204]	; (8000870 <SystemInit+0x10c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a32      	ldr	r2, [pc, #200]	; (8000870 <SystemInit+0x10c>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007ac:	4b30      	ldr	r3, [pc, #192]	; (8000870 <SystemInit+0x10c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007b2:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <SystemInit+0x10c>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	492e      	ldr	r1, [pc, #184]	; (8000870 <SystemInit+0x10c>)
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <SystemInit+0x110>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007be:	4b2b      	ldr	r3, [pc, #172]	; (800086c <SystemInit+0x108>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d007      	beq.n	80007da <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007ca:	4b28      	ldr	r3, [pc, #160]	; (800086c <SystemInit+0x108>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f023 030f 	bic.w	r3, r3, #15
 80007d2:	4a26      	ldr	r2, [pc, #152]	; (800086c <SystemInit+0x108>)
 80007d4:	f043 0307 	orr.w	r3, r3, #7
 80007d8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <SystemInit+0x10c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <SystemInit+0x10c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <SystemInit+0x10c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <SystemInit+0x10c>)
 80007ee:	4a22      	ldr	r2, [pc, #136]	; (8000878 <SystemInit+0x114>)
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <SystemInit+0x10c>)
 80007f4:	4a21      	ldr	r2, [pc, #132]	; (800087c <SystemInit+0x118>)
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <SystemInit+0x10c>)
 80007fa:	4a21      	ldr	r2, [pc, #132]	; (8000880 <SystemInit+0x11c>)
 80007fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <SystemInit+0x10c>)
 8000800:	2200      	movs	r2, #0
 8000802:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <SystemInit+0x10c>)
 8000806:	4a1e      	ldr	r2, [pc, #120]	; (8000880 <SystemInit+0x11c>)
 8000808:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <SystemInit+0x10c>)
 800080c:	2200      	movs	r2, #0
 800080e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <SystemInit+0x10c>)
 8000812:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <SystemInit+0x11c>)
 8000814:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <SystemInit+0x10c>)
 8000818:	2200      	movs	r2, #0
 800081a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <SystemInit+0x10c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a13      	ldr	r2, [pc, #76]	; (8000870 <SystemInit+0x10c>)
 8000822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000826:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <SystemInit+0x10c>)
 800082a:	2200      	movs	r2, #0
 800082c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <SystemInit+0x120>)
 8000830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000832:	4a14      	ldr	r2, [pc, #80]	; (8000884 <SystemInit+0x120>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000838:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <SystemInit+0x124>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <SystemInit+0x128>)
 8000840:	4013      	ands	r3, r2
 8000842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000846:	d202      	bcs.n	800084e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <SystemInit+0x12c>)
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <SystemInit+0x130>)
 8000850:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000854:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <SystemInit+0x104>)
 8000858:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800085c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00
 800086c:	52002000 	.word	0x52002000
 8000870:	58024400 	.word	0x58024400
 8000874:	eaf6ed7f 	.word	0xeaf6ed7f
 8000878:	02020200 	.word	0x02020200
 800087c:	01ff0000 	.word	0x01ff0000
 8000880:	01010280 	.word	0x01010280
 8000884:	580000c0 	.word	0x580000c0
 8000888:	5c001000 	.word	0x5c001000
 800088c:	ffff0000 	.word	0xffff0000
 8000890:	51008108 	.word	0x51008108
 8000894:	52004000 	.word	0x52004000

08000898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_DMA_Init+0x4c>)
 80008a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008a4:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <MX_DMA_Init+0x4c>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <MX_DMA_Init+0x4c>)
 80008b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	200b      	movs	r0, #11
 80008c2:	f001 fc1a 	bl	80020fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008c6:	200b      	movs	r0, #11
 80008c8:	f001 fc31 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	200c      	movs	r0, #12
 80008d2:	f001 fc12 	bl	80020fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008d6:	200c      	movs	r0, #12
 80008d8:	f001 fc29 	bl	800212e <HAL_NVIC_EnableIRQ>

}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	58024400 	.word	0x58024400

080008e8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b93      	ldr	r3, [pc, #588]	; (8000b4c <MX_GPIO_Init+0x264>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	4a91      	ldr	r2, [pc, #580]	; (8000b4c <MX_GPIO_Init+0x264>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090e:	4b8f      	ldr	r3, [pc, #572]	; (8000b4c <MX_GPIO_Init+0x264>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	623b      	str	r3, [r7, #32]
 800091a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091c:	4b8b      	ldr	r3, [pc, #556]	; (8000b4c <MX_GPIO_Init+0x264>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	4a8a      	ldr	r2, [pc, #552]	; (8000b4c <MX_GPIO_Init+0x264>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092c:	4b87      	ldr	r3, [pc, #540]	; (8000b4c <MX_GPIO_Init+0x264>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	61fb      	str	r3, [r7, #28]
 8000938:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b84      	ldr	r3, [pc, #528]	; (8000b4c <MX_GPIO_Init+0x264>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	4a82      	ldr	r2, [pc, #520]	; (8000b4c <MX_GPIO_Init+0x264>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094a:	4b80      	ldr	r3, [pc, #512]	; (8000b4c <MX_GPIO_Init+0x264>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	4b7c      	ldr	r3, [pc, #496]	; (8000b4c <MX_GPIO_Init+0x264>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	4a7b      	ldr	r2, [pc, #492]	; (8000b4c <MX_GPIO_Init+0x264>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000968:	4b78      	ldr	r3, [pc, #480]	; (8000b4c <MX_GPIO_Init+0x264>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000976:	4b75      	ldr	r3, [pc, #468]	; (8000b4c <MX_GPIO_Init+0x264>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	4a73      	ldr	r2, [pc, #460]	; (8000b4c <MX_GPIO_Init+0x264>)
 800097e:	f043 0320 	orr.w	r3, r3, #32
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000986:	4b71      	ldr	r3, [pc, #452]	; (8000b4c <MX_GPIO_Init+0x264>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f003 0320 	and.w	r3, r3, #32
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000994:	4b6d      	ldr	r3, [pc, #436]	; (8000b4c <MX_GPIO_Init+0x264>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	4a6c      	ldr	r2, [pc, #432]	; (8000b4c <MX_GPIO_Init+0x264>)
 800099c:	f043 0310 	orr.w	r3, r3, #16
 80009a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a4:	4b69      	ldr	r3, [pc, #420]	; (8000b4c <MX_GPIO_Init+0x264>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	4b66      	ldr	r3, [pc, #408]	; (8000b4c <MX_GPIO_Init+0x264>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	4a64      	ldr	r2, [pc, #400]	; (8000b4c <MX_GPIO_Init+0x264>)
 80009ba:	f043 0308 	orr.w	r3, r3, #8
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c2:	4b62      	ldr	r3, [pc, #392]	; (8000b4c <MX_GPIO_Init+0x264>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d0:	4b5e      	ldr	r3, [pc, #376]	; (8000b4c <MX_GPIO_Init+0x264>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	4a5d      	ldr	r2, [pc, #372]	; (8000b4c <MX_GPIO_Init+0x264>)
 80009d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e0:	4b5a      	ldr	r3, [pc, #360]	; (8000b4c <MX_GPIO_Init+0x264>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f244 0101 	movw	r1, #16385	; 0x4001
 80009f4:	4856      	ldr	r0, [pc, #344]	; (8000b50 <MX_GPIO_Init+0x268>)
 80009f6:	f003 ff89 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RBMotor___In1_GPIO_Port, RBMotor___In1_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a00:	4854      	ldr	r0, [pc, #336]	; (8000b54 <MX_GPIO_Init+0x26c>)
 8000a02:	f003 ff83 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0c:	4852      	ldr	r0, [pc, #328]	; (8000b58 <MX_GPIO_Init+0x270>)
 8000a0e:	f003 ff7d 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000a18:	4850      	ldr	r0, [pc, #320]	; (8000b5c <MX_GPIO_Init+0x274>)
 8000a1a:	f003 ff77 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RBMotor___In2_GPIO_Port, RBMotor___In2_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a24:	484e      	ldr	r0, [pc, #312]	; (8000b60 <MX_GPIO_Init+0x278>)
 8000a26:	f003 ff71 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SD_CS_GPIO_Port, GPIO_SD_CS_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	484a      	ldr	r0, [pc, #296]	; (8000b58 <MX_GPIO_Init+0x270>)
 8000a30:	f003 ff6c 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2102      	movs	r1, #2
 8000a38:	484a      	ldr	r0, [pc, #296]	; (8000b64 <MX_GPIO_Init+0x27c>)
 8000a3a:	f003 ff67 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a3e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	483e      	ldr	r0, [pc, #248]	; (8000b50 <MX_GPIO_Init+0x268>)
 8000a58:	f003 fda8 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RBMotor___In1_Pin;
 8000a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a66:	2302      	movs	r3, #2
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RBMotor___In1_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4837      	ldr	r0, [pc, #220]	; (8000b54 <MX_GPIO_Init+0x26c>)
 8000a76:	f003 fd99 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	4831      	ldr	r0, [pc, #196]	; (8000b58 <MX_GPIO_Init+0x270>)
 8000a94:	f003 fd8a 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin;
 8000a98:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	482a      	ldr	r0, [pc, #168]	; (8000b5c <MX_GPIO_Init+0x274>)
 8000ab2:	f003 fd7b 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RBMotor___In2_Pin;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RBMotor___In2_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	4619      	mov	r1, r3
 8000ace:	4824      	ldr	r0, [pc, #144]	; (8000b60 <MX_GPIO_Init+0x278>)
 8000ad0:	f003 fd6c 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXTI0___Motor1_Pin|EXTI1___Motor1_Pin;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ad8:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <MX_GPIO_Init+0x280>)
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481c      	ldr	r0, [pc, #112]	; (8000b58 <MX_GPIO_Init+0x270>)
 8000ae8:	f003 fd60 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_SD_CS_Pin;
 8000aec:	2310      	movs	r3, #16
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIO_SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4815      	ldr	r0, [pc, #84]	; (8000b58 <MX_GPIO_Init+0x270>)
 8000b04:	f003 fd52 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4811      	ldr	r0, [pc, #68]	; (8000b64 <MX_GPIO_Init+0x27c>)
 8000b20:	f003 fd44 	bl	80045ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2006      	movs	r0, #6
 8000b2a:	f001 fae6 	bl	80020fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b2e:	2006      	movs	r0, #6
 8000b30:	f001 fafd 	bl	800212e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	2007      	movs	r0, #7
 8000b3a:	f001 fade 	bl	80020fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b3e:	2007      	movs	r0, #7
 8000b40:	f001 faf5 	bl	800212e <HAL_NVIC_EnableIRQ>

}
 8000b44:	bf00      	nop
 8000b46:	3738      	adds	r7, #56	; 0x38
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400
 8000b50:	58020400 	.word	0x58020400
 8000b54:	58021400 	.word	0x58021400
 8000b58:	58020c00 	.word	0x58020c00
 8000b5c:	58021800 	.word	0x58021800
 8000b60:	58020000 	.word	0x58020000
 8000b64:	58021000 	.word	0x58021000
 8000b68:	11310000 	.word	0x11310000

08000b6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b72:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <MX_I2C1_Init+0x78>)
 8000b74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <MX_I2C1_Init+0x7c>)
 8000b7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba6:	480e      	ldr	r0, [pc, #56]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000ba8:	f005 fc90 	bl	80064cc <HAL_I2C_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bb2:	f000 f9ed 	bl	8000f90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4809      	ldr	r0, [pc, #36]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000bba:	f005 fd31 	bl	8006620 <HAL_I2CEx_ConfigAnalogFilter>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bc4:	f000 f9e4 	bl	8000f90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000bcc:	f005 fd73 	bl	80066b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bd6:	f000 f9db 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	24000228 	.word	0x24000228
 8000be4:	40005400 	.word	0x40005400
 8000be8:	00301242 	.word	0x00301242

08000bec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0b8      	sub	sp, #224	; 0xe0
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	22bc      	movs	r2, #188	; 0xbc
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f00f fdf3 	bl	80107f8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a29      	ldr	r2, [pc, #164]	; (8000cbc <HAL_I2C_MspInit+0xd0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d14a      	bne.n	8000cb2 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f006 fd96 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c36:	f000 f9ab 	bl	8000f90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <HAL_I2C_MspInit+0xd4>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <HAL_I2C_MspInit+0xd4>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <HAL_I2C_MspInit+0xd4>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA___ChassisMPU_Pin|I2C1_SCL___ChassisMPU_Pin;
 8000c58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c72:	2304      	movs	r3, #4
 8000c74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4811      	ldr	r0, [pc, #68]	; (8000cc4 <HAL_I2C_MspInit+0xd8>)
 8000c80:	f003 fc94 	bl	80045ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_I2C_MspInit+0xd4>)
 8000c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c8a:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_I2C_MspInit+0xd4>)
 8000c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_I2C_MspInit+0xd4>)
 8000c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	201f      	movs	r0, #31
 8000ca8:	f001 fa27 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cac:	201f      	movs	r0, #31
 8000cae:	f001 fa3e 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	37e0      	adds	r7, #224	; 0xe0
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	58024400 	.word	0x58024400
 8000cc4:	58020400 	.word	0x58020400

08000cc8 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d101      	bne.n	8000ce2 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <rpmsg_send+0x3c>)
 8000ce0:	e00c      	b.n	8000cfc <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cea:	2301      	movs	r3, #1
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f00d fdbd 	bl	800e874 <rpmsg_send_offchannel_raw>
 8000cfa:	4603      	mov	r3, r0
					 len, true);
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	fffff829 	.word	0xfffff829

08000d08 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2220      	movs	r2, #32
 8000d1a:	68b9      	ldr	r1, [r7, #8]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f010 f92d 	bl	8010f7c <strncpy>
	ept->addr = src;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8000d4a:	e000      	b.n	8000d4e <main+0xa>
	{
		asm("nop");
 8000d4c:	bf00      	nop
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8000d4e:	4b47      	ldr	r3, [pc, #284]	; (8000e6c <main+0x128>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f8      	bne.n	8000d4c <main+0x8>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5a:	f001 f831 	bl	8001dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5e:	f000 f88f 	bl	8000e80 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <main+0x128>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	4a40      	ldr	r2, [pc, #256]	; (8000e6c <main+0x128>)
 8000d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <main+0x128>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f005 fb49 	bl	8006418 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d86:	2100      	movs	r1, #0
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f005 fb5f 	bl	800644c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d92:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d94:	bf00      	nop
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <main+0x128>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d104      	bne.n	8000dac <main+0x68>
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	1e5a      	subs	r2, r3, #1
 8000da6:	617a      	str	r2, [r7, #20]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	dcf4      	bgt.n	8000d96 <main+0x52>
if ( timeout < 0 )
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	da01      	bge.n	8000db6 <main+0x72>
{
Error_Handler();
 8000db2:	f000 f8ed 	bl	8000f90 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db6:	f7ff fd97 	bl	80008e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dba:	f7ff fd6d 	bl	8000898 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000dbe:	f000 fe53 	bl	8001a68 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000dc2:	f7ff fed3 	bl	8000b6c <MX_I2C1_Init>
  MX_SPI3_Init();
 8000dc6:	f000 f93f 	bl	8001048 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000dca:	f000 fc05 	bl	80015d8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000dce:	f000 fdff 	bl	80019d0 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000dd2:	f00f f9a3 	bl	801011c <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000dd6:	f00b fa11 	bl	800c1fc <MX_FATFS_Init>
  MX_SPI2_Init();
 8000dda:	f000 f8df 	bl	8000f9c <MX_SPI2_Init>
  MX_TIM3_Init();
 8000dde:	f000 fc99 	bl	8001714 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MAILBOX_Init();
 8000de2:	f00e ff5f 	bl	800fca4 <MAILBOX_Init>

  rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 8000de6:	2300      	movs	r3, #0
 8000de8:	9301      	str	r3, [sp, #4]
 8000dea:	2300      	movs	r3, #0
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	f04f 32ff 	mov.w	r2, #4294967295
 8000df6:	491e      	ldr	r1, [pc, #120]	; (8000e70 <main+0x12c>)
 8000df8:	481e      	ldr	r0, [pc, #120]	; (8000e74 <main+0x130>)
 8000dfa:	f7ff ff85 	bl	8000d08 <rpmsg_init_ept>
  			NULL, NULL);
  	/* Initialize OpenAmp and libmetal libraries */
  	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 8000dfe:	491e      	ldr	r1, [pc, #120]	; (8000e78 <main+0x134>)
 8000e00:	2000      	movs	r0, #0
 8000e02:	f00f f869 	bl	800fed8 <MX_OPENAMP_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <main+0xcc>
  	{
  		Error_Handler();
 8000e0c:	f000 f8c0 	bl	8000f90 <Error_Handler>
  	}

  	OPENAMP_Wait_EndPointready(&rp_endpoint);
 8000e10:	4818      	ldr	r0, [pc, #96]	; (8000e74 <main+0x130>)
 8000e12:	f00f f921 	bl	8010058 <OPENAMP_Wait_EndPointready>

  		/* Send the massage to the remote CPU */
  		int32_t status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8000e16:	2204      	movs	r2, #4
 8000e18:	4918      	ldr	r1, [pc, #96]	; (8000e7c <main+0x138>)
 8000e1a:	4816      	ldr	r0, [pc, #88]	; (8000e74 <main+0x130>)
 8000e1c:	f7ff ff54 	bl	8000cc8 <rpmsg_send>
 8000e20:	6138      	str	r0, [r7, #16]

  		if (status < 0)
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da01      	bge.n	8000e2c <main+0xe8>
  		{
  			Error_Handler();
 8000e28:	f000 f8b2 	bl	8000f90 <Error_Handler>

  		//	ssd1306_TestAll();
  	//	ssd1306_Init();
  	//	ssd1306_TestBorder();

  		uint8_t message = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	72fb      	strb	r3, [r7, #11]
  		while (message < 100)
 8000e30:	e011      	b.n	8000e56 <main+0x112>
  		{
  			/* Receive the massage from the remote CPU */
  			message = receive_message();
 8000e32:	f7ff fc4f 	bl	80006d4 <receive_message>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	72fb      	strb	r3, [r7, #11]
  			status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8000e3c:	f107 030b 	add.w	r3, r7, #11
 8000e40:	2201      	movs	r2, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	480b      	ldr	r0, [pc, #44]	; (8000e74 <main+0x130>)
 8000e46:	f7ff ff3f 	bl	8000cc8 <rpmsg_send>
 8000e4a:	6138      	str	r0, [r7, #16]
  			if (status < 0)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da01      	bge.n	8000e56 <main+0x112>
  			{
  				Error_Handler();
 8000e52:	f000 f89d 	bl	8000f90 <Error_Handler>
  		while (message < 100)
 8000e56:	7afb      	ldrb	r3, [r7, #11]
 8000e58:	2b63      	cmp	r3, #99	; 0x63
 8000e5a:	d9ea      	bls.n	8000e32 <main+0xee>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  message = receive_message();
 8000e5c:	f7ff fc3a 	bl	80006d4 <receive_message>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	72fb      	strb	r3, [r7, #11]
	  int a= 1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
  {
 8000e6a:	e7f7      	b.n	8000e5c <main+0x118>
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	08011780 	.word	0x08011780
 8000e74:	2400027c 	.word	0x2400027c
 8000e78:	08000729 	.word	0x08000729
 8000e7c:	24000170 	.word	0x24000170

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09c      	sub	sp, #112	; 0x70
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	224c      	movs	r2, #76	; 0x4c
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f00f fcb2 	bl	80107f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2220      	movs	r2, #32
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00f fcac 	bl	80107f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ea0:	2004      	movs	r0, #4
 8000ea2:	f005 fc55 	bl	8006750 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <SystemClock_Config+0x104>)
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	4a35      	ldr	r2, [pc, #212]	; (8000f84 <SystemClock_Config+0x104>)
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000eb6:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <SystemClock_Config+0x104>)
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <SystemClock_Config+0x108>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ec8:	4a2f      	ldr	r2, [pc, #188]	; (8000f88 <SystemClock_Config+0x108>)
 8000eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <SystemClock_Config+0x108>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000edc:	bf00      	nop
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <SystemClock_Config+0x108>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eea:	d1f8      	bne.n	8000ede <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <SystemClock_Config+0x10c>)
 8000eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef0:	f023 0303 	bic.w	r3, r3, #3
 8000ef4:	4a25      	ldr	r2, [pc, #148]	; (8000f8c <SystemClock_Config+0x10c>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000efc:	2301      	movs	r3, #1
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f06:	2302      	movs	r3, #2
 8000f08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000f12:	2312      	movs	r3, #18
 8000f14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f22:	230c      	movs	r3, #12
 8000f24:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000f26:	2302      	movs	r3, #2
 8000f28:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000f2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	4618      	mov	r0, r3
 8000f36:	f005 fc75 	bl	8006824 <HAL_RCC_OscConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f40:	f000 f826 	bl	8000f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f44:	233f      	movs	r3, #63	; 0x3f
 8000f46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f58:	2340      	movs	r3, #64	; 0x40
 8000f5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f006 f86a 	bl	8007044 <HAL_RCC_ClockConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000f76:	f000 f80b 	bl	8000f90 <Error_Handler>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3770      	adds	r7, #112	; 0x70
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	58000400 	.word	0x58000400
 8000f88:	58024800 	.word	0x58024800
 8000f8c:	58024400 	.word	0x58024400

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <Error_Handler+0x8>
	...

08000f9c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000fa2:	4a28      	ldr	r2, [pc, #160]	; (8001044 <MX_SPI2_Init+0xa8>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000fa8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fae:	4b24      	ldr	r3, [pc, #144]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000fc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fcc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000fd0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000fd4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000ff0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_SPI2_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_SPI2_Init+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <MX_SPI2_Init+0xa4>)
 800100a:	2200      	movs	r2, #0
 800100c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_SPI2_Init+0xa4>)
 8001010:	2200      	movs	r2, #0
 8001012:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <MX_SPI2_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_SPI2_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <MX_SPI2_Init+0xa4>)
 8001022:	2200      	movs	r2, #0
 8001024:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_SPI2_Init+0xa4>)
 8001028:	2200      	movs	r2, #0
 800102a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_SPI2_Init+0xa4>)
 800102e:	f007 fef7 	bl	8008e20 <HAL_SPI_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001038:	f7ff ffaa 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	240002c0 	.word	0x240002c0
 8001044:	40003800 	.word	0x40003800

08001048 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <MX_SPI3_Init+0xa8>)
 800104e:	4a29      	ldr	r2, [pc, #164]	; (80010f4 <MX_SPI3_Init+0xac>)
 8001050:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <MX_SPI3_Init+0xa8>)
 8001054:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001058:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 800105a:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <MX_SPI3_Init+0xa8>)
 800105c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001060:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <MX_SPI3_Init+0xa8>)
 8001064:	2207      	movs	r2, #7
 8001066:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_SPI3_Init+0xa8>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <MX_SPI3_Init+0xa8>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <MX_SPI3_Init+0xa8>)
 8001076:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800107a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_SPI3_Init+0xa8>)
 800107e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001082:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_SPI3_Init+0xa8>)
 8001086:	2200      	movs	r2, #0
 8001088:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_SPI3_Init+0xa8>)
 800108c:	2200      	movs	r2, #0
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_SPI3_Init+0xa8>)
 8001092:	2200      	movs	r2, #0
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_SPI3_Init+0xa8>)
 8001098:	2200      	movs	r2, #0
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_SPI3_Init+0xa8>)
 800109e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_SPI3_Init+0xa8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_SPI3_Init+0xa8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_SPI3_Init+0xa8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_SPI3_Init+0xa8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_SPI3_Init+0xa8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_SPI3_Init+0xa8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_SPI3_Init+0xa8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_SPI3_Init+0xa8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_SPI3_Init+0xa8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_SPI3_Init+0xa8>)
 80010dc:	f007 fea0 	bl	8008e20 <HAL_SPI_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80010e6:	f7ff ff53 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	24000348 	.word	0x24000348
 80010f4:	40003c00 	.word	0x40003c00

080010f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0bc      	sub	sp, #240	; 0xf0
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	22bc      	movs	r2, #188	; 0xbc
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f00f fb6d 	bl	80107f8 <memset>
  if(spiHandle->Instance==SPI2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a6d      	ldr	r2, [pc, #436]	; (80012d8 <HAL_SPI_MspInit+0x1e0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d166      	bne.n	80011f6 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800112e:	2300      	movs	r3, #0
 8001130:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	4618      	mov	r0, r3
 8001138:	f006 fb10 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001142:	f7ff ff25 	bl	8000f90 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001146:	4b65      	ldr	r3, [pc, #404]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 8001148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800114c:	4a63      	ldr	r2, [pc, #396]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 800114e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001152:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001156:	4b61      	ldr	r3, [pc, #388]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 8001158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800115c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	4a5c      	ldr	r2, [pc, #368]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001174:	4b59      	ldr	r3, [pc, #356]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	61bb      	str	r3, [r7, #24]
 8001180:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001182:	4b56      	ldr	r3, [pc, #344]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	4a54      	ldr	r2, [pc, #336]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001192:	4b52      	ldr	r3, [pc, #328]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011a0:	230c      	movs	r3, #12
 80011a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011b8:	2305      	movs	r3, #5
 80011ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011c2:	4619      	mov	r1, r3
 80011c4:	4846      	ldr	r0, [pc, #280]	; (80012e0 <HAL_SPI_MspInit+0x1e8>)
 80011c6:	f003 f9f1 	bl	80045ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011ca:	2308      	movs	r3, #8
 80011cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011e2:	2305      	movs	r3, #5
 80011e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011ec:	4619      	mov	r1, r3
 80011ee:	483d      	ldr	r0, [pc, #244]	; (80012e4 <HAL_SPI_MspInit+0x1ec>)
 80011f0:	f003 f9dc 	bl	80045ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80011f4:	e06b      	b.n	80012ce <HAL_SPI_MspInit+0x1d6>
  else if(spiHandle->Instance==SPI3)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a3b      	ldr	r2, [pc, #236]	; (80012e8 <HAL_SPI_MspInit+0x1f0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d166      	bne.n	80012ce <HAL_SPI_MspInit+0x1d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001204:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001206:	2300      	movs	r3, #0
 8001208:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	4618      	mov	r0, r3
 8001210:	f006 faa4 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_SPI_MspInit+0x126>
      Error_Handler();
 800121a:	f7ff feb9 	bl	8000f90 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800121e:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 8001220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001224:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 8001226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 8001230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001242:	4a26      	ldr	r2, [pc, #152]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001260:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <HAL_SPI_MspInit+0x1e4>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MOSI___LCD_Pin;
 8001278:	2304      	movs	r3, #4
 800127a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001290:	2307      	movs	r3, #7
 8001292:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SPI3_MOSI___LCD_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800129a:	4619      	mov	r1, r3
 800129c:	4813      	ldr	r0, [pc, #76]	; (80012ec <HAL_SPI_MspInit+0x1f4>)
 800129e:	f003 f985 	bl	80045ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK___LCD_Pin;
 80012a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012bc:	2306      	movs	r3, #6
 80012be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SPI3_SCK___LCD_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_SPI_MspInit+0x1e8>)
 80012ca:	f003 f96f 	bl	80045ac <HAL_GPIO_Init>
}
 80012ce:	bf00      	nop
 80012d0:	37f0      	adds	r7, #240	; 0xf0
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40003800 	.word	0x40003800
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020800 	.word	0x58020800
 80012e4:	58020c00 	.word	0x58020c00
 80012e8:	40003c00 	.word	0x40003c00
 80012ec:	58020400 	.word	0x58020400

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_MspInit+0x5c>)
 80012f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012fc:	4a13      	ldr	r2, [pc, #76]	; (800134c <HAL_MspInit+0x5c>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_MspInit+0x5c>)
 8001308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2104      	movs	r1, #4
 8001318:	2041      	movs	r0, #65	; 0x41
 800131a:	f000 feee 	bl	80020fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 800131e:	2041      	movs	r0, #65	; 0x41
 8001320:	f000 ff05 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2104      	movs	r1, #4
 8001328:	207d      	movs	r0, #125	; 0x7d
 800132a:	f000 fee6 	bl	80020fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800132e:	207d      	movs	r0, #125	; 0x7d
 8001330:	f000 fefd 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2104      	movs	r1, #4
 8001338:	2094      	movs	r0, #148	; 0x94
 800133a:	f000 fede 	bl	80020fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 800133e:	2094      	movs	r0, #148	; 0x94
 8001340:	f000 fef5 	bl	800212e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	58024400 	.word	0x58024400

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <NMI_Handler+0x4>

08001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <MemManage_Handler+0x4>

08001362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <UsageFault_Handler+0x4>

0800136e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139c:	f000 fd82 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f003 fac8 	bl	800493e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80013b6:	2002      	movs	r0, #2
 80013b8:	f003 fac1 	bl	800493e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <DMA1_Stream0_IRQHandler+0x10>)
 80013c6:	f001 ff8b 	bl	80032e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	24000570 	.word	0x24000570

080013d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <DMA1_Stream1_IRQHandler+0x10>)
 80013da:	f001 ff81 	bl	80032e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	24000468 	.word	0x24000468

080013e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <I2C1_EV_IRQHandler+0x10>)
 80013ee:	f005 f8fd 	bl	80065ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	24000228 	.word	0x24000228

080013fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <USART1_IRQHandler+0x10>)
 8001402:	f008 fc4f 	bl	8009ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	240005e8 	.word	0x240005e8

08001410 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <OTG_FS_IRQHandler+0x10>)
 8001426:	f003 fd19 	bl	8004e5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	24004520 	.word	0x24004520

08001434 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001438:	f005 f82e 	bl	8006498 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
	return 1;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_kill>:

int _kill(int pid, int sig)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001468:	f00f f96c 	bl	8010744 <__errno>
 800146c:	4603      	mov	r3, r0
 800146e:	2216      	movs	r2, #22
 8001470:	601a      	str	r2, [r3, #0]
	return -1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_exit>:

void _exit (int status)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001486:	f04f 31ff 	mov.w	r1, #4294967295
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffe7 	bl	800145e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001490:	e7fe      	b.n	8001490 <_exit+0x12>

08001492 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e00a      	b.n	80014ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014a4:	f3af 8000 	nop.w
 80014a8:	4601      	mov	r1, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	60ba      	str	r2, [r7, #8]
 80014b0:	b2ca      	uxtb	r2, r1
 80014b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	3301      	adds	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dbf0      	blt.n	80014a4 <_read+0x12>
	}

return len;
 80014c2:	687b      	ldr	r3, [r7, #4]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e009      	b.n	80014f2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	60ba      	str	r2, [r7, #8]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dbf1      	blt.n	80014de <_write+0x12>
	}
	return len;
 80014fa:	687b      	ldr	r3, [r7, #4]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <_close>:

int _close(int file)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	return -1;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152c:	605a      	str	r2, [r3, #4]
	return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_isatty>:

int _isatty(int file)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	return 1;
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001552:	b480      	push	{r7}
 8001554:	b085      	sub	sp, #20
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
	return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001574:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <_sbrk+0x5c>)
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <_sbrk+0x60>)
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <_sbrk+0x64>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <_sbrk+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800159c:	f00f f8d2 	bl	8010744 <__errno>
 80015a0:	4603      	mov	r3, r0
 80015a2:	220c      	movs	r2, #12
 80015a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	e009      	b.n	80015c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <_sbrk+0x64>)
 80015bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	24040000 	.word	0x24040000
 80015cc:	00000400 	.word	0x00000400
 80015d0:	24000174 	.word	0x24000174
 80015d4:	24004838 	.word	0x24004838

080015d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b096      	sub	sp, #88	; 0x58
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	222c      	movs	r2, #44	; 0x2c
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f00f f8f7 	bl	80107f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800160a:	4b40      	ldr	r3, [pc, #256]	; (800170c <MX_TIM1_Init+0x134>)
 800160c:	4a40      	ldr	r2, [pc, #256]	; (8001710 <MX_TIM1_Init+0x138>)
 800160e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75;
 8001610:	4b3e      	ldr	r3, [pc, #248]	; (800170c <MX_TIM1_Init+0x134>)
 8001612:	224b      	movs	r2, #75	; 0x4b
 8001614:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b3d      	ldr	r3, [pc, #244]	; (800170c <MX_TIM1_Init+0x134>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800161c:	4b3b      	ldr	r3, [pc, #236]	; (800170c <MX_TIM1_Init+0x134>)
 800161e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001622:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b39      	ldr	r3, [pc, #228]	; (800170c <MX_TIM1_Init+0x134>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <MX_TIM1_Init+0x134>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <MX_TIM1_Init+0x134>)
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001636:	4835      	ldr	r0, [pc, #212]	; (800170c <MX_TIM1_Init+0x134>)
 8001638:	f007 fd0f 	bl	800905a <HAL_TIM_PWM_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001642:	f7ff fca5 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001652:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001656:	4619      	mov	r1, r3
 8001658:	482c      	ldr	r0, [pc, #176]	; (800170c <MX_TIM1_Init+0x134>)
 800165a:	f008 f9cd 	bl	80099f8 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001664:	f7ff fc94 	bl	8000f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001668:	2360      	movs	r3, #96	; 0x60
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 800166c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001672:	2300      	movs	r3, #0
 8001674:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001686:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800168a:	2200      	movs	r2, #0
 800168c:	4619      	mov	r1, r3
 800168e:	481f      	ldr	r0, [pc, #124]	; (800170c <MX_TIM1_Init+0x134>)
 8001690:	f007 fd3a 	bl	8009108 <HAL_TIM_PWM_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800169a:	f7ff fc79 	bl	8000f90 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016a6:	2204      	movs	r2, #4
 80016a8:	4619      	mov	r1, r3
 80016aa:	4818      	ldr	r0, [pc, #96]	; (800170c <MX_TIM1_Init+0x134>)
 80016ac:	f007 fd2c 	bl	8009108 <HAL_TIM_PWM_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 80016b6:	f7ff fc6b 	bl	8000f90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4807      	ldr	r0, [pc, #28]	; (800170c <MX_TIM1_Init+0x134>)
 80016f0:	f008 fa0a 	bl	8009b08 <HAL_TIMEx_ConfigBreakDeadTime>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80016fa:	f7ff fc49 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <MX_TIM1_Init+0x134>)
 8001700:	f000 f8be 	bl	8001880 <HAL_TIM_MspPostInit>

}
 8001704:	bf00      	nop
 8001706:	3758      	adds	r7, #88	; 0x58
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2400041c 	.word	0x2400041c
 8001710:	40010000 	.word	0x40010000

08001714 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001726:	463b      	mov	r3, r7
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	615a      	str	r2, [r3, #20]
 8001736:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001738:	4b32      	ldr	r3, [pc, #200]	; (8001804 <MX_TIM3_Init+0xf0>)
 800173a:	4a33      	ldr	r2, [pc, #204]	; (8001808 <MX_TIM3_Init+0xf4>)
 800173c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7500;
 800173e:	4b31      	ldr	r3, [pc, #196]	; (8001804 <MX_TIM3_Init+0xf0>)
 8001740:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001744:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001746:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <MX_TIM3_Init+0xf0>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <MX_TIM3_Init+0xf0>)
 800174e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001752:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001754:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <MX_TIM3_Init+0xf0>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <MX_TIM3_Init+0xf0>)
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001760:	4828      	ldr	r0, [pc, #160]	; (8001804 <MX_TIM3_Init+0xf0>)
 8001762:	f007 fc7a 	bl	800905a <HAL_TIM_PWM_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800176c:	f7ff fc10 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	4821      	ldr	r0, [pc, #132]	; (8001804 <MX_TIM3_Init+0xf0>)
 8001780:	f008 f93a 	bl	80099f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800178a:	f7ff fc01 	bl	8000f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178e:	2360      	movs	r3, #96	; 0x60
 8001790:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	4817      	ldr	r0, [pc, #92]	; (8001804 <MX_TIM3_Init+0xf0>)
 80017a6:	f007 fcaf 	bl	8009108 <HAL_TIM_PWM_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80017b0:	f7ff fbee 	bl	8000f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017b4:	463b      	mov	r3, r7
 80017b6:	2204      	movs	r2, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	4812      	ldr	r0, [pc, #72]	; (8001804 <MX_TIM3_Init+0xf0>)
 80017bc:	f007 fca4 	bl	8009108 <HAL_TIM_PWM_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80017c6:	f7ff fbe3 	bl	8000f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017ca:	463b      	mov	r3, r7
 80017cc:	2208      	movs	r2, #8
 80017ce:	4619      	mov	r1, r3
 80017d0:	480c      	ldr	r0, [pc, #48]	; (8001804 <MX_TIM3_Init+0xf0>)
 80017d2:	f007 fc99 	bl	8009108 <HAL_TIM_PWM_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80017dc:	f7ff fbd8 	bl	8000f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	220c      	movs	r2, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	4807      	ldr	r0, [pc, #28]	; (8001804 <MX_TIM3_Init+0xf0>)
 80017e8:	f007 fc8e 	bl	8009108 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 80017f2:	f7ff fbcd 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017f6:	4803      	ldr	r0, [pc, #12]	; (8001804 <MX_TIM3_Init+0xf0>)
 80017f8:	f000 f842 	bl	8001880 <HAL_TIM_MspPostInit>

}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	240003d0 	.word	0x240003d0
 8001808:	40000400 	.word	0x40000400

0800180c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a16      	ldr	r2, [pc, #88]	; (8001874 <HAL_TIM_PWM_MspInit+0x68>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10f      	bne.n	800183e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_TIM_PWM_MspInit+0x6c>)
 8001820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <HAL_TIM_PWM_MspInit+0x6c>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_TIM_PWM_MspInit+0x6c>)
 8001830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800183c:	e013      	b.n	8001866 <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <HAL_TIM_PWM_MspInit+0x70>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d10e      	bne.n	8001866 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_TIM_PWM_MspInit+0x6c>)
 800184a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_TIM_PWM_MspInit+0x6c>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <HAL_TIM_PWM_MspInit+0x6c>)
 800185a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40010000 	.word	0x40010000
 8001878:	58024400 	.word	0x58024400
 800187c:	40000400 	.word	0x40000400

08001880 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a45      	ldr	r2, [pc, #276]	; (80019b4 <HAL_TIM_MspPostInit+0x134>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d120      	bne.n	80018e4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a2:	4b45      	ldr	r3, [pc, #276]	; (80019b8 <HAL_TIM_MspPostInit+0x138>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	4a43      	ldr	r2, [pc, #268]	; (80019b8 <HAL_TIM_MspPostInit+0x138>)
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b2:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <HAL_TIM_MspPostInit+0x138>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1___LCD_Brightness_Pin|TIM1_CH2___LIDAR_motor_ctrl_Pin;
 80018c0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018d2:	2301      	movs	r3, #1
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	4837      	ldr	r0, [pc, #220]	; (80019bc <HAL_TIM_MspPostInit+0x13c>)
 80018de:	f002 fe65 	bl	80045ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018e2:	e062      	b.n	80019aa <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM3)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a35      	ldr	r2, [pc, #212]	; (80019c0 <HAL_TIM_MspPostInit+0x140>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d15d      	bne.n	80019aa <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_TIM_MspPostInit+0x138>)
 80018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f4:	4a30      	ldr	r2, [pc, #192]	; (80019b8 <HAL_TIM_MspPostInit+0x138>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fe:	4b2e      	ldr	r3, [pc, #184]	; (80019b8 <HAL_TIM_MspPostInit+0x138>)
 8001900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <HAL_TIM_MspPostInit+0x138>)
 800190e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001912:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <HAL_TIM_MspPostInit+0x138>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191c:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <HAL_TIM_MspPostInit+0x138>)
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <HAL_TIM_MspPostInit+0x138>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001930:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <HAL_TIM_MspPostInit+0x138>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <HAL_TIM_MspPostInit+0x138>)
 800193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1___Motor_Speed_Pin|TIM3_CH2___Motor_Speed_Pin;
 8001948:	23c0      	movs	r3, #192	; 0xc0
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001958:	2302      	movs	r3, #2
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	4818      	ldr	r0, [pc, #96]	; (80019c4 <HAL_TIM_MspPostInit+0x144>)
 8001964:	f002 fe22 	bl	80045ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH4___Motor_Speed_Pin;
 8001968:	2302      	movs	r3, #2
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001978:	2302      	movs	r3, #2
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH4___Motor_Speed_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4619      	mov	r1, r3
 8001982:	4811      	ldr	r0, [pc, #68]	; (80019c8 <HAL_TIM_MspPostInit+0x148>)
 8001984:	f002 fe12 	bl	80045ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH3___Motor_Speed_Pin;
 8001988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800199a:	2302      	movs	r3, #2
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH3___Motor_Speed_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4809      	ldr	r0, [pc, #36]	; (80019cc <HAL_TIM_MspPostInit+0x14c>)
 80019a6:	f002 fe01 	bl	80045ac <HAL_GPIO_Init>
}
 80019aa:	bf00      	nop
 80019ac:	3730      	adds	r7, #48	; 0x30
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40010000 	.word	0x40010000
 80019b8:	58024400 	.word	0x58024400
 80019bc:	58021000 	.word	0x58021000
 80019c0:	40000400 	.word	0x40000400
 80019c4:	58020000 	.word	0x58020000
 80019c8:	58020400 	.word	0x58020400
 80019cc:	58020800 	.word	0x58020800

080019d0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 80019d6:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <MX_USART1_UART_Init+0x94>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a18:	4811      	ldr	r0, [pc, #68]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 8001a1a:	f008 f8f3 	bl	8009c04 <HAL_UART_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a24:	f7ff fab4 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 8001a2c:	f009 fb9b 	bl	800b166 <HAL_UARTEx_SetTxFifoThreshold>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a36:	f7ff faab 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4808      	ldr	r0, [pc, #32]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 8001a3e:	f009 fbd0 	bl	800b1e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a48:	f7ff faa2 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <MX_USART1_UART_Init+0x90>)
 8001a4e:	f009 fb51 	bl	800b0f4 <HAL_UARTEx_DisableFifoMode>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a58:	f7ff fa9a 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	240005e8 	.word	0x240005e8
 8001a64:	40011000 	.word	0x40011000

08001a68 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001a6e:	4a23      	ldr	r2, [pc, #140]	; (8001afc <MX_USART3_UART_Init+0x94>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001ab2:	f008 f8a7 	bl	8009c04 <HAL_UART_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001abc:	f7ff fa68 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	480d      	ldr	r0, [pc, #52]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001ac4:	f009 fb4f 	bl	800b166 <HAL_UARTEx_SetTxFifoThreshold>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ace:	f7ff fa5f 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4808      	ldr	r0, [pc, #32]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001ad6:	f009 fb84 	bl	800b1e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ae0:	f7ff fa56 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	; (8001af8 <MX_USART3_UART_Init+0x90>)
 8001ae6:	f009 fb05 	bl	800b0f4 <HAL_UARTEx_DisableFifoMode>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001af0:	f7ff fa4e 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	240004e0 	.word	0x240004e0
 8001afc:	40004800 	.word	0x40004800

08001b00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b0ba      	sub	sp, #232	; 0xe8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	22bc      	movs	r2, #188	; 0xbc
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f00e fe69 	bl	80107f8 <memset>
  if(uartHandle->Instance==USART1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a87      	ldr	r2, [pc, #540]	; (8001d48 <HAL_UART_MspInit+0x248>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	f040 8090 	bne.w	8001c52 <HAL_UART_MspInit+0x152>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3c:	f107 0318 	add.w	r3, r7, #24
 8001b40:	4618      	mov	r0, r3
 8001b42:	f005 fe0b 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001b4c:	f7ff fa20 	bl	8000f90 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b50:	4b7e      	ldr	r3, [pc, #504]	; (8001d4c <HAL_UART_MspInit+0x24c>)
 8001b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b56:	4a7d      	ldr	r2, [pc, #500]	; (8001d4c <HAL_UART_MspInit+0x24c>)
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b60:	4b7a      	ldr	r3, [pc, #488]	; (8001d4c <HAL_UART_MspInit+0x24c>)
 8001b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b77      	ldr	r3, [pc, #476]	; (8001d4c <HAL_UART_MspInit+0x24c>)
 8001b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b74:	4a75      	ldr	r2, [pc, #468]	; (8001d4c <HAL_UART_MspInit+0x24c>)
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b7e:	4b73      	ldr	r3, [pc, #460]	; (8001d4c <HAL_UART_MspInit+0x24c>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USART1_RX___BLE_Pin;
 8001b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(USART1_RX___BLE_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4867      	ldr	r0, [pc, #412]	; (8001d50 <HAL_UART_MspInit+0x250>)
 8001bb4:	f002 fcfa 	bl	80045ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_TX___BLE_Pin;
 8001bb8:	2340      	movs	r3, #64	; 0x40
 8001bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(USART1_TX___BLE_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	485c      	ldr	r0, [pc, #368]	; (8001d50 <HAL_UART_MspInit+0x250>)
 8001bde:	f002 fce5 	bl	80045ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001be2:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <HAL_UART_MspInit+0x254>)
 8001be4:	4a5c      	ldr	r2, [pc, #368]	; (8001d58 <HAL_UART_MspInit+0x258>)
 8001be6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001be8:	4b5a      	ldr	r3, [pc, #360]	; (8001d54 <HAL_UART_MspInit+0x254>)
 8001bea:	2229      	movs	r2, #41	; 0x29
 8001bec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bee:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <HAL_UART_MspInit+0x254>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf4:	4b57      	ldr	r3, [pc, #348]	; (8001d54 <HAL_UART_MspInit+0x254>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bfa:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <HAL_UART_MspInit+0x254>)
 8001bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c00:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c02:	4b54      	ldr	r3, [pc, #336]	; (8001d54 <HAL_UART_MspInit+0x254>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c08:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <HAL_UART_MspInit+0x254>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001c0e:	4b51      	ldr	r3, [pc, #324]	; (8001d54 <HAL_UART_MspInit+0x254>)
 8001c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c14:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c16:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <HAL_UART_MspInit+0x254>)
 8001c18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c1c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c1e:	4b4d      	ldr	r3, [pc, #308]	; (8001d54 <HAL_UART_MspInit+0x254>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c24:	484b      	ldr	r0, [pc, #300]	; (8001d54 <HAL_UART_MspInit+0x254>)
 8001c26:	f000 fa9d 	bl	8002164 <HAL_DMA_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8001c30:	f7ff f9ae 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a47      	ldr	r2, [pc, #284]	; (8001d54 <HAL_UART_MspInit+0x254>)
 8001c38:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c3a:	4a46      	ldr	r2, [pc, #280]	; (8001d54 <HAL_UART_MspInit+0x254>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	2025      	movs	r0, #37	; 0x25
 8001c46:	f000 fa58 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c4a:	2025      	movs	r0, #37	; 0x25
 8001c4c:	f000 fa6f 	bl	800212e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c50:	e075      	b.n	8001d3e <HAL_UART_MspInit+0x23e>
  else if(uartHandle->Instance==USART3)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a41      	ldr	r2, [pc, #260]	; (8001d5c <HAL_UART_MspInit+0x25c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d170      	bne.n	8001d3e <HAL_UART_MspInit+0x23e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c66:	f107 0318 	add.w	r3, r7, #24
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f005 fd76 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_UART_MspInit+0x17a>
      Error_Handler();
 8001c76:	f7ff f98b 	bl	8000f90 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_UART_MspInit+0x24c>)
 8001c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c80:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <HAL_UART_MspInit+0x24c>)
 8001c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c8a:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_UART_MspInit+0x24c>)
 8001c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c98:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <HAL_UART_MspInit+0x24c>)
 8001c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9e:	4a2b      	ldr	r2, [pc, #172]	; (8001d4c <HAL_UART_MspInit+0x24c>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_UART_MspInit+0x24c>)
 8001caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001cb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4820      	ldr	r0, [pc, #128]	; (8001d60 <HAL_UART_MspInit+0x260>)
 8001cde:	f002 fc65 	bl	80045ac <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <HAL_UART_MspInit+0x264>)
 8001ce4:	4a20      	ldr	r2, [pc, #128]	; (8001d68 <HAL_UART_MspInit+0x268>)
 8001ce6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <HAL_UART_MspInit+0x264>)
 8001cea:	222d      	movs	r2, #45	; 0x2d
 8001cec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <HAL_UART_MspInit+0x264>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_UART_MspInit+0x264>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_UART_MspInit+0x264>)
 8001cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d00:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_UART_MspInit+0x264>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <HAL_UART_MspInit+0x264>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_UART_MspInit+0x264>)
 8001d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d14:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_UART_MspInit+0x264>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_UART_MspInit+0x264>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d22:	4810      	ldr	r0, [pc, #64]	; (8001d64 <HAL_UART_MspInit+0x264>)
 8001d24:	f000 fa1e 	bl	8002164 <HAL_DMA_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_UART_MspInit+0x232>
      Error_Handler();
 8001d2e:	f7ff f92f 	bl	8000f90 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <HAL_UART_MspInit+0x264>)
 8001d36:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d38:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_UART_MspInit+0x264>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d3e:	bf00      	nop
 8001d40:	37e8      	adds	r7, #232	; 0xe8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40011000 	.word	0x40011000
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58020400 	.word	0x58020400
 8001d54:	24000570 	.word	0x24000570
 8001d58:	40020010 	.word	0x40020010
 8001d5c:	40004800 	.word	0x40004800
 8001d60:	58020c00 	.word	0x58020c00
 8001d64:	24000468 	.word	0x24000468
 8001d68:	40020028 	.word	0x40020028

08001d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d70:	f7fe fcf8 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d74:	480c      	ldr	r0, [pc, #48]	; (8001da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d76:	490d      	ldr	r1, [pc, #52]	; (8001dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d78:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d8c:	4c0a      	ldr	r4, [pc, #40]	; (8001db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f00e fceb 	bl	8010774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9e:	f7fe ffd1 	bl	8000d44 <main>
  bx  lr
 8001da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001da4:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001da8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dac:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 8001db0:	08011b0c 	.word	0x08011b0c
  ldr r2, =_sbss
 8001db4:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 8001db8:	24004834 	.word	0x24004834

08001dbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC3_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	f000 f98c 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dcc:	f005 faf0 	bl	80073b0 <HAL_RCC_GetSysClockFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_Init+0x68>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	4913      	ldr	r1, [pc, #76]	; (8001e2c <HAL_Init+0x6c>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_Init+0x68>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <HAL_Init+0x6c>)
 8001df4:	5cd3      	ldrb	r3, [r2, r3]
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <HAL_Init+0x70>)
 8001e02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e04:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <HAL_Init+0x74>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f000 f814 	bl	8001e38 <HAL_InitTick>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e002      	b.n	8001e20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1a:	f7ff fa69 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	58024400 	.word	0x58024400
 8001e2c:	08011984 	.word	0x08011984
 8001e30:	24000004 	.word	0x24000004
 8001e34:	24000000 	.word	0x24000000

08001e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_InitTick+0x60>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e021      	b.n	8001e90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <HAL_InitTick+0x64>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_InitTick+0x60>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f971 	bl	800214a <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 f93b 	bl	80020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <HAL_InitTick+0x68>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2400000c 	.word	0x2400000c
 8001e9c:	24000000 	.word	0x24000000
 8001ea0:	24000008 	.word	0x24000008

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	2400000c 	.word	0x2400000c
 8001ec8:	24000678 	.word	0x24000678

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	24000678 	.word	0x24000678

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff ffee 	bl	8001ecc <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d005      	beq.n	8001f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_Delay+0x44>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff ffde 	bl	8001ecc <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f7      	bhi.n	8001f0c <HAL_Delay+0x28>
  {
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2400000c 	.word	0x2400000c

08001f2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_GetREVID+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0c1b      	lsrs	r3, r3, #16
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	5c001000 	.word	0x5c001000

08001f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <__NVIC_SetPriorityGrouping+0x40>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <__NVIC_SetPriorityGrouping+0x40>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	60d3      	str	r3, [r2, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00
 8001f88:	05fa0000 	.word	0x05fa0000

08001f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db0b      	blt.n	8001fd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4907      	ldr	r1, [pc, #28]	; (8001fe0 <__NVIC_EnableIRQ+0x38>)
 8001fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2001      	movs	r0, #1
 8001fca:	fa00 f202 	lsl.w	r2, r0, r2
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f7ff ff8e 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff29 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff40 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff90 	bl	8002038 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5f 	bl	8001fe4 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff33 	bl	8001fa8 <__NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffa4 	bl	80020a0 <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff feae 	bl	8001ecc <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e316      	b.n	80027aa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a66      	ldr	r2, [pc, #408]	; (800231c <HAL_DMA_Init+0x1b8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d04a      	beq.n	800221c <HAL_DMA_Init+0xb8>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a65      	ldr	r2, [pc, #404]	; (8002320 <HAL_DMA_Init+0x1bc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d045      	beq.n	800221c <HAL_DMA_Init+0xb8>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a63      	ldr	r2, [pc, #396]	; (8002324 <HAL_DMA_Init+0x1c0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d040      	beq.n	800221c <HAL_DMA_Init+0xb8>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a62      	ldr	r2, [pc, #392]	; (8002328 <HAL_DMA_Init+0x1c4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d03b      	beq.n	800221c <HAL_DMA_Init+0xb8>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a60      	ldr	r2, [pc, #384]	; (800232c <HAL_DMA_Init+0x1c8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d036      	beq.n	800221c <HAL_DMA_Init+0xb8>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a5f      	ldr	r2, [pc, #380]	; (8002330 <HAL_DMA_Init+0x1cc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d031      	beq.n	800221c <HAL_DMA_Init+0xb8>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a5d      	ldr	r2, [pc, #372]	; (8002334 <HAL_DMA_Init+0x1d0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d02c      	beq.n	800221c <HAL_DMA_Init+0xb8>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a5c      	ldr	r2, [pc, #368]	; (8002338 <HAL_DMA_Init+0x1d4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d027      	beq.n	800221c <HAL_DMA_Init+0xb8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a5a      	ldr	r2, [pc, #360]	; (800233c <HAL_DMA_Init+0x1d8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d022      	beq.n	800221c <HAL_DMA_Init+0xb8>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a59      	ldr	r2, [pc, #356]	; (8002340 <HAL_DMA_Init+0x1dc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d01d      	beq.n	800221c <HAL_DMA_Init+0xb8>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a57      	ldr	r2, [pc, #348]	; (8002344 <HAL_DMA_Init+0x1e0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d018      	beq.n	800221c <HAL_DMA_Init+0xb8>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a56      	ldr	r2, [pc, #344]	; (8002348 <HAL_DMA_Init+0x1e4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d013      	beq.n	800221c <HAL_DMA_Init+0xb8>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a54      	ldr	r2, [pc, #336]	; (800234c <HAL_DMA_Init+0x1e8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00e      	beq.n	800221c <HAL_DMA_Init+0xb8>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a53      	ldr	r2, [pc, #332]	; (8002350 <HAL_DMA_Init+0x1ec>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d009      	beq.n	800221c <HAL_DMA_Init+0xb8>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a51      	ldr	r2, [pc, #324]	; (8002354 <HAL_DMA_Init+0x1f0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_DMA_Init+0xb8>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a50      	ldr	r2, [pc, #320]	; (8002358 <HAL_DMA_Init+0x1f4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d101      	bne.n	8002220 <HAL_DMA_Init+0xbc>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <HAL_DMA_Init+0xbe>
 8002220:	2300      	movs	r3, #0
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 813b 	beq.w	800249e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a37      	ldr	r2, [pc, #220]	; (800231c <HAL_DMA_Init+0x1b8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d04a      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a36      	ldr	r2, [pc, #216]	; (8002320 <HAL_DMA_Init+0x1bc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d045      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a34      	ldr	r2, [pc, #208]	; (8002324 <HAL_DMA_Init+0x1c0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d040      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a33      	ldr	r2, [pc, #204]	; (8002328 <HAL_DMA_Init+0x1c4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d03b      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a31      	ldr	r2, [pc, #196]	; (800232c <HAL_DMA_Init+0x1c8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d036      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a30      	ldr	r2, [pc, #192]	; (8002330 <HAL_DMA_Init+0x1cc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d031      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a2e      	ldr	r2, [pc, #184]	; (8002334 <HAL_DMA_Init+0x1d0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d02c      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2d      	ldr	r2, [pc, #180]	; (8002338 <HAL_DMA_Init+0x1d4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d027      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2b      	ldr	r2, [pc, #172]	; (800233c <HAL_DMA_Init+0x1d8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d022      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2a      	ldr	r2, [pc, #168]	; (8002340 <HAL_DMA_Init+0x1dc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d01d      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a28      	ldr	r2, [pc, #160]	; (8002344 <HAL_DMA_Init+0x1e0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d018      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a27      	ldr	r2, [pc, #156]	; (8002348 <HAL_DMA_Init+0x1e4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d013      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a25      	ldr	r2, [pc, #148]	; (800234c <HAL_DMA_Init+0x1e8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00e      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a24      	ldr	r2, [pc, #144]	; (8002350 <HAL_DMA_Init+0x1ec>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a22      	ldr	r2, [pc, #136]	; (8002354 <HAL_DMA_Init+0x1f0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_DMA_Init+0x174>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a21      	ldr	r2, [pc, #132]	; (8002358 <HAL_DMA_Init+0x1f4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d108      	bne.n	80022ea <HAL_DMA_Init+0x186>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e007      	b.n	80022fa <HAL_DMA_Init+0x196>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80022fa:	e02f      	b.n	800235c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022fc:	f7ff fde6 	bl	8001ecc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b05      	cmp	r3, #5
 8002308:	d928      	bls.n	800235c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2220      	movs	r2, #32
 800230e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2203      	movs	r2, #3
 8002314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e246      	b.n	80027aa <HAL_DMA_Init+0x646>
 800231c:	40020010 	.word	0x40020010
 8002320:	40020028 	.word	0x40020028
 8002324:	40020040 	.word	0x40020040
 8002328:	40020058 	.word	0x40020058
 800232c:	40020070 	.word	0x40020070
 8002330:	40020088 	.word	0x40020088
 8002334:	400200a0 	.word	0x400200a0
 8002338:	400200b8 	.word	0x400200b8
 800233c:	40020410 	.word	0x40020410
 8002340:	40020428 	.word	0x40020428
 8002344:	40020440 	.word	0x40020440
 8002348:	40020458 	.word	0x40020458
 800234c:	40020470 	.word	0x40020470
 8002350:	40020488 	.word	0x40020488
 8002354:	400204a0 	.word	0x400204a0
 8002358:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1c8      	bne.n	80022fc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4b83      	ldr	r3, [pc, #524]	; (8002584 <HAL_DMA_Init+0x420>)
 8002376:	4013      	ands	r3, r2
 8002378:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002382:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800239a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d107      	bne.n	80023c0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	4313      	orrs	r3, r2
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80023c0:	4b71      	ldr	r3, [pc, #452]	; (8002588 <HAL_DMA_Init+0x424>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b71      	ldr	r3, [pc, #452]	; (800258c <HAL_DMA_Init+0x428>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023cc:	d328      	bcc.n	8002420 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b28      	cmp	r3, #40	; 0x28
 80023d4:	d903      	bls.n	80023de <HAL_DMA_Init+0x27a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b2e      	cmp	r3, #46	; 0x2e
 80023dc:	d917      	bls.n	800240e <HAL_DMA_Init+0x2aa>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b3e      	cmp	r3, #62	; 0x3e
 80023e4:	d903      	bls.n	80023ee <HAL_DMA_Init+0x28a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b42      	cmp	r3, #66	; 0x42
 80023ec:	d90f      	bls.n	800240e <HAL_DMA_Init+0x2aa>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b46      	cmp	r3, #70	; 0x46
 80023f4:	d903      	bls.n	80023fe <HAL_DMA_Init+0x29a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b48      	cmp	r3, #72	; 0x48
 80023fc:	d907      	bls.n	800240e <HAL_DMA_Init+0x2aa>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b4e      	cmp	r3, #78	; 0x4e
 8002404:	d905      	bls.n	8002412 <HAL_DMA_Init+0x2ae>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b52      	cmp	r3, #82	; 0x52
 800240c:	d801      	bhi.n	8002412 <HAL_DMA_Init+0x2ae>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_DMA_Init+0x2b0>
 8002412:	2300      	movs	r3, #0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800241e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f023 0307 	bic.w	r3, r3, #7
 8002436:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	4313      	orrs	r3, r2
 8002440:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2b04      	cmp	r3, #4
 8002448:	d117      	bne.n	800247a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00e      	beq.n	800247a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f001 ff1b 	bl	8004298 <DMA_CheckFifoParam>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2240      	movs	r2, #64	; 0x40
 800246c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e197      	b.n	80027aa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f001 fe56 	bl	8004134 <DMA_CalcBaseAndBitshift>
 8002488:	4603      	mov	r3, r0
 800248a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	223f      	movs	r2, #63	; 0x3f
 8002496:	409a      	lsls	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	e0cd      	b.n	800263a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a3b      	ldr	r2, [pc, #236]	; (8002590 <HAL_DMA_Init+0x42c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d022      	beq.n	80024ee <HAL_DMA_Init+0x38a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a39      	ldr	r2, [pc, #228]	; (8002594 <HAL_DMA_Init+0x430>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d01d      	beq.n	80024ee <HAL_DMA_Init+0x38a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a38      	ldr	r2, [pc, #224]	; (8002598 <HAL_DMA_Init+0x434>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d018      	beq.n	80024ee <HAL_DMA_Init+0x38a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a36      	ldr	r2, [pc, #216]	; (800259c <HAL_DMA_Init+0x438>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <HAL_DMA_Init+0x38a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a35      	ldr	r2, [pc, #212]	; (80025a0 <HAL_DMA_Init+0x43c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00e      	beq.n	80024ee <HAL_DMA_Init+0x38a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a33      	ldr	r2, [pc, #204]	; (80025a4 <HAL_DMA_Init+0x440>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d009      	beq.n	80024ee <HAL_DMA_Init+0x38a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <HAL_DMA_Init+0x444>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d004      	beq.n	80024ee <HAL_DMA_Init+0x38a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a30      	ldr	r2, [pc, #192]	; (80025ac <HAL_DMA_Init+0x448>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_DMA_Init+0x38e>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_DMA_Init+0x390>
 80024f2:	2300      	movs	r3, #0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8097 	beq.w	8002628 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a24      	ldr	r2, [pc, #144]	; (8002590 <HAL_DMA_Init+0x42c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d021      	beq.n	8002548 <HAL_DMA_Init+0x3e4>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a22      	ldr	r2, [pc, #136]	; (8002594 <HAL_DMA_Init+0x430>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01c      	beq.n	8002548 <HAL_DMA_Init+0x3e4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a21      	ldr	r2, [pc, #132]	; (8002598 <HAL_DMA_Init+0x434>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d017      	beq.n	8002548 <HAL_DMA_Init+0x3e4>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1f      	ldr	r2, [pc, #124]	; (800259c <HAL_DMA_Init+0x438>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d012      	beq.n	8002548 <HAL_DMA_Init+0x3e4>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1e      	ldr	r2, [pc, #120]	; (80025a0 <HAL_DMA_Init+0x43c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00d      	beq.n	8002548 <HAL_DMA_Init+0x3e4>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1c      	ldr	r2, [pc, #112]	; (80025a4 <HAL_DMA_Init+0x440>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d008      	beq.n	8002548 <HAL_DMA_Init+0x3e4>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <HAL_DMA_Init+0x444>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d003      	beq.n	8002548 <HAL_DMA_Init+0x3e4>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a19      	ldr	r2, [pc, #100]	; (80025ac <HAL_DMA_Init+0x448>)
 8002546:	4293      	cmp	r3, r2
 8002548:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_DMA_Init+0x44c>)
 8002566:	4013      	ands	r3, r2
 8002568:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b40      	cmp	r3, #64	; 0x40
 8002570:	d020      	beq.n	80025b4 <HAL_DMA_Init+0x450>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b80      	cmp	r3, #128	; 0x80
 8002578:	d102      	bne.n	8002580 <HAL_DMA_Init+0x41c>
 800257a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800257e:	e01a      	b.n	80025b6 <HAL_DMA_Init+0x452>
 8002580:	2300      	movs	r3, #0
 8002582:	e018      	b.n	80025b6 <HAL_DMA_Init+0x452>
 8002584:	fe10803f 	.word	0xfe10803f
 8002588:	5c001000 	.word	0x5c001000
 800258c:	ffff0000 	.word	0xffff0000
 8002590:	58025408 	.word	0x58025408
 8002594:	5802541c 	.word	0x5802541c
 8002598:	58025430 	.word	0x58025430
 800259c:	58025444 	.word	0x58025444
 80025a0:	58025458 	.word	0x58025458
 80025a4:	5802546c 	.word	0x5802546c
 80025a8:	58025480 	.word	0x58025480
 80025ac:	58025494 	.word	0x58025494
 80025b0:	fffe000f 	.word	0xfffe000f
 80025b4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68d2      	ldr	r2, [r2, #12]
 80025ba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025e4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b6e      	ldr	r3, [pc, #440]	; (80027b4 <HAL_DMA_Init+0x650>)
 80025fc:	4413      	add	r3, r2
 80025fe:	4a6e      	ldr	r2, [pc, #440]	; (80027b8 <HAL_DMA_Init+0x654>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	009a      	lsls	r2, r3, #2
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f001 fd91 	bl	8004134 <DMA_CalcBaseAndBitshift>
 8002612:	4603      	mov	r3, r0
 8002614:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2201      	movs	r2, #1
 8002620:	409a      	lsls	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	e008      	b.n	800263a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2240      	movs	r2, #64	; 0x40
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2203      	movs	r2, #3
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0b7      	b.n	80027aa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a5f      	ldr	r2, [pc, #380]	; (80027bc <HAL_DMA_Init+0x658>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d072      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a5d      	ldr	r2, [pc, #372]	; (80027c0 <HAL_DMA_Init+0x65c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d06d      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5c      	ldr	r2, [pc, #368]	; (80027c4 <HAL_DMA_Init+0x660>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d068      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a5a      	ldr	r2, [pc, #360]	; (80027c8 <HAL_DMA_Init+0x664>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d063      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a59      	ldr	r2, [pc, #356]	; (80027cc <HAL_DMA_Init+0x668>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d05e      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a57      	ldr	r2, [pc, #348]	; (80027d0 <HAL_DMA_Init+0x66c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d059      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a56      	ldr	r2, [pc, #344]	; (80027d4 <HAL_DMA_Init+0x670>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d054      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a54      	ldr	r2, [pc, #336]	; (80027d8 <HAL_DMA_Init+0x674>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d04f      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a53      	ldr	r2, [pc, #332]	; (80027dc <HAL_DMA_Init+0x678>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d04a      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a51      	ldr	r2, [pc, #324]	; (80027e0 <HAL_DMA_Init+0x67c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d045      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a50      	ldr	r2, [pc, #320]	; (80027e4 <HAL_DMA_Init+0x680>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d040      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a4e      	ldr	r2, [pc, #312]	; (80027e8 <HAL_DMA_Init+0x684>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d03b      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a4d      	ldr	r2, [pc, #308]	; (80027ec <HAL_DMA_Init+0x688>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d036      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a4b      	ldr	r2, [pc, #300]	; (80027f0 <HAL_DMA_Init+0x68c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d031      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a4a      	ldr	r2, [pc, #296]	; (80027f4 <HAL_DMA_Init+0x690>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d02c      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a48      	ldr	r2, [pc, #288]	; (80027f8 <HAL_DMA_Init+0x694>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d027      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a47      	ldr	r2, [pc, #284]	; (80027fc <HAL_DMA_Init+0x698>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d022      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a45      	ldr	r2, [pc, #276]	; (8002800 <HAL_DMA_Init+0x69c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01d      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a44      	ldr	r2, [pc, #272]	; (8002804 <HAL_DMA_Init+0x6a0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d018      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a42      	ldr	r2, [pc, #264]	; (8002808 <HAL_DMA_Init+0x6a4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a41      	ldr	r2, [pc, #260]	; (800280c <HAL_DMA_Init+0x6a8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00e      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a3f      	ldr	r2, [pc, #252]	; (8002810 <HAL_DMA_Init+0x6ac>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a3e      	ldr	r2, [pc, #248]	; (8002814 <HAL_DMA_Init+0x6b0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d004      	beq.n	800272a <HAL_DMA_Init+0x5c6>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a3c      	ldr	r2, [pc, #240]	; (8002818 <HAL_DMA_Init+0x6b4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <HAL_DMA_Init+0x5ca>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_DMA_Init+0x5cc>
 800272e:	2300      	movs	r3, #0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d032      	beq.n	800279a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f001 fe2b 	bl	8004390 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b80      	cmp	r3, #128	; 0x80
 8002740:	d102      	bne.n	8002748 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800275c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d010      	beq.n	8002788 <HAL_DMA_Init+0x624>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b08      	cmp	r3, #8
 800276c:	d80c      	bhi.n	8002788 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f001 fea8 	bl	80044c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	e008      	b.n	800279a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	a7fdabf8 	.word	0xa7fdabf8
 80027b8:	cccccccd 	.word	0xcccccccd
 80027bc:	40020010 	.word	0x40020010
 80027c0:	40020028 	.word	0x40020028
 80027c4:	40020040 	.word	0x40020040
 80027c8:	40020058 	.word	0x40020058
 80027cc:	40020070 	.word	0x40020070
 80027d0:	40020088 	.word	0x40020088
 80027d4:	400200a0 	.word	0x400200a0
 80027d8:	400200b8 	.word	0x400200b8
 80027dc:	40020410 	.word	0x40020410
 80027e0:	40020428 	.word	0x40020428
 80027e4:	40020440 	.word	0x40020440
 80027e8:	40020458 	.word	0x40020458
 80027ec:	40020470 	.word	0x40020470
 80027f0:	40020488 	.word	0x40020488
 80027f4:	400204a0 	.word	0x400204a0
 80027f8:	400204b8 	.word	0x400204b8
 80027fc:	58025408 	.word	0x58025408
 8002800:	5802541c 	.word	0x5802541c
 8002804:	58025430 	.word	0x58025430
 8002808:	58025444 	.word	0x58025444
 800280c:	58025458 	.word	0x58025458
 8002810:	5802546c 	.word	0x5802546c
 8002814:	58025480 	.word	0x58025480
 8002818:	58025494 	.word	0x58025494

0800281c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002824:	f7ff fb52 	bl	8001ecc <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e2dc      	b.n	8002dee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d008      	beq.n	8002852 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e2cd      	b.n	8002dee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a76      	ldr	r2, [pc, #472]	; (8002a30 <HAL_DMA_Abort+0x214>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d04a      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a74      	ldr	r2, [pc, #464]	; (8002a34 <HAL_DMA_Abort+0x218>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d045      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a73      	ldr	r2, [pc, #460]	; (8002a38 <HAL_DMA_Abort+0x21c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d040      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a71      	ldr	r2, [pc, #452]	; (8002a3c <HAL_DMA_Abort+0x220>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d03b      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a70      	ldr	r2, [pc, #448]	; (8002a40 <HAL_DMA_Abort+0x224>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d036      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a6e      	ldr	r2, [pc, #440]	; (8002a44 <HAL_DMA_Abort+0x228>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d031      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6d      	ldr	r2, [pc, #436]	; (8002a48 <HAL_DMA_Abort+0x22c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d02c      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6b      	ldr	r2, [pc, #428]	; (8002a4c <HAL_DMA_Abort+0x230>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d027      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6a      	ldr	r2, [pc, #424]	; (8002a50 <HAL_DMA_Abort+0x234>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d022      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a68      	ldr	r2, [pc, #416]	; (8002a54 <HAL_DMA_Abort+0x238>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01d      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a67      	ldr	r2, [pc, #412]	; (8002a58 <HAL_DMA_Abort+0x23c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d018      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a65      	ldr	r2, [pc, #404]	; (8002a5c <HAL_DMA_Abort+0x240>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a64      	ldr	r2, [pc, #400]	; (8002a60 <HAL_DMA_Abort+0x244>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00e      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a62      	ldr	r2, [pc, #392]	; (8002a64 <HAL_DMA_Abort+0x248>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d009      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a61      	ldr	r2, [pc, #388]	; (8002a68 <HAL_DMA_Abort+0x24c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_DMA_Abort+0x250>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_DMA_Abort+0xda>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_DMA_Abort+0xdc>
 80028f6:	2300      	movs	r3, #0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 021e 	bic.w	r2, r2, #30
 800290a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800291a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e00a      	b.n	800293a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 020e 	bic.w	r2, r2, #14
 8002932:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a3c      	ldr	r2, [pc, #240]	; (8002a30 <HAL_DMA_Abort+0x214>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d072      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a3a      	ldr	r2, [pc, #232]	; (8002a34 <HAL_DMA_Abort+0x218>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d06d      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a39      	ldr	r2, [pc, #228]	; (8002a38 <HAL_DMA_Abort+0x21c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d068      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a37      	ldr	r2, [pc, #220]	; (8002a3c <HAL_DMA_Abort+0x220>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d063      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a36      	ldr	r2, [pc, #216]	; (8002a40 <HAL_DMA_Abort+0x224>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d05e      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a34      	ldr	r2, [pc, #208]	; (8002a44 <HAL_DMA_Abort+0x228>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d059      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a33      	ldr	r2, [pc, #204]	; (8002a48 <HAL_DMA_Abort+0x22c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d054      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a31      	ldr	r2, [pc, #196]	; (8002a4c <HAL_DMA_Abort+0x230>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d04f      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <HAL_DMA_Abort+0x234>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d04a      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2e      	ldr	r2, [pc, #184]	; (8002a54 <HAL_DMA_Abort+0x238>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d045      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2d      	ldr	r2, [pc, #180]	; (8002a58 <HAL_DMA_Abort+0x23c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d040      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2b      	ldr	r2, [pc, #172]	; (8002a5c <HAL_DMA_Abort+0x240>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d03b      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2a      	ldr	r2, [pc, #168]	; (8002a60 <HAL_DMA_Abort+0x244>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d036      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <HAL_DMA_Abort+0x248>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d031      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <HAL_DMA_Abort+0x24c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d02c      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <HAL_DMA_Abort+0x250>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d027      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <HAL_DMA_Abort+0x254>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d022      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <HAL_DMA_Abort+0x258>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01d      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <HAL_DMA_Abort+0x25c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d018      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_DMA_Abort+0x260>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <HAL_DMA_Abort+0x264>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00e      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1c      	ldr	r2, [pc, #112]	; (8002a84 <HAL_DMA_Abort+0x268>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d009      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_DMA_Abort+0x26c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_DMA_Abort+0x270>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d132      	bne.n	8002a90 <HAL_DMA_Abort+0x274>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e031      	b.n	8002a92 <HAL_DMA_Abort+0x276>
 8002a2e:	bf00      	nop
 8002a30:	40020010 	.word	0x40020010
 8002a34:	40020028 	.word	0x40020028
 8002a38:	40020040 	.word	0x40020040
 8002a3c:	40020058 	.word	0x40020058
 8002a40:	40020070 	.word	0x40020070
 8002a44:	40020088 	.word	0x40020088
 8002a48:	400200a0 	.word	0x400200a0
 8002a4c:	400200b8 	.word	0x400200b8
 8002a50:	40020410 	.word	0x40020410
 8002a54:	40020428 	.word	0x40020428
 8002a58:	40020440 	.word	0x40020440
 8002a5c:	40020458 	.word	0x40020458
 8002a60:	40020470 	.word	0x40020470
 8002a64:	40020488 	.word	0x40020488
 8002a68:	400204a0 	.word	0x400204a0
 8002a6c:	400204b8 	.word	0x400204b8
 8002a70:	58025408 	.word	0x58025408
 8002a74:	5802541c 	.word	0x5802541c
 8002a78:	58025430 	.word	0x58025430
 8002a7c:	58025444 	.word	0x58025444
 8002a80:	58025458 	.word	0x58025458
 8002a84:	5802546c 	.word	0x5802546c
 8002a88:	58025480 	.word	0x58025480
 8002a8c:	58025494 	.word	0x58025494
 8002a90:	2300      	movs	r3, #0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a6d      	ldr	r2, [pc, #436]	; (8002c60 <HAL_DMA_Abort+0x444>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d04a      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a6b      	ldr	r2, [pc, #428]	; (8002c64 <HAL_DMA_Abort+0x448>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d045      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a6a      	ldr	r2, [pc, #424]	; (8002c68 <HAL_DMA_Abort+0x44c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d040      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a68      	ldr	r2, [pc, #416]	; (8002c6c <HAL_DMA_Abort+0x450>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d03b      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a67      	ldr	r2, [pc, #412]	; (8002c70 <HAL_DMA_Abort+0x454>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d036      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a65      	ldr	r2, [pc, #404]	; (8002c74 <HAL_DMA_Abort+0x458>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d031      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a64      	ldr	r2, [pc, #400]	; (8002c78 <HAL_DMA_Abort+0x45c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d02c      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a62      	ldr	r2, [pc, #392]	; (8002c7c <HAL_DMA_Abort+0x460>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d027      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a61      	ldr	r2, [pc, #388]	; (8002c80 <HAL_DMA_Abort+0x464>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d022      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a5f      	ldr	r2, [pc, #380]	; (8002c84 <HAL_DMA_Abort+0x468>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01d      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a5e      	ldr	r2, [pc, #376]	; (8002c88 <HAL_DMA_Abort+0x46c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d018      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a5c      	ldr	r2, [pc, #368]	; (8002c8c <HAL_DMA_Abort+0x470>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a5b      	ldr	r2, [pc, #364]	; (8002c90 <HAL_DMA_Abort+0x474>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00e      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a59      	ldr	r2, [pc, #356]	; (8002c94 <HAL_DMA_Abort+0x478>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d009      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a58      	ldr	r2, [pc, #352]	; (8002c98 <HAL_DMA_Abort+0x47c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d004      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a56      	ldr	r2, [pc, #344]	; (8002c9c <HAL_DMA_Abort+0x480>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d108      	bne.n	8002b58 <HAL_DMA_Abort+0x33c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e007      	b.n	8002b68 <HAL_DMA_Abort+0x34c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b68:	e013      	b.n	8002b92 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b6a:	f7ff f9af 	bl	8001ecc <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d90c      	bls.n	8002b92 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2203      	movs	r2, #3
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e12d      	b.n	8002dee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e5      	bne.n	8002b6a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a2f      	ldr	r2, [pc, #188]	; (8002c60 <HAL_DMA_Abort+0x444>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d04a      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a2d      	ldr	r2, [pc, #180]	; (8002c64 <HAL_DMA_Abort+0x448>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d045      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2c      	ldr	r2, [pc, #176]	; (8002c68 <HAL_DMA_Abort+0x44c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d040      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a2a      	ldr	r2, [pc, #168]	; (8002c6c <HAL_DMA_Abort+0x450>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d03b      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a29      	ldr	r2, [pc, #164]	; (8002c70 <HAL_DMA_Abort+0x454>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d036      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <HAL_DMA_Abort+0x458>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d031      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a26      	ldr	r2, [pc, #152]	; (8002c78 <HAL_DMA_Abort+0x45c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d02c      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a24      	ldr	r2, [pc, #144]	; (8002c7c <HAL_DMA_Abort+0x460>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d027      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <HAL_DMA_Abort+0x464>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d022      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <HAL_DMA_Abort+0x468>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d01d      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <HAL_DMA_Abort+0x46c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d018      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <HAL_DMA_Abort+0x470>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_DMA_Abort+0x474>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00e      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <HAL_DMA_Abort+0x478>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d009      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1a      	ldr	r2, [pc, #104]	; (8002c98 <HAL_DMA_Abort+0x47c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d004      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <HAL_DMA_Abort+0x480>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_DMA_Abort+0x426>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_DMA_Abort+0x428>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d02b      	beq.n	8002ca0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	223f      	movs	r2, #63	; 0x3f
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	e02a      	b.n	8002cb6 <HAL_DMA_Abort+0x49a>
 8002c60:	40020010 	.word	0x40020010
 8002c64:	40020028 	.word	0x40020028
 8002c68:	40020040 	.word	0x40020040
 8002c6c:	40020058 	.word	0x40020058
 8002c70:	40020070 	.word	0x40020070
 8002c74:	40020088 	.word	0x40020088
 8002c78:	400200a0 	.word	0x400200a0
 8002c7c:	400200b8 	.word	0x400200b8
 8002c80:	40020410 	.word	0x40020410
 8002c84:	40020428 	.word	0x40020428
 8002c88:	40020440 	.word	0x40020440
 8002c8c:	40020458 	.word	0x40020458
 8002c90:	40020470 	.word	0x40020470
 8002c94:	40020488 	.word	0x40020488
 8002c98:	400204a0 	.word	0x400204a0
 8002c9c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	2201      	movs	r2, #1
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a4f      	ldr	r2, [pc, #316]	; (8002df8 <HAL_DMA_Abort+0x5dc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d072      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a4d      	ldr	r2, [pc, #308]	; (8002dfc <HAL_DMA_Abort+0x5e0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d06d      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a4c      	ldr	r2, [pc, #304]	; (8002e00 <HAL_DMA_Abort+0x5e4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d068      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a4a      	ldr	r2, [pc, #296]	; (8002e04 <HAL_DMA_Abort+0x5e8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d063      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a49      	ldr	r2, [pc, #292]	; (8002e08 <HAL_DMA_Abort+0x5ec>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d05e      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a47      	ldr	r2, [pc, #284]	; (8002e0c <HAL_DMA_Abort+0x5f0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d059      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a46      	ldr	r2, [pc, #280]	; (8002e10 <HAL_DMA_Abort+0x5f4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d054      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a44      	ldr	r2, [pc, #272]	; (8002e14 <HAL_DMA_Abort+0x5f8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d04f      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a43      	ldr	r2, [pc, #268]	; (8002e18 <HAL_DMA_Abort+0x5fc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d04a      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a41      	ldr	r2, [pc, #260]	; (8002e1c <HAL_DMA_Abort+0x600>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d045      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a40      	ldr	r2, [pc, #256]	; (8002e20 <HAL_DMA_Abort+0x604>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d040      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a3e      	ldr	r2, [pc, #248]	; (8002e24 <HAL_DMA_Abort+0x608>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d03b      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a3d      	ldr	r2, [pc, #244]	; (8002e28 <HAL_DMA_Abort+0x60c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d036      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a3b      	ldr	r2, [pc, #236]	; (8002e2c <HAL_DMA_Abort+0x610>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d031      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a3a      	ldr	r2, [pc, #232]	; (8002e30 <HAL_DMA_Abort+0x614>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d02c      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <HAL_DMA_Abort+0x618>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d027      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a37      	ldr	r2, [pc, #220]	; (8002e38 <HAL_DMA_Abort+0x61c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a35      	ldr	r2, [pc, #212]	; (8002e3c <HAL_DMA_Abort+0x620>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01d      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a34      	ldr	r2, [pc, #208]	; (8002e40 <HAL_DMA_Abort+0x624>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d018      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a32      	ldr	r2, [pc, #200]	; (8002e44 <HAL_DMA_Abort+0x628>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a31      	ldr	r2, [pc, #196]	; (8002e48 <HAL_DMA_Abort+0x62c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00e      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a2f      	ldr	r2, [pc, #188]	; (8002e4c <HAL_DMA_Abort+0x630>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d009      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2e      	ldr	r2, [pc, #184]	; (8002e50 <HAL_DMA_Abort+0x634>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a2c      	ldr	r2, [pc, #176]	; (8002e54 <HAL_DMA_Abort+0x638>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d101      	bne.n	8002daa <HAL_DMA_Abort+0x58e>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_DMA_Abort+0x590>
 8002daa:	2300      	movs	r3, #0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d015      	beq.n	8002ddc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002db8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dda:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40020010 	.word	0x40020010
 8002dfc:	40020028 	.word	0x40020028
 8002e00:	40020040 	.word	0x40020040
 8002e04:	40020058 	.word	0x40020058
 8002e08:	40020070 	.word	0x40020070
 8002e0c:	40020088 	.word	0x40020088
 8002e10:	400200a0 	.word	0x400200a0
 8002e14:	400200b8 	.word	0x400200b8
 8002e18:	40020410 	.word	0x40020410
 8002e1c:	40020428 	.word	0x40020428
 8002e20:	40020440 	.word	0x40020440
 8002e24:	40020458 	.word	0x40020458
 8002e28:	40020470 	.word	0x40020470
 8002e2c:	40020488 	.word	0x40020488
 8002e30:	400204a0 	.word	0x400204a0
 8002e34:	400204b8 	.word	0x400204b8
 8002e38:	58025408 	.word	0x58025408
 8002e3c:	5802541c 	.word	0x5802541c
 8002e40:	58025430 	.word	0x58025430
 8002e44:	58025444 	.word	0x58025444
 8002e48:	58025458 	.word	0x58025458
 8002e4c:	5802546c 	.word	0x5802546c
 8002e50:	58025480 	.word	0x58025480
 8002e54:	58025494 	.word	0x58025494

08002e58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e205      	b.n	8003276 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d004      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e1fa      	b.n	8003276 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a8c      	ldr	r2, [pc, #560]	; (80030b8 <HAL_DMA_Abort_IT+0x260>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d04a      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a8b      	ldr	r2, [pc, #556]	; (80030bc <HAL_DMA_Abort_IT+0x264>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d045      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a89      	ldr	r2, [pc, #548]	; (80030c0 <HAL_DMA_Abort_IT+0x268>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d040      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a88      	ldr	r2, [pc, #544]	; (80030c4 <HAL_DMA_Abort_IT+0x26c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d03b      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a86      	ldr	r2, [pc, #536]	; (80030c8 <HAL_DMA_Abort_IT+0x270>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d036      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a85      	ldr	r2, [pc, #532]	; (80030cc <HAL_DMA_Abort_IT+0x274>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d031      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a83      	ldr	r2, [pc, #524]	; (80030d0 <HAL_DMA_Abort_IT+0x278>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d02c      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a82      	ldr	r2, [pc, #520]	; (80030d4 <HAL_DMA_Abort_IT+0x27c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d027      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a80      	ldr	r2, [pc, #512]	; (80030d8 <HAL_DMA_Abort_IT+0x280>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d022      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a7f      	ldr	r2, [pc, #508]	; (80030dc <HAL_DMA_Abort_IT+0x284>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d01d      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a7d      	ldr	r2, [pc, #500]	; (80030e0 <HAL_DMA_Abort_IT+0x288>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d018      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a7c      	ldr	r2, [pc, #496]	; (80030e4 <HAL_DMA_Abort_IT+0x28c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a7a      	ldr	r2, [pc, #488]	; (80030e8 <HAL_DMA_Abort_IT+0x290>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00e      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a79      	ldr	r2, [pc, #484]	; (80030ec <HAL_DMA_Abort_IT+0x294>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a77      	ldr	r2, [pc, #476]	; (80030f0 <HAL_DMA_Abort_IT+0x298>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a76      	ldr	r2, [pc, #472]	; (80030f4 <HAL_DMA_Abort_IT+0x29c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d101      	bne.n	8002f24 <HAL_DMA_Abort_IT+0xcc>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <HAL_DMA_Abort_IT+0xce>
 8002f24:	2300      	movs	r3, #0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d065      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a60      	ldr	r2, [pc, #384]	; (80030b8 <HAL_DMA_Abort_IT+0x260>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d04a      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a5e      	ldr	r2, [pc, #376]	; (80030bc <HAL_DMA_Abort_IT+0x264>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d045      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a5d      	ldr	r2, [pc, #372]	; (80030c0 <HAL_DMA_Abort_IT+0x268>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d040      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a5b      	ldr	r2, [pc, #364]	; (80030c4 <HAL_DMA_Abort_IT+0x26c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d03b      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a5a      	ldr	r2, [pc, #360]	; (80030c8 <HAL_DMA_Abort_IT+0x270>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d036      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a58      	ldr	r2, [pc, #352]	; (80030cc <HAL_DMA_Abort_IT+0x274>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d031      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a57      	ldr	r2, [pc, #348]	; (80030d0 <HAL_DMA_Abort_IT+0x278>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d02c      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a55      	ldr	r2, [pc, #340]	; (80030d4 <HAL_DMA_Abort_IT+0x27c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d027      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a54      	ldr	r2, [pc, #336]	; (80030d8 <HAL_DMA_Abort_IT+0x280>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d022      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a52      	ldr	r2, [pc, #328]	; (80030dc <HAL_DMA_Abort_IT+0x284>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01d      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a51      	ldr	r2, [pc, #324]	; (80030e0 <HAL_DMA_Abort_IT+0x288>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d018      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a4f      	ldr	r2, [pc, #316]	; (80030e4 <HAL_DMA_Abort_IT+0x28c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a4e      	ldr	r2, [pc, #312]	; (80030e8 <HAL_DMA_Abort_IT+0x290>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a4c      	ldr	r2, [pc, #304]	; (80030ec <HAL_DMA_Abort_IT+0x294>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a4b      	ldr	r2, [pc, #300]	; (80030f0 <HAL_DMA_Abort_IT+0x298>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x17a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a49      	ldr	r2, [pc, #292]	; (80030f4 <HAL_DMA_Abort_IT+0x29c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d108      	bne.n	8002fe4 <HAL_DMA_Abort_IT+0x18c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0201 	bic.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e147      	b.n	8003274 <HAL_DMA_Abort_IT+0x41c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e13e      	b.n	8003274 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 020e 	bic.w	r2, r2, #14
 8003004:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2b      	ldr	r2, [pc, #172]	; (80030b8 <HAL_DMA_Abort_IT+0x260>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d04a      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a29      	ldr	r2, [pc, #164]	; (80030bc <HAL_DMA_Abort_IT+0x264>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d045      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a28      	ldr	r2, [pc, #160]	; (80030c0 <HAL_DMA_Abort_IT+0x268>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d040      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a26      	ldr	r2, [pc, #152]	; (80030c4 <HAL_DMA_Abort_IT+0x26c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d03b      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a25      	ldr	r2, [pc, #148]	; (80030c8 <HAL_DMA_Abort_IT+0x270>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d036      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a23      	ldr	r2, [pc, #140]	; (80030cc <HAL_DMA_Abort_IT+0x274>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d031      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <HAL_DMA_Abort_IT+0x278>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d02c      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a20      	ldr	r2, [pc, #128]	; (80030d4 <HAL_DMA_Abort_IT+0x27c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d027      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <HAL_DMA_Abort_IT+0x280>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d022      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_DMA_Abort_IT+0x284>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01d      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <HAL_DMA_Abort_IT+0x288>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d018      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <HAL_DMA_Abort_IT+0x28c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <HAL_DMA_Abort_IT+0x290>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00e      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a17      	ldr	r2, [pc, #92]	; (80030ec <HAL_DMA_Abort_IT+0x294>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d009      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <HAL_DMA_Abort_IT+0x298>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d004      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x24e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <HAL_DMA_Abort_IT+0x29c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d128      	bne.n	80030f8 <HAL_DMA_Abort_IT+0x2a0>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0201 	bic.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e027      	b.n	8003108 <HAL_DMA_Abort_IT+0x2b0>
 80030b8:	40020010 	.word	0x40020010
 80030bc:	40020028 	.word	0x40020028
 80030c0:	40020040 	.word	0x40020040
 80030c4:	40020058 	.word	0x40020058
 80030c8:	40020070 	.word	0x40020070
 80030cc:	40020088 	.word	0x40020088
 80030d0:	400200a0 	.word	0x400200a0
 80030d4:	400200b8 	.word	0x400200b8
 80030d8:	40020410 	.word	0x40020410
 80030dc:	40020428 	.word	0x40020428
 80030e0:	40020440 	.word	0x40020440
 80030e4:	40020458 	.word	0x40020458
 80030e8:	40020470 	.word	0x40020470
 80030ec:	40020488 	.word	0x40020488
 80030f0:	400204a0 	.word	0x400204a0
 80030f4:	400204b8 	.word	0x400204b8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a5c      	ldr	r2, [pc, #368]	; (8003280 <HAL_DMA_Abort_IT+0x428>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d072      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a5b      	ldr	r2, [pc, #364]	; (8003284 <HAL_DMA_Abort_IT+0x42c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d06d      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a59      	ldr	r2, [pc, #356]	; (8003288 <HAL_DMA_Abort_IT+0x430>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d068      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a58      	ldr	r2, [pc, #352]	; (800328c <HAL_DMA_Abort_IT+0x434>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d063      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a56      	ldr	r2, [pc, #344]	; (8003290 <HAL_DMA_Abort_IT+0x438>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d05e      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a55      	ldr	r2, [pc, #340]	; (8003294 <HAL_DMA_Abort_IT+0x43c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d059      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a53      	ldr	r2, [pc, #332]	; (8003298 <HAL_DMA_Abort_IT+0x440>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d054      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a52      	ldr	r2, [pc, #328]	; (800329c <HAL_DMA_Abort_IT+0x444>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d04f      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a50      	ldr	r2, [pc, #320]	; (80032a0 <HAL_DMA_Abort_IT+0x448>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d04a      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a4f      	ldr	r2, [pc, #316]	; (80032a4 <HAL_DMA_Abort_IT+0x44c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d045      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a4d      	ldr	r2, [pc, #308]	; (80032a8 <HAL_DMA_Abort_IT+0x450>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d040      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a4c      	ldr	r2, [pc, #304]	; (80032ac <HAL_DMA_Abort_IT+0x454>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d03b      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a4a      	ldr	r2, [pc, #296]	; (80032b0 <HAL_DMA_Abort_IT+0x458>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d036      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a49      	ldr	r2, [pc, #292]	; (80032b4 <HAL_DMA_Abort_IT+0x45c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d031      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a47      	ldr	r2, [pc, #284]	; (80032b8 <HAL_DMA_Abort_IT+0x460>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d02c      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a46      	ldr	r2, [pc, #280]	; (80032bc <HAL_DMA_Abort_IT+0x464>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d027      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a44      	ldr	r2, [pc, #272]	; (80032c0 <HAL_DMA_Abort_IT+0x468>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d022      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a43      	ldr	r2, [pc, #268]	; (80032c4 <HAL_DMA_Abort_IT+0x46c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d01d      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a41      	ldr	r2, [pc, #260]	; (80032c8 <HAL_DMA_Abort_IT+0x470>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d018      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a40      	ldr	r2, [pc, #256]	; (80032cc <HAL_DMA_Abort_IT+0x474>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d013      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a3e      	ldr	r2, [pc, #248]	; (80032d0 <HAL_DMA_Abort_IT+0x478>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00e      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a3d      	ldr	r2, [pc, #244]	; (80032d4 <HAL_DMA_Abort_IT+0x47c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d009      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a3b      	ldr	r2, [pc, #236]	; (80032d8 <HAL_DMA_Abort_IT+0x480>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x3a0>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a3a      	ldr	r2, [pc, #232]	; (80032dc <HAL_DMA_Abort_IT+0x484>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d101      	bne.n	80031fc <HAL_DMA_Abort_IT+0x3a4>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_DMA_Abort_IT+0x3a6>
 80031fc:	2300      	movs	r3, #0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d028      	beq.n	8003254 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003210:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	2201      	movs	r2, #1
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003230:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00c      	beq.n	8003254 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003248:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003252:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40020010 	.word	0x40020010
 8003284:	40020028 	.word	0x40020028
 8003288:	40020040 	.word	0x40020040
 800328c:	40020058 	.word	0x40020058
 8003290:	40020070 	.word	0x40020070
 8003294:	40020088 	.word	0x40020088
 8003298:	400200a0 	.word	0x400200a0
 800329c:	400200b8 	.word	0x400200b8
 80032a0:	40020410 	.word	0x40020410
 80032a4:	40020428 	.word	0x40020428
 80032a8:	40020440 	.word	0x40020440
 80032ac:	40020458 	.word	0x40020458
 80032b0:	40020470 	.word	0x40020470
 80032b4:	40020488 	.word	0x40020488
 80032b8:	400204a0 	.word	0x400204a0
 80032bc:	400204b8 	.word	0x400204b8
 80032c0:	58025408 	.word	0x58025408
 80032c4:	5802541c 	.word	0x5802541c
 80032c8:	58025430 	.word	0x58025430
 80032cc:	58025444 	.word	0x58025444
 80032d0:	58025458 	.word	0x58025458
 80032d4:	5802546c 	.word	0x5802546c
 80032d8:	58025480 	.word	0x58025480
 80032dc:	58025494 	.word	0x58025494

080032e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032ec:	4b67      	ldr	r3, [pc, #412]	; (800348c <HAL_DMA_IRQHandler+0x1ac>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a67      	ldr	r2, [pc, #412]	; (8003490 <HAL_DMA_IRQHandler+0x1b0>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	0a9b      	lsrs	r3, r3, #10
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a5f      	ldr	r2, [pc, #380]	; (8003494 <HAL_DMA_IRQHandler+0x1b4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d04a      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a5d      	ldr	r2, [pc, #372]	; (8003498 <HAL_DMA_IRQHandler+0x1b8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d045      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a5c      	ldr	r2, [pc, #368]	; (800349c <HAL_DMA_IRQHandler+0x1bc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d040      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a5a      	ldr	r2, [pc, #360]	; (80034a0 <HAL_DMA_IRQHandler+0x1c0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d03b      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a59      	ldr	r2, [pc, #356]	; (80034a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d036      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a57      	ldr	r2, [pc, #348]	; (80034a8 <HAL_DMA_IRQHandler+0x1c8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d031      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a56      	ldr	r2, [pc, #344]	; (80034ac <HAL_DMA_IRQHandler+0x1cc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d02c      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a54      	ldr	r2, [pc, #336]	; (80034b0 <HAL_DMA_IRQHandler+0x1d0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d027      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a53      	ldr	r2, [pc, #332]	; (80034b4 <HAL_DMA_IRQHandler+0x1d4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d022      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a51      	ldr	r2, [pc, #324]	; (80034b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01d      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a50      	ldr	r2, [pc, #320]	; (80034bc <HAL_DMA_IRQHandler+0x1dc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d018      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a4e      	ldr	r2, [pc, #312]	; (80034c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a4d      	ldr	r2, [pc, #308]	; (80034c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00e      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a4b      	ldr	r2, [pc, #300]	; (80034c8 <HAL_DMA_IRQHandler+0x1e8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d009      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a4a      	ldr	r2, [pc, #296]	; (80034cc <HAL_DMA_IRQHandler+0x1ec>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d004      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xd2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a48      	ldr	r2, [pc, #288]	; (80034d0 <HAL_DMA_IRQHandler+0x1f0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d101      	bne.n	80033b6 <HAL_DMA_IRQHandler+0xd6>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_DMA_IRQHandler+0xd8>
 80033b6:	2300      	movs	r3, #0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 842b 	beq.w	8003c14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	2208      	movs	r2, #8
 80033c8:	409a      	lsls	r2, r3
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80a2 	beq.w	8003518 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2e      	ldr	r2, [pc, #184]	; (8003494 <HAL_DMA_IRQHandler+0x1b4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d04a      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2d      	ldr	r2, [pc, #180]	; (8003498 <HAL_DMA_IRQHandler+0x1b8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d045      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a2b      	ldr	r2, [pc, #172]	; (800349c <HAL_DMA_IRQHandler+0x1bc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d040      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a2a      	ldr	r2, [pc, #168]	; (80034a0 <HAL_DMA_IRQHandler+0x1c0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d03b      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a28      	ldr	r2, [pc, #160]	; (80034a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d036      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a27      	ldr	r2, [pc, #156]	; (80034a8 <HAL_DMA_IRQHandler+0x1c8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d031      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a25      	ldr	r2, [pc, #148]	; (80034ac <HAL_DMA_IRQHandler+0x1cc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02c      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a24      	ldr	r2, [pc, #144]	; (80034b0 <HAL_DMA_IRQHandler+0x1d0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d027      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <HAL_DMA_IRQHandler+0x1d4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d022      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d01d      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <HAL_DMA_IRQHandler+0x1dc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d018      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1e      	ldr	r2, [pc, #120]	; (80034c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d013      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1c      	ldr	r2, [pc, #112]	; (80034c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00e      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <HAL_DMA_IRQHandler+0x1e8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d009      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_DMA_IRQHandler+0x1ec>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_DMA_IRQHandler+0x194>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <HAL_DMA_IRQHandler+0x1f0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d12f      	bne.n	80034d4 <HAL_DMA_IRQHandler+0x1f4>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	bf14      	ite	ne
 8003482:	2301      	movne	r3, #1
 8003484:	2300      	moveq	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	e02e      	b.n	80034e8 <HAL_DMA_IRQHandler+0x208>
 800348a:	bf00      	nop
 800348c:	24000000 	.word	0x24000000
 8003490:	1b4e81b5 	.word	0x1b4e81b5
 8003494:	40020010 	.word	0x40020010
 8003498:	40020028 	.word	0x40020028
 800349c:	40020040 	.word	0x40020040
 80034a0:	40020058 	.word	0x40020058
 80034a4:	40020070 	.word	0x40020070
 80034a8:	40020088 	.word	0x40020088
 80034ac:	400200a0 	.word	0x400200a0
 80034b0:	400200b8 	.word	0x400200b8
 80034b4:	40020410 	.word	0x40020410
 80034b8:	40020428 	.word	0x40020428
 80034bc:	40020440 	.word	0x40020440
 80034c0:	40020458 	.word	0x40020458
 80034c4:	40020470 	.word	0x40020470
 80034c8:	40020488 	.word	0x40020488
 80034cc:	400204a0 	.word	0x400204a0
 80034d0:	400204b8 	.word	0x400204b8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bf14      	ite	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	2300      	moveq	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d015      	beq.n	8003518 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0204 	bic.w	r2, r2, #4
 80034fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2208      	movs	r2, #8
 8003506:	409a      	lsls	r2, r3
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	f043 0201 	orr.w	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	fa22 f303 	lsr.w	r3, r2, r3
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d06e      	beq.n	800360c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a69      	ldr	r2, [pc, #420]	; (80036d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d04a      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a67      	ldr	r2, [pc, #412]	; (80036dc <HAL_DMA_IRQHandler+0x3fc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d045      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a66      	ldr	r2, [pc, #408]	; (80036e0 <HAL_DMA_IRQHandler+0x400>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d040      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a64      	ldr	r2, [pc, #400]	; (80036e4 <HAL_DMA_IRQHandler+0x404>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d03b      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a63      	ldr	r2, [pc, #396]	; (80036e8 <HAL_DMA_IRQHandler+0x408>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d036      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a61      	ldr	r2, [pc, #388]	; (80036ec <HAL_DMA_IRQHandler+0x40c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d031      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a60      	ldr	r2, [pc, #384]	; (80036f0 <HAL_DMA_IRQHandler+0x410>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d02c      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a5e      	ldr	r2, [pc, #376]	; (80036f4 <HAL_DMA_IRQHandler+0x414>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d027      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5d      	ldr	r2, [pc, #372]	; (80036f8 <HAL_DMA_IRQHandler+0x418>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d022      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5b      	ldr	r2, [pc, #364]	; (80036fc <HAL_DMA_IRQHandler+0x41c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01d      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a5a      	ldr	r2, [pc, #360]	; (8003700 <HAL_DMA_IRQHandler+0x420>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d018      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a58      	ldr	r2, [pc, #352]	; (8003704 <HAL_DMA_IRQHandler+0x424>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a57      	ldr	r2, [pc, #348]	; (8003708 <HAL_DMA_IRQHandler+0x428>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a55      	ldr	r2, [pc, #340]	; (800370c <HAL_DMA_IRQHandler+0x42c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a54      	ldr	r2, [pc, #336]	; (8003710 <HAL_DMA_IRQHandler+0x430>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_DMA_IRQHandler+0x2ee>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a52      	ldr	r2, [pc, #328]	; (8003714 <HAL_DMA_IRQHandler+0x434>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d10a      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x304>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e003      	b.n	80035ec <HAL_DMA_IRQHandler+0x30c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2300      	movs	r3, #0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2201      	movs	r2, #1
 80035fa:	409a      	lsls	r2, r3
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f043 0202 	orr.w	r2, r3, #2
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	2204      	movs	r2, #4
 8003616:	409a      	lsls	r2, r3
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 808f 	beq.w	8003740 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2c      	ldr	r2, [pc, #176]	; (80036d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d04a      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2a      	ldr	r2, [pc, #168]	; (80036dc <HAL_DMA_IRQHandler+0x3fc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d045      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <HAL_DMA_IRQHandler+0x400>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d040      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <HAL_DMA_IRQHandler+0x404>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d03b      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a26      	ldr	r2, [pc, #152]	; (80036e8 <HAL_DMA_IRQHandler+0x408>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d036      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a24      	ldr	r2, [pc, #144]	; (80036ec <HAL_DMA_IRQHandler+0x40c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d031      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <HAL_DMA_IRQHandler+0x410>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d02c      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <HAL_DMA_IRQHandler+0x414>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d027      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a20      	ldr	r2, [pc, #128]	; (80036f8 <HAL_DMA_IRQHandler+0x418>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <HAL_DMA_IRQHandler+0x41c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01d      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <HAL_DMA_IRQHandler+0x420>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d018      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_DMA_IRQHandler+0x424>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <HAL_DMA_IRQHandler+0x428>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00e      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_DMA_IRQHandler+0x42c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a17      	ldr	r2, [pc, #92]	; (8003710 <HAL_DMA_IRQHandler+0x430>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x3e2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a15      	ldr	r2, [pc, #84]	; (8003714 <HAL_DMA_IRQHandler+0x434>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d12a      	bne.n	8003718 <HAL_DMA_IRQHandler+0x438>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	e023      	b.n	8003720 <HAL_DMA_IRQHandler+0x440>
 80036d8:	40020010 	.word	0x40020010
 80036dc:	40020028 	.word	0x40020028
 80036e0:	40020040 	.word	0x40020040
 80036e4:	40020058 	.word	0x40020058
 80036e8:	40020070 	.word	0x40020070
 80036ec:	40020088 	.word	0x40020088
 80036f0:	400200a0 	.word	0x400200a0
 80036f4:	400200b8 	.word	0x400200b8
 80036f8:	40020410 	.word	0x40020410
 80036fc:	40020428 	.word	0x40020428
 8003700:	40020440 	.word	0x40020440
 8003704:	40020458 	.word	0x40020458
 8003708:	40020470 	.word	0x40020470
 800370c:	40020488 	.word	0x40020488
 8003710:	400204a0 	.word	0x400204a0
 8003714:	400204b8 	.word	0x400204b8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2300      	movs	r3, #0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00d      	beq.n	8003740 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2204      	movs	r2, #4
 800372e:	409a      	lsls	r2, r3
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	f043 0204 	orr.w	r2, r3, #4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2210      	movs	r2, #16
 800374a:	409a      	lsls	r2, r3
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80a6 	beq.w	80038a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a85      	ldr	r2, [pc, #532]	; (8003970 <HAL_DMA_IRQHandler+0x690>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d04a      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a83      	ldr	r2, [pc, #524]	; (8003974 <HAL_DMA_IRQHandler+0x694>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d045      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a82      	ldr	r2, [pc, #520]	; (8003978 <HAL_DMA_IRQHandler+0x698>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d040      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a80      	ldr	r2, [pc, #512]	; (800397c <HAL_DMA_IRQHandler+0x69c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d03b      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a7f      	ldr	r2, [pc, #508]	; (8003980 <HAL_DMA_IRQHandler+0x6a0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d036      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a7d      	ldr	r2, [pc, #500]	; (8003984 <HAL_DMA_IRQHandler+0x6a4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d031      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a7c      	ldr	r2, [pc, #496]	; (8003988 <HAL_DMA_IRQHandler+0x6a8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d02c      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a7a      	ldr	r2, [pc, #488]	; (800398c <HAL_DMA_IRQHandler+0x6ac>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d027      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a79      	ldr	r2, [pc, #484]	; (8003990 <HAL_DMA_IRQHandler+0x6b0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d022      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a77      	ldr	r2, [pc, #476]	; (8003994 <HAL_DMA_IRQHandler+0x6b4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01d      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a76      	ldr	r2, [pc, #472]	; (8003998 <HAL_DMA_IRQHandler+0x6b8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d018      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a74      	ldr	r2, [pc, #464]	; (800399c <HAL_DMA_IRQHandler+0x6bc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a73      	ldr	r2, [pc, #460]	; (80039a0 <HAL_DMA_IRQHandler+0x6c0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00e      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a71      	ldr	r2, [pc, #452]	; (80039a4 <HAL_DMA_IRQHandler+0x6c4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d009      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a70      	ldr	r2, [pc, #448]	; (80039a8 <HAL_DMA_IRQHandler+0x6c8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d004      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x516>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a6e      	ldr	r2, [pc, #440]	; (80039ac <HAL_DMA_IRQHandler+0x6cc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10a      	bne.n	800380c <HAL_DMA_IRQHandler+0x52c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf14      	ite	ne
 8003804:	2301      	movne	r3, #1
 8003806:	2300      	moveq	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	e009      	b.n	8003820 <HAL_DMA_IRQHandler+0x540>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf14      	ite	ne
 800381a:	2301      	movne	r3, #1
 800381c:	2300      	moveq	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d03e      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	2210      	movs	r2, #16
 800382e:	409a      	lsls	r2, r3
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d018      	beq.n	8003874 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d108      	bne.n	8003862 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d024      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
 8003860:	e01f      	b.n	80038a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01b      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
 8003872:	e016      	b.n	80038a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d107      	bne.n	8003892 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0208 	bic.w	r2, r2, #8
 8003890:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	2220      	movs	r2, #32
 80038ac:	409a      	lsls	r2, r3
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 8110 	beq.w	8003ad8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2c      	ldr	r2, [pc, #176]	; (8003970 <HAL_DMA_IRQHandler+0x690>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d04a      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2b      	ldr	r2, [pc, #172]	; (8003974 <HAL_DMA_IRQHandler+0x694>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d045      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a29      	ldr	r2, [pc, #164]	; (8003978 <HAL_DMA_IRQHandler+0x698>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d040      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a28      	ldr	r2, [pc, #160]	; (800397c <HAL_DMA_IRQHandler+0x69c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d03b      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a26      	ldr	r2, [pc, #152]	; (8003980 <HAL_DMA_IRQHandler+0x6a0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d036      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a25      	ldr	r2, [pc, #148]	; (8003984 <HAL_DMA_IRQHandler+0x6a4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d031      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a23      	ldr	r2, [pc, #140]	; (8003988 <HAL_DMA_IRQHandler+0x6a8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d02c      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a22      	ldr	r2, [pc, #136]	; (800398c <HAL_DMA_IRQHandler+0x6ac>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d027      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a20      	ldr	r2, [pc, #128]	; (8003990 <HAL_DMA_IRQHandler+0x6b0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d022      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1f      	ldr	r2, [pc, #124]	; (8003994 <HAL_DMA_IRQHandler+0x6b4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d01d      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <HAL_DMA_IRQHandler+0x6b8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d018      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1c      	ldr	r2, [pc, #112]	; (800399c <HAL_DMA_IRQHandler+0x6bc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d013      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1a      	ldr	r2, [pc, #104]	; (80039a0 <HAL_DMA_IRQHandler+0x6c0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00e      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <HAL_DMA_IRQHandler+0x6c4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d009      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <HAL_DMA_IRQHandler+0x6c8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_DMA_IRQHandler+0x678>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a16      	ldr	r2, [pc, #88]	; (80039ac <HAL_DMA_IRQHandler+0x6cc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d12b      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x6d0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	e02a      	b.n	80039c4 <HAL_DMA_IRQHandler+0x6e4>
 800396e:	bf00      	nop
 8003970:	40020010 	.word	0x40020010
 8003974:	40020028 	.word	0x40020028
 8003978:	40020040 	.word	0x40020040
 800397c:	40020058 	.word	0x40020058
 8003980:	40020070 	.word	0x40020070
 8003984:	40020088 	.word	0x40020088
 8003988:	400200a0 	.word	0x400200a0
 800398c:	400200b8 	.word	0x400200b8
 8003990:	40020410 	.word	0x40020410
 8003994:	40020428 	.word	0x40020428
 8003998:	40020440 	.word	0x40020440
 800399c:	40020458 	.word	0x40020458
 80039a0:	40020470 	.word	0x40020470
 80039a4:	40020488 	.word	0x40020488
 80039a8:	400204a0 	.word	0x400204a0
 80039ac:	400204b8 	.word	0x400204b8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf14      	ite	ne
 80039be:	2301      	movne	r3, #1
 80039c0:	2300      	moveq	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8087 	beq.w	8003ad8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	2220      	movs	r2, #32
 80039d4:	409a      	lsls	r2, r3
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d139      	bne.n	8003a5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0216 	bic.w	r2, r2, #22
 80039f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d103      	bne.n	8003a16 <HAL_DMA_IRQHandler+0x736>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0208 	bic.w	r2, r2, #8
 8003a24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	223f      	movs	r2, #63	; 0x3f
 8003a30:	409a      	lsls	r2, r3
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 834a 	beq.w	80040e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
          }
          return;
 8003a58:	e344      	b.n	80040e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d018      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d108      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d02c      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
 8003a86:	e027      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d023      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
 8003a98:	e01e      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10f      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0210 	bic.w	r2, r2, #16
 8003ab6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8306 	beq.w	80040ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8088 	beq.w	8003c00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2204      	movs	r2, #4
 8003af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a7a      	ldr	r2, [pc, #488]	; (8003ce8 <HAL_DMA_IRQHandler+0xa08>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d04a      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a79      	ldr	r2, [pc, #484]	; (8003cec <HAL_DMA_IRQHandler+0xa0c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d045      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a77      	ldr	r2, [pc, #476]	; (8003cf0 <HAL_DMA_IRQHandler+0xa10>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d040      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a76      	ldr	r2, [pc, #472]	; (8003cf4 <HAL_DMA_IRQHandler+0xa14>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d03b      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a74      	ldr	r2, [pc, #464]	; (8003cf8 <HAL_DMA_IRQHandler+0xa18>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d036      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a73      	ldr	r2, [pc, #460]	; (8003cfc <HAL_DMA_IRQHandler+0xa1c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d031      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a71      	ldr	r2, [pc, #452]	; (8003d00 <HAL_DMA_IRQHandler+0xa20>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d02c      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a70      	ldr	r2, [pc, #448]	; (8003d04 <HAL_DMA_IRQHandler+0xa24>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d027      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6e      	ldr	r2, [pc, #440]	; (8003d08 <HAL_DMA_IRQHandler+0xa28>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d022      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a6d      	ldr	r2, [pc, #436]	; (8003d0c <HAL_DMA_IRQHandler+0xa2c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d01d      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a6b      	ldr	r2, [pc, #428]	; (8003d10 <HAL_DMA_IRQHandler+0xa30>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d018      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a6a      	ldr	r2, [pc, #424]	; (8003d14 <HAL_DMA_IRQHandler+0xa34>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a68      	ldr	r2, [pc, #416]	; (8003d18 <HAL_DMA_IRQHandler+0xa38>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00e      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a67      	ldr	r2, [pc, #412]	; (8003d1c <HAL_DMA_IRQHandler+0xa3c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d009      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a65      	ldr	r2, [pc, #404]	; (8003d20 <HAL_DMA_IRQHandler+0xa40>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x8b8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a64      	ldr	r2, [pc, #400]	; (8003d24 <HAL_DMA_IRQHandler+0xa44>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d108      	bne.n	8003baa <HAL_DMA_IRQHandler+0x8ca>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e007      	b.n	8003bba <HAL_DMA_IRQHandler+0x8da>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d307      	bcc.n	8003bd6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f2      	bne.n	8003bba <HAL_DMA_IRQHandler+0x8da>
 8003bd4:	e000      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003bd6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d004      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003bf6:	e003      	b.n	8003c00 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8272 	beq.w	80040ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
 8003c12:	e26c      	b.n	80040ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a43      	ldr	r2, [pc, #268]	; (8003d28 <HAL_DMA_IRQHandler+0xa48>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d022      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x984>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a42      	ldr	r2, [pc, #264]	; (8003d2c <HAL_DMA_IRQHandler+0xa4c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d01d      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x984>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a40      	ldr	r2, [pc, #256]	; (8003d30 <HAL_DMA_IRQHandler+0xa50>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d018      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x984>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a3f      	ldr	r2, [pc, #252]	; (8003d34 <HAL_DMA_IRQHandler+0xa54>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x984>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a3d      	ldr	r2, [pc, #244]	; (8003d38 <HAL_DMA_IRQHandler+0xa58>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00e      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x984>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a3c      	ldr	r2, [pc, #240]	; (8003d3c <HAL_DMA_IRQHandler+0xa5c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d009      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x984>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a3a      	ldr	r2, [pc, #232]	; (8003d40 <HAL_DMA_IRQHandler+0xa60>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x984>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a39      	ldr	r2, [pc, #228]	; (8003d44 <HAL_DMA_IRQHandler+0xa64>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d101      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x988>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <HAL_DMA_IRQHandler+0x98a>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 823f 	beq.w	80040ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	2204      	movs	r2, #4
 8003c82:	409a      	lsls	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80cd 	beq.w	8003e28 <HAL_DMA_IRQHandler+0xb48>
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80c7 	beq.w	8003e28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9e:	f003 031f 	and.w	r3, r3, #31
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d049      	beq.n	8003d48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8210 	beq.w	80040e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cd0:	e20a      	b.n	80040e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8206 	beq.w	80040e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce4:	e200      	b.n	80040e8 <HAL_DMA_IRQHandler+0xe08>
 8003ce6:	bf00      	nop
 8003ce8:	40020010 	.word	0x40020010
 8003cec:	40020028 	.word	0x40020028
 8003cf0:	40020040 	.word	0x40020040
 8003cf4:	40020058 	.word	0x40020058
 8003cf8:	40020070 	.word	0x40020070
 8003cfc:	40020088 	.word	0x40020088
 8003d00:	400200a0 	.word	0x400200a0
 8003d04:	400200b8 	.word	0x400200b8
 8003d08:	40020410 	.word	0x40020410
 8003d0c:	40020428 	.word	0x40020428
 8003d10:	40020440 	.word	0x40020440
 8003d14:	40020458 	.word	0x40020458
 8003d18:	40020470 	.word	0x40020470
 8003d1c:	40020488 	.word	0x40020488
 8003d20:	400204a0 	.word	0x400204a0
 8003d24:	400204b8 	.word	0x400204b8
 8003d28:	58025408 	.word	0x58025408
 8003d2c:	5802541c 	.word	0x5802541c
 8003d30:	58025430 	.word	0x58025430
 8003d34:	58025444 	.word	0x58025444
 8003d38:	58025458 	.word	0x58025458
 8003d3c:	5802546c 	.word	0x5802546c
 8003d40:	58025480 	.word	0x58025480
 8003d44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d160      	bne.n	8003e14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a8c      	ldr	r2, [pc, #560]	; (8003f88 <HAL_DMA_IRQHandler+0xca8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d04a      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a8a      	ldr	r2, [pc, #552]	; (8003f8c <HAL_DMA_IRQHandler+0xcac>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d045      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a89      	ldr	r2, [pc, #548]	; (8003f90 <HAL_DMA_IRQHandler+0xcb0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d040      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a87      	ldr	r2, [pc, #540]	; (8003f94 <HAL_DMA_IRQHandler+0xcb4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d03b      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a86      	ldr	r2, [pc, #536]	; (8003f98 <HAL_DMA_IRQHandler+0xcb8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d036      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a84      	ldr	r2, [pc, #528]	; (8003f9c <HAL_DMA_IRQHandler+0xcbc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d031      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a83      	ldr	r2, [pc, #524]	; (8003fa0 <HAL_DMA_IRQHandler+0xcc0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d02c      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a81      	ldr	r2, [pc, #516]	; (8003fa4 <HAL_DMA_IRQHandler+0xcc4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d027      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a80      	ldr	r2, [pc, #512]	; (8003fa8 <HAL_DMA_IRQHandler+0xcc8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d022      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a7e      	ldr	r2, [pc, #504]	; (8003fac <HAL_DMA_IRQHandler+0xccc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01d      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a7d      	ldr	r2, [pc, #500]	; (8003fb0 <HAL_DMA_IRQHandler+0xcd0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d018      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a7b      	ldr	r2, [pc, #492]	; (8003fb4 <HAL_DMA_IRQHandler+0xcd4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a7a      	ldr	r2, [pc, #488]	; (8003fb8 <HAL_DMA_IRQHandler+0xcd8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00e      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a78      	ldr	r2, [pc, #480]	; (8003fbc <HAL_DMA_IRQHandler+0xcdc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d009      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a77      	ldr	r2, [pc, #476]	; (8003fc0 <HAL_DMA_IRQHandler+0xce0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xb12>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a75      	ldr	r2, [pc, #468]	; (8003fc4 <HAL_DMA_IRQHandler+0xce4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d108      	bne.n	8003e04 <HAL_DMA_IRQHandler+0xb24>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0208 	bic.w	r2, r2, #8
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	e007      	b.n	8003e14 <HAL_DMA_IRQHandler+0xb34>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0204 	bic.w	r2, r2, #4
 8003e12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8165 	beq.w	80040e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e26:	e15f      	b.n	80040e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	2202      	movs	r2, #2
 8003e32:	409a      	lsls	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80c5 	beq.w	8003fc8 <HAL_DMA_IRQHandler+0xce8>
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80bf 	beq.w	8003fc8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2202      	movs	r2, #2
 8003e54:	409a      	lsls	r2, r3
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d018      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 813a 	beq.w	80040ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e80:	e134      	b.n	80040ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8130 	beq.w	80040ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e94:	e12a      	b.n	80040ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d168      	bne.n	8003f72 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a38      	ldr	r2, [pc, #224]	; (8003f88 <HAL_DMA_IRQHandler+0xca8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d04a      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a37      	ldr	r2, [pc, #220]	; (8003f8c <HAL_DMA_IRQHandler+0xcac>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d045      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a35      	ldr	r2, [pc, #212]	; (8003f90 <HAL_DMA_IRQHandler+0xcb0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d040      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a34      	ldr	r2, [pc, #208]	; (8003f94 <HAL_DMA_IRQHandler+0xcb4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d03b      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a32      	ldr	r2, [pc, #200]	; (8003f98 <HAL_DMA_IRQHandler+0xcb8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d036      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a31      	ldr	r2, [pc, #196]	; (8003f9c <HAL_DMA_IRQHandler+0xcbc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d031      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a2f      	ldr	r2, [pc, #188]	; (8003fa0 <HAL_DMA_IRQHandler+0xcc0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d02c      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a2e      	ldr	r2, [pc, #184]	; (8003fa4 <HAL_DMA_IRQHandler+0xcc4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d027      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2c      	ldr	r2, [pc, #176]	; (8003fa8 <HAL_DMA_IRQHandler+0xcc8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d022      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2b      	ldr	r2, [pc, #172]	; (8003fac <HAL_DMA_IRQHandler+0xccc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d01d      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <HAL_DMA_IRQHandler+0xcd0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d018      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a28      	ldr	r2, [pc, #160]	; (8003fb4 <HAL_DMA_IRQHandler+0xcd4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d013      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a26      	ldr	r2, [pc, #152]	; (8003fb8 <HAL_DMA_IRQHandler+0xcd8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00e      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a25      	ldr	r2, [pc, #148]	; (8003fbc <HAL_DMA_IRQHandler+0xcdc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d009      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <HAL_DMA_IRQHandler+0xce0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xc60>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a22      	ldr	r2, [pc, #136]	; (8003fc4 <HAL_DMA_IRQHandler+0xce4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d108      	bne.n	8003f52 <HAL_DMA_IRQHandler+0xc72>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0214 	bic.w	r2, r2, #20
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	e007      	b.n	8003f62 <HAL_DMA_IRQHandler+0xc82>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 020a 	bic.w	r2, r2, #10
 8003f60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80b8 	beq.w	80040ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f84:	e0b2      	b.n	80040ec <HAL_DMA_IRQHandler+0xe0c>
 8003f86:	bf00      	nop
 8003f88:	40020010 	.word	0x40020010
 8003f8c:	40020028 	.word	0x40020028
 8003f90:	40020040 	.word	0x40020040
 8003f94:	40020058 	.word	0x40020058
 8003f98:	40020070 	.word	0x40020070
 8003f9c:	40020088 	.word	0x40020088
 8003fa0:	400200a0 	.word	0x400200a0
 8003fa4:	400200b8 	.word	0x400200b8
 8003fa8:	40020410 	.word	0x40020410
 8003fac:	40020428 	.word	0x40020428
 8003fb0:	40020440 	.word	0x40020440
 8003fb4:	40020458 	.word	0x40020458
 8003fb8:	40020470 	.word	0x40020470
 8003fbc:	40020488 	.word	0x40020488
 8003fc0:	400204a0 	.word	0x400204a0
 8003fc4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8088 	beq.w	80040ee <HAL_DMA_IRQHandler+0xe0e>
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8082 	beq.w	80040ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a41      	ldr	r2, [pc, #260]	; (80040f4 <HAL_DMA_IRQHandler+0xe14>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d04a      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a3f      	ldr	r2, [pc, #252]	; (80040f8 <HAL_DMA_IRQHandler+0xe18>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d045      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a3e      	ldr	r2, [pc, #248]	; (80040fc <HAL_DMA_IRQHandler+0xe1c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d040      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a3c      	ldr	r2, [pc, #240]	; (8004100 <HAL_DMA_IRQHandler+0xe20>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d03b      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a3b      	ldr	r2, [pc, #236]	; (8004104 <HAL_DMA_IRQHandler+0xe24>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d036      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a39      	ldr	r2, [pc, #228]	; (8004108 <HAL_DMA_IRQHandler+0xe28>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d031      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a38      	ldr	r2, [pc, #224]	; (800410c <HAL_DMA_IRQHandler+0xe2c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d02c      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a36      	ldr	r2, [pc, #216]	; (8004110 <HAL_DMA_IRQHandler+0xe30>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d027      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a35      	ldr	r2, [pc, #212]	; (8004114 <HAL_DMA_IRQHandler+0xe34>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d022      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a33      	ldr	r2, [pc, #204]	; (8004118 <HAL_DMA_IRQHandler+0xe38>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01d      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a32      	ldr	r2, [pc, #200]	; (800411c <HAL_DMA_IRQHandler+0xe3c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d018      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a30      	ldr	r2, [pc, #192]	; (8004120 <HAL_DMA_IRQHandler+0xe40>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a2f      	ldr	r2, [pc, #188]	; (8004124 <HAL_DMA_IRQHandler+0xe44>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00e      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a2d      	ldr	r2, [pc, #180]	; (8004128 <HAL_DMA_IRQHandler+0xe48>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d009      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a2c      	ldr	r2, [pc, #176]	; (800412c <HAL_DMA_IRQHandler+0xe4c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_DMA_IRQHandler+0xdaa>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a2a      	ldr	r2, [pc, #168]	; (8004130 <HAL_DMA_IRQHandler+0xe50>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d108      	bne.n	800409c <HAL_DMA_IRQHandler+0xdbc>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 021c 	bic.w	r2, r2, #28
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e007      	b.n	80040ac <HAL_DMA_IRQHandler+0xdcc>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 020e 	bic.w	r2, r2, #14
 80040aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	2201      	movs	r2, #1
 80040b6:	409a      	lsls	r2, r3
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
 80040e2:	e004      	b.n	80040ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80040e4:	bf00      	nop
 80040e6:	e002      	b.n	80040ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040e8:	bf00      	nop
 80040ea:	e000      	b.n	80040ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040ee:	3728      	adds	r7, #40	; 0x28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40020010 	.word	0x40020010
 80040f8:	40020028 	.word	0x40020028
 80040fc:	40020040 	.word	0x40020040
 8004100:	40020058 	.word	0x40020058
 8004104:	40020070 	.word	0x40020070
 8004108:	40020088 	.word	0x40020088
 800410c:	400200a0 	.word	0x400200a0
 8004110:	400200b8 	.word	0x400200b8
 8004114:	40020410 	.word	0x40020410
 8004118:	40020428 	.word	0x40020428
 800411c:	40020440 	.word	0x40020440
 8004120:	40020458 	.word	0x40020458
 8004124:	40020470 	.word	0x40020470
 8004128:	40020488 	.word	0x40020488
 800412c:	400204a0 	.word	0x400204a0
 8004130:	400204b8 	.word	0x400204b8

08004134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a42      	ldr	r2, [pc, #264]	; (800424c <DMA_CalcBaseAndBitshift+0x118>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d04a      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a41      	ldr	r2, [pc, #260]	; (8004250 <DMA_CalcBaseAndBitshift+0x11c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d045      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a3f      	ldr	r2, [pc, #252]	; (8004254 <DMA_CalcBaseAndBitshift+0x120>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d040      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a3e      	ldr	r2, [pc, #248]	; (8004258 <DMA_CalcBaseAndBitshift+0x124>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d03b      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a3c      	ldr	r2, [pc, #240]	; (800425c <DMA_CalcBaseAndBitshift+0x128>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d036      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a3b      	ldr	r2, [pc, #236]	; (8004260 <DMA_CalcBaseAndBitshift+0x12c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d031      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a39      	ldr	r2, [pc, #228]	; (8004264 <DMA_CalcBaseAndBitshift+0x130>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d02c      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a38      	ldr	r2, [pc, #224]	; (8004268 <DMA_CalcBaseAndBitshift+0x134>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d027      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a36      	ldr	r2, [pc, #216]	; (800426c <DMA_CalcBaseAndBitshift+0x138>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d022      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a35      	ldr	r2, [pc, #212]	; (8004270 <DMA_CalcBaseAndBitshift+0x13c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d01d      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a33      	ldr	r2, [pc, #204]	; (8004274 <DMA_CalcBaseAndBitshift+0x140>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d018      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a32      	ldr	r2, [pc, #200]	; (8004278 <DMA_CalcBaseAndBitshift+0x144>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a30      	ldr	r2, [pc, #192]	; (800427c <DMA_CalcBaseAndBitshift+0x148>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00e      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2f      	ldr	r2, [pc, #188]	; (8004280 <DMA_CalcBaseAndBitshift+0x14c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d009      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2d      	ldr	r2, [pc, #180]	; (8004284 <DMA_CalcBaseAndBitshift+0x150>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <DMA_CalcBaseAndBitshift+0xa8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2c      	ldr	r2, [pc, #176]	; (8004288 <DMA_CalcBaseAndBitshift+0x154>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d101      	bne.n	80041e0 <DMA_CalcBaseAndBitshift+0xac>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <DMA_CalcBaseAndBitshift+0xae>
 80041e0:	2300      	movs	r3, #0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d024      	beq.n	8004230 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3b10      	subs	r3, #16
 80041ee:	4a27      	ldr	r2, [pc, #156]	; (800428c <DMA_CalcBaseAndBitshift+0x158>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	4a24      	ldr	r2, [pc, #144]	; (8004290 <DMA_CalcBaseAndBitshift+0x15c>)
 8004200:	5cd3      	ldrb	r3, [r2, r3]
 8004202:	461a      	mov	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d908      	bls.n	8004220 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	4b1f      	ldr	r3, [pc, #124]	; (8004294 <DMA_CalcBaseAndBitshift+0x160>)
 8004216:	4013      	ands	r3, r2
 8004218:	1d1a      	adds	r2, r3, #4
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	659a      	str	r2, [r3, #88]	; 0x58
 800421e:	e00d      	b.n	800423c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <DMA_CalcBaseAndBitshift+0x160>)
 8004228:	4013      	ands	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6593      	str	r3, [r2, #88]	; 0x58
 800422e:	e005      	b.n	800423c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40020010 	.word	0x40020010
 8004250:	40020028 	.word	0x40020028
 8004254:	40020040 	.word	0x40020040
 8004258:	40020058 	.word	0x40020058
 800425c:	40020070 	.word	0x40020070
 8004260:	40020088 	.word	0x40020088
 8004264:	400200a0 	.word	0x400200a0
 8004268:	400200b8 	.word	0x400200b8
 800426c:	40020410 	.word	0x40020410
 8004270:	40020428 	.word	0x40020428
 8004274:	40020440 	.word	0x40020440
 8004278:	40020458 	.word	0x40020458
 800427c:	40020470 	.word	0x40020470
 8004280:	40020488 	.word	0x40020488
 8004284:	400204a0 	.word	0x400204a0
 8004288:	400204b8 	.word	0x400204b8
 800428c:	aaaaaaab 	.word	0xaaaaaaab
 8004290:	08011994 	.word	0x08011994
 8004294:	fffffc00 	.word	0xfffffc00

08004298 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d120      	bne.n	80042ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d858      	bhi.n	8004366 <DMA_CheckFifoParam+0xce>
 80042b4:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <DMA_CheckFifoParam+0x24>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042cd 	.word	0x080042cd
 80042c0:	080042df 	.word	0x080042df
 80042c4:	080042cd 	.word	0x080042cd
 80042c8:	08004367 	.word	0x08004367
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d048      	beq.n	800436a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042dc:	e045      	b.n	800436a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042e6:	d142      	bne.n	800436e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042ec:	e03f      	b.n	800436e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f6:	d123      	bne.n	8004340 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	d838      	bhi.n	8004372 <DMA_CheckFifoParam+0xda>
 8004300:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <DMA_CheckFifoParam+0x70>)
 8004302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004306:	bf00      	nop
 8004308:	08004319 	.word	0x08004319
 800430c:	0800431f 	.word	0x0800431f
 8004310:	08004319 	.word	0x08004319
 8004314:	08004331 	.word	0x08004331
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
        break;
 800431c:	e030      	b.n	8004380 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d025      	beq.n	8004376 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800432e:	e022      	b.n	8004376 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004338:	d11f      	bne.n	800437a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800433e:	e01c      	b.n	800437a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	2b02      	cmp	r3, #2
 8004346:	d902      	bls.n	800434e <DMA_CheckFifoParam+0xb6>
 8004348:	2b03      	cmp	r3, #3
 800434a:	d003      	beq.n	8004354 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800434c:	e018      	b.n	8004380 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]
        break;
 8004352:	e015      	b.n	8004380 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00e      	beq.n	800437e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
    break;
 8004364:	e00b      	b.n	800437e <DMA_CheckFifoParam+0xe6>
        break;
 8004366:	bf00      	nop
 8004368:	e00a      	b.n	8004380 <DMA_CheckFifoParam+0xe8>
        break;
 800436a:	bf00      	nop
 800436c:	e008      	b.n	8004380 <DMA_CheckFifoParam+0xe8>
        break;
 800436e:	bf00      	nop
 8004370:	e006      	b.n	8004380 <DMA_CheckFifoParam+0xe8>
        break;
 8004372:	bf00      	nop
 8004374:	e004      	b.n	8004380 <DMA_CheckFifoParam+0xe8>
        break;
 8004376:	bf00      	nop
 8004378:	e002      	b.n	8004380 <DMA_CheckFifoParam+0xe8>
        break;
 800437a:	bf00      	nop
 800437c:	e000      	b.n	8004380 <DMA_CheckFifoParam+0xe8>
    break;
 800437e:	bf00      	nop
    }
  }

  return status;
 8004380:	7bfb      	ldrb	r3, [r7, #15]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop

08004390 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a38      	ldr	r2, [pc, #224]	; (8004484 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d022      	beq.n	80043ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a36      	ldr	r2, [pc, #216]	; (8004488 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01d      	beq.n	80043ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a35      	ldr	r2, [pc, #212]	; (800448c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d018      	beq.n	80043ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a33      	ldr	r2, [pc, #204]	; (8004490 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a32      	ldr	r2, [pc, #200]	; (8004494 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a30      	ldr	r2, [pc, #192]	; (8004498 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d009      	beq.n	80043ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a2f      	ldr	r2, [pc, #188]	; (800449c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2d      	ldr	r2, [pc, #180]	; (80044a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d101      	bne.n	80043f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80043f2:	2300      	movs	r3, #0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01a      	beq.n	800442e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	3b08      	subs	r3, #8
 8004400:	4a28      	ldr	r2, [pc, #160]	; (80044a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	091b      	lsrs	r3, r3, #4
 8004408:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	461a      	mov	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a24      	ldr	r2, [pc, #144]	; (80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800441c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	2201      	movs	r2, #1
 8004426:	409a      	lsls	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800442c:	e024      	b.n	8004478 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	3b10      	subs	r3, #16
 8004436:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d806      	bhi.n	8004456 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4a1b      	ldr	r2, [pc, #108]	; (80044b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d902      	bls.n	8004456 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3308      	adds	r3, #8
 8004454:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4b18      	ldr	r3, [pc, #96]	; (80044bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	461a      	mov	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004468:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	2201      	movs	r2, #1
 8004472:	409a      	lsls	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	58025408 	.word	0x58025408
 8004488:	5802541c 	.word	0x5802541c
 800448c:	58025430 	.word	0x58025430
 8004490:	58025444 	.word	0x58025444
 8004494:	58025458 	.word	0x58025458
 8004498:	5802546c 	.word	0x5802546c
 800449c:	58025480 	.word	0x58025480
 80044a0:	58025494 	.word	0x58025494
 80044a4:	cccccccd 	.word	0xcccccccd
 80044a8:	16009600 	.word	0x16009600
 80044ac:	58025880 	.word	0x58025880
 80044b0:	aaaaaaab 	.word	0xaaaaaaab
 80044b4:	400204b8 	.word	0x400204b8
 80044b8:	4002040f 	.word	0x4002040f
 80044bc:	10008200 	.word	0x10008200
 80044c0:	40020880 	.word	0x40020880

080044c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d04a      	beq.n	8004570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d847      	bhi.n	8004570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a25      	ldr	r2, [pc, #148]	; (800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d022      	beq.n	8004530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a24      	ldr	r2, [pc, #144]	; (8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d01d      	beq.n	8004530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a22      	ldr	r2, [pc, #136]	; (8004584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d018      	beq.n	8004530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a21      	ldr	r2, [pc, #132]	; (8004588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d013      	beq.n	8004530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1f      	ldr	r2, [pc, #124]	; (800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00e      	beq.n	8004530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1e      	ldr	r2, [pc, #120]	; (8004590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d009      	beq.n	8004530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1c      	ldr	r2, [pc, #112]	; (8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d004      	beq.n	8004530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d101      	bne.n	8004534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004534:	2300      	movs	r3, #0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4b17      	ldr	r3, [pc, #92]	; (800459c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	461a      	mov	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800454c:	671a      	str	r2, [r3, #112]	; 0x70
 800454e:	e009      	b.n	8004564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a11      	ldr	r2, [pc, #68]	; (80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004562:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3b01      	subs	r3, #1
 8004568:	2201      	movs	r2, #1
 800456a:	409a      	lsls	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	58025408 	.word	0x58025408
 8004580:	5802541c 	.word	0x5802541c
 8004584:	58025430 	.word	0x58025430
 8004588:	58025444 	.word	0x58025444
 800458c:	58025458 	.word	0x58025458
 8004590:	5802546c 	.word	0x5802546c
 8004594:	58025480 	.word	0x58025480
 8004598:	58025494 	.word	0x58025494
 800459c:	1600963f 	.word	0x1600963f
 80045a0:	58025940 	.word	0x58025940
 80045a4:	1000823f 	.word	0x1000823f
 80045a8:	40020940 	.word	0x40020940

080045ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b089      	sub	sp, #36	; 0x24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045ba:	4b89      	ldr	r3, [pc, #548]	; (80047e0 <HAL_GPIO_Init+0x234>)
 80045bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045be:	e194      	b.n	80048ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	2101      	movs	r1, #1
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	fa01 f303 	lsl.w	r3, r1, r3
 80045cc:	4013      	ands	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8186 	beq.w	80048e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d00b      	beq.n	80045f8 <HAL_GPIO_Init+0x4c>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d007      	beq.n	80045f8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045ec:	2b11      	cmp	r3, #17
 80045ee:	d003      	beq.n	80045f8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b12      	cmp	r3, #18
 80045f6:	d130      	bne.n	800465a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	2203      	movs	r2, #3
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4013      	ands	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4313      	orrs	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800462e:	2201      	movs	r2, #1
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	091b      	lsrs	r3, r3, #4
 8004644:	f003 0201 	and.w	r2, r3, #1
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	2203      	movs	r2, #3
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4013      	ands	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d003      	beq.n	800469a <HAL_GPIO_Init+0xee>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b12      	cmp	r3, #18
 8004698:	d123      	bne.n	80046e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	08da      	lsrs	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3208      	adds	r2, #8
 80046a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	220f      	movs	r2, #15
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4013      	ands	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	08da      	lsrs	r2, r3, #3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3208      	adds	r2, #8
 80046dc:	69b9      	ldr	r1, [r7, #24]
 80046de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	2203      	movs	r2, #3
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f003 0203 	and.w	r2, r3, #3
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4313      	orrs	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80e0 	beq.w	80048e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004724:	4b2f      	ldr	r3, [pc, #188]	; (80047e4 <HAL_GPIO_Init+0x238>)
 8004726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800472a:	4a2e      	ldr	r2, [pc, #184]	; (80047e4 <HAL_GPIO_Init+0x238>)
 800472c:	f043 0302 	orr.w	r3, r3, #2
 8004730:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004734:	4b2b      	ldr	r3, [pc, #172]	; (80047e4 <HAL_GPIO_Init+0x238>)
 8004736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004742:	4a29      	ldr	r2, [pc, #164]	; (80047e8 <HAL_GPIO_Init+0x23c>)
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	089b      	lsrs	r3, r3, #2
 8004748:	3302      	adds	r3, #2
 800474a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	220f      	movs	r2, #15
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	43db      	mvns	r3, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4013      	ands	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a20      	ldr	r2, [pc, #128]	; (80047ec <HAL_GPIO_Init+0x240>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d052      	beq.n	8004814 <HAL_GPIO_Init+0x268>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a1f      	ldr	r2, [pc, #124]	; (80047f0 <HAL_GPIO_Init+0x244>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d031      	beq.n	80047da <HAL_GPIO_Init+0x22e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a1e      	ldr	r2, [pc, #120]	; (80047f4 <HAL_GPIO_Init+0x248>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d02b      	beq.n	80047d6 <HAL_GPIO_Init+0x22a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <HAL_GPIO_Init+0x24c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d025      	beq.n	80047d2 <HAL_GPIO_Init+0x226>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <HAL_GPIO_Init+0x250>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01f      	beq.n	80047ce <HAL_GPIO_Init+0x222>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1b      	ldr	r2, [pc, #108]	; (8004800 <HAL_GPIO_Init+0x254>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d019      	beq.n	80047ca <HAL_GPIO_Init+0x21e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <HAL_GPIO_Init+0x258>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d013      	beq.n	80047c6 <HAL_GPIO_Init+0x21a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a19      	ldr	r2, [pc, #100]	; (8004808 <HAL_GPIO_Init+0x25c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00d      	beq.n	80047c2 <HAL_GPIO_Init+0x216>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a18      	ldr	r2, [pc, #96]	; (800480c <HAL_GPIO_Init+0x260>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d007      	beq.n	80047be <HAL_GPIO_Init+0x212>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a17      	ldr	r2, [pc, #92]	; (8004810 <HAL_GPIO_Init+0x264>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d101      	bne.n	80047ba <HAL_GPIO_Init+0x20e>
 80047b6:	2309      	movs	r3, #9
 80047b8:	e02d      	b.n	8004816 <HAL_GPIO_Init+0x26a>
 80047ba:	230a      	movs	r3, #10
 80047bc:	e02b      	b.n	8004816 <HAL_GPIO_Init+0x26a>
 80047be:	2308      	movs	r3, #8
 80047c0:	e029      	b.n	8004816 <HAL_GPIO_Init+0x26a>
 80047c2:	2307      	movs	r3, #7
 80047c4:	e027      	b.n	8004816 <HAL_GPIO_Init+0x26a>
 80047c6:	2306      	movs	r3, #6
 80047c8:	e025      	b.n	8004816 <HAL_GPIO_Init+0x26a>
 80047ca:	2305      	movs	r3, #5
 80047cc:	e023      	b.n	8004816 <HAL_GPIO_Init+0x26a>
 80047ce:	2304      	movs	r3, #4
 80047d0:	e021      	b.n	8004816 <HAL_GPIO_Init+0x26a>
 80047d2:	2303      	movs	r3, #3
 80047d4:	e01f      	b.n	8004816 <HAL_GPIO_Init+0x26a>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e01d      	b.n	8004816 <HAL_GPIO_Init+0x26a>
 80047da:	2301      	movs	r3, #1
 80047dc:	e01b      	b.n	8004816 <HAL_GPIO_Init+0x26a>
 80047de:	bf00      	nop
 80047e0:	58000080 	.word	0x58000080
 80047e4:	58024400 	.word	0x58024400
 80047e8:	58000400 	.word	0x58000400
 80047ec:	58020000 	.word	0x58020000
 80047f0:	58020400 	.word	0x58020400
 80047f4:	58020800 	.word	0x58020800
 80047f8:	58020c00 	.word	0x58020c00
 80047fc:	58021000 	.word	0x58021000
 8004800:	58021400 	.word	0x58021400
 8004804:	58021800 	.word	0x58021800
 8004808:	58021c00 	.word	0x58021c00
 800480c:	58022000 	.word	0x58022000
 8004810:	58022400 	.word	0x58022400
 8004814:	2300      	movs	r3, #0
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	f002 0203 	and.w	r2, r2, #3
 800481c:	0092      	lsls	r2, r2, #2
 800481e:	4093      	lsls	r3, r2
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4313      	orrs	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004826:	4938      	ldr	r1, [pc, #224]	; (8004908 <HAL_GPIO_Init+0x35c>)
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	089b      	lsrs	r3, r3, #2
 800482c:	3302      	adds	r3, #2
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	3301      	adds	r3, #1
 80048e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f47f ae63 	bne.w	80045c0 <HAL_GPIO_Init+0x14>
  }
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	3724      	adds	r7, #36	; 0x24
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	58000400 	.word	0x58000400

0800490c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	807b      	strh	r3, [r7, #2]
 8004918:	4613      	mov	r3, r2
 800491a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800491c:	787b      	ldrb	r3, [r7, #1]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004922:	887a      	ldrh	r2, [r7, #2]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004928:	e003      	b.n	8004932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800492a:	887b      	ldrh	r3, [r7, #2]
 800492c:	041a      	lsls	r2, r3, #16
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	619a      	str	r2, [r3, #24]
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	4603      	mov	r3, r0
 8004946:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004950:	88fb      	ldrh	r3, [r7, #6]
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 f804 	bl	8004972 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	4603      	mov	r3, r0
 800497a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498a:	b08f      	sub	sp, #60	; 0x3c
 800498c:	af0a      	add	r7, sp, #40	; 0x28
 800498e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e054      	b.n	8004a44 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f00b fc05 	bl	80101c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2203      	movs	r2, #3
 80049be:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f006 fd0e 	bl	800b3fa <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	687e      	ldr	r6, [r7, #4]
 80049e6:	466d      	mov	r5, sp
 80049e8:	f106 0410 	add.w	r4, r6, #16
 80049ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80049fc:	1d33      	adds	r3, r6, #4
 80049fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a00:	6838      	ldr	r0, [r7, #0]
 8004a02:	f006 fc7b 	bl	800b2fc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f006 fd05 	bl	800b41c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	687e      	ldr	r6, [r7, #4]
 8004a1a:	466d      	mov	r5, sp
 8004a1c:	f106 0410 	add.w	r4, r6, #16
 8004a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a30:	1d33      	adds	r3, r6, #4
 8004a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a34:	6838      	ldr	r0, [r7, #0]
 8004a36:	f006 fe4f 	bl	800b6d8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a4c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004a4c:	b590      	push	{r4, r7, lr}
 8004a4e:	b089      	sub	sp, #36	; 0x24
 8004a50:	af04      	add	r7, sp, #16
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	4608      	mov	r0, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	70fb      	strb	r3, [r7, #3]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	70bb      	strb	r3, [r7, #2]
 8004a62:	4613      	mov	r3, r2
 8004a64:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_HCD_HC_Init+0x28>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e076      	b.n	8004b62 <HAL_HCD_HC_Init+0x116>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	212c      	movs	r1, #44	; 0x2c
 8004a82:	fb01 f303 	mul.w	r3, r1, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	333d      	adds	r3, #61	; 0x3d
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	212c      	movs	r1, #44	; 0x2c
 8004a94:	fb01 f303 	mul.w	r3, r1, r3
 8004a98:	4413      	add	r3, r2
 8004a9a:	3338      	adds	r3, #56	; 0x38
 8004a9c:	787a      	ldrb	r2, [r7, #1]
 8004a9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	212c      	movs	r1, #44	; 0x2c
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	4413      	add	r3, r2
 8004aac:	3340      	adds	r3, #64	; 0x40
 8004aae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004ab0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	212c      	movs	r1, #44	; 0x2c
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	3339      	adds	r3, #57	; 0x39
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	212c      	movs	r1, #44	; 0x2c
 8004aca:	fb01 f303 	mul.w	r3, r1, r3
 8004ace:	4413      	add	r3, r2
 8004ad0:	333f      	adds	r3, #63	; 0x3f
 8004ad2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004ad6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	78ba      	ldrb	r2, [r7, #2]
 8004adc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ae0:	b2d0      	uxtb	r0, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	333a      	adds	r3, #58	; 0x3a
 8004aee:	4602      	mov	r2, r0
 8004af0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004af2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	da09      	bge.n	8004b0e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	212c      	movs	r1, #44	; 0x2c
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	4413      	add	r3, r2
 8004b06:	333b      	adds	r3, #59	; 0x3b
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	e008      	b.n	8004b20 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	212c      	movs	r1, #44	; 0x2c
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	333b      	adds	r3, #59	; 0x3b
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	212c      	movs	r1, #44	; 0x2c
 8004b26:	fb01 f303 	mul.w	r3, r1, r3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	333c      	adds	r3, #60	; 0x3c
 8004b2e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004b32:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6818      	ldr	r0, [r3, #0]
 8004b38:	787c      	ldrb	r4, [r7, #1]
 8004b3a:	78ba      	ldrb	r2, [r7, #2]
 8004b3c:	78f9      	ldrb	r1, [r7, #3]
 8004b3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b40:	9302      	str	r3, [sp, #8]
 8004b42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4623      	mov	r3, r4
 8004b50:	f006 ff14 	bl	800b97c <USB_HC_Init>
 8004b54:	4603      	mov	r3, r0
 8004b56:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd90      	pop	{r4, r7, pc}

08004b6a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	460b      	mov	r3, r1
 8004b74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_HCD_HC_Halt+0x1e>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e00f      	b.n	8004ba8 <HAL_HCD_HC_Halt+0x3e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	78fa      	ldrb	r2, [r7, #3]
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f007 f950 	bl	800be3e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	4608      	mov	r0, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	70fb      	strb	r3, [r7, #3]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	70bb      	strb	r3, [r7, #2]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	212c      	movs	r1, #44	; 0x2c
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	333b      	adds	r3, #59	; 0x3b
 8004bd8:	78ba      	ldrb	r2, [r7, #2]
 8004bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	333f      	adds	r3, #63	; 0x3f
 8004bea:	787a      	ldrb	r2, [r7, #1]
 8004bec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004bee:	7c3b      	ldrb	r3, [r7, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d112      	bne.n	8004c1a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	212c      	movs	r1, #44	; 0x2c
 8004bfa:	fb01 f303 	mul.w	r3, r1, r3
 8004bfe:	4413      	add	r3, r2
 8004c00:	3342      	adds	r3, #66	; 0x42
 8004c02:	2203      	movs	r2, #3
 8004c04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	333d      	adds	r3, #61	; 0x3d
 8004c14:	7f3a      	ldrb	r2, [r7, #28]
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	e008      	b.n	8004c2c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	212c      	movs	r1, #44	; 0x2c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	3342      	adds	r3, #66	; 0x42
 8004c28:	2202      	movs	r2, #2
 8004c2a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004c2c:	787b      	ldrb	r3, [r7, #1]
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	f200 80c6 	bhi.w	8004dc0 <HAL_HCD_HC_SubmitRequest+0x210>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c4d 	.word	0x08004c4d
 8004c40:	08004dad 	.word	0x08004dad
 8004c44:	08004cb1 	.word	0x08004cb1
 8004c48:	08004d2f 	.word	0x08004d2f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004c4c:	7c3b      	ldrb	r3, [r7, #16]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	f040 80b8 	bne.w	8004dc4 <HAL_HCD_HC_SubmitRequest+0x214>
 8004c54:	78bb      	ldrb	r3, [r7, #2]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f040 80b4 	bne.w	8004dc4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004c5c:	8b3b      	ldrh	r3, [r7, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	212c      	movs	r1, #44	; 0x2c
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	3355      	adds	r3, #85	; 0x55
 8004c70:	2201      	movs	r2, #1
 8004c72:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	212c      	movs	r1, #44	; 0x2c
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	3355      	adds	r3, #85	; 0x55
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d109      	bne.n	8004c9c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	212c      	movs	r1, #44	; 0x2c
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	3342      	adds	r3, #66	; 0x42
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c9a:	e093      	b.n	8004dc4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	212c      	movs	r1, #44	; 0x2c
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3342      	adds	r3, #66	; 0x42
 8004caa:	2202      	movs	r2, #2
 8004cac:	701a      	strb	r2, [r3, #0]
      break;
 8004cae:	e089      	b.n	8004dc4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004cb0:	78bb      	ldrb	r3, [r7, #2]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d11d      	bne.n	8004cf2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	212c      	movs	r1, #44	; 0x2c
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	3355      	adds	r3, #85	; 0x55
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	212c      	movs	r1, #44	; 0x2c
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3342      	adds	r3, #66	; 0x42
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004cdc:	e073      	b.n	8004dc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	212c      	movs	r1, #44	; 0x2c
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	4413      	add	r3, r2
 8004cea:	3342      	adds	r3, #66	; 0x42
 8004cec:	2202      	movs	r2, #2
 8004cee:	701a      	strb	r2, [r3, #0]
      break;
 8004cf0:	e069      	b.n	8004dc6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	212c      	movs	r1, #44	; 0x2c
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3354      	adds	r3, #84	; 0x54
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	212c      	movs	r1, #44	; 0x2c
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	4413      	add	r3, r2
 8004d12:	3342      	adds	r3, #66	; 0x42
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
      break;
 8004d18:	e055      	b.n	8004dc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	212c      	movs	r1, #44	; 0x2c
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	3342      	adds	r3, #66	; 0x42
 8004d28:	2202      	movs	r2, #2
 8004d2a:	701a      	strb	r2, [r3, #0]
      break;
 8004d2c:	e04b      	b.n	8004dc6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004d2e:	78bb      	ldrb	r3, [r7, #2]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d11d      	bne.n	8004d70 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	212c      	movs	r1, #44	; 0x2c
 8004d3a:	fb01 f303 	mul.w	r3, r1, r3
 8004d3e:	4413      	add	r3, r2
 8004d40:	3355      	adds	r3, #85	; 0x55
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d109      	bne.n	8004d5c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	212c      	movs	r1, #44	; 0x2c
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	4413      	add	r3, r2
 8004d54:	3342      	adds	r3, #66	; 0x42
 8004d56:	2200      	movs	r2, #0
 8004d58:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004d5a:	e034      	b.n	8004dc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	212c      	movs	r1, #44	; 0x2c
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	3342      	adds	r3, #66	; 0x42
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	701a      	strb	r2, [r3, #0]
      break;
 8004d6e:	e02a      	b.n	8004dc6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	212c      	movs	r1, #44	; 0x2c
 8004d76:	fb01 f303 	mul.w	r3, r1, r3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3354      	adds	r3, #84	; 0x54
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d109      	bne.n	8004d98 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	212c      	movs	r1, #44	; 0x2c
 8004d8a:	fb01 f303 	mul.w	r3, r1, r3
 8004d8e:	4413      	add	r3, r2
 8004d90:	3342      	adds	r3, #66	; 0x42
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
      break;
 8004d96:	e016      	b.n	8004dc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	212c      	movs	r1, #44	; 0x2c
 8004d9e:	fb01 f303 	mul.w	r3, r1, r3
 8004da2:	4413      	add	r3, r2
 8004da4:	3342      	adds	r3, #66	; 0x42
 8004da6:	2202      	movs	r2, #2
 8004da8:	701a      	strb	r2, [r3, #0]
      break;
 8004daa:	e00c      	b.n	8004dc6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	212c      	movs	r1, #44	; 0x2c
 8004db2:	fb01 f303 	mul.w	r3, r1, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	3342      	adds	r3, #66	; 0x42
 8004dba:	2200      	movs	r2, #0
 8004dbc:	701a      	strb	r2, [r3, #0]
      break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004dc0:	bf00      	nop
 8004dc2:	e000      	b.n	8004dc6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004dc4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	212c      	movs	r1, #44	; 0x2c
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3344      	adds	r3, #68	; 0x44
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	8b3a      	ldrh	r2, [r7, #24]
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	202c      	movs	r0, #44	; 0x2c
 8004de0:	fb00 f303 	mul.w	r3, r0, r3
 8004de4:	440b      	add	r3, r1
 8004de6:	334c      	adds	r3, #76	; 0x4c
 8004de8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	212c      	movs	r1, #44	; 0x2c
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	4413      	add	r3, r2
 8004df6:	3360      	adds	r3, #96	; 0x60
 8004df8:	2200      	movs	r2, #0
 8004dfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	212c      	movs	r1, #44	; 0x2c
 8004e02:	fb01 f303 	mul.w	r3, r1, r3
 8004e06:	4413      	add	r3, r2
 8004e08:	3350      	adds	r3, #80	; 0x50
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	212c      	movs	r1, #44	; 0x2c
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	4413      	add	r3, r2
 8004e1a:	3339      	adds	r3, #57	; 0x39
 8004e1c:	78fa      	ldrb	r2, [r7, #3]
 8004e1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	212c      	movs	r1, #44	; 0x2c
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3361      	adds	r3, #97	; 0x61
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	78fb      	ldrb	r3, [r7, #3]
 8004e38:	222c      	movs	r2, #44	; 0x2c
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
 8004e3e:	3338      	adds	r3, #56	; 0x38
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	18d1      	adds	r1, r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f006 fea4 	bl	800bb98 <USB_HC_StartXfer>
 8004e50:	4603      	mov	r3, r0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop

08004e5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f006 fbed 	bl	800b652 <USB_GetMode>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	f040 80ef 	bne.w	800505e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f006 fbd1 	bl	800b62c <USB_ReadInterrupts>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80e5 	beq.w	800505c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f006 fbc8 	bl	800b62c <USB_ReadInterrupts>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ea6:	d104      	bne.n	8004eb2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004eb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f006 fbb8 	bl	800b62c <USB_ReadInterrupts>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec6:	d104      	bne.n	8004ed2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ed0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f006 fba8 	bl	800b62c <USB_ReadInterrupts>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ee2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ee6:	d104      	bne.n	8004ef2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004ef0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f006 fb98 	bl	800b62c <USB_ReadInterrupts>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d103      	bne.n	8004f0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f006 fb8a 	bl	800b62c <USB_ReadInterrupts>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f22:	d115      	bne.n	8004f50 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004f2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d108      	bne.n	8004f50 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f00b f9ee 	bl	8010320 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2101      	movs	r1, #1
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f006 fc7a 	bl	800b844 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f006 fb69 	bl	800b62c <USB_ReadInterrupts>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f64:	d102      	bne.n	8004f6c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f001 f9e3 	bl	8006332 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f006 fb5b 	bl	800b62c <USB_ReadInterrupts>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d106      	bne.n	8004f8e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f00b f9b1 	bl	80102e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f006 fb4a 	bl	800b62c <USB_ReadInterrupts>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	d101      	bne.n	8004fa6 <HAL_HCD_IRQHandler+0x14a>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <HAL_HCD_IRQHandler+0x14c>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d012      	beq.n	8004fd2 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0210 	bic.w	r2, r2, #16
 8004fba:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f001 f8e6 	bl	800618e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699a      	ldr	r2, [r3, #24]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0210 	orr.w	r2, r2, #16
 8004fd0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f006 fb28 	bl	800b62c <USB_ReadInterrupts>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fe6:	d13a      	bne.n	800505e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f006 ff15 	bl	800be1c <USB_HC_ReadInterrupt>
 8004ff2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	e025      	b.n	8005046 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	fa22 f303 	lsr.w	r3, r2, r3
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d018      	beq.n	8005040 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005024:	d106      	bne.n	8005034 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	4619      	mov	r1, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f88f 	bl	8005150 <HCD_HC_IN_IRQHandler>
 8005032:	e005      	b.n	8005040 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fcaa 	bl	8005994 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	3301      	adds	r3, #1
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	429a      	cmp	r2, r3
 800504e:	d3d4      	bcc.n	8004ffa <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005058:	615a      	str	r2, [r3, #20]
 800505a:	e000      	b.n	800505e <HAL_HCD_IRQHandler+0x202>
      return;
 800505c:	bf00      	nop
    }
  }
}
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_HCD_Start+0x16>
 8005076:	2302      	movs	r3, #2
 8005078:	e013      	b.n	80050a2 <HAL_HCD_Start+0x3e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f006 f9a6 	bl	800b3d8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2101      	movs	r1, #1
 8005092:	4618      	mov	r0, r3
 8005094:	f006 fc10 	bl	800b8b8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_HCD_Stop+0x16>
 80050bc:	2302      	movs	r3, #2
 80050be:	e00d      	b.n	80050dc <HAL_HCD_Stop+0x32>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f007 f80f 	bl	800c0f0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	212c      	movs	r1, #44	; 0x2c
 80050f6:	fb01 f303 	mul.w	r3, r1, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	3360      	adds	r3, #96	; 0x60
 80050fe:	781b      	ldrb	r3, [r3, #0]
}
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	212c      	movs	r1, #44	; 0x2c
 800511e:	fb01 f303 	mul.w	r3, r1, r3
 8005122:	4413      	add	r3, r2
 8005124:	3350      	adds	r3, #80	; 0x50
 8005126:	681b      	ldr	r3, [r3, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f006 fc09 	bl	800b958 <USB_GetCurrentFrame>
 8005146:	4603      	mov	r3, r0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4413      	add	r3, r2
 8005172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b04      	cmp	r3, #4
 800517e:	d119      	bne.n	80051b4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4413      	add	r3, r2
 8005188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518c:	461a      	mov	r2, r3
 800518e:	2304      	movs	r3, #4
 8005190:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ac:	f043 0302 	orr.w	r3, r3, #2
 80051b0:	60d3      	str	r3, [r2, #12]
 80051b2:	e101      	b.n	80053b8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ca:	d12b      	bne.n	8005224 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d8:	461a      	mov	r2, r3
 80051da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	212c      	movs	r1, #44	; 0x2c
 80051e6:	fb01 f303 	mul.w	r3, r1, r3
 80051ea:	4413      	add	r3, r2
 80051ec:	3361      	adds	r3, #97	; 0x61
 80051ee:	2207      	movs	r2, #7
 80051f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	440a      	add	r2, r1
 8005208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	4611      	mov	r1, r2
 800521c:	4618      	mov	r0, r3
 800521e:	f006 fe0e 	bl	800be3e <USB_HC_Halt>
 8005222:	e0c9      	b.n	80053b8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b20      	cmp	r3, #32
 8005238:	d109      	bne.n	800524e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4413      	add	r3, r2
 8005242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005246:	461a      	mov	r2, r3
 8005248:	2320      	movs	r3, #32
 800524a:	6093      	str	r3, [r2, #8]
 800524c:	e0b4      	b.n	80053b8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4413      	add	r3, r2
 8005256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b08      	cmp	r3, #8
 8005262:	d133      	bne.n	80052cc <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	440a      	add	r2, r1
 800527a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527e:	f043 0302 	orr.w	r3, r3, #2
 8005282:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	212c      	movs	r1, #44	; 0x2c
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	4413      	add	r3, r2
 8005290:	3361      	adds	r3, #97	; 0x61
 8005292:	2205      	movs	r2, #5
 8005294:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a2:	461a      	mov	r2, r3
 80052a4:	2310      	movs	r3, #16
 80052a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b4:	461a      	mov	r2, r3
 80052b6:	2308      	movs	r3, #8
 80052b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	4611      	mov	r1, r2
 80052c4:	4618      	mov	r0, r3
 80052c6:	f006 fdba 	bl	800be3e <USB_HC_Halt>
 80052ca:	e075      	b.n	80053b8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e2:	d134      	bne.n	800534e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052fe:	f043 0302 	orr.w	r3, r3, #2
 8005302:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	212c      	movs	r1, #44	; 0x2c
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	4413      	add	r3, r2
 8005310:	3361      	adds	r3, #97	; 0x61
 8005312:	2208      	movs	r2, #8
 8005314:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4413      	add	r3, r2
 800531e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005322:	461a      	mov	r2, r3
 8005324:	2310      	movs	r3, #16
 8005326:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005334:	461a      	mov	r2, r3
 8005336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800533a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	4611      	mov	r1, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f006 fd79 	bl	800be3e <USB_HC_Halt>
 800534c:	e034      	b.n	80053b8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4413      	add	r3, r2
 8005356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005360:	2b80      	cmp	r3, #128	; 0x80
 8005362:	d129      	bne.n	80053b8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4413      	add	r3, r2
 800536c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	440a      	add	r2, r1
 800537a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800537e:	f043 0302 	orr.w	r3, r3, #2
 8005382:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	212c      	movs	r1, #44	; 0x2c
 800538a:	fb01 f303 	mul.w	r3, r1, r3
 800538e:	4413      	add	r3, r2
 8005390:	3361      	adds	r3, #97	; 0x61
 8005392:	2206      	movs	r2, #6
 8005394:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	4611      	mov	r1, r2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f006 fd4c 	bl	800be3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b2:	461a      	mov	r2, r3
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ce:	d122      	bne.n	8005416 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ea:	f043 0302 	orr.w	r3, r3, #2
 80053ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	4611      	mov	r1, r2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f006 fd1f 	bl	800be3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540c:	461a      	mov	r2, r3
 800540e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005412:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005414:	e2ba      	b.n	800598c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4413      	add	r3, r2
 800541e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b01      	cmp	r3, #1
 800542a:	f040 811b 	bne.w	8005664 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d019      	beq.n	800546a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	212c      	movs	r1, #44	; 0x2c
 800543c:	fb01 f303 	mul.w	r3, r1, r3
 8005440:	4413      	add	r3, r2
 8005442:	3348      	adds	r3, #72	; 0x48
 8005444:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	0159      	lsls	r1, r3, #5
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	440b      	add	r3, r1
 800544e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005458:	1ad2      	subs	r2, r2, r3
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	202c      	movs	r0, #44	; 0x2c
 8005460:	fb00 f303 	mul.w	r3, r0, r3
 8005464:	440b      	add	r3, r1
 8005466:	3350      	adds	r3, #80	; 0x50
 8005468:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	212c      	movs	r1, #44	; 0x2c
 8005470:	fb01 f303 	mul.w	r3, r1, r3
 8005474:	4413      	add	r3, r2
 8005476:	3361      	adds	r3, #97	; 0x61
 8005478:	2201      	movs	r2, #1
 800547a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	212c      	movs	r1, #44	; 0x2c
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	4413      	add	r3, r2
 8005488:	335c      	adds	r3, #92	; 0x5c
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4413      	add	r3, r2
 8005496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549a:	461a      	mov	r2, r3
 800549c:	2301      	movs	r3, #1
 800549e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	212c      	movs	r1, #44	; 0x2c
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	4413      	add	r3, r2
 80054ac:	333f      	adds	r3, #63	; 0x3f
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d009      	beq.n	80054c8 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	212c      	movs	r1, #44	; 0x2c
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	4413      	add	r3, r2
 80054c0:	333f      	adds	r3, #63	; 0x3f
 80054c2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d121      	bne.n	800550c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	0151      	lsls	r1, r2, #5
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	440a      	add	r2, r1
 80054de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e2:	f043 0302 	orr.w	r3, r3, #2
 80054e6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	4611      	mov	r1, r2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f006 fca3 	bl	800be3e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005504:	461a      	mov	r2, r3
 8005506:	2310      	movs	r3, #16
 8005508:	6093      	str	r3, [r2, #8]
 800550a:	e066      	b.n	80055da <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	212c      	movs	r1, #44	; 0x2c
 8005512:	fb01 f303 	mul.w	r3, r1, r3
 8005516:	4413      	add	r3, r2
 8005518:	333f      	adds	r3, #63	; 0x3f
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d127      	bne.n	8005570 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	4413      	add	r3, r2
 8005528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	440a      	add	r2, r1
 8005536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800553a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800553e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	212c      	movs	r1, #44	; 0x2c
 8005546:	fb01 f303 	mul.w	r3, r1, r3
 800554a:	4413      	add	r3, r2
 800554c:	3360      	adds	r3, #96	; 0x60
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	b2d9      	uxtb	r1, r3
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	202c      	movs	r0, #44	; 0x2c
 800555c:	fb00 f303 	mul.w	r3, r0, r3
 8005560:	4413      	add	r3, r2
 8005562:	3360      	adds	r3, #96	; 0x60
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f00a fee7 	bl	801033c <HAL_HCD_HC_NotifyURBChange_Callback>
 800556e:	e034      	b.n	80055da <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	212c      	movs	r1, #44	; 0x2c
 8005576:	fb01 f303 	mul.w	r3, r1, r3
 800557a:	4413      	add	r3, r2
 800557c:	333f      	adds	r3, #63	; 0x3f
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d12a      	bne.n	80055da <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	212c      	movs	r1, #44	; 0x2c
 800558a:	fb01 f303 	mul.w	r3, r1, r3
 800558e:	4413      	add	r3, r2
 8005590:	3360      	adds	r3, #96	; 0x60
 8005592:	2201      	movs	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	212c      	movs	r1, #44	; 0x2c
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	4413      	add	r3, r2
 80055a2:	3354      	adds	r3, #84	; 0x54
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	f083 0301 	eor.w	r3, r3, #1
 80055aa:	b2d8      	uxtb	r0, r3
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	212c      	movs	r1, #44	; 0x2c
 80055b2:	fb01 f303 	mul.w	r3, r1, r3
 80055b6:	4413      	add	r3, r2
 80055b8:	3354      	adds	r3, #84	; 0x54
 80055ba:	4602      	mov	r2, r0
 80055bc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	b2d9      	uxtb	r1, r3
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	202c      	movs	r0, #44	; 0x2c
 80055c8:	fb00 f303 	mul.w	r3, r0, r3
 80055cc:	4413      	add	r3, r2
 80055ce:	3360      	adds	r3, #96	; 0x60
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f00a feb1 	bl	801033c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d12b      	bne.n	800563a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	212c      	movs	r1, #44	; 0x2c
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	4413      	add	r3, r2
 80055ee:	3348      	adds	r3, #72	; 0x48
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	202c      	movs	r0, #44	; 0x2c
 80055f8:	fb00 f202 	mul.w	r2, r0, r2
 80055fc:	440a      	add	r2, r1
 80055fe:	3240      	adds	r2, #64	; 0x40
 8005600:	8812      	ldrh	r2, [r2, #0]
 8005602:	fbb3 f3f2 	udiv	r3, r3, r2
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 81be 	beq.w	800598c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	212c      	movs	r1, #44	; 0x2c
 8005616:	fb01 f303 	mul.w	r3, r1, r3
 800561a:	4413      	add	r3, r2
 800561c:	3354      	adds	r3, #84	; 0x54
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	f083 0301 	eor.w	r3, r3, #1
 8005624:	b2d8      	uxtb	r0, r3
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	212c      	movs	r1, #44	; 0x2c
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	4413      	add	r3, r2
 8005632:	3354      	adds	r3, #84	; 0x54
 8005634:	4602      	mov	r2, r0
 8005636:	701a      	strb	r2, [r3, #0]
}
 8005638:	e1a8      	b.n	800598c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	212c      	movs	r1, #44	; 0x2c
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	4413      	add	r3, r2
 8005646:	3354      	adds	r3, #84	; 0x54
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	f083 0301 	eor.w	r3, r3, #1
 800564e:	b2d8      	uxtb	r0, r3
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	212c      	movs	r1, #44	; 0x2c
 8005656:	fb01 f303 	mul.w	r3, r1, r3
 800565a:	4413      	add	r3, r2
 800565c:	3354      	adds	r3, #84	; 0x54
 800565e:	4602      	mov	r2, r0
 8005660:	701a      	strb	r2, [r3, #0]
}
 8005662:	e193      	b.n	800598c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	4413      	add	r3, r2
 800566c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b02      	cmp	r3, #2
 8005678:	f040 8106 	bne.w	8005888 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4413      	add	r3, r2
 8005684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	440a      	add	r2, r1
 8005692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005696:	f023 0302 	bic.w	r3, r3, #2
 800569a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	212c      	movs	r1, #44	; 0x2c
 80056a2:	fb01 f303 	mul.w	r3, r1, r3
 80056a6:	4413      	add	r3, r2
 80056a8:	3361      	adds	r3, #97	; 0x61
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d109      	bne.n	80056c4 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	212c      	movs	r1, #44	; 0x2c
 80056b6:	fb01 f303 	mul.w	r3, r1, r3
 80056ba:	4413      	add	r3, r2
 80056bc:	3360      	adds	r3, #96	; 0x60
 80056be:	2201      	movs	r2, #1
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	e0c9      	b.n	8005858 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	212c      	movs	r1, #44	; 0x2c
 80056ca:	fb01 f303 	mul.w	r3, r1, r3
 80056ce:	4413      	add	r3, r2
 80056d0:	3361      	adds	r3, #97	; 0x61
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b05      	cmp	r3, #5
 80056d6:	d109      	bne.n	80056ec <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	212c      	movs	r1, #44	; 0x2c
 80056de:	fb01 f303 	mul.w	r3, r1, r3
 80056e2:	4413      	add	r3, r2
 80056e4:	3360      	adds	r3, #96	; 0x60
 80056e6:	2205      	movs	r2, #5
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	e0b5      	b.n	8005858 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	212c      	movs	r1, #44	; 0x2c
 80056f2:	fb01 f303 	mul.w	r3, r1, r3
 80056f6:	4413      	add	r3, r2
 80056f8:	3361      	adds	r3, #97	; 0x61
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d009      	beq.n	8005714 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	212c      	movs	r1, #44	; 0x2c
 8005706:	fb01 f303 	mul.w	r3, r1, r3
 800570a:	4413      	add	r3, r2
 800570c:	3361      	adds	r3, #97	; 0x61
 800570e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005710:	2b08      	cmp	r3, #8
 8005712:	d150      	bne.n	80057b6 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	212c      	movs	r1, #44	; 0x2c
 800571a:	fb01 f303 	mul.w	r3, r1, r3
 800571e:	4413      	add	r3, r2
 8005720:	335c      	adds	r3, #92	; 0x5c
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	202c      	movs	r0, #44	; 0x2c
 800572c:	fb00 f303 	mul.w	r3, r0, r3
 8005730:	440b      	add	r3, r1
 8005732:	335c      	adds	r3, #92	; 0x5c
 8005734:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	212c      	movs	r1, #44	; 0x2c
 800573c:	fb01 f303 	mul.w	r3, r1, r3
 8005740:	4413      	add	r3, r2
 8005742:	335c      	adds	r3, #92	; 0x5c
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d912      	bls.n	8005770 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	212c      	movs	r1, #44	; 0x2c
 8005750:	fb01 f303 	mul.w	r3, r1, r3
 8005754:	4413      	add	r3, r2
 8005756:	335c      	adds	r3, #92	; 0x5c
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	212c      	movs	r1, #44	; 0x2c
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	4413      	add	r3, r2
 8005768:	3360      	adds	r3, #96	; 0x60
 800576a:	2204      	movs	r2, #4
 800576c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800576e:	e073      	b.n	8005858 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	212c      	movs	r1, #44	; 0x2c
 8005776:	fb01 f303 	mul.w	r3, r1, r3
 800577a:	4413      	add	r3, r2
 800577c:	3360      	adds	r3, #96	; 0x60
 800577e:	2202      	movs	r2, #2
 8005780:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	4413      	add	r3, r2
 800578a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005798:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057a0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ae:	461a      	mov	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80057b4:	e050      	b.n	8005858 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	212c      	movs	r1, #44	; 0x2c
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	4413      	add	r3, r2
 80057c2:	3361      	adds	r3, #97	; 0x61
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d122      	bne.n	8005810 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	212c      	movs	r1, #44	; 0x2c
 80057d0:	fb01 f303 	mul.w	r3, r1, r3
 80057d4:	4413      	add	r3, r2
 80057d6:	3360      	adds	r3, #96	; 0x60
 80057d8:	2202      	movs	r2, #2
 80057da:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057f2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057fa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4413      	add	r3, r2
 8005804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005808:	461a      	mov	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	e023      	b.n	8005858 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	212c      	movs	r1, #44	; 0x2c
 8005816:	fb01 f303 	mul.w	r3, r1, r3
 800581a:	4413      	add	r3, r2
 800581c:	3361      	adds	r3, #97	; 0x61
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b07      	cmp	r3, #7
 8005822:	d119      	bne.n	8005858 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	212c      	movs	r1, #44	; 0x2c
 800582a:	fb01 f303 	mul.w	r3, r1, r3
 800582e:	4413      	add	r3, r2
 8005830:	335c      	adds	r3, #92	; 0x5c
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	202c      	movs	r0, #44	; 0x2c
 800583c:	fb00 f303 	mul.w	r3, r0, r3
 8005840:	440b      	add	r3, r1
 8005842:	335c      	adds	r3, #92	; 0x5c
 8005844:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	212c      	movs	r1, #44	; 0x2c
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	4413      	add	r3, r2
 8005852:	3360      	adds	r3, #96	; 0x60
 8005854:	2204      	movs	r2, #4
 8005856:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4413      	add	r3, r2
 8005860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005864:	461a      	mov	r2, r3
 8005866:	2302      	movs	r3, #2
 8005868:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	b2d9      	uxtb	r1, r3
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	202c      	movs	r0, #44	; 0x2c
 8005874:	fb00 f303 	mul.w	r3, r0, r3
 8005878:	4413      	add	r3, r2
 800587a:	3360      	adds	r3, #96	; 0x60
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f00a fd5b 	bl	801033c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005886:	e081      	b.n	800598c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0310 	and.w	r3, r3, #16
 800589a:	2b10      	cmp	r3, #16
 800589c:	d176      	bne.n	800598c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	212c      	movs	r1, #44	; 0x2c
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	4413      	add	r3, r2
 80058aa:	333f      	adds	r3, #63	; 0x3f
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d121      	bne.n	80058f6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	212c      	movs	r1, #44	; 0x2c
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	4413      	add	r3, r2
 80058be:	335c      	adds	r3, #92	; 0x5c
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058de:	f043 0302 	orr.w	r3, r3, #2
 80058e2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f006 faa5 	bl	800be3e <USB_HC_Halt>
 80058f4:	e041      	b.n	800597a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	212c      	movs	r1, #44	; 0x2c
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	4413      	add	r3, r2
 8005902:	333f      	adds	r3, #63	; 0x3f
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d009      	beq.n	800591e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	212c      	movs	r1, #44	; 0x2c
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	4413      	add	r3, r2
 8005916:	333f      	adds	r3, #63	; 0x3f
 8005918:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800591a:	2b02      	cmp	r3, #2
 800591c:	d12d      	bne.n	800597a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	212c      	movs	r1, #44	; 0x2c
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	4413      	add	r3, r2
 800592a:	335c      	adds	r3, #92	; 0x5c
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d120      	bne.n	800597a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	212c      	movs	r1, #44	; 0x2c
 800593e:	fb01 f303 	mul.w	r3, r1, r3
 8005942:	4413      	add	r3, r2
 8005944:	3361      	adds	r3, #97	; 0x61
 8005946:	2203      	movs	r2, #3
 8005948:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	440a      	add	r2, r1
 8005960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005964:	f043 0302 	orr.w	r3, r3, #2
 8005968:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	4611      	mov	r1, r2
 8005974:	4618      	mov	r0, r3
 8005976:	f006 fa62 	bl	800be3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	4413      	add	r3, r2
 8005982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005986:	461a      	mov	r2, r3
 8005988:	2310      	movs	r3, #16
 800598a:	6093      	str	r3, [r2, #8]
}
 800598c:	bf00      	nop
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d119      	bne.n	80059f8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d0:	461a      	mov	r2, r3
 80059d2:	2304      	movs	r3, #4
 80059d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f0:	f043 0302 	orr.w	r3, r3, #2
 80059f4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80059f6:	e3c6      	b.n	8006186 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d13e      	bne.n	8005a8c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2320      	movs	r3, #32
 8005a1e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	212c      	movs	r1, #44	; 0x2c
 8005a26:	fb01 f303 	mul.w	r3, r1, r3
 8005a2a:	4413      	add	r3, r2
 8005a2c:	333d      	adds	r3, #61	; 0x3d
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	f040 83a8 	bne.w	8006186 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	212c      	movs	r1, #44	; 0x2c
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	4413      	add	r3, r2
 8005a42:	333d      	adds	r3, #61	; 0x3d
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	212c      	movs	r1, #44	; 0x2c
 8005a4e:	fb01 f303 	mul.w	r3, r1, r3
 8005a52:	4413      	add	r3, r2
 8005a54:	3360      	adds	r3, #96	; 0x60
 8005a56:	2202      	movs	r2, #2
 8005a58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a74:	f043 0302 	orr.w	r3, r3, #2
 8005a78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	4611      	mov	r1, r2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f006 f9da 	bl	800be3e <USB_HC_Halt>
}
 8005a8a:	e37c      	b.n	8006186 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa2:	d122      	bne.n	8005aea <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005abe:	f043 0302 	orr.w	r3, r3, #2
 8005ac2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	4611      	mov	r1, r2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f006 f9b5 	bl	800be3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ae6:	6093      	str	r3, [r2, #8]
}
 8005ae8:	e34d      	b.n	8006186 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d150      	bne.n	8005ba2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	212c      	movs	r1, #44	; 0x2c
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	335c      	adds	r3, #92	; 0x5c
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	2b40      	cmp	r3, #64	; 0x40
 8005b26:	d111      	bne.n	8005b4c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	212c      	movs	r1, #44	; 0x2c
 8005b2e:	fb01 f303 	mul.w	r3, r1, r3
 8005b32:	4413      	add	r3, r2
 8005b34:	333d      	adds	r3, #61	; 0x3d
 8005b36:	2201      	movs	r2, #1
 8005b38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b46:	461a      	mov	r2, r3
 8005b48:	2340      	movs	r3, #64	; 0x40
 8005b4a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b66:	f043 0302 	orr.w	r3, r3, #2
 8005b6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	4611      	mov	r1, r2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f006 f961 	bl	800be3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b88:	461a      	mov	r2, r3
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	212c      	movs	r1, #44	; 0x2c
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	4413      	add	r3, r2
 8005b9a:	3361      	adds	r3, #97	; 0x61
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
}
 8005ba0:	e2f1      	b.n	8006186 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d13c      	bne.n	8005c32 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	212c      	movs	r1, #44	; 0x2c
 8005bbe:	fb01 f303 	mul.w	r3, r1, r3
 8005bc2:	4413      	add	r3, r2
 8005bc4:	3361      	adds	r3, #97	; 0x61
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	212c      	movs	r1, #44	; 0x2c
 8005bd0:	fb01 f303 	mul.w	r3, r1, r3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	333d      	adds	r3, #61	; 0x3d
 8005bd8:	2201      	movs	r2, #1
 8005bda:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	212c      	movs	r1, #44	; 0x2c
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	4413      	add	r3, r2
 8005be8:	335c      	adds	r3, #92	; 0x5c
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	0151      	lsls	r1, r2, #5
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	440a      	add	r2, r1
 8005c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c08:	f043 0302 	orr.w	r3, r3, #2
 8005c0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	4611      	mov	r1, r2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f006 f910 	bl	800be3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	2340      	movs	r3, #64	; 0x40
 8005c2e:	6093      	str	r3, [r2, #8]
}
 8005c30:	e2a9      	b.n	8006186 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d12a      	bne.n	8005c9e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c54:	461a      	mov	r2, r3
 8005c56:	2308      	movs	r3, #8
 8005c58:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c74:	f043 0302 	orr.w	r3, r3, #2
 8005c78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	4611      	mov	r1, r2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f006 f8da 	bl	800be3e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	212c      	movs	r1, #44	; 0x2c
 8005c90:	fb01 f303 	mul.w	r3, r1, r3
 8005c94:	4413      	add	r3, r2
 8005c96:	3361      	adds	r3, #97	; 0x61
 8005c98:	2205      	movs	r2, #5
 8005c9a:	701a      	strb	r2, [r3, #0]
}
 8005c9c:	e273      	b.n	8006186 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	2b10      	cmp	r3, #16
 8005cb2:	d150      	bne.n	8005d56 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	212c      	movs	r1, #44	; 0x2c
 8005cba:	fb01 f303 	mul.w	r3, r1, r3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	335c      	adds	r3, #92	; 0x5c
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	212c      	movs	r1, #44	; 0x2c
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3361      	adds	r3, #97	; 0x61
 8005cd4:	2203      	movs	r2, #3
 8005cd6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	212c      	movs	r1, #44	; 0x2c
 8005cde:	fb01 f303 	mul.w	r3, r1, r3
 8005ce2:	4413      	add	r3, r2
 8005ce4:	333d      	adds	r3, #61	; 0x3d
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d112      	bne.n	8005d12 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	212c      	movs	r1, #44	; 0x2c
 8005cf2:	fb01 f303 	mul.w	r3, r1, r3
 8005cf6:	4413      	add	r3, r2
 8005cf8:	333c      	adds	r3, #60	; 0x3c
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d108      	bne.n	8005d12 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	212c      	movs	r1, #44	; 0x2c
 8005d06:	fb01 f303 	mul.w	r3, r1, r3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	333d      	adds	r3, #61	; 0x3d
 8005d0e:	2201      	movs	r2, #1
 8005d10:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d2c:	f043 0302 	orr.w	r3, r3, #2
 8005d30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f006 f87e 	bl	800be3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4e:	461a      	mov	r2, r3
 8005d50:	2310      	movs	r3, #16
 8005d52:	6093      	str	r3, [r2, #8]
}
 8005d54:	e217      	b.n	8006186 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d68:	2b80      	cmp	r3, #128	; 0x80
 8005d6a:	d174      	bne.n	8005e56 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d121      	bne.n	8005db8 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	212c      	movs	r1, #44	; 0x2c
 8005d7a:	fb01 f303 	mul.w	r3, r1, r3
 8005d7e:	4413      	add	r3, r2
 8005d80:	3361      	adds	r3, #97	; 0x61
 8005d82:	2206      	movs	r2, #6
 8005d84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da0:	f043 0302 	orr.w	r3, r3, #2
 8005da4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	4611      	mov	r1, r2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f006 f844 	bl	800be3e <USB_HC_Halt>
 8005db6:	e044      	b.n	8005e42 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	212c      	movs	r1, #44	; 0x2c
 8005dbe:	fb01 f303 	mul.w	r3, r1, r3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	335c      	adds	r3, #92	; 0x5c
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	202c      	movs	r0, #44	; 0x2c
 8005dd0:	fb00 f303 	mul.w	r3, r0, r3
 8005dd4:	440b      	add	r3, r1
 8005dd6:	335c      	adds	r3, #92	; 0x5c
 8005dd8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	212c      	movs	r1, #44	; 0x2c
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	4413      	add	r3, r2
 8005de6:	335c      	adds	r3, #92	; 0x5c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d920      	bls.n	8005e30 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	212c      	movs	r1, #44	; 0x2c
 8005df4:	fb01 f303 	mul.w	r3, r1, r3
 8005df8:	4413      	add	r3, r2
 8005dfa:	335c      	adds	r3, #92	; 0x5c
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	212c      	movs	r1, #44	; 0x2c
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3360      	adds	r3, #96	; 0x60
 8005e0e:	2204      	movs	r2, #4
 8005e10:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	b2d9      	uxtb	r1, r3
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	202c      	movs	r0, #44	; 0x2c
 8005e1c:	fb00 f303 	mul.w	r3, r0, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	3360      	adds	r3, #96	; 0x60
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f00a fa87 	bl	801033c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005e2e:	e008      	b.n	8005e42 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	212c      	movs	r1, #44	; 0x2c
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3360      	adds	r3, #96	; 0x60
 8005e3e:	2202      	movs	r2, #2
 8005e40:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4e:	461a      	mov	r2, r3
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	6093      	str	r3, [r2, #8]
}
 8005e54:	e197      	b.n	8006186 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6c:	d134      	bne.n	8005ed8 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e88:	f043 0302 	orr.w	r3, r3, #2
 8005e8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	4611      	mov	r1, r2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f005 ffd0 	bl	800be3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eaa:	461a      	mov	r2, r3
 8005eac:	2310      	movs	r3, #16
 8005eae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ec2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	212c      	movs	r1, #44	; 0x2c
 8005eca:	fb01 f303 	mul.w	r3, r1, r3
 8005ece:	4413      	add	r3, r2
 8005ed0:	3361      	adds	r3, #97	; 0x61
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	701a      	strb	r2, [r3, #0]
}
 8005ed6:	e156      	b.n	8006186 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	f040 814b 	bne.w	8006186 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f0a:	f023 0302 	bic.w	r3, r3, #2
 8005f0e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	212c      	movs	r1, #44	; 0x2c
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3361      	adds	r3, #97	; 0x61
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d179      	bne.n	8006018 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	212c      	movs	r1, #44	; 0x2c
 8005f2a:	fb01 f303 	mul.w	r3, r1, r3
 8005f2e:	4413      	add	r3, r2
 8005f30:	3360      	adds	r3, #96	; 0x60
 8005f32:	2201      	movs	r2, #1
 8005f34:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	212c      	movs	r1, #44	; 0x2c
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	4413      	add	r3, r2
 8005f42:	333f      	adds	r3, #63	; 0x3f
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d00a      	beq.n	8005f60 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	212c      	movs	r1, #44	; 0x2c
 8005f50:	fb01 f303 	mul.w	r3, r1, r3
 8005f54:	4413      	add	r3, r2
 8005f56:	333f      	adds	r3, #63	; 0x3f
 8005f58:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	f040 80fc 	bne.w	8006158 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d142      	bne.n	8005fee <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	212c      	movs	r1, #44	; 0x2c
 8005f6e:	fb01 f303 	mul.w	r3, r1, r3
 8005f72:	4413      	add	r3, r2
 8005f74:	334c      	adds	r3, #76	; 0x4c
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 80ed 	beq.w	8006158 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	212c      	movs	r1, #44	; 0x2c
 8005f84:	fb01 f303 	mul.w	r3, r1, r3
 8005f88:	4413      	add	r3, r2
 8005f8a:	334c      	adds	r3, #76	; 0x4c
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	202c      	movs	r0, #44	; 0x2c
 8005f94:	fb00 f202 	mul.w	r2, r0, r2
 8005f98:	440a      	add	r2, r1
 8005f9a:	3240      	adds	r2, #64	; 0x40
 8005f9c:	8812      	ldrh	r2, [r2, #0]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	202c      	movs	r0, #44	; 0x2c
 8005fa8:	fb00 f202 	mul.w	r2, r0, r2
 8005fac:	440a      	add	r2, r1
 8005fae:	3240      	adds	r2, #64	; 0x40
 8005fb0:	8812      	ldrh	r2, [r2, #0]
 8005fb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 80ca 	beq.w	8006158 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	212c      	movs	r1, #44	; 0x2c
 8005fca:	fb01 f303 	mul.w	r3, r1, r3
 8005fce:	4413      	add	r3, r2
 8005fd0:	3355      	adds	r3, #85	; 0x55
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	f083 0301 	eor.w	r3, r3, #1
 8005fd8:	b2d8      	uxtb	r0, r3
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	212c      	movs	r1, #44	; 0x2c
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3355      	adds	r3, #85	; 0x55
 8005fe8:	4602      	mov	r2, r0
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	e0b4      	b.n	8006158 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	212c      	movs	r1, #44	; 0x2c
 8005ff4:	fb01 f303 	mul.w	r3, r1, r3
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3355      	adds	r3, #85	; 0x55
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	f083 0301 	eor.w	r3, r3, #1
 8006002:	b2d8      	uxtb	r0, r3
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	212c      	movs	r1, #44	; 0x2c
 800600a:	fb01 f303 	mul.w	r3, r1, r3
 800600e:	4413      	add	r3, r2
 8006010:	3355      	adds	r3, #85	; 0x55
 8006012:	4602      	mov	r2, r0
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e09f      	b.n	8006158 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	212c      	movs	r1, #44	; 0x2c
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	4413      	add	r3, r2
 8006024:	3361      	adds	r3, #97	; 0x61
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b03      	cmp	r3, #3
 800602a:	d109      	bne.n	8006040 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	212c      	movs	r1, #44	; 0x2c
 8006032:	fb01 f303 	mul.w	r3, r1, r3
 8006036:	4413      	add	r3, r2
 8006038:	3360      	adds	r3, #96	; 0x60
 800603a:	2202      	movs	r2, #2
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e08b      	b.n	8006158 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	212c      	movs	r1, #44	; 0x2c
 8006046:	fb01 f303 	mul.w	r3, r1, r3
 800604a:	4413      	add	r3, r2
 800604c:	3361      	adds	r3, #97	; 0x61
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b04      	cmp	r3, #4
 8006052:	d109      	bne.n	8006068 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	212c      	movs	r1, #44	; 0x2c
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	4413      	add	r3, r2
 8006060:	3360      	adds	r3, #96	; 0x60
 8006062:	2202      	movs	r2, #2
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	e077      	b.n	8006158 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	212c      	movs	r1, #44	; 0x2c
 800606e:	fb01 f303 	mul.w	r3, r1, r3
 8006072:	4413      	add	r3, r2
 8006074:	3361      	adds	r3, #97	; 0x61
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b05      	cmp	r3, #5
 800607a:	d109      	bne.n	8006090 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	212c      	movs	r1, #44	; 0x2c
 8006082:	fb01 f303 	mul.w	r3, r1, r3
 8006086:	4413      	add	r3, r2
 8006088:	3360      	adds	r3, #96	; 0x60
 800608a:	2205      	movs	r2, #5
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	e063      	b.n	8006158 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	212c      	movs	r1, #44	; 0x2c
 8006096:	fb01 f303 	mul.w	r3, r1, r3
 800609a:	4413      	add	r3, r2
 800609c:	3361      	adds	r3, #97	; 0x61
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b06      	cmp	r3, #6
 80060a2:	d009      	beq.n	80060b8 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	212c      	movs	r1, #44	; 0x2c
 80060aa:	fb01 f303 	mul.w	r3, r1, r3
 80060ae:	4413      	add	r3, r2
 80060b0:	3361      	adds	r3, #97	; 0x61
 80060b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d14f      	bne.n	8006158 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	212c      	movs	r1, #44	; 0x2c
 80060be:	fb01 f303 	mul.w	r3, r1, r3
 80060c2:	4413      	add	r3, r2
 80060c4:	335c      	adds	r3, #92	; 0x5c
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	202c      	movs	r0, #44	; 0x2c
 80060d0:	fb00 f303 	mul.w	r3, r0, r3
 80060d4:	440b      	add	r3, r1
 80060d6:	335c      	adds	r3, #92	; 0x5c
 80060d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	212c      	movs	r1, #44	; 0x2c
 80060e0:	fb01 f303 	mul.w	r3, r1, r3
 80060e4:	4413      	add	r3, r2
 80060e6:	335c      	adds	r3, #92	; 0x5c
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d912      	bls.n	8006114 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	212c      	movs	r1, #44	; 0x2c
 80060f4:	fb01 f303 	mul.w	r3, r1, r3
 80060f8:	4413      	add	r3, r2
 80060fa:	335c      	adds	r3, #92	; 0x5c
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	212c      	movs	r1, #44	; 0x2c
 8006106:	fb01 f303 	mul.w	r3, r1, r3
 800610a:	4413      	add	r3, r2
 800610c:	3360      	adds	r3, #96	; 0x60
 800610e:	2204      	movs	r2, #4
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e021      	b.n	8006158 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	212c      	movs	r1, #44	; 0x2c
 800611a:	fb01 f303 	mul.w	r3, r1, r3
 800611e:	4413      	add	r3, r2
 8006120:	3360      	adds	r3, #96	; 0x60
 8006122:	2202      	movs	r2, #2
 8006124:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	4413      	add	r3, r2
 800612e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800613c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006144:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	4413      	add	r3, r2
 800614e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006152:	461a      	mov	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	4413      	add	r3, r2
 8006160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006164:	461a      	mov	r2, r3
 8006166:	2302      	movs	r3, #2
 8006168:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	b2d9      	uxtb	r1, r3
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	202c      	movs	r0, #44	; 0x2c
 8006174:	fb00 f303 	mul.w	r3, r0, r3
 8006178:	4413      	add	r3, r2
 800617a:	3360      	adds	r3, #96	; 0x60
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f00a f8db 	bl	801033c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006186:	bf00      	nop
 8006188:	3720      	adds	r7, #32
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b08a      	sub	sp, #40	; 0x28
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	0c5b      	lsrs	r3, r3, #17
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	091b      	lsrs	r3, r3, #4
 80061be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061c2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d004      	beq.n	80061d4 <HCD_RXQLVL_IRQHandler+0x46>
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b05      	cmp	r3, #5
 80061ce:	f000 80a9 	beq.w	8006324 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80061d2:	e0aa      	b.n	800632a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 80a6 	beq.w	8006328 <HCD_RXQLVL_IRQHandler+0x19a>
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	212c      	movs	r1, #44	; 0x2c
 80061e2:	fb01 f303 	mul.w	r3, r1, r3
 80061e6:	4413      	add	r3, r2
 80061e8:	3344      	adds	r3, #68	; 0x44
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 809b 	beq.w	8006328 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	212c      	movs	r1, #44	; 0x2c
 80061f8:	fb01 f303 	mul.w	r3, r1, r3
 80061fc:	4413      	add	r3, r2
 80061fe:	3350      	adds	r3, #80	; 0x50
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	441a      	add	r2, r3
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	202c      	movs	r0, #44	; 0x2c
 800620c:	fb00 f303 	mul.w	r3, r0, r3
 8006210:	440b      	add	r3, r1
 8006212:	334c      	adds	r3, #76	; 0x4c
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d87a      	bhi.n	8006310 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6818      	ldr	r0, [r3, #0]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	212c      	movs	r1, #44	; 0x2c
 8006224:	fb01 f303 	mul.w	r3, r1, r3
 8006228:	4413      	add	r3, r2
 800622a:	3344      	adds	r3, #68	; 0x44
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	b292      	uxth	r2, r2
 8006232:	4619      	mov	r1, r3
 8006234:	f005 f9a2 	bl	800b57c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	212c      	movs	r1, #44	; 0x2c
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	4413      	add	r3, r2
 8006244:	3344      	adds	r3, #68	; 0x44
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	441a      	add	r2, r3
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	202c      	movs	r0, #44	; 0x2c
 8006252:	fb00 f303 	mul.w	r3, r0, r3
 8006256:	440b      	add	r3, r1
 8006258:	3344      	adds	r3, #68	; 0x44
 800625a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	212c      	movs	r1, #44	; 0x2c
 8006262:	fb01 f303 	mul.w	r3, r1, r3
 8006266:	4413      	add	r3, r2
 8006268:	3350      	adds	r3, #80	; 0x50
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	441a      	add	r2, r3
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	202c      	movs	r0, #44	; 0x2c
 8006276:	fb00 f303 	mul.w	r3, r0, r3
 800627a:	440b      	add	r3, r1
 800627c:	3350      	adds	r3, #80	; 0x50
 800627e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	4413      	add	r3, r2
 8006288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	0cdb      	lsrs	r3, r3, #19
 8006290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006294:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	212c      	movs	r1, #44	; 0x2c
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	4413      	add	r3, r2
 80062a2:	3340      	adds	r3, #64	; 0x40
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d13c      	bne.n	8006328 <HCD_RXQLVL_IRQHandler+0x19a>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d039      	beq.n	8006328 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062ca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062d2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e0:	461a      	mov	r2, r3
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	212c      	movs	r1, #44	; 0x2c
 80062ec:	fb01 f303 	mul.w	r3, r1, r3
 80062f0:	4413      	add	r3, r2
 80062f2:	3354      	adds	r3, #84	; 0x54
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f083 0301 	eor.w	r3, r3, #1
 80062fa:	b2d8      	uxtb	r0, r3
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	212c      	movs	r1, #44	; 0x2c
 8006302:	fb01 f303 	mul.w	r3, r1, r3
 8006306:	4413      	add	r3, r2
 8006308:	3354      	adds	r3, #84	; 0x54
 800630a:	4602      	mov	r2, r0
 800630c:	701a      	strb	r2, [r3, #0]
      break;
 800630e:	e00b      	b.n	8006328 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	212c      	movs	r1, #44	; 0x2c
 8006316:	fb01 f303 	mul.w	r3, r1, r3
 800631a:	4413      	add	r3, r2
 800631c:	3360      	adds	r3, #96	; 0x60
 800631e:	2204      	movs	r2, #4
 8006320:	701a      	strb	r2, [r3, #0]
      break;
 8006322:	e001      	b.n	8006328 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006324:	bf00      	nop
 8006326:	e000      	b.n	800632a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006328:	bf00      	nop
  }
}
 800632a:	bf00      	nop
 800632c:	3728      	adds	r7, #40	; 0x28
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b086      	sub	sp, #24
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800635e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b02      	cmp	r3, #2
 8006368:	d10b      	bne.n	8006382 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b01      	cmp	r3, #1
 8006372:	d102      	bne.n	800637a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f009 ffc5 	bl	8010304 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f043 0302 	orr.w	r3, r3, #2
 8006380:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f003 0308 	and.w	r3, r3, #8
 8006388:	2b08      	cmp	r3, #8
 800638a:	d132      	bne.n	80063f2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f043 0308 	orr.w	r3, r3, #8
 8006392:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b04      	cmp	r3, #4
 800639c:	d126      	bne.n	80063ec <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d113      	bne.n	80063ce <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80063ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063b0:	d106      	bne.n	80063c0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2102      	movs	r1, #2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f005 fa43 	bl	800b844 <USB_InitFSLSPClkSel>
 80063be:	e011      	b.n	80063e4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2101      	movs	r1, #1
 80063c6:	4618      	mov	r0, r3
 80063c8:	f005 fa3c 	bl	800b844 <USB_InitFSLSPClkSel>
 80063cc:	e00a      	b.n	80063e4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d106      	bne.n	80063e4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063dc:	461a      	mov	r2, r3
 80063de:	f64e 2360 	movw	r3, #60000	; 0xea60
 80063e2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f009 ffb7 	bl	8010358 <HAL_HCD_PortEnabled_Callback>
 80063ea:	e002      	b.n	80063f2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f009 ffc1 	bl	8010374 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d103      	bne.n	8006404 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f043 0320 	orr.w	r3, r3, #32
 8006402:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800640a:	461a      	mov	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6013      	str	r3, [r2, #0]
}
 8006410:	bf00      	nop
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006420:	4a08      	ldr	r2, [pc, #32]	; (8006444 <HAL_HSEM_FastTake+0x2c>)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3320      	adds	r3, #32
 8006426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800642a:	4a07      	ldr	r2, [pc, #28]	; (8006448 <HAL_HSEM_FastTake+0x30>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d101      	bne.n	8006434 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	e000      	b.n	8006436 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	58026400 	.word	0x58026400
 8006448:	80000300 	.word	0x80000300

0800644c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006456:	4906      	ldr	r1, [pc, #24]	; (8006470 <HAL_HSEM_Release+0x24>)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	58026400 	.word	0x58026400

08006474 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 800647c:	4b05      	ldr	r3, [pc, #20]	; (8006494 <HAL_HSEM_ActivateNotification+0x20>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	4904      	ldr	r1, [pc, #16]	; (8006494 <HAL_HSEM_ActivateNotification+0x20>)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4313      	orrs	r3, r2
 8006486:	600b      	str	r3, [r1, #0]
#endif
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	58026500 	.word	0x58026500

08006498 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800649e:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <HAL_HSEM_IRQHandler+0x30>)
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80064a4:	4b08      	ldr	r3, [pc, #32]	; (80064c8 <HAL_HSEM_IRQHandler+0x30>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	43db      	mvns	r3, r3
 80064ac:	4906      	ldr	r1, [pc, #24]	; (80064c8 <HAL_HSEM_IRQHandler+0x30>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80064b2:	4a05      	ldr	r2, [pc, #20]	; (80064c8 <HAL_HSEM_IRQHandler+0x30>)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f009 fbe3 	bl	800fc84 <HAL_HSEM_FreeCallback>
}
 80064be:	bf00      	nop
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	58026500 	.word	0x58026500

080064cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e07f      	b.n	80065de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7fa fb7a 	bl	8000bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2224      	movs	r2, #36	; 0x24
 80064fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0201 	bic.w	r2, r2, #1
 800650e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800651c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800652c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d107      	bne.n	8006546 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	e006      	b.n	8006554 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006552:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d104      	bne.n	8006566 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006564:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6859      	ldr	r1, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <HAL_I2C_Init+0x11c>)
 8006572:	430b      	orrs	r3, r1
 8006574:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006584:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	ea42 0103 	orr.w	r1, r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	021a      	lsls	r2, r3, #8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	69d9      	ldr	r1, [r3, #28]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a1a      	ldr	r2, [r3, #32]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	02008000 	.word	0x02008000

080065ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	68f9      	ldr	r1, [r7, #12]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	4798      	blx	r3
  }
}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b20      	cmp	r3, #32
 8006634:	d138      	bne.n	80066a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006640:	2302      	movs	r3, #2
 8006642:	e032      	b.n	80066aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2224      	movs	r2, #36	; 0x24
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0201 	bic.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006672:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6819      	ldr	r1, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0201 	orr.w	r2, r2, #1
 8006692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	e000      	b.n	80066aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066a8:	2302      	movs	r3, #2
  }
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b085      	sub	sp, #20
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d139      	bne.n	8006740 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e033      	b.n	8006742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2224      	movs	r2, #36	; 0x24
 80066e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0201 	bic.w	r2, r2, #1
 80066f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006708:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0201 	orr.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	e000      	b.n	8006742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006740:	2302      	movs	r3, #2
  }
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006758:	4b29      	ldr	r3, [pc, #164]	; (8006800 <HAL_PWREx_ConfigSupply+0xb0>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	2b06      	cmp	r3, #6
 8006762:	d00a      	beq.n	800677a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006764:	4b26      	ldr	r3, [pc, #152]	; (8006800 <HAL_PWREx_ConfigSupply+0xb0>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	429a      	cmp	r2, r3
 8006770:	d001      	beq.n	8006776 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e040      	b.n	80067f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	e03e      	b.n	80067f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800677a:	4b21      	ldr	r3, [pc, #132]	; (8006800 <HAL_PWREx_ConfigSupply+0xb0>)
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006782:	491f      	ldr	r1, [pc, #124]	; (8006800 <HAL_PWREx_ConfigSupply+0xb0>)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4313      	orrs	r3, r2
 8006788:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800678a:	f7fb fb9f 	bl	8001ecc <HAL_GetTick>
 800678e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006790:	e009      	b.n	80067a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006792:	f7fb fb9b 	bl	8001ecc <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067a0:	d901      	bls.n	80067a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e028      	b.n	80067f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80067a6:	4b16      	ldr	r3, [pc, #88]	; (8006800 <HAL_PWREx_ConfigSupply+0xb0>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067b2:	d1ee      	bne.n	8006792 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b1e      	cmp	r3, #30
 80067b8:	d008      	beq.n	80067cc <HAL_PWREx_ConfigSupply+0x7c>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b2e      	cmp	r3, #46	; 0x2e
 80067be:	d005      	beq.n	80067cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b1d      	cmp	r3, #29
 80067c4:	d002      	beq.n	80067cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b2d      	cmp	r3, #45	; 0x2d
 80067ca:	d114      	bne.n	80067f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80067cc:	f7fb fb7e 	bl	8001ecc <HAL_GetTick>
 80067d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80067d2:	e009      	b.n	80067e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80067d4:	f7fb fb7a 	bl	8001ecc <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067e2:	d901      	bls.n	80067e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e007      	b.n	80067f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <HAL_PWREx_ConfigSupply+0xb0>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f4:	d1ee      	bne.n	80067d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	58024800 	.word	0x58024800

08006804 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006808:	4b05      	ldr	r3, [pc, #20]	; (8006820 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	4a04      	ldr	r2, [pc, #16]	; (8006820 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800680e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006812:	60d3      	str	r3, [r2, #12]
}
 8006814:	bf00      	nop
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	58024800 	.word	0x58024800

08006824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08c      	sub	sp, #48	; 0x30
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e3ff      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 8087 	beq.w	8006952 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006844:	4b99      	ldr	r3, [pc, #612]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800684c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800684e:	4b97      	ldr	r3, [pc, #604]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	2b10      	cmp	r3, #16
 8006858:	d007      	beq.n	800686a <HAL_RCC_OscConfig+0x46>
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	2b18      	cmp	r3, #24
 800685e:	d110      	bne.n	8006882 <HAL_RCC_OscConfig+0x5e>
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d10b      	bne.n	8006882 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800686a:	4b90      	ldr	r3, [pc, #576]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d06c      	beq.n	8006950 <HAL_RCC_OscConfig+0x12c>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d168      	bne.n	8006950 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e3d9      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688a:	d106      	bne.n	800689a <HAL_RCC_OscConfig+0x76>
 800688c:	4b87      	ldr	r3, [pc, #540]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a86      	ldr	r2, [pc, #536]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	e02e      	b.n	80068f8 <HAL_RCC_OscConfig+0xd4>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10c      	bne.n	80068bc <HAL_RCC_OscConfig+0x98>
 80068a2:	4b82      	ldr	r3, [pc, #520]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a81      	ldr	r2, [pc, #516]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80068a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	4b7f      	ldr	r3, [pc, #508]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a7e      	ldr	r2, [pc, #504]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80068b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	e01d      	b.n	80068f8 <HAL_RCC_OscConfig+0xd4>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068c4:	d10c      	bne.n	80068e0 <HAL_RCC_OscConfig+0xbc>
 80068c6:	4b79      	ldr	r3, [pc, #484]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a78      	ldr	r2, [pc, #480]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80068cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	4b76      	ldr	r3, [pc, #472]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a75      	ldr	r2, [pc, #468]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80068d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	e00b      	b.n	80068f8 <HAL_RCC_OscConfig+0xd4>
 80068e0:	4b72      	ldr	r3, [pc, #456]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a71      	ldr	r2, [pc, #452]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80068e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	4b6f      	ldr	r3, [pc, #444]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a6e      	ldr	r2, [pc, #440]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80068f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d013      	beq.n	8006928 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006900:	f7fb fae4 	bl	8001ecc <HAL_GetTick>
 8006904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006908:	f7fb fae0 	bl	8001ecc <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b64      	cmp	r3, #100	; 0x64
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e38d      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800691a:	4b64      	ldr	r3, [pc, #400]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0f0      	beq.n	8006908 <HAL_RCC_OscConfig+0xe4>
 8006926:	e014      	b.n	8006952 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006928:	f7fb fad0 	bl	8001ecc <HAL_GetTick>
 800692c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800692e:	e008      	b.n	8006942 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006930:	f7fb facc 	bl	8001ecc <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b64      	cmp	r3, #100	; 0x64
 800693c:	d901      	bls.n	8006942 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e379      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006942:	4b5a      	ldr	r3, [pc, #360]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f0      	bne.n	8006930 <HAL_RCC_OscConfig+0x10c>
 800694e:	e000      	b.n	8006952 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 80ae 	beq.w	8006abc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006960:	4b52      	ldr	r3, [pc, #328]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006968:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800696a:	4b50      	ldr	r3, [pc, #320]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 800696c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <HAL_RCC_OscConfig+0x162>
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	2b18      	cmp	r3, #24
 800697a:	d13a      	bne.n	80069f2 <HAL_RCC_OscConfig+0x1ce>
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d135      	bne.n	80069f2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006986:	4b49      	ldr	r3, [pc, #292]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <HAL_RCC_OscConfig+0x17a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e34b      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800699e:	f7fb fac5 	bl	8001f2c <HAL_GetREVID>
 80069a2:	4603      	mov	r3, r0
 80069a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d817      	bhi.n	80069dc <HAL_RCC_OscConfig+0x1b8>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	2b40      	cmp	r3, #64	; 0x40
 80069b2:	d108      	bne.n	80069c6 <HAL_RCC_OscConfig+0x1a2>
 80069b4:	4b3d      	ldr	r3, [pc, #244]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80069bc:	4a3b      	ldr	r2, [pc, #236]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80069be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069c2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069c4:	e07a      	b.n	8006abc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069c6:	4b39      	ldr	r3, [pc, #228]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	031b      	lsls	r3, r3, #12
 80069d4:	4935      	ldr	r1, [pc, #212]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069da:	e06f      	b.n	8006abc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069dc:	4b33      	ldr	r3, [pc, #204]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	061b      	lsls	r3, r3, #24
 80069ea:	4930      	ldr	r1, [pc, #192]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069f0:	e064      	b.n	8006abc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d045      	beq.n	8006a86 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069fa:	4b2c      	ldr	r3, [pc, #176]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f023 0219 	bic.w	r2, r3, #25
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	4929      	ldr	r1, [pc, #164]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0c:	f7fb fa5e 	bl	8001ecc <HAL_GetTick>
 8006a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a14:	f7fb fa5a 	bl	8001ecc <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e307      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a26:	4b21      	ldr	r3, [pc, #132]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0f0      	beq.n	8006a14 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a32:	f7fb fa7b 	bl	8001f2c <HAL_GetREVID>
 8006a36:	4603      	mov	r3, r0
 8006a38:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d817      	bhi.n	8006a70 <HAL_RCC_OscConfig+0x24c>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d108      	bne.n	8006a5a <HAL_RCC_OscConfig+0x236>
 8006a48:	4b18      	ldr	r3, [pc, #96]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a50:	4a16      	ldr	r2, [pc, #88]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a56:	6053      	str	r3, [r2, #4]
 8006a58:	e030      	b.n	8006abc <HAL_RCC_OscConfig+0x298>
 8006a5a:	4b14      	ldr	r3, [pc, #80]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	031b      	lsls	r3, r3, #12
 8006a68:	4910      	ldr	r1, [pc, #64]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	604b      	str	r3, [r1, #4]
 8006a6e:	e025      	b.n	8006abc <HAL_RCC_OscConfig+0x298>
 8006a70:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	061b      	lsls	r3, r3, #24
 8006a7e:	490b      	ldr	r1, [pc, #44]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	604b      	str	r3, [r1, #4]
 8006a84:	e01a      	b.n	8006abc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a86:	4b09      	ldr	r3, [pc, #36]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a08      	ldr	r2, [pc, #32]	; (8006aac <HAL_RCC_OscConfig+0x288>)
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a92:	f7fb fa1b 	bl	8001ecc <HAL_GetTick>
 8006a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a98:	e00a      	b.n	8006ab0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a9a:	f7fb fa17 	bl	8001ecc <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d903      	bls.n	8006ab0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e2c4      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
 8006aac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ab0:	4ba4      	ldr	r3, [pc, #656]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1ee      	bne.n	8006a9a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0310 	and.w	r3, r3, #16
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 80a9 	beq.w	8006c1c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aca:	4b9e      	ldr	r3, [pc, #632]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ad2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ad4:	4b9b      	ldr	r3, [pc, #620]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d007      	beq.n	8006af0 <HAL_RCC_OscConfig+0x2cc>
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	2b18      	cmp	r3, #24
 8006ae4:	d13a      	bne.n	8006b5c <HAL_RCC_OscConfig+0x338>
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f003 0303 	and.w	r3, r3, #3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d135      	bne.n	8006b5c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006af0:	4b94      	ldr	r3, [pc, #592]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d005      	beq.n	8006b08 <HAL_RCC_OscConfig+0x2e4>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	2b80      	cmp	r3, #128	; 0x80
 8006b02:	d001      	beq.n	8006b08 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e296      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b08:	f7fb fa10 	bl	8001f2c <HAL_GetREVID>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d817      	bhi.n	8006b46 <HAL_RCC_OscConfig+0x322>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d108      	bne.n	8006b30 <HAL_RCC_OscConfig+0x30c>
 8006b1e:	4b89      	ldr	r3, [pc, #548]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b26:	4a87      	ldr	r2, [pc, #540]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006b28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b2c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b2e:	e075      	b.n	8006c1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b30:	4b84      	ldr	r3, [pc, #528]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	069b      	lsls	r3, r3, #26
 8006b3e:	4981      	ldr	r1, [pc, #516]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b44:	e06a      	b.n	8006c1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b46:	4b7f      	ldr	r3, [pc, #508]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	061b      	lsls	r3, r3, #24
 8006b54:	497b      	ldr	r1, [pc, #492]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b5a:	e05f      	b.n	8006c1c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d042      	beq.n	8006bea <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b64:	4b77      	ldr	r3, [pc, #476]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a76      	ldr	r2, [pc, #472]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7fb f9ac 	bl	8001ecc <HAL_GetTick>
 8006b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b78:	f7fb f9a8 	bl	8001ecc <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e255      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b8a:	4b6e      	ldr	r3, [pc, #440]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f0      	beq.n	8006b78 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b96:	f7fb f9c9 	bl	8001f2c <HAL_GetREVID>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d817      	bhi.n	8006bd4 <HAL_RCC_OscConfig+0x3b0>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d108      	bne.n	8006bbe <HAL_RCC_OscConfig+0x39a>
 8006bac:	4b65      	ldr	r3, [pc, #404]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006bb4:	4a63      	ldr	r2, [pc, #396]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006bb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bba:	6053      	str	r3, [r2, #4]
 8006bbc:	e02e      	b.n	8006c1c <HAL_RCC_OscConfig+0x3f8>
 8006bbe:	4b61      	ldr	r3, [pc, #388]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	069b      	lsls	r3, r3, #26
 8006bcc:	495d      	ldr	r1, [pc, #372]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	604b      	str	r3, [r1, #4]
 8006bd2:	e023      	b.n	8006c1c <HAL_RCC_OscConfig+0x3f8>
 8006bd4:	4b5b      	ldr	r3, [pc, #364]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	061b      	lsls	r3, r3, #24
 8006be2:	4958      	ldr	r1, [pc, #352]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60cb      	str	r3, [r1, #12]
 8006be8:	e018      	b.n	8006c1c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006bea:	4b56      	ldr	r3, [pc, #344]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a55      	ldr	r2, [pc, #340]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf6:	f7fb f969 	bl	8001ecc <HAL_GetTick>
 8006bfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006bfe:	f7fb f965 	bl	8001ecc <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e212      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c10:	4b4c      	ldr	r3, [pc, #304]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f0      	bne.n	8006bfe <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d036      	beq.n	8006c96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d019      	beq.n	8006c64 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c30:	4b44      	ldr	r3, [pc, #272]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c34:	4a43      	ldr	r2, [pc, #268]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c3c:	f7fb f946 	bl	8001ecc <HAL_GetTick>
 8006c40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c44:	f7fb f942 	bl	8001ecc <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e1ef      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c56:	4b3b      	ldr	r3, [pc, #236]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f0      	beq.n	8006c44 <HAL_RCC_OscConfig+0x420>
 8006c62:	e018      	b.n	8006c96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c64:	4b37      	ldr	r3, [pc, #220]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c68:	4a36      	ldr	r2, [pc, #216]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006c6a:	f023 0301 	bic.w	r3, r3, #1
 8006c6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c70:	f7fb f92c 	bl	8001ecc <HAL_GetTick>
 8006c74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c78:	f7fb f928 	bl	8001ecc <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e1d5      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c8a:	4b2e      	ldr	r3, [pc, #184]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f0      	bne.n	8006c78 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d036      	beq.n	8006d10 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d019      	beq.n	8006cde <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006caa:	4b26      	ldr	r3, [pc, #152]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a25      	ldr	r2, [pc, #148]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cb6:	f7fb f909 	bl	8001ecc <HAL_GetTick>
 8006cba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006cbc:	e008      	b.n	8006cd0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006cbe:	f7fb f905 	bl	8001ecc <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e1b2      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006cd0:	4b1c      	ldr	r3, [pc, #112]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0f0      	beq.n	8006cbe <HAL_RCC_OscConfig+0x49a>
 8006cdc:	e018      	b.n	8006d10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006cde:	4b19      	ldr	r3, [pc, #100]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a18      	ldr	r2, [pc, #96]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006ce4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ce8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cea:	f7fb f8ef 	bl	8001ecc <HAL_GetTick>
 8006cee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006cf2:	f7fb f8eb 	bl	8001ecc <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e198      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d04:	4b0f      	ldr	r3, [pc, #60]	; (8006d44 <HAL_RCC_OscConfig+0x520>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1f0      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8085 	beq.w	8006e28 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <HAL_RCC_OscConfig+0x524>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a09      	ldr	r2, [pc, #36]	; (8006d48 <HAL_RCC_OscConfig+0x524>)
 8006d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d2a:	f7fb f8cf 	bl	8001ecc <HAL_GetTick>
 8006d2e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d30:	e00c      	b.n	8006d4c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d32:	f7fb f8cb 	bl	8001ecc <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b64      	cmp	r3, #100	; 0x64
 8006d3e:	d905      	bls.n	8006d4c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e178      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
 8006d44:	58024400 	.word	0x58024400
 8006d48:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d4c:	4b96      	ldr	r3, [pc, #600]	; (8006fa8 <HAL_RCC_OscConfig+0x784>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0ec      	beq.n	8006d32 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d106      	bne.n	8006d6e <HAL_RCC_OscConfig+0x54a>
 8006d60:	4b92      	ldr	r3, [pc, #584]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d64:	4a91      	ldr	r2, [pc, #580]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006d66:	f043 0301 	orr.w	r3, r3, #1
 8006d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d6c:	e02d      	b.n	8006dca <HAL_RCC_OscConfig+0x5a6>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10c      	bne.n	8006d90 <HAL_RCC_OscConfig+0x56c>
 8006d76:	4b8d      	ldr	r3, [pc, #564]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7a:	4a8c      	ldr	r2, [pc, #560]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	6713      	str	r3, [r2, #112]	; 0x70
 8006d82:	4b8a      	ldr	r3, [pc, #552]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	4a89      	ldr	r2, [pc, #548]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006d88:	f023 0304 	bic.w	r3, r3, #4
 8006d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d8e:	e01c      	b.n	8006dca <HAL_RCC_OscConfig+0x5a6>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b05      	cmp	r3, #5
 8006d96:	d10c      	bne.n	8006db2 <HAL_RCC_OscConfig+0x58e>
 8006d98:	4b84      	ldr	r3, [pc, #528]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9c:	4a83      	ldr	r2, [pc, #524]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006d9e:	f043 0304 	orr.w	r3, r3, #4
 8006da2:	6713      	str	r3, [r2, #112]	; 0x70
 8006da4:	4b81      	ldr	r3, [pc, #516]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da8:	4a80      	ldr	r2, [pc, #512]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	6713      	str	r3, [r2, #112]	; 0x70
 8006db0:	e00b      	b.n	8006dca <HAL_RCC_OscConfig+0x5a6>
 8006db2:	4b7e      	ldr	r3, [pc, #504]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db6:	4a7d      	ldr	r2, [pc, #500]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006db8:	f023 0301 	bic.w	r3, r3, #1
 8006dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dbe:	4b7b      	ldr	r3, [pc, #492]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc2:	4a7a      	ldr	r2, [pc, #488]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006dc4:	f023 0304 	bic.w	r3, r3, #4
 8006dc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d015      	beq.n	8006dfe <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd2:	f7fb f87b 	bl	8001ecc <HAL_GetTick>
 8006dd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dd8:	e00a      	b.n	8006df0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dda:	f7fb f877 	bl	8001ecc <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e122      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006df0:	4b6e      	ldr	r3, [pc, #440]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0ee      	beq.n	8006dda <HAL_RCC_OscConfig+0x5b6>
 8006dfc:	e014      	b.n	8006e28 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfe:	f7fb f865 	bl	8001ecc <HAL_GetTick>
 8006e02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e04:	e00a      	b.n	8006e1c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e06:	f7fb f861 	bl	8001ecc <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e10c      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e1c:	4b63      	ldr	r3, [pc, #396]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1ee      	bne.n	8006e06 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8101 	beq.w	8007034 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e32:	4b5e      	ldr	r3, [pc, #376]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e3a:	2b18      	cmp	r3, #24
 8006e3c:	f000 80bc 	beq.w	8006fb8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	f040 8095 	bne.w	8006f74 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e4a:	4b58      	ldr	r3, [pc, #352]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a57      	ldr	r2, [pc, #348]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006e50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e56:	f7fb f839 	bl	8001ecc <HAL_GetTick>
 8006e5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e5c:	e008      	b.n	8006e70 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e5e:	f7fb f835 	bl	8001ecc <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e0e2      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e70:	4b4e      	ldr	r3, [pc, #312]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1f0      	bne.n	8006e5e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e7c:	4b4b      	ldr	r3, [pc, #300]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e80:	4b4b      	ldr	r3, [pc, #300]	; (8006fb0 <HAL_RCC_OscConfig+0x78c>)
 8006e82:	4013      	ands	r3, r2
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e8c:	0112      	lsls	r2, r2, #4
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	4946      	ldr	r1, [pc, #280]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	628b      	str	r3, [r1, #40]	; 0x28
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	025b      	lsls	r3, r3, #9
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	041b      	lsls	r3, r3, #16
 8006eb4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	061b      	lsls	r3, r3, #24
 8006ec2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ec6:	4939      	ldr	r1, [pc, #228]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006ecc:	4b37      	ldr	r3, [pc, #220]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	4a36      	ldr	r2, [pc, #216]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006ed2:	f023 0301 	bic.w	r3, r3, #1
 8006ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ed8:	4b34      	ldr	r3, [pc, #208]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006edc:	4b35      	ldr	r3, [pc, #212]	; (8006fb4 <HAL_RCC_OscConfig+0x790>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ee4:	00d2      	lsls	r2, r2, #3
 8006ee6:	4931      	ldr	r1, [pc, #196]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006eec:	4b2f      	ldr	r3, [pc, #188]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	f023 020c 	bic.w	r2, r3, #12
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	492c      	ldr	r1, [pc, #176]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006efe:	4b2b      	ldr	r3, [pc, #172]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f02:	f023 0202 	bic.w	r2, r3, #2
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0a:	4928      	ldr	r1, [pc, #160]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f10:	4b26      	ldr	r3, [pc, #152]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	4a25      	ldr	r2, [pc, #148]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1c:	4b23      	ldr	r3, [pc, #140]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	4a22      	ldr	r2, [pc, #136]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f28:	4b20      	ldr	r3, [pc, #128]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	4a1f      	ldr	r2, [pc, #124]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006f34:	4b1d      	ldr	r3, [pc, #116]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	4a1c      	ldr	r2, [pc, #112]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f3a:	f043 0301 	orr.w	r3, r3, #1
 8006f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f40:	4b1a      	ldr	r3, [pc, #104]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a19      	ldr	r2, [pc, #100]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4c:	f7fa ffbe 	bl	8001ecc <HAL_GetTick>
 8006f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f52:	e008      	b.n	8006f66 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f54:	f7fa ffba 	bl	8001ecc <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e067      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f66:	4b11      	ldr	r3, [pc, #68]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0f0      	beq.n	8006f54 <HAL_RCC_OscConfig+0x730>
 8006f72:	e05f      	b.n	8007034 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f74:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a0c      	ldr	r2, [pc, #48]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f80:	f7fa ffa4 	bl	8001ecc <HAL_GetTick>
 8006f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f88:	f7fa ffa0 	bl	8001ecc <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e04d      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f9a:	4b04      	ldr	r3, [pc, #16]	; (8006fac <HAL_RCC_OscConfig+0x788>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1f0      	bne.n	8006f88 <HAL_RCC_OscConfig+0x764>
 8006fa6:	e045      	b.n	8007034 <HAL_RCC_OscConfig+0x810>
 8006fa8:	58024800 	.word	0x58024800
 8006fac:	58024400 	.word	0x58024400
 8006fb0:	fffffc0c 	.word	0xfffffc0c
 8006fb4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006fb8:	4b21      	ldr	r3, [pc, #132]	; (8007040 <HAL_RCC_OscConfig+0x81c>)
 8006fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006fbe:	4b20      	ldr	r3, [pc, #128]	; (8007040 <HAL_RCC_OscConfig+0x81c>)
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d031      	beq.n	8007030 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f003 0203 	and.w	r2, r3, #3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d12a      	bne.n	8007030 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d122      	bne.n	8007030 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d11a      	bne.n	8007030 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	0a5b      	lsrs	r3, r3, #9
 8006ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007006:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007008:	429a      	cmp	r2, r3
 800700a:	d111      	bne.n	8007030 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007018:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800701a:	429a      	cmp	r2, r3
 800701c:	d108      	bne.n	8007030 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	0e1b      	lsrs	r3, r3, #24
 8007022:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800702c:	429a      	cmp	r2, r3
 800702e:	d001      	beq.n	8007034 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e000      	b.n	8007036 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3730      	adds	r7, #48	; 0x30
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	58024400 	.word	0x58024400

08007044 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e19c      	b.n	8007392 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007058:	4b8a      	ldr	r3, [pc, #552]	; (8007284 <HAL_RCC_ClockConfig+0x240>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d910      	bls.n	8007088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007066:	4b87      	ldr	r3, [pc, #540]	; (8007284 <HAL_RCC_ClockConfig+0x240>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f023 020f 	bic.w	r2, r3, #15
 800706e:	4985      	ldr	r1, [pc, #532]	; (8007284 <HAL_RCC_ClockConfig+0x240>)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	4313      	orrs	r3, r2
 8007074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007076:	4b83      	ldr	r3, [pc, #524]	; (8007284 <HAL_RCC_ClockConfig+0x240>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d001      	beq.n	8007088 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e184      	b.n	8007392 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d010      	beq.n	80070b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691a      	ldr	r2, [r3, #16]
 8007098:	4b7b      	ldr	r3, [pc, #492]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d908      	bls.n	80070b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80070a4:	4b78      	ldr	r3, [pc, #480]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	4975      	ldr	r1, [pc, #468]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0308 	and.w	r3, r3, #8
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d010      	beq.n	80070e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	695a      	ldr	r2, [r3, #20]
 80070c6:	4b70      	ldr	r3, [pc, #448]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d908      	bls.n	80070e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80070d2:	4b6d      	ldr	r3, [pc, #436]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	496a      	ldr	r1, [pc, #424]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d010      	beq.n	8007112 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	699a      	ldr	r2, [r3, #24]
 80070f4:	4b64      	ldr	r3, [pc, #400]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d908      	bls.n	8007112 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007100:	4b61      	ldr	r3, [pc, #388]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	495e      	ldr	r1, [pc, #376]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 800710e:	4313      	orrs	r3, r2
 8007110:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	d010      	beq.n	8007140 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69da      	ldr	r2, [r3, #28]
 8007122:	4b59      	ldr	r3, [pc, #356]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800712a:	429a      	cmp	r2, r3
 800712c:	d908      	bls.n	8007140 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800712e:	4b56      	ldr	r3, [pc, #344]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	4953      	ldr	r1, [pc, #332]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 800713c:	4313      	orrs	r3, r2
 800713e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d010      	beq.n	800716e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68da      	ldr	r2, [r3, #12]
 8007150:	4b4d      	ldr	r3, [pc, #308]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	429a      	cmp	r2, r3
 800715a:	d908      	bls.n	800716e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800715c:	4b4a      	ldr	r3, [pc, #296]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	f023 020f 	bic.w	r2, r3, #15
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	4947      	ldr	r1, [pc, #284]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 800716a:	4313      	orrs	r3, r2
 800716c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d055      	beq.n	8007226 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800717a:	4b43      	ldr	r3, [pc, #268]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	4940      	ldr	r1, [pc, #256]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 8007188:	4313      	orrs	r3, r2
 800718a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d107      	bne.n	80071a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007194:	4b3c      	ldr	r3, [pc, #240]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d121      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e0f6      	b.n	8007392 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d107      	bne.n	80071bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071ac:	4b36      	ldr	r3, [pc, #216]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d115      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e0ea      	b.n	8007392 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d107      	bne.n	80071d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071c4:	4b30      	ldr	r3, [pc, #192]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d109      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e0de      	b.n	8007392 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071d4:	4b2c      	ldr	r3, [pc, #176]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e0d6      	b.n	8007392 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071e4:	4b28      	ldr	r3, [pc, #160]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f023 0207 	bic.w	r2, r3, #7
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	4925      	ldr	r1, [pc, #148]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f6:	f7fa fe69 	bl	8001ecc <HAL_GetTick>
 80071fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071fc:	e00a      	b.n	8007214 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071fe:	f7fa fe65 	bl	8001ecc <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	f241 3288 	movw	r2, #5000	; 0x1388
 800720c:	4293      	cmp	r3, r2
 800720e:	d901      	bls.n	8007214 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e0be      	b.n	8007392 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007214:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	429a      	cmp	r2, r3
 8007224:	d1eb      	bne.n	80071fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d010      	beq.n	8007254 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	4b14      	ldr	r3, [pc, #80]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	429a      	cmp	r2, r3
 8007240:	d208      	bcs.n	8007254 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007242:	4b11      	ldr	r3, [pc, #68]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f023 020f 	bic.w	r2, r3, #15
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	490e      	ldr	r1, [pc, #56]	; (8007288 <HAL_RCC_ClockConfig+0x244>)
 8007250:	4313      	orrs	r3, r2
 8007252:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007254:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <HAL_RCC_ClockConfig+0x240>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 030f 	and.w	r3, r3, #15
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	429a      	cmp	r2, r3
 8007260:	d214      	bcs.n	800728c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007262:	4b08      	ldr	r3, [pc, #32]	; (8007284 <HAL_RCC_ClockConfig+0x240>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f023 020f 	bic.w	r2, r3, #15
 800726a:	4906      	ldr	r1, [pc, #24]	; (8007284 <HAL_RCC_ClockConfig+0x240>)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	4313      	orrs	r3, r2
 8007270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007272:	4b04      	ldr	r3, [pc, #16]	; (8007284 <HAL_RCC_ClockConfig+0x240>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 030f 	and.w	r3, r3, #15
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	429a      	cmp	r2, r3
 800727e:	d005      	beq.n	800728c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e086      	b.n	8007392 <HAL_RCC_ClockConfig+0x34e>
 8007284:	52002000 	.word	0x52002000
 8007288:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d010      	beq.n	80072ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691a      	ldr	r2, [r3, #16]
 800729c:	4b3f      	ldr	r3, [pc, #252]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d208      	bcs.n	80072ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072a8:	4b3c      	ldr	r3, [pc, #240]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	4939      	ldr	r1, [pc, #228]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0308 	and.w	r3, r3, #8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d010      	beq.n	80072e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	695a      	ldr	r2, [r3, #20]
 80072ca:	4b34      	ldr	r3, [pc, #208]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d208      	bcs.n	80072e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072d6:	4b31      	ldr	r3, [pc, #196]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	492e      	ldr	r1, [pc, #184]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d010      	beq.n	8007316 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	699a      	ldr	r2, [r3, #24]
 80072f8:	4b28      	ldr	r3, [pc, #160]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007300:	429a      	cmp	r2, r3
 8007302:	d208      	bcs.n	8007316 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007304:	4b25      	ldr	r3, [pc, #148]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	4922      	ldr	r1, [pc, #136]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 8007312:	4313      	orrs	r3, r2
 8007314:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b00      	cmp	r3, #0
 8007320:	d010      	beq.n	8007344 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	69da      	ldr	r2, [r3, #28]
 8007326:	4b1d      	ldr	r3, [pc, #116]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800732e:	429a      	cmp	r2, r3
 8007330:	d208      	bcs.n	8007344 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007332:	4b1a      	ldr	r3, [pc, #104]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	4917      	ldr	r1, [pc, #92]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 8007340:	4313      	orrs	r3, r2
 8007342:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007344:	f000 f834 	bl	80073b0 <HAL_RCC_GetSysClockFreq>
 8007348:	4602      	mov	r2, r0
 800734a:	4b14      	ldr	r3, [pc, #80]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	0a1b      	lsrs	r3, r3, #8
 8007350:	f003 030f 	and.w	r3, r3, #15
 8007354:	4912      	ldr	r1, [pc, #72]	; (80073a0 <HAL_RCC_ClockConfig+0x35c>)
 8007356:	5ccb      	ldrb	r3, [r1, r3]
 8007358:	f003 031f 	and.w	r3, r3, #31
 800735c:	fa22 f303 	lsr.w	r3, r2, r3
 8007360:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007362:	4b0e      	ldr	r3, [pc, #56]	; (800739c <HAL_RCC_ClockConfig+0x358>)
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	4a0d      	ldr	r2, [pc, #52]	; (80073a0 <HAL_RCC_ClockConfig+0x35c>)
 800736c:	5cd3      	ldrb	r3, [r2, r3]
 800736e:	f003 031f 	and.w	r3, r3, #31
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	fa22 f303 	lsr.w	r3, r2, r3
 8007378:	4a0a      	ldr	r2, [pc, #40]	; (80073a4 <HAL_RCC_ClockConfig+0x360>)
 800737a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800737c:	4a0a      	ldr	r2, [pc, #40]	; (80073a8 <HAL_RCC_ClockConfig+0x364>)
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007382:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <HAL_RCC_ClockConfig+0x368>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f7fa fd56 	bl	8001e38 <HAL_InitTick>
 800738c:	4603      	mov	r3, r0
 800738e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	58024400 	.word	0x58024400
 80073a0:	08011984 	.word	0x08011984
 80073a4:	24000004 	.word	0x24000004
 80073a8:	24000000 	.word	0x24000000
 80073ac:	24000008 	.word	0x24000008

080073b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b089      	sub	sp, #36	; 0x24
 80073b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073b6:	4bb3      	ldr	r3, [pc, #716]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073be:	2b18      	cmp	r3, #24
 80073c0:	f200 8155 	bhi.w	800766e <HAL_RCC_GetSysClockFreq+0x2be>
 80073c4:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80073c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ca:	bf00      	nop
 80073cc:	08007431 	.word	0x08007431
 80073d0:	0800766f 	.word	0x0800766f
 80073d4:	0800766f 	.word	0x0800766f
 80073d8:	0800766f 	.word	0x0800766f
 80073dc:	0800766f 	.word	0x0800766f
 80073e0:	0800766f 	.word	0x0800766f
 80073e4:	0800766f 	.word	0x0800766f
 80073e8:	0800766f 	.word	0x0800766f
 80073ec:	08007457 	.word	0x08007457
 80073f0:	0800766f 	.word	0x0800766f
 80073f4:	0800766f 	.word	0x0800766f
 80073f8:	0800766f 	.word	0x0800766f
 80073fc:	0800766f 	.word	0x0800766f
 8007400:	0800766f 	.word	0x0800766f
 8007404:	0800766f 	.word	0x0800766f
 8007408:	0800766f 	.word	0x0800766f
 800740c:	0800745d 	.word	0x0800745d
 8007410:	0800766f 	.word	0x0800766f
 8007414:	0800766f 	.word	0x0800766f
 8007418:	0800766f 	.word	0x0800766f
 800741c:	0800766f 	.word	0x0800766f
 8007420:	0800766f 	.word	0x0800766f
 8007424:	0800766f 	.word	0x0800766f
 8007428:	0800766f 	.word	0x0800766f
 800742c:	08007463 	.word	0x08007463
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007430:	4b94      	ldr	r3, [pc, #592]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0320 	and.w	r3, r3, #32
 8007438:	2b00      	cmp	r3, #0
 800743a:	d009      	beq.n	8007450 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800743c:	4b91      	ldr	r3, [pc, #580]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	08db      	lsrs	r3, r3, #3
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	4a90      	ldr	r2, [pc, #576]	; (8007688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007448:	fa22 f303 	lsr.w	r3, r2, r3
 800744c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800744e:	e111      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007450:	4b8d      	ldr	r3, [pc, #564]	; (8007688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007452:	61bb      	str	r3, [r7, #24]
    break;
 8007454:	e10e      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007456:	4b8d      	ldr	r3, [pc, #564]	; (800768c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007458:	61bb      	str	r3, [r7, #24]
    break;
 800745a:	e10b      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800745c:	4b8c      	ldr	r3, [pc, #560]	; (8007690 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800745e:	61bb      	str	r3, [r7, #24]
    break;
 8007460:	e108      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007462:	4b88      	ldr	r3, [pc, #544]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007466:	f003 0303 	and.w	r3, r3, #3
 800746a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800746c:	4b85      	ldr	r3, [pc, #532]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	091b      	lsrs	r3, r3, #4
 8007472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007476:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007478:	4b82      	ldr	r3, [pc, #520]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007482:	4b80      	ldr	r3, [pc, #512]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007486:	08db      	lsrs	r3, r3, #3
 8007488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	fb02 f303 	mul.w	r3, r2, r3
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 80e1 	beq.w	8007668 <HAL_RCC_GetSysClockFreq+0x2b8>
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	f000 8083 	beq.w	80075b4 <HAL_RCC_GetSysClockFreq+0x204>
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	f200 80a1 	bhi.w	80075f8 <HAL_RCC_GetSysClockFreq+0x248>
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <HAL_RCC_GetSysClockFreq+0x114>
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d056      	beq.n	8007570 <HAL_RCC_GetSysClockFreq+0x1c0>
 80074c2:	e099      	b.n	80075f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074c4:	4b6f      	ldr	r3, [pc, #444]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d02d      	beq.n	800752c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074d0:	4b6c      	ldr	r3, [pc, #432]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	08db      	lsrs	r3, r3, #3
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	4a6b      	ldr	r2, [pc, #428]	; (8007688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074dc:	fa22 f303 	lsr.w	r3, r2, r3
 80074e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	ee07 3a90 	vmov	s15, r3
 80074e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fa:	4b62      	ldr	r3, [pc, #392]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750a:	ed97 6a02 	vldr	s12, [r7, #8]
 800750e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800751e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007526:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800752a:	e087      	b.n	800763c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007536:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007698 <HAL_RCC_GetSysClockFreq+0x2e8>
 800753a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753e:	4b51      	ldr	r3, [pc, #324]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007552:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800756e:	e065      	b.n	800763c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800769c <HAL_RCC_GetSysClockFreq+0x2ec>
 800757e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007582:	4b40      	ldr	r3, [pc, #256]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007592:	ed97 6a02 	vldr	s12, [r7, #8]
 8007596:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007694 <HAL_RCC_GetSysClockFreq+0x2e4>
 800759a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075b2:	e043      	b.n	800763c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80076a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80075c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c6:	4b2f      	ldr	r3, [pc, #188]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80075da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007694 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075f6:	e021      	b.n	800763c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	eddf 6a26 	vldr	s13, [pc, #152]	; 800769c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760a:	4b1e      	ldr	r3, [pc, #120]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761a:	ed97 6a02 	vldr	s12, [r7, #8]
 800761e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800762e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800763a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800763c:	4b11      	ldr	r3, [pc, #68]	; (8007684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800763e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007640:	0a5b      	lsrs	r3, r3, #9
 8007642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007646:	3301      	adds	r3, #1
 8007648:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007654:	edd7 6a07 	vldr	s13, [r7, #28]
 8007658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800765c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007660:	ee17 3a90 	vmov	r3, s15
 8007664:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007666:	e005      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	61bb      	str	r3, [r7, #24]
    break;
 800766c:	e002      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800766e:	4b07      	ldr	r3, [pc, #28]	; (800768c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007670:	61bb      	str	r3, [r7, #24]
    break;
 8007672:	bf00      	nop
  }

  return sysclockfreq;
 8007674:	69bb      	ldr	r3, [r7, #24]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3724      	adds	r7, #36	; 0x24
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	58024400 	.word	0x58024400
 8007688:	03d09000 	.word	0x03d09000
 800768c:	003d0900 	.word	0x003d0900
 8007690:	007a1200 	.word	0x007a1200
 8007694:	46000000 	.word	0x46000000
 8007698:	4c742400 	.word	0x4c742400
 800769c:	4a742400 	.word	0x4a742400
 80076a0:	4af42400 	.word	0x4af42400

080076a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80076aa:	f7ff fe81 	bl	80073b0 <HAL_RCC_GetSysClockFreq>
 80076ae:	4602      	mov	r2, r0
 80076b0:	4b10      	ldr	r3, [pc, #64]	; (80076f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	0a1b      	lsrs	r3, r3, #8
 80076b6:	f003 030f 	and.w	r3, r3, #15
 80076ba:	490f      	ldr	r1, [pc, #60]	; (80076f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80076bc:	5ccb      	ldrb	r3, [r1, r3]
 80076be:	f003 031f 	and.w	r3, r3, #31
 80076c2:	fa22 f303 	lsr.w	r3, r2, r3
 80076c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076c8:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	4a09      	ldr	r2, [pc, #36]	; (80076f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80076d2:	5cd3      	ldrb	r3, [r2, r3]
 80076d4:	f003 031f 	and.w	r3, r3, #31
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	fa22 f303 	lsr.w	r3, r2, r3
 80076de:	4a07      	ldr	r2, [pc, #28]	; (80076fc <HAL_RCC_GetHCLKFreq+0x58>)
 80076e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076e2:	4a07      	ldr	r2, [pc, #28]	; (8007700 <HAL_RCC_GetHCLKFreq+0x5c>)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80076e8:	4b04      	ldr	r3, [pc, #16]	; (80076fc <HAL_RCC_GetHCLKFreq+0x58>)
 80076ea:	681b      	ldr	r3, [r3, #0]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	58024400 	.word	0x58024400
 80076f8:	08011984 	.word	0x08011984
 80076fc:	24000004 	.word	0x24000004
 8007700:	24000000 	.word	0x24000000

08007704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007708:	f7ff ffcc 	bl	80076a4 <HAL_RCC_GetHCLKFreq>
 800770c:	4602      	mov	r2, r0
 800770e:	4b06      	ldr	r3, [pc, #24]	; (8007728 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	091b      	lsrs	r3, r3, #4
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	4904      	ldr	r1, [pc, #16]	; (800772c <HAL_RCC_GetPCLK1Freq+0x28>)
 800771a:	5ccb      	ldrb	r3, [r1, r3]
 800771c:	f003 031f 	and.w	r3, r3, #31
 8007720:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007724:	4618      	mov	r0, r3
 8007726:	bd80      	pop	{r7, pc}
 8007728:	58024400 	.word	0x58024400
 800772c:	08011984 	.word	0x08011984

08007730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007734:	f7ff ffb6 	bl	80076a4 <HAL_RCC_GetHCLKFreq>
 8007738:	4602      	mov	r2, r0
 800773a:	4b06      	ldr	r3, [pc, #24]	; (8007754 <HAL_RCC_GetPCLK2Freq+0x24>)
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	0a1b      	lsrs	r3, r3, #8
 8007740:	f003 0307 	and.w	r3, r3, #7
 8007744:	4904      	ldr	r1, [pc, #16]	; (8007758 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007746:	5ccb      	ldrb	r3, [r1, r3]
 8007748:	f003 031f 	and.w	r3, r3, #31
 800774c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007750:	4618      	mov	r0, r3
 8007752:	bd80      	pop	{r7, pc}
 8007754:	58024400 	.word	0x58024400
 8007758:	08011984 	.word	0x08011984

0800775c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007764:	2300      	movs	r3, #0
 8007766:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007768:	2300      	movs	r3, #0
 800776a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d03f      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800777c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007780:	d02a      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007782:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007786:	d824      	bhi.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800778c:	d018      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800778e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007792:	d81e      	bhi.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800779c:	d007      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800779e:	e018      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a0:	4bab      	ldr	r3, [pc, #684]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	4aaa      	ldr	r2, [pc, #680]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077ac:	e015      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3304      	adds	r3, #4
 80077b2:	2102      	movs	r1, #2
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 f9cf 	bl	8008b58 <RCCEx_PLL2_Config>
 80077ba:	4603      	mov	r3, r0
 80077bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077be:	e00c      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3324      	adds	r3, #36	; 0x24
 80077c4:	2102      	movs	r1, #2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f001 fa78 	bl	8008cbc <RCCEx_PLL3_Config>
 80077cc:	4603      	mov	r3, r0
 80077ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077d0:	e003      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	75fb      	strb	r3, [r7, #23]
      break;
 80077d6:	e000      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80077d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077da:	7dfb      	ldrb	r3, [r7, #23]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d109      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80077e0:	4b9b      	ldr	r3, [pc, #620]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077ec:	4998      	ldr	r1, [pc, #608]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	650b      	str	r3, [r1, #80]	; 0x50
 80077f2:	e001      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007800:	2b00      	cmp	r3, #0
 8007802:	d03d      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007808:	2b04      	cmp	r3, #4
 800780a:	d826      	bhi.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800780c:	a201      	add	r2, pc, #4	; (adr r2, 8007814 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800780e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007812:	bf00      	nop
 8007814:	08007829 	.word	0x08007829
 8007818:	08007837 	.word	0x08007837
 800781c:	08007849 	.word	0x08007849
 8007820:	08007861 	.word	0x08007861
 8007824:	08007861 	.word	0x08007861
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007828:	4b89      	ldr	r3, [pc, #548]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	4a88      	ldr	r2, [pc, #544]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800782e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007832:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007834:	e015      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3304      	adds	r3, #4
 800783a:	2100      	movs	r1, #0
 800783c:	4618      	mov	r0, r3
 800783e:	f001 f98b 	bl	8008b58 <RCCEx_PLL2_Config>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007846:	e00c      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3324      	adds	r3, #36	; 0x24
 800784c:	2100      	movs	r1, #0
 800784e:	4618      	mov	r0, r3
 8007850:	f001 fa34 	bl	8008cbc <RCCEx_PLL3_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007858:	e003      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	75fb      	strb	r3, [r7, #23]
      break;
 800785e:	e000      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007862:	7dfb      	ldrb	r3, [r7, #23]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d109      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007868:	4b79      	ldr	r3, [pc, #484]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800786a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786c:	f023 0207 	bic.w	r2, r3, #7
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007874:	4976      	ldr	r1, [pc, #472]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007876:	4313      	orrs	r3, r2
 8007878:	650b      	str	r3, [r1, #80]	; 0x50
 800787a:	e001      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007888:	2b00      	cmp	r3, #0
 800788a:	d042      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007894:	d02b      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800789a:	d825      	bhi.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800789c:	2bc0      	cmp	r3, #192	; 0xc0
 800789e:	d028      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80078a0:	2bc0      	cmp	r3, #192	; 0xc0
 80078a2:	d821      	bhi.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80078a4:	2b80      	cmp	r3, #128	; 0x80
 80078a6:	d016      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80078a8:	2b80      	cmp	r3, #128	; 0x80
 80078aa:	d81d      	bhi.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80078b0:	2b40      	cmp	r3, #64	; 0x40
 80078b2:	d007      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80078b4:	e018      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b6:	4b66      	ldr	r3, [pc, #408]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	4a65      	ldr	r2, [pc, #404]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80078c2:	e017      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3304      	adds	r3, #4
 80078c8:	2100      	movs	r1, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 f944 	bl	8008b58 <RCCEx_PLL2_Config>
 80078d0:	4603      	mov	r3, r0
 80078d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80078d4:	e00e      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3324      	adds	r3, #36	; 0x24
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 f9ed 	bl	8008cbc <RCCEx_PLL3_Config>
 80078e2:	4603      	mov	r3, r0
 80078e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80078e6:	e005      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	75fb      	strb	r3, [r7, #23]
      break;
 80078ec:	e002      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80078ee:	bf00      	nop
 80078f0:	e000      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80078f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d109      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80078fa:	4b55      	ldr	r3, [pc, #340]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007906:	4952      	ldr	r1, [pc, #328]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007908:	4313      	orrs	r3, r2
 800790a:	650b      	str	r3, [r1, #80]	; 0x50
 800790c:	e001      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800791a:	2b00      	cmp	r3, #0
 800791c:	d049      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007928:	d030      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800792a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800792e:	d82a      	bhi.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007930:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007934:	d02c      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007936:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800793a:	d824      	bhi.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800793c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007940:	d018      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007946:	d81e      	bhi.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800794c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007950:	d007      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007952:	e018      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007954:	4b3e      	ldr	r3, [pc, #248]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	4a3d      	ldr	r2, [pc, #244]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800795a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800795e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007960:	e017      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3304      	adds	r3, #4
 8007966:	2100      	movs	r1, #0
 8007968:	4618      	mov	r0, r3
 800796a:	f001 f8f5 	bl	8008b58 <RCCEx_PLL2_Config>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007972:	e00e      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3324      	adds	r3, #36	; 0x24
 8007978:	2100      	movs	r1, #0
 800797a:	4618      	mov	r0, r3
 800797c:	f001 f99e 	bl	8008cbc <RCCEx_PLL3_Config>
 8007980:	4603      	mov	r3, r0
 8007982:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007984:	e005      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	75fb      	strb	r3, [r7, #23]
      break;
 800798a:	e002      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800798c:	bf00      	nop
 800798e:	e000      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007998:	4b2d      	ldr	r3, [pc, #180]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800799a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80079a6:	492a      	ldr	r1, [pc, #168]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	658b      	str	r3, [r1, #88]	; 0x58
 80079ac:	e001      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d04c      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079c8:	d030      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80079ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079ce:	d82a      	bhi.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80079d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079d4:	d02c      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80079d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079da:	d824      	bhi.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80079dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079e0:	d018      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80079e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079e6:	d81e      	bhi.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80079ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079f0:	d007      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80079f2:	e018      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f4:	4b16      	ldr	r3, [pc, #88]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	4a15      	ldr	r2, [pc, #84]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a00:	e017      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3304      	adds	r3, #4
 8007a06:	2100      	movs	r1, #0
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f001 f8a5 	bl	8008b58 <RCCEx_PLL2_Config>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007a12:	e00e      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3324      	adds	r3, #36	; 0x24
 8007a18:	2100      	movs	r1, #0
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f001 f94e 	bl	8008cbc <RCCEx_PLL3_Config>
 8007a20:	4603      	mov	r3, r0
 8007a22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a24:	e005      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	75fb      	strb	r3, [r7, #23]
      break;
 8007a2a:	e002      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007a2c:	bf00      	nop
 8007a2e:	e000      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10d      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007a38:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a46:	4902      	ldr	r1, [pc, #8]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	658b      	str	r3, [r1, #88]	; 0x58
 8007a4c:	e004      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007a4e:	bf00      	nop
 8007a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d032      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a68:	2b30      	cmp	r3, #48	; 0x30
 8007a6a:	d01c      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007a6c:	2b30      	cmp	r3, #48	; 0x30
 8007a6e:	d817      	bhi.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d00c      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	d813      	bhi.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d016      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007a7c:	2b10      	cmp	r3, #16
 8007a7e:	d10f      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a80:	4baf      	ldr	r3, [pc, #700]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a84:	4aae      	ldr	r2, [pc, #696]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a8c:	e00e      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	3304      	adds	r3, #4
 8007a92:	2102      	movs	r1, #2
 8007a94:	4618      	mov	r0, r3
 8007a96:	f001 f85f 	bl	8008b58 <RCCEx_PLL2_Config>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a9e:	e005      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa4:	e002      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007aa6:	bf00      	nop
 8007aa8:	e000      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d109      	bne.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007ab2:	4ba3      	ldr	r3, [pc, #652]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007abe:	49a0      	ldr	r1, [pc, #640]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ac4:	e001      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d047      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ade:	d030      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ae4:	d82a      	bhi.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007ae6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007aea:	d02c      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007aec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007af0:	d824      	bhi.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af6:	d018      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007afc:	d81e      	bhi.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b06:	d007      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007b08:	e018      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b0a:	4b8d      	ldr	r3, [pc, #564]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0e:	4a8c      	ldr	r2, [pc, #560]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b16:	e017      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f001 f81a 	bl	8008b58 <RCCEx_PLL2_Config>
 8007b24:	4603      	mov	r3, r0
 8007b26:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b28:	e00e      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	3324      	adds	r3, #36	; 0x24
 8007b2e:	2100      	movs	r1, #0
 8007b30:	4618      	mov	r0, r3
 8007b32:	f001 f8c3 	bl	8008cbc <RCCEx_PLL3_Config>
 8007b36:	4603      	mov	r3, r0
 8007b38:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b3a:	e005      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b40:	e002      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007b42:	bf00      	nop
 8007b44:	e000      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007b46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d109      	bne.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007b4e:	4b7c      	ldr	r3, [pc, #496]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b52:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5a:	4979      	ldr	r1, [pc, #484]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	650b      	str	r3, [r1, #80]	; 0x50
 8007b60:	e001      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
 8007b64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d049      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b7a:	d02e      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b80:	d828      	bhi.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007b82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b86:	d02a      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007b88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b8c:	d822      	bhi.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007b8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b92:	d026      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007b94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b98:	d81c      	bhi.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007b9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b9e:	d010      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007ba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ba4:	d816      	bhi.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01d      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bae:	d111      	bne.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 ffce 	bl	8008b58 <RCCEx_PLL2_Config>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007bc0:	e012      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3324      	adds	r3, #36	; 0x24
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f001 f877 	bl	8008cbc <RCCEx_PLL3_Config>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007bd2:	e009      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd8:	e006      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007bda:	bf00      	nop
 8007bdc:	e004      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007bde:	bf00      	nop
 8007be0:	e002      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007be2:	bf00      	nop
 8007be4:	e000      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d109      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007bee:	4b54      	ldr	r3, [pc, #336]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bfa:	4951      	ldr	r1, [pc, #324]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	650b      	str	r3, [r1, #80]	; 0x50
 8007c00:	e001      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d04b      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c1c:	d02e      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c22:	d828      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c28:	d02a      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c2e:	d822      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007c30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c34:	d026      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007c36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c3a:	d81c      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c40:	d010      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c46:	d816      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01d      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007c4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c50:	d111      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3304      	adds	r3, #4
 8007c56:	2101      	movs	r1, #1
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 ff7d 	bl	8008b58 <RCCEx_PLL2_Config>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007c62:	e012      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3324      	adds	r3, #36	; 0x24
 8007c68:	2101      	movs	r1, #1
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 f826 	bl	8008cbc <RCCEx_PLL3_Config>
 8007c70:	4603      	mov	r3, r0
 8007c72:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007c74:	e009      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	75fb      	strb	r3, [r7, #23]
      break;
 8007c7a:	e006      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007c7c:	bf00      	nop
 8007c7e:	e004      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007c80:	bf00      	nop
 8007c82:	e002      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007c84:	bf00      	nop
 8007c86:	e000      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c90:	4b2b      	ldr	r3, [pc, #172]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c94:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c9e:	4928      	ldr	r1, [pc, #160]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	658b      	str	r3, [r1, #88]	; 0x58
 8007ca4:	e001      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d02f      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cbe:	d00e      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cc4:	d814      	bhi.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d015      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cce:	d10f      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd0:	4b1b      	ldr	r3, [pc, #108]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	4a1a      	ldr	r2, [pc, #104]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007cdc:	e00c      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 ff37 	bl	8008b58 <RCCEx_PLL2_Config>
 8007cea:	4603      	mov	r3, r0
 8007cec:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007cee:	e003      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf4:	e000      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d109      	bne.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cfe:	4b10      	ldr	r3, [pc, #64]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d0a:	490d      	ldr	r1, [pc, #52]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	650b      	str	r3, [r1, #80]	; 0x50
 8007d10:	e001      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d033      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d81c      	bhi.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007d2a:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007d6b 	.word	0x08007d6b
 8007d34:	08007d45 	.word	0x08007d45
 8007d38:	08007d53 	.word	0x08007d53
 8007d3c:	08007d6b 	.word	0x08007d6b
 8007d40:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d44:	4bb8      	ldr	r3, [pc, #736]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	4ab7      	ldr	r2, [pc, #732]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007d50:	e00c      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3304      	adds	r3, #4
 8007d56:	2102      	movs	r1, #2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 fefd 	bl	8008b58 <RCCEx_PLL2_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007d62:	e003      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	75fb      	strb	r3, [r7, #23]
      break;
 8007d68:	e000      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d109      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007d72:	4bad      	ldr	r3, [pc, #692]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d76:	f023 0203 	bic.w	r2, r3, #3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7e:	49aa      	ldr	r1, [pc, #680]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d84:	e001      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 8086 	beq.w	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d98:	4ba4      	ldr	r3, [pc, #656]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4aa3      	ldr	r2, [pc, #652]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007da2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007da4:	f7fa f892 	bl	8001ecc <HAL_GetTick>
 8007da8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007daa:	e009      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dac:	f7fa f88e 	bl	8001ecc <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b64      	cmp	r3, #100	; 0x64
 8007db8:	d902      	bls.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	75fb      	strb	r3, [r7, #23]
        break;
 8007dbe:	e005      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007dc0:	4b9a      	ldr	r3, [pc, #616]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0ef      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d166      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007dd2:	4b95      	ldr	r3, [pc, #596]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007dd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ddc:	4053      	eors	r3, r2
 8007dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d013      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007de6:	4b90      	ldr	r3, [pc, #576]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007df0:	4b8d      	ldr	r3, [pc, #564]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df4:	4a8c      	ldr	r2, [pc, #560]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dfa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007dfc:	4b8a      	ldr	r3, [pc, #552]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e00:	4a89      	ldr	r2, [pc, #548]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e06:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007e08:	4a87      	ldr	r2, [pc, #540]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e18:	d115      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1a:	f7fa f857 	bl	8001ecc <HAL_GetTick>
 8007e1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e20:	e00b      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e22:	f7fa f853 	bl	8001ecc <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d902      	bls.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	75fb      	strb	r3, [r7, #23]
            break;
 8007e38:	e005      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e3a:	4b7b      	ldr	r3, [pc, #492]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0ed      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d126      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e5a:	d10d      	bne.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007e5c:	4b72      	ldr	r3, [pc, #456]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e6a:	0919      	lsrs	r1, r3, #4
 8007e6c:	4b70      	ldr	r3, [pc, #448]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007e6e:	400b      	ands	r3, r1
 8007e70:	496d      	ldr	r1, [pc, #436]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	610b      	str	r3, [r1, #16]
 8007e76:	e005      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007e78:	4b6b      	ldr	r3, [pc, #428]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	4a6a      	ldr	r2, [pc, #424]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e82:	6113      	str	r3, [r2, #16]
 8007e84:	4b68      	ldr	r3, [pc, #416]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e92:	4965      	ldr	r1, [pc, #404]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	670b      	str	r3, [r1, #112]	; 0x70
 8007e98:	e004      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	75bb      	strb	r3, [r7, #22]
 8007e9e:	e001      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
 8007ea2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d07e      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eb4:	2b28      	cmp	r3, #40	; 0x28
 8007eb6:	d867      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007eb8:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebe:	bf00      	nop
 8007ec0:	08007f8f 	.word	0x08007f8f
 8007ec4:	08007f89 	.word	0x08007f89
 8007ec8:	08007f89 	.word	0x08007f89
 8007ecc:	08007f89 	.word	0x08007f89
 8007ed0:	08007f89 	.word	0x08007f89
 8007ed4:	08007f89 	.word	0x08007f89
 8007ed8:	08007f89 	.word	0x08007f89
 8007edc:	08007f89 	.word	0x08007f89
 8007ee0:	08007f65 	.word	0x08007f65
 8007ee4:	08007f89 	.word	0x08007f89
 8007ee8:	08007f89 	.word	0x08007f89
 8007eec:	08007f89 	.word	0x08007f89
 8007ef0:	08007f89 	.word	0x08007f89
 8007ef4:	08007f89 	.word	0x08007f89
 8007ef8:	08007f89 	.word	0x08007f89
 8007efc:	08007f89 	.word	0x08007f89
 8007f00:	08007f77 	.word	0x08007f77
 8007f04:	08007f89 	.word	0x08007f89
 8007f08:	08007f89 	.word	0x08007f89
 8007f0c:	08007f89 	.word	0x08007f89
 8007f10:	08007f89 	.word	0x08007f89
 8007f14:	08007f89 	.word	0x08007f89
 8007f18:	08007f89 	.word	0x08007f89
 8007f1c:	08007f89 	.word	0x08007f89
 8007f20:	08007f8f 	.word	0x08007f8f
 8007f24:	08007f89 	.word	0x08007f89
 8007f28:	08007f89 	.word	0x08007f89
 8007f2c:	08007f89 	.word	0x08007f89
 8007f30:	08007f89 	.word	0x08007f89
 8007f34:	08007f89 	.word	0x08007f89
 8007f38:	08007f89 	.word	0x08007f89
 8007f3c:	08007f89 	.word	0x08007f89
 8007f40:	08007f8f 	.word	0x08007f8f
 8007f44:	08007f89 	.word	0x08007f89
 8007f48:	08007f89 	.word	0x08007f89
 8007f4c:	08007f89 	.word	0x08007f89
 8007f50:	08007f89 	.word	0x08007f89
 8007f54:	08007f89 	.word	0x08007f89
 8007f58:	08007f89 	.word	0x08007f89
 8007f5c:	08007f89 	.word	0x08007f89
 8007f60:	08007f8f 	.word	0x08007f8f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3304      	adds	r3, #4
 8007f68:	2101      	movs	r1, #1
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fdf4 	bl	8008b58 <RCCEx_PLL2_Config>
 8007f70:	4603      	mov	r3, r0
 8007f72:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f74:	e00c      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3324      	adds	r3, #36	; 0x24
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fe9d 	bl	8008cbc <RCCEx_PLL3_Config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f86:	e003      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f8c:	e000      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d109      	bne.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f96:	4b24      	ldr	r3, [pc, #144]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa2:	4921      	ldr	r1, [pc, #132]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	654b      	str	r3, [r1, #84]	; 0x54
 8007fa8:	e001      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007faa:	7dfb      	ldrb	r3, [r7, #23]
 8007fac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d03e      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fbe:	2b05      	cmp	r3, #5
 8007fc0:	d820      	bhi.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007fc2:	a201      	add	r2, pc, #4	; (adr r2, 8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc8:	0800800b 	.word	0x0800800b
 8007fcc:	08007fe1 	.word	0x08007fe1
 8007fd0:	08007ff3 	.word	0x08007ff3
 8007fd4:	0800800b 	.word	0x0800800b
 8007fd8:	0800800b 	.word	0x0800800b
 8007fdc:	0800800b 	.word	0x0800800b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fdb6 	bl	8008b58 <RCCEx_PLL2_Config>
 8007fec:	4603      	mov	r3, r0
 8007fee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007ff0:	e00c      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	3324      	adds	r3, #36	; 0x24
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fe5f 	bl	8008cbc <RCCEx_PLL3_Config>
 8007ffe:	4603      	mov	r3, r0
 8008000:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008002:	e003      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	75fb      	strb	r3, [r7, #23]
      break;
 8008008:	e000      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800800a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d110      	bne.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008012:	4b05      	ldr	r3, [pc, #20]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008016:	f023 0207 	bic.w	r2, r3, #7
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800801e:	4902      	ldr	r1, [pc, #8]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008020:	4313      	orrs	r3, r2
 8008022:	654b      	str	r3, [r1, #84]	; 0x54
 8008024:	e008      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008026:	bf00      	nop
 8008028:	58024400 	.word	0x58024400
 800802c:	58024800 	.word	0x58024800
 8008030:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0304 	and.w	r3, r3, #4
 8008040:	2b00      	cmp	r3, #0
 8008042:	d039      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804a:	2b05      	cmp	r3, #5
 800804c:	d820      	bhi.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	08008097 	.word	0x08008097
 8008058:	0800806d 	.word	0x0800806d
 800805c:	0800807f 	.word	0x0800807f
 8008060:	08008097 	.word	0x08008097
 8008064:	08008097 	.word	0x08008097
 8008068:	08008097 	.word	0x08008097
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3304      	adds	r3, #4
 8008070:	2101      	movs	r1, #1
 8008072:	4618      	mov	r0, r3
 8008074:	f000 fd70 	bl	8008b58 <RCCEx_PLL2_Config>
 8008078:	4603      	mov	r3, r0
 800807a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800807c:	e00c      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3324      	adds	r3, #36	; 0x24
 8008082:	2101      	movs	r1, #1
 8008084:	4618      	mov	r0, r3
 8008086:	f000 fe19 	bl	8008cbc <RCCEx_PLL3_Config>
 800808a:	4603      	mov	r3, r0
 800808c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800808e:	e003      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	75fb      	strb	r3, [r7, #23]
      break;
 8008094:	e000      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800809e:	4bb7      	ldr	r3, [pc, #732]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80080a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a2:	f023 0207 	bic.w	r2, r3, #7
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ac:	49b3      	ldr	r1, [pc, #716]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	658b      	str	r3, [r1, #88]	; 0x58
 80080b2:	e001      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0320 	and.w	r3, r3, #32
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d04b      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080ce:	d02e      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80080d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080d4:	d828      	bhi.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80080d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080da:	d02a      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80080dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e0:	d822      	bhi.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80080e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080e6:	d026      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80080e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080ec:	d81c      	bhi.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80080ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080f2:	d010      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80080f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080f8:	d816      	bhi.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d01d      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80080fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008102:	d111      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3304      	adds	r3, #4
 8008108:	2100      	movs	r1, #0
 800810a:	4618      	mov	r0, r3
 800810c:	f000 fd24 	bl	8008b58 <RCCEx_PLL2_Config>
 8008110:	4603      	mov	r3, r0
 8008112:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008114:	e012      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3324      	adds	r3, #36	; 0x24
 800811a:	2102      	movs	r1, #2
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fdcd 	bl	8008cbc <RCCEx_PLL3_Config>
 8008122:	4603      	mov	r3, r0
 8008124:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008126:	e009      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	75fb      	strb	r3, [r7, #23]
      break;
 800812c:	e006      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800812e:	bf00      	nop
 8008130:	e004      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008132:	bf00      	nop
 8008134:	e002      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008136:	bf00      	nop
 8008138:	e000      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800813a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800813c:	7dfb      	ldrb	r3, [r7, #23]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10a      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008142:	4b8e      	ldr	r3, [pc, #568]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008146:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008150:	498a      	ldr	r1, [pc, #552]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008152:	4313      	orrs	r3, r2
 8008154:	654b      	str	r3, [r1, #84]	; 0x54
 8008156:	e001      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008164:	2b00      	cmp	r3, #0
 8008166:	d04b      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800816e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008172:	d02e      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008174:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008178:	d828      	bhi.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800817a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800817e:	d02a      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008184:	d822      	bhi.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008186:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800818a:	d026      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800818c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008190:	d81c      	bhi.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008196:	d010      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800819c:	d816      	bhi.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d01d      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80081a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081a6:	d111      	bne.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3304      	adds	r3, #4
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fcd2 	bl	8008b58 <RCCEx_PLL2_Config>
 80081b4:	4603      	mov	r3, r0
 80081b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80081b8:	e012      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3324      	adds	r3, #36	; 0x24
 80081be:	2102      	movs	r1, #2
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 fd7b 	bl	8008cbc <RCCEx_PLL3_Config>
 80081c6:	4603      	mov	r3, r0
 80081c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80081ca:	e009      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	75fb      	strb	r3, [r7, #23]
      break;
 80081d0:	e006      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80081d2:	bf00      	nop
 80081d4:	e004      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80081d6:	bf00      	nop
 80081d8:	e002      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80081da:	bf00      	nop
 80081dc:	e000      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80081de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10a      	bne.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80081e6:	4b65      	ldr	r3, [pc, #404]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081f4:	4961      	ldr	r1, [pc, #388]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081f6:	4313      	orrs	r3, r2
 80081f8:	658b      	str	r3, [r1, #88]	; 0x58
 80081fa:	e001      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008208:	2b00      	cmp	r3, #0
 800820a:	d04b      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008212:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008216:	d02e      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008218:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800821c:	d828      	bhi.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800821e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008222:	d02a      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008228:	d822      	bhi.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800822a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800822e:	d026      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008230:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008234:	d81c      	bhi.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800823a:	d010      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800823c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008240:	d816      	bhi.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008242:	2b00      	cmp	r3, #0
 8008244:	d01d      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800824a:	d111      	bne.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3304      	adds	r3, #4
 8008250:	2100      	movs	r1, #0
 8008252:	4618      	mov	r0, r3
 8008254:	f000 fc80 	bl	8008b58 <RCCEx_PLL2_Config>
 8008258:	4603      	mov	r3, r0
 800825a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800825c:	e012      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	3324      	adds	r3, #36	; 0x24
 8008262:	2102      	movs	r1, #2
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fd29 	bl	8008cbc <RCCEx_PLL3_Config>
 800826a:	4603      	mov	r3, r0
 800826c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800826e:	e009      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	75fb      	strb	r3, [r7, #23]
      break;
 8008274:	e006      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008276:	bf00      	nop
 8008278:	e004      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800827a:	bf00      	nop
 800827c:	e002      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800827e:	bf00      	nop
 8008280:	e000      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10a      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800828a:	4b3c      	ldr	r3, [pc, #240]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800828c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800828e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008298:	4938      	ldr	r1, [pc, #224]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800829a:	4313      	orrs	r3, r2
 800829c:	658b      	str	r3, [r1, #88]	; 0x58
 800829e:	e001      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0308 	and.w	r3, r3, #8
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d01a      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ba:	d10a      	bne.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	3324      	adds	r3, #36	; 0x24
 80082c0:	2102      	movs	r1, #2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fcfa 	bl	8008cbc <RCCEx_PLL3_Config>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80082d2:	4b2a      	ldr	r3, [pc, #168]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082e0:	4926      	ldr	r1, [pc, #152]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0310 	and.w	r3, r3, #16
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d01a      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fc:	d10a      	bne.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	3324      	adds	r3, #36	; 0x24
 8008302:	2102      	movs	r1, #2
 8008304:	4618      	mov	r0, r3
 8008306:	f000 fcd9 	bl	8008cbc <RCCEx_PLL3_Config>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008314:	4b19      	ldr	r3, [pc, #100]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008322:	4916      	ldr	r1, [pc, #88]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008324:	4313      	orrs	r3, r2
 8008326:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d036      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800833a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800833e:	d01f      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008344:	d817      	bhi.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800834a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800834e:	d009      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008350:	e011      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3304      	adds	r3, #4
 8008356:	2100      	movs	r1, #0
 8008358:	4618      	mov	r0, r3
 800835a:	f000 fbfd 	bl	8008b58 <RCCEx_PLL2_Config>
 800835e:	4603      	mov	r3, r0
 8008360:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008362:	e00e      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3324      	adds	r3, #36	; 0x24
 8008368:	2102      	movs	r1, #2
 800836a:	4618      	mov	r0, r3
 800836c:	f000 fca6 	bl	8008cbc <RCCEx_PLL3_Config>
 8008370:	4603      	mov	r3, r0
 8008372:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008374:	e005      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	75fb      	strb	r3, [r7, #23]
      break;
 800837a:	e002      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800837c:	58024400 	.word	0x58024400
      break;
 8008380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008382:	7dfb      	ldrb	r3, [r7, #23]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10a      	bne.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008388:	4b93      	ldr	r3, [pc, #588]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800838a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800838c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008396:	4990      	ldr	r1, [pc, #576]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008398:	4313      	orrs	r3, r2
 800839a:	658b      	str	r3, [r1, #88]	; 0x58
 800839c:	e001      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839e:	7dfb      	ldrb	r3, [r7, #23]
 80083a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d033      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083b8:	d01c      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80083ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083be:	d816      	bhi.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80083c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083c4:	d003      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80083c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083ca:	d007      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80083cc:	e00f      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ce:	4b82      	ldr	r3, [pc, #520]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80083d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d2:	4a81      	ldr	r2, [pc, #516]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80083d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80083da:	e00c      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3324      	adds	r3, #36	; 0x24
 80083e0:	2101      	movs	r1, #1
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fc6a 	bl	8008cbc <RCCEx_PLL3_Config>
 80083e8:	4603      	mov	r3, r0
 80083ea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80083ec:	e003      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	75fb      	strb	r3, [r7, #23]
      break;
 80083f2:	e000      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80083f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083fc:	4b76      	ldr	r3, [pc, #472]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80083fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008400:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800840a:	4973      	ldr	r1, [pc, #460]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800840c:	4313      	orrs	r3, r2
 800840e:	654b      	str	r3, [r1, #84]	; 0x54
 8008410:	e001      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d029      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800842a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800842e:	d007      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008430:	e00f      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008432:	4b69      	ldr	r3, [pc, #420]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008436:	4a68      	ldr	r2, [pc, #416]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800843c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800843e:	e00b      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3304      	adds	r3, #4
 8008444:	2102      	movs	r1, #2
 8008446:	4618      	mov	r0, r3
 8008448:	f000 fb86 	bl	8008b58 <RCCEx_PLL2_Config>
 800844c:	4603      	mov	r3, r0
 800844e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008450:	e002      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	75fb      	strb	r3, [r7, #23]
      break;
 8008456:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008458:	7dfb      	ldrb	r3, [r7, #23]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d109      	bne.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800845e:	4b5e      	ldr	r3, [pc, #376]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008462:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800846a:	495b      	ldr	r1, [pc, #364]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800846c:	4313      	orrs	r3, r2
 800846e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008470:	e001      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	3324      	adds	r3, #36	; 0x24
 8008486:	2102      	movs	r1, #2
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fc17 	bl	8008cbc <RCCEx_PLL3_Config>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d030      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084ac:	d017      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80084ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084b2:	d811      	bhi.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80084b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084b8:	d013      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80084ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084be:	d80b      	bhi.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d010      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80084c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084c8:	d106      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ca:	4b43      	ldr	r3, [pc, #268]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ce:	4a42      	ldr	r2, [pc, #264]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80084d6:	e007      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	75fb      	strb	r3, [r7, #23]
      break;
 80084dc:	e004      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80084de:	bf00      	nop
 80084e0:	e002      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80084e2:	bf00      	nop
 80084e4:	e000      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80084e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d109      	bne.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084ee:	4b3a      	ldr	r3, [pc, #232]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084fa:	4937      	ldr	r1, [pc, #220]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	654b      	str	r3, [r1, #84]	; 0x54
 8008500:	e001      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d008      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008512:	4b31      	ldr	r3, [pc, #196]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008516:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851e:	492e      	ldr	r1, [pc, #184]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008520:	4313      	orrs	r3, r2
 8008522:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d009      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008530:	4b29      	ldr	r3, [pc, #164]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800853e:	4926      	ldr	r1, [pc, #152]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008540:	4313      	orrs	r3, r2
 8008542:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d008      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008550:	4b21      	ldr	r3, [pc, #132]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008554:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800855c:	491e      	ldr	r1, [pc, #120]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800855e:	4313      	orrs	r3, r2
 8008560:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00d      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800856e:	4b1a      	ldr	r3, [pc, #104]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	4a19      	ldr	r2, [pc, #100]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008574:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008578:	6113      	str	r3, [r2, #16]
 800857a:	4b17      	ldr	r3, [pc, #92]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800857c:	691a      	ldr	r2, [r3, #16]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008584:	4914      	ldr	r1, [pc, #80]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008586:	4313      	orrs	r3, r2
 8008588:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	da08      	bge.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008592:	4b11      	ldr	r3, [pc, #68]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008596:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859e:	490e      	ldr	r1, [pc, #56]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d009      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80085b0:	4b09      	ldr	r3, [pc, #36]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085be:	4906      	ldr	r1, [pc, #24]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80085c4:	7dbb      	ldrb	r3, [r7, #22]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	e000      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	58024400 	.word	0x58024400

080085dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80085e0:	f7ff f860 	bl	80076a4 <HAL_RCC_GetHCLKFreq>
 80085e4:	4602      	mov	r2, r0
 80085e6:	4b06      	ldr	r3, [pc, #24]	; (8008600 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	091b      	lsrs	r3, r3, #4
 80085ec:	f003 0307 	and.w	r3, r3, #7
 80085f0:	4904      	ldr	r1, [pc, #16]	; (8008604 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80085f2:	5ccb      	ldrb	r3, [r1, r3]
 80085f4:	f003 031f 	and.w	r3, r3, #31
 80085f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	58024400 	.word	0x58024400
 8008604:	08011984 	.word	0x08011984

08008608 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008608:	b480      	push	{r7}
 800860a:	b089      	sub	sp, #36	; 0x24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008610:	4ba1      	ldr	r3, [pc, #644]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008614:	f003 0303 	and.w	r3, r3, #3
 8008618:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800861a:	4b9f      	ldr	r3, [pc, #636]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	0b1b      	lsrs	r3, r3, #12
 8008620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008624:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008626:	4b9c      	ldr	r3, [pc, #624]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862a:	091b      	lsrs	r3, r3, #4
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008632:	4b99      	ldr	r3, [pc, #612]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008636:	08db      	lsrs	r3, r3, #3
 8008638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	fb02 f303 	mul.w	r3, r2, r3
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 8111 	beq.w	8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	2b02      	cmp	r3, #2
 800865a:	f000 8083 	beq.w	8008764 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	2b02      	cmp	r3, #2
 8008662:	f200 80a1 	bhi.w	80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d056      	beq.n	8008720 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008672:	e099      	b.n	80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008674:	4b88      	ldr	r3, [pc, #544]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0320 	and.w	r3, r3, #32
 800867c:	2b00      	cmp	r3, #0
 800867e:	d02d      	beq.n	80086dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008680:	4b85      	ldr	r3, [pc, #532]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	08db      	lsrs	r3, r3, #3
 8008686:	f003 0303 	and.w	r3, r3, #3
 800868a:	4a84      	ldr	r2, [pc, #528]	; (800889c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800868c:	fa22 f303 	lsr.w	r3, r2, r3
 8008690:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	ee07 3a90 	vmov	s15, r3
 8008698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	ee07 3a90 	vmov	s15, r3
 80086a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086aa:	4b7b      	ldr	r3, [pc, #492]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b2:	ee07 3a90 	vmov	s15, r3
 80086b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80086be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80088a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80086da:	e087      	b.n	80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80088a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80086ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ee:	4b6a      	ldr	r3, [pc, #424]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f6:	ee07 3a90 	vmov	s15, r3
 80086fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008702:	eddf 5a67 	vldr	s11, [pc, #412]	; 80088a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800870a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800870e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800871a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800871e:	e065      	b.n	80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800872e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008732:	4b59      	ldr	r3, [pc, #356]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873a:	ee07 3a90 	vmov	s15, r3
 800873e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008742:	ed97 6a03 	vldr	s12, [r7, #12]
 8008746:	eddf 5a56 	vldr	s11, [pc, #344]	; 80088a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800874a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800874e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800875a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800875e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008762:	e043      	b.n	80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008776:	4b48      	ldr	r3, [pc, #288]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877e:	ee07 3a90 	vmov	s15, r3
 8008782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008786:	ed97 6a03 	vldr	s12, [r7, #12]
 800878a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80088a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800878e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800879a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800879e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087a6:	e021      	b.n	80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ba:	4b37      	ldr	r3, [pc, #220]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80088a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80087ec:	4b2a      	ldr	r3, [pc, #168]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f0:	0a5b      	lsrs	r3, r3, #9
 80087f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f6:	ee07 3a90 	vmov	s15, r3
 80087fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008802:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008806:	edd7 6a07 	vldr	s13, [r7, #28]
 800880a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800880e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008812:	ee17 2a90 	vmov	r2, s15
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800881a:	4b1f      	ldr	r3, [pc, #124]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	0c1b      	lsrs	r3, r3, #16
 8008820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008824:	ee07 3a90 	vmov	s15, r3
 8008828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008830:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008834:	edd7 6a07 	vldr	s13, [r7, #28]
 8008838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800883c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008840:	ee17 2a90 	vmov	r2, s15
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008848:	4b13      	ldr	r3, [pc, #76]	; (8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800884a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884c:	0e1b      	lsrs	r3, r3, #24
 800884e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800885e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008862:	edd7 6a07 	vldr	s13, [r7, #28]
 8008866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800886a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800886e:	ee17 2a90 	vmov	r2, s15
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008876:	e008      	b.n	800888a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	609a      	str	r2, [r3, #8]
}
 800888a:	bf00      	nop
 800888c:	3724      	adds	r7, #36	; 0x24
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	58024400 	.word	0x58024400
 800889c:	03d09000 	.word	0x03d09000
 80088a0:	46000000 	.word	0x46000000
 80088a4:	4c742400 	.word	0x4c742400
 80088a8:	4a742400 	.word	0x4a742400
 80088ac:	4af42400 	.word	0x4af42400

080088b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b089      	sub	sp, #36	; 0x24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088b8:	4ba1      	ldr	r3, [pc, #644]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088bc:	f003 0303 	and.w	r3, r3, #3
 80088c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80088c2:	4b9f      	ldr	r3, [pc, #636]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	0d1b      	lsrs	r3, r3, #20
 80088c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80088ce:	4b9c      	ldr	r3, [pc, #624]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80088da:	4b99      	ldr	r3, [pc, #612]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088de:	08db      	lsrs	r3, r3, #3
 80088e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	fb02 f303 	mul.w	r3, r2, r3
 80088ea:	ee07 3a90 	vmov	s15, r3
 80088ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 8111 	beq.w	8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b02      	cmp	r3, #2
 8008902:	f000 8083 	beq.w	8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	2b02      	cmp	r3, #2
 800890a:	f200 80a1 	bhi.w	8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d056      	beq.n	80089c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800891a:	e099      	b.n	8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800891c:	4b88      	ldr	r3, [pc, #544]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0320 	and.w	r3, r3, #32
 8008924:	2b00      	cmp	r3, #0
 8008926:	d02d      	beq.n	8008984 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008928:	4b85      	ldr	r3, [pc, #532]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	08db      	lsrs	r3, r3, #3
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	4a84      	ldr	r2, [pc, #528]	; (8008b44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008934:	fa22 f303 	lsr.w	r3, r2, r3
 8008938:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	ee07 3a90 	vmov	s15, r3
 8008940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	ee07 3a90 	vmov	s15, r3
 800894a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008952:	4b7b      	ldr	r3, [pc, #492]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895a:	ee07 3a90 	vmov	s15, r3
 800895e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008962:	ed97 6a03 	vldr	s12, [r7, #12]
 8008966:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800896a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800897a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008982:	e087      	b.n	8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008996:	4b6a      	ldr	r3, [pc, #424]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089c6:	e065      	b.n	8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089da:	4b59      	ldr	r3, [pc, #356]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e2:	ee07 3a90 	vmov	s15, r3
 80089e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a0a:	e043      	b.n	8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a1e:	4b48      	ldr	r3, [pc, #288]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a26:	ee07 3a90 	vmov	s15, r3
 8008a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a4e:	e021      	b.n	8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a62:	4b37      	ldr	r3, [pc, #220]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008a94:	4b2a      	ldr	r3, [pc, #168]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a98:	0a5b      	lsrs	r3, r3, #9
 8008a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aae:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aba:	ee17 2a90 	vmov	r2, s15
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008ac2:	4b1f      	ldr	r3, [pc, #124]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	0c1b      	lsrs	r3, r3, #16
 8008ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008acc:	ee07 3a90 	vmov	s15, r3
 8008ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ad8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008adc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ae8:	ee17 2a90 	vmov	r2, s15
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008af0:	4b13      	ldr	r3, [pc, #76]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af4:	0e1b      	lsrs	r3, r3, #24
 8008af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b16:	ee17 2a90 	vmov	r2, s15
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b1e:	e008      	b.n	8008b32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	609a      	str	r2, [r3, #8]
}
 8008b32:	bf00      	nop
 8008b34:	3724      	adds	r7, #36	; 0x24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	58024400 	.word	0x58024400
 8008b44:	03d09000 	.word	0x03d09000
 8008b48:	46000000 	.word	0x46000000
 8008b4c:	4c742400 	.word	0x4c742400
 8008b50:	4a742400 	.word	0x4a742400
 8008b54:	4af42400 	.word	0x4af42400

08008b58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b66:	4b53      	ldr	r3, [pc, #332]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	f003 0303 	and.w	r3, r3, #3
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d101      	bne.n	8008b76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e099      	b.n	8008caa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008b76:	4b4f      	ldr	r3, [pc, #316]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a4e      	ldr	r2, [pc, #312]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008b7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b82:	f7f9 f9a3 	bl	8001ecc <HAL_GetTick>
 8008b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b88:	e008      	b.n	8008b9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b8a:	f7f9 f99f 	bl	8001ecc <HAL_GetTick>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d901      	bls.n	8008b9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e086      	b.n	8008caa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b9c:	4b45      	ldr	r3, [pc, #276]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1f0      	bne.n	8008b8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ba8:	4b42      	ldr	r3, [pc, #264]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	031b      	lsls	r3, r3, #12
 8008bb6:	493f      	ldr	r1, [pc, #252]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	628b      	str	r3, [r1, #40]	; 0x28
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	025b      	lsls	r3, r3, #9
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	041b      	lsls	r3, r3, #16
 8008bda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008bde:	431a      	orrs	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	061b      	lsls	r3, r3, #24
 8008be8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008bec:	4931      	ldr	r1, [pc, #196]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008bf2:	4b30      	ldr	r3, [pc, #192]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	492d      	ldr	r1, [pc, #180]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c04:	4b2b      	ldr	r3, [pc, #172]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c08:	f023 0220 	bic.w	r2, r3, #32
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	4928      	ldr	r1, [pc, #160]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008c16:	4b27      	ldr	r3, [pc, #156]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1a:	4a26      	ldr	r2, [pc, #152]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c1c:	f023 0310 	bic.w	r3, r3, #16
 8008c20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c22:	4b24      	ldr	r3, [pc, #144]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c26:	4b24      	ldr	r3, [pc, #144]	; (8008cb8 <RCCEx_PLL2_Config+0x160>)
 8008c28:	4013      	ands	r3, r2
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	69d2      	ldr	r2, [r2, #28]
 8008c2e:	00d2      	lsls	r2, r2, #3
 8008c30:	4920      	ldr	r1, [pc, #128]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c36:	4b1f      	ldr	r3, [pc, #124]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3a:	4a1e      	ldr	r2, [pc, #120]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c3c:	f043 0310 	orr.w	r3, r3, #16
 8008c40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d106      	bne.n	8008c56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c48:	4b1a      	ldr	r3, [pc, #104]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4c:	4a19      	ldr	r2, [pc, #100]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c54:	e00f      	b.n	8008c76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d106      	bne.n	8008c6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c5c:	4b15      	ldr	r3, [pc, #84]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	4a14      	ldr	r2, [pc, #80]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c68:	e005      	b.n	8008c76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c6a:	4b12      	ldr	r3, [pc, #72]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	4a11      	ldr	r2, [pc, #68]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c76:	4b0f      	ldr	r3, [pc, #60]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a0e      	ldr	r2, [pc, #56]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c82:	f7f9 f923 	bl	8001ecc <HAL_GetTick>
 8008c86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c88:	e008      	b.n	8008c9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c8a:	f7f9 f91f 	bl	8001ecc <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d901      	bls.n	8008c9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e006      	b.n	8008caa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0f0      	beq.n	8008c8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	58024400 	.word	0x58024400
 8008cb8:	ffff0007 	.word	0xffff0007

08008cbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cca:	4b53      	ldr	r3, [pc, #332]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d101      	bne.n	8008cda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e099      	b.n	8008e0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008cda:	4b4f      	ldr	r3, [pc, #316]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a4e      	ldr	r2, [pc, #312]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ce6:	f7f9 f8f1 	bl	8001ecc <HAL_GetTick>
 8008cea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cec:	e008      	b.n	8008d00 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008cee:	f7f9 f8ed 	bl	8001ecc <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d901      	bls.n	8008d00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e086      	b.n	8008e0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d00:	4b45      	ldr	r3, [pc, #276]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1f0      	bne.n	8008cee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008d0c:	4b42      	ldr	r3, [pc, #264]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	051b      	lsls	r3, r3, #20
 8008d1a:	493f      	ldr	r1, [pc, #252]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	628b      	str	r3, [r1, #40]	; 0x28
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	3b01      	subs	r3, #1
 8008d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	025b      	lsls	r3, r3, #9
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	431a      	orrs	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	041b      	lsls	r3, r3, #16
 8008d3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d42:	431a      	orrs	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	061b      	lsls	r3, r3, #24
 8008d4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d50:	4931      	ldr	r1, [pc, #196]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d56:	4b30      	ldr	r3, [pc, #192]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	492d      	ldr	r1, [pc, #180]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d64:	4313      	orrs	r3, r2
 8008d66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d68:	4b2b      	ldr	r3, [pc, #172]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	4928      	ldr	r1, [pc, #160]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d7a:	4b27      	ldr	r3, [pc, #156]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	4a26      	ldr	r2, [pc, #152]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d86:	4b24      	ldr	r3, [pc, #144]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d8a:	4b24      	ldr	r3, [pc, #144]	; (8008e1c <RCCEx_PLL3_Config+0x160>)
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	69d2      	ldr	r2, [r2, #28]
 8008d92:	00d2      	lsls	r2, r2, #3
 8008d94:	4920      	ldr	r1, [pc, #128]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d9a:	4b1f      	ldr	r3, [pc, #124]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	4a1e      	ldr	r2, [pc, #120]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008da4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d106      	bne.n	8008dba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008dac:	4b1a      	ldr	r3, [pc, #104]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db0:	4a19      	ldr	r2, [pc, #100]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008db2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008db6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008db8:	e00f      	b.n	8008dda <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d106      	bne.n	8008dce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008dc0:	4b15      	ldr	r3, [pc, #84]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc4:	4a14      	ldr	r2, [pc, #80]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008dc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008dca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008dcc:	e005      	b.n	8008dda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008dce:	4b12      	ldr	r3, [pc, #72]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	4a11      	ldr	r2, [pc, #68]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008dd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008dda:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a0e      	ldr	r2, [pc, #56]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008de6:	f7f9 f871 	bl	8001ecc <HAL_GetTick>
 8008dea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008dec:	e008      	b.n	8008e00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008dee:	f7f9 f86d 	bl	8001ecc <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d901      	bls.n	8008e00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e006      	b.n	8008e0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e00:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0f0      	beq.n	8008dee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	58024400 	.word	0x58024400
 8008e1c:	ffff0007 	.word	0xffff0007

08008e20 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e0eb      	b.n	800900e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a75      	ldr	r2, [pc, #468]	; (8009018 <HAL_SPI_Init+0x1f8>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d00f      	beq.n	8008e66 <HAL_SPI_Init+0x46>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a74      	ldr	r2, [pc, #464]	; (800901c <HAL_SPI_Init+0x1fc>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d00a      	beq.n	8008e66 <HAL_SPI_Init+0x46>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a72      	ldr	r2, [pc, #456]	; (8009020 <HAL_SPI_Init+0x200>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d005      	beq.n	8008e66 <HAL_SPI_Init+0x46>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	2b0f      	cmp	r3, #15
 8008e60:	d901      	bls.n	8008e66 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e0d3      	b.n	800900e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f8dc 	bl	8009024 <SPI_GetPacketSize>
 8008e6c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a69      	ldr	r2, [pc, #420]	; (8009018 <HAL_SPI_Init+0x1f8>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d00c      	beq.n	8008e92 <HAL_SPI_Init+0x72>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a67      	ldr	r2, [pc, #412]	; (800901c <HAL_SPI_Init+0x1fc>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d007      	beq.n	8008e92 <HAL_SPI_Init+0x72>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a66      	ldr	r2, [pc, #408]	; (8009020 <HAL_SPI_Init+0x200>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d002      	beq.n	8008e92 <HAL_SPI_Init+0x72>
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2b08      	cmp	r3, #8
 8008e90:	d811      	bhi.n	8008eb6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e96:	4a60      	ldr	r2, [pc, #384]	; (8009018 <HAL_SPI_Init+0x1f8>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d009      	beq.n	8008eb0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a5e      	ldr	r2, [pc, #376]	; (800901c <HAL_SPI_Init+0x1fc>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d004      	beq.n	8008eb0 <HAL_SPI_Init+0x90>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a5d      	ldr	r2, [pc, #372]	; (8009020 <HAL_SPI_Init+0x200>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d104      	bne.n	8008eba <HAL_SPI_Init+0x9a>
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2b10      	cmp	r3, #16
 8008eb4:	d901      	bls.n	8008eba <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e0a9      	b.n	800900e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d106      	bne.n	8008ed4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7f8 f912 	bl	80010f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f022 0201 	bic.w	r2, r2, #1
 8008eea:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ef4:	d119      	bne.n	8008f2a <HAL_SPI_Init+0x10a>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008efe:	d103      	bne.n	8008f08 <HAL_SPI_Init+0xe8>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d008      	beq.n	8008f1a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10c      	bne.n	8008f2a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f18:	d107      	bne.n	8008f2a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	69da      	ldr	r2, [r3, #28]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f32:	431a      	orrs	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	431a      	orrs	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f3c:	ea42 0103 	orr.w	r1, r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	431a      	orrs	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	431a      	orrs	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	431a      	orrs	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	431a      	orrs	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f8a:	ea42 0103 	orr.w	r1, r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	430a      	orrs	r2, r1
 8008f98:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d113      	bne.n	8008fca <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fb4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008fc8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f022 0201 	bic.w	r2, r2, #1
 8008fd8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00a      	beq.n	8008ffc <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	40013000 	.word	0x40013000
 800901c:	40003800 	.word	0x40003800
 8009020:	40003c00 	.word	0x40003c00

08009024 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009030:	095b      	lsrs	r3, r3, #5
 8009032:	3301      	adds	r3, #1
 8009034:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	3301      	adds	r3, #1
 800903c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	3307      	adds	r3, #7
 8009042:	08db      	lsrs	r3, r3, #3
 8009044:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	fb02 f303 	mul.w	r3, r2, r3
}
 800904e:	4618      	mov	r0, r3
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b082      	sub	sp, #8
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e049      	b.n	8009100 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009072:	b2db      	uxtb	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	d106      	bne.n	8009086 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7f8 fbc3 	bl	800180c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2202      	movs	r2, #2
 800908a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3304      	adds	r3, #4
 8009096:	4619      	mov	r1, r3
 8009098:	4610      	mov	r0, r2
 800909a:	f000 f945 	bl	8009328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800911a:	2b01      	cmp	r3, #1
 800911c:	d101      	bne.n	8009122 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800911e:	2302      	movs	r3, #2
 8009120:	e0fd      	b.n	800931e <HAL_TIM_PWM_ConfigChannel+0x216>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2b14      	cmp	r3, #20
 800912e:	f200 80f0 	bhi.w	8009312 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009132:	a201      	add	r2, pc, #4	; (adr r2, 8009138 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009138:	0800918d 	.word	0x0800918d
 800913c:	08009313 	.word	0x08009313
 8009140:	08009313 	.word	0x08009313
 8009144:	08009313 	.word	0x08009313
 8009148:	080091cd 	.word	0x080091cd
 800914c:	08009313 	.word	0x08009313
 8009150:	08009313 	.word	0x08009313
 8009154:	08009313 	.word	0x08009313
 8009158:	0800920f 	.word	0x0800920f
 800915c:	08009313 	.word	0x08009313
 8009160:	08009313 	.word	0x08009313
 8009164:	08009313 	.word	0x08009313
 8009168:	0800924f 	.word	0x0800924f
 800916c:	08009313 	.word	0x08009313
 8009170:	08009313 	.word	0x08009313
 8009174:	08009313 	.word	0x08009313
 8009178:	08009291 	.word	0x08009291
 800917c:	08009313 	.word	0x08009313
 8009180:	08009313 	.word	0x08009313
 8009184:	08009313 	.word	0x08009313
 8009188:	080092d1 	.word	0x080092d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68b9      	ldr	r1, [r7, #8]
 8009192:	4618      	mov	r0, r3
 8009194:	f000 f962 	bl	800945c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	699a      	ldr	r2, [r3, #24]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0208 	orr.w	r2, r2, #8
 80091a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	699a      	ldr	r2, [r3, #24]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0204 	bic.w	r2, r2, #4
 80091b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6999      	ldr	r1, [r3, #24]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	691a      	ldr	r2, [r3, #16]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	430a      	orrs	r2, r1
 80091c8:	619a      	str	r2, [r3, #24]
      break;
 80091ca:	e0a3      	b.n	8009314 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68b9      	ldr	r1, [r7, #8]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 f9d2 	bl	800957c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	699a      	ldr	r2, [r3, #24]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	699a      	ldr	r2, [r3, #24]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6999      	ldr	r1, [r3, #24]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	021a      	lsls	r2, r3, #8
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	430a      	orrs	r2, r1
 800920a:	619a      	str	r2, [r3, #24]
      break;
 800920c:	e082      	b.n	8009314 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68b9      	ldr	r1, [r7, #8]
 8009214:	4618      	mov	r0, r3
 8009216:	f000 fa3b 	bl	8009690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	69da      	ldr	r2, [r3, #28]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f042 0208 	orr.w	r2, r2, #8
 8009228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69da      	ldr	r2, [r3, #28]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f022 0204 	bic.w	r2, r2, #4
 8009238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	69d9      	ldr	r1, [r3, #28]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	691a      	ldr	r2, [r3, #16]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	430a      	orrs	r2, r1
 800924a:	61da      	str	r2, [r3, #28]
      break;
 800924c:	e062      	b.n	8009314 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68b9      	ldr	r1, [r7, #8]
 8009254:	4618      	mov	r0, r3
 8009256:	f000 faa1 	bl	800979c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	69da      	ldr	r2, [r3, #28]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	69da      	ldr	r2, [r3, #28]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	69d9      	ldr	r1, [r3, #28]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	021a      	lsls	r2, r3, #8
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	430a      	orrs	r2, r1
 800928c:	61da      	str	r2, [r3, #28]
      break;
 800928e:	e041      	b.n	8009314 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68b9      	ldr	r1, [r7, #8]
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fae8 	bl	800986c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f042 0208 	orr.w	r2, r2, #8
 80092aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 0204 	bic.w	r2, r2, #4
 80092ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	691a      	ldr	r2, [r3, #16]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	430a      	orrs	r2, r1
 80092cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80092ce:	e021      	b.n	8009314 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68b9      	ldr	r1, [r7, #8]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 fb2a 	bl	8009930 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	021a      	lsls	r2, r3, #8
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009310:	e000      	b.n	8009314 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009312:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop

08009328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a40      	ldr	r2, [pc, #256]	; (800943c <TIM_Base_SetConfig+0x114>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d013      	beq.n	8009368 <TIM_Base_SetConfig+0x40>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009346:	d00f      	beq.n	8009368 <TIM_Base_SetConfig+0x40>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a3d      	ldr	r2, [pc, #244]	; (8009440 <TIM_Base_SetConfig+0x118>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d00b      	beq.n	8009368 <TIM_Base_SetConfig+0x40>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a3c      	ldr	r2, [pc, #240]	; (8009444 <TIM_Base_SetConfig+0x11c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d007      	beq.n	8009368 <TIM_Base_SetConfig+0x40>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a3b      	ldr	r2, [pc, #236]	; (8009448 <TIM_Base_SetConfig+0x120>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d003      	beq.n	8009368 <TIM_Base_SetConfig+0x40>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a3a      	ldr	r2, [pc, #232]	; (800944c <TIM_Base_SetConfig+0x124>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d108      	bne.n	800937a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	4313      	orrs	r3, r2
 8009378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a2f      	ldr	r2, [pc, #188]	; (800943c <TIM_Base_SetConfig+0x114>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d01f      	beq.n	80093c2 <TIM_Base_SetConfig+0x9a>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009388:	d01b      	beq.n	80093c2 <TIM_Base_SetConfig+0x9a>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a2c      	ldr	r2, [pc, #176]	; (8009440 <TIM_Base_SetConfig+0x118>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d017      	beq.n	80093c2 <TIM_Base_SetConfig+0x9a>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a2b      	ldr	r2, [pc, #172]	; (8009444 <TIM_Base_SetConfig+0x11c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d013      	beq.n	80093c2 <TIM_Base_SetConfig+0x9a>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a2a      	ldr	r2, [pc, #168]	; (8009448 <TIM_Base_SetConfig+0x120>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d00f      	beq.n	80093c2 <TIM_Base_SetConfig+0x9a>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a29      	ldr	r2, [pc, #164]	; (800944c <TIM_Base_SetConfig+0x124>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d00b      	beq.n	80093c2 <TIM_Base_SetConfig+0x9a>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a28      	ldr	r2, [pc, #160]	; (8009450 <TIM_Base_SetConfig+0x128>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d007      	beq.n	80093c2 <TIM_Base_SetConfig+0x9a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a27      	ldr	r2, [pc, #156]	; (8009454 <TIM_Base_SetConfig+0x12c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d003      	beq.n	80093c2 <TIM_Base_SetConfig+0x9a>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a26      	ldr	r2, [pc, #152]	; (8009458 <TIM_Base_SetConfig+0x130>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d108      	bne.n	80093d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	689a      	ldr	r2, [r3, #8]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a10      	ldr	r2, [pc, #64]	; (800943c <TIM_Base_SetConfig+0x114>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00f      	beq.n	8009420 <TIM_Base_SetConfig+0xf8>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a12      	ldr	r2, [pc, #72]	; (800944c <TIM_Base_SetConfig+0x124>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d00b      	beq.n	8009420 <TIM_Base_SetConfig+0xf8>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a11      	ldr	r2, [pc, #68]	; (8009450 <TIM_Base_SetConfig+0x128>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d007      	beq.n	8009420 <TIM_Base_SetConfig+0xf8>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a10      	ldr	r2, [pc, #64]	; (8009454 <TIM_Base_SetConfig+0x12c>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d003      	beq.n	8009420 <TIM_Base_SetConfig+0xf8>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a0f      	ldr	r2, [pc, #60]	; (8009458 <TIM_Base_SetConfig+0x130>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d103      	bne.n	8009428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	691a      	ldr	r2, [r3, #16]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	615a      	str	r2, [r3, #20]
}
 800942e:	bf00      	nop
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	40010000 	.word	0x40010000
 8009440:	40000400 	.word	0x40000400
 8009444:	40000800 	.word	0x40000800
 8009448:	40000c00 	.word	0x40000c00
 800944c:	40010400 	.word	0x40010400
 8009450:	40014000 	.word	0x40014000
 8009454:	40014400 	.word	0x40014400
 8009458:	40014800 	.word	0x40014800

0800945c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800945c:	b480      	push	{r7}
 800945e:	b087      	sub	sp, #28
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	f023 0201 	bic.w	r2, r3, #1
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4b37      	ldr	r3, [pc, #220]	; (8009564 <TIM_OC1_SetConfig+0x108>)
 8009488:	4013      	ands	r3, r2
 800948a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f023 0303 	bic.w	r3, r3, #3
 8009492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	4313      	orrs	r3, r2
 800949c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f023 0302 	bic.w	r3, r3, #2
 80094a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a2d      	ldr	r2, [pc, #180]	; (8009568 <TIM_OC1_SetConfig+0x10c>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d00f      	beq.n	80094d8 <TIM_OC1_SetConfig+0x7c>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a2c      	ldr	r2, [pc, #176]	; (800956c <TIM_OC1_SetConfig+0x110>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d00b      	beq.n	80094d8 <TIM_OC1_SetConfig+0x7c>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a2b      	ldr	r2, [pc, #172]	; (8009570 <TIM_OC1_SetConfig+0x114>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d007      	beq.n	80094d8 <TIM_OC1_SetConfig+0x7c>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a2a      	ldr	r2, [pc, #168]	; (8009574 <TIM_OC1_SetConfig+0x118>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d003      	beq.n	80094d8 <TIM_OC1_SetConfig+0x7c>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a29      	ldr	r2, [pc, #164]	; (8009578 <TIM_OC1_SetConfig+0x11c>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d10c      	bne.n	80094f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f023 0308 	bic.w	r3, r3, #8
 80094de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	697a      	ldr	r2, [r7, #20]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f023 0304 	bic.w	r3, r3, #4
 80094f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a1c      	ldr	r2, [pc, #112]	; (8009568 <TIM_OC1_SetConfig+0x10c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00f      	beq.n	800951a <TIM_OC1_SetConfig+0xbe>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a1b      	ldr	r2, [pc, #108]	; (800956c <TIM_OC1_SetConfig+0x110>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d00b      	beq.n	800951a <TIM_OC1_SetConfig+0xbe>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a1a      	ldr	r2, [pc, #104]	; (8009570 <TIM_OC1_SetConfig+0x114>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d007      	beq.n	800951a <TIM_OC1_SetConfig+0xbe>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a19      	ldr	r2, [pc, #100]	; (8009574 <TIM_OC1_SetConfig+0x118>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d003      	beq.n	800951a <TIM_OC1_SetConfig+0xbe>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a18      	ldr	r2, [pc, #96]	; (8009578 <TIM_OC1_SetConfig+0x11c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d111      	bne.n	800953e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	4313      	orrs	r3, r2
 8009532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	4313      	orrs	r3, r2
 800953c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	621a      	str	r2, [r3, #32]
}
 8009558:	bf00      	nop
 800955a:	371c      	adds	r7, #28
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	fffeff8f 	.word	0xfffeff8f
 8009568:	40010000 	.word	0x40010000
 800956c:	40010400 	.word	0x40010400
 8009570:	40014000 	.word	0x40014000
 8009574:	40014400 	.word	0x40014400
 8009578:	40014800 	.word	0x40014800

0800957c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	f023 0210 	bic.w	r2, r3, #16
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	4b34      	ldr	r3, [pc, #208]	; (8009678 <TIM_OC2_SetConfig+0xfc>)
 80095a8:	4013      	ands	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	021b      	lsls	r3, r3, #8
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	f023 0320 	bic.w	r3, r3, #32
 80095c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	011b      	lsls	r3, r3, #4
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a29      	ldr	r2, [pc, #164]	; (800967c <TIM_OC2_SetConfig+0x100>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d003      	beq.n	80095e4 <TIM_OC2_SetConfig+0x68>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a28      	ldr	r2, [pc, #160]	; (8009680 <TIM_OC2_SetConfig+0x104>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d10d      	bne.n	8009600 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	011b      	lsls	r3, r3, #4
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a1e      	ldr	r2, [pc, #120]	; (800967c <TIM_OC2_SetConfig+0x100>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d00f      	beq.n	8009628 <TIM_OC2_SetConfig+0xac>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a1d      	ldr	r2, [pc, #116]	; (8009680 <TIM_OC2_SetConfig+0x104>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d00b      	beq.n	8009628 <TIM_OC2_SetConfig+0xac>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a1c      	ldr	r2, [pc, #112]	; (8009684 <TIM_OC2_SetConfig+0x108>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d007      	beq.n	8009628 <TIM_OC2_SetConfig+0xac>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a1b      	ldr	r2, [pc, #108]	; (8009688 <TIM_OC2_SetConfig+0x10c>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d003      	beq.n	8009628 <TIM_OC2_SetConfig+0xac>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a1a      	ldr	r2, [pc, #104]	; (800968c <TIM_OC2_SetConfig+0x110>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d113      	bne.n	8009650 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800962e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	695b      	ldr	r3, [r3, #20]
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	4313      	orrs	r3, r2
 800964e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	621a      	str	r2, [r3, #32]
}
 800966a:	bf00      	nop
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	feff8fff 	.word	0xfeff8fff
 800967c:	40010000 	.word	0x40010000
 8009680:	40010400 	.word	0x40010400
 8009684:	40014000 	.word	0x40014000
 8009688:	40014400 	.word	0x40014400
 800968c:	40014800 	.word	0x40014800

08009690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009690:	b480      	push	{r7}
 8009692:	b087      	sub	sp, #28
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f023 0303 	bic.w	r3, r3, #3
 80096c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	021b      	lsls	r3, r3, #8
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a27      	ldr	r2, [pc, #156]	; (8009788 <TIM_OC3_SetConfig+0xf8>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d003      	beq.n	80096f6 <TIM_OC3_SetConfig+0x66>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a26      	ldr	r2, [pc, #152]	; (800978c <TIM_OC3_SetConfig+0xfc>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d10d      	bne.n	8009712 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	021b      	lsls	r3, r3, #8
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	4313      	orrs	r3, r2
 8009708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a1c      	ldr	r2, [pc, #112]	; (8009788 <TIM_OC3_SetConfig+0xf8>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00f      	beq.n	800973a <TIM_OC3_SetConfig+0xaa>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a1b      	ldr	r2, [pc, #108]	; (800978c <TIM_OC3_SetConfig+0xfc>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d00b      	beq.n	800973a <TIM_OC3_SetConfig+0xaa>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a1a      	ldr	r2, [pc, #104]	; (8009790 <TIM_OC3_SetConfig+0x100>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d007      	beq.n	800973a <TIM_OC3_SetConfig+0xaa>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a19      	ldr	r2, [pc, #100]	; (8009794 <TIM_OC3_SetConfig+0x104>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d003      	beq.n	800973a <TIM_OC3_SetConfig+0xaa>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a18      	ldr	r2, [pc, #96]	; (8009798 <TIM_OC3_SetConfig+0x108>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d113      	bne.n	8009762 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	011b      	lsls	r3, r3, #4
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	4313      	orrs	r3, r2
 8009754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	4313      	orrs	r3, r2
 8009760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	621a      	str	r2, [r3, #32]
}
 800977c:	bf00      	nop
 800977e:	371c      	adds	r7, #28
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	40010000 	.word	0x40010000
 800978c:	40010400 	.word	0x40010400
 8009790:	40014000 	.word	0x40014000
 8009794:	40014400 	.word	0x40014400
 8009798:	40014800 	.word	0x40014800

0800979c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	021b      	lsls	r3, r3, #8
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	4313      	orrs	r3, r2
 80097de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	031b      	lsls	r3, r3, #12
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a18      	ldr	r2, [pc, #96]	; (8009858 <TIM_OC4_SetConfig+0xbc>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d00f      	beq.n	800981c <TIM_OC4_SetConfig+0x80>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a17      	ldr	r2, [pc, #92]	; (800985c <TIM_OC4_SetConfig+0xc0>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d00b      	beq.n	800981c <TIM_OC4_SetConfig+0x80>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a16      	ldr	r2, [pc, #88]	; (8009860 <TIM_OC4_SetConfig+0xc4>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d007      	beq.n	800981c <TIM_OC4_SetConfig+0x80>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a15      	ldr	r2, [pc, #84]	; (8009864 <TIM_OC4_SetConfig+0xc8>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d003      	beq.n	800981c <TIM_OC4_SetConfig+0x80>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a14      	ldr	r2, [pc, #80]	; (8009868 <TIM_OC4_SetConfig+0xcc>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d109      	bne.n	8009830 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009822:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	019b      	lsls	r3, r3, #6
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	4313      	orrs	r3, r2
 800982e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	621a      	str	r2, [r3, #32]
}
 800984a:	bf00      	nop
 800984c:	371c      	adds	r7, #28
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	40010000 	.word	0x40010000
 800985c:	40010400 	.word	0x40010400
 8009860:	40014000 	.word	0x40014000
 8009864:	40014400 	.word	0x40014400
 8009868:	40014800 	.word	0x40014800

0800986c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80098ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	041b      	lsls	r3, r3, #16
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a17      	ldr	r2, [pc, #92]	; (800991c <TIM_OC5_SetConfig+0xb0>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d00f      	beq.n	80098e2 <TIM_OC5_SetConfig+0x76>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a16      	ldr	r2, [pc, #88]	; (8009920 <TIM_OC5_SetConfig+0xb4>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d00b      	beq.n	80098e2 <TIM_OC5_SetConfig+0x76>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a15      	ldr	r2, [pc, #84]	; (8009924 <TIM_OC5_SetConfig+0xb8>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d007      	beq.n	80098e2 <TIM_OC5_SetConfig+0x76>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a14      	ldr	r2, [pc, #80]	; (8009928 <TIM_OC5_SetConfig+0xbc>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d003      	beq.n	80098e2 <TIM_OC5_SetConfig+0x76>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a13      	ldr	r2, [pc, #76]	; (800992c <TIM_OC5_SetConfig+0xc0>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d109      	bne.n	80098f6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	021b      	lsls	r3, r3, #8
 80098f0:	697a      	ldr	r2, [r7, #20]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	685a      	ldr	r2, [r3, #4]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	621a      	str	r2, [r3, #32]
}
 8009910:	bf00      	nop
 8009912:	371c      	adds	r7, #28
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	40010000 	.word	0x40010000
 8009920:	40010400 	.word	0x40010400
 8009924:	40014000 	.word	0x40014000
 8009928:	40014400 	.word	0x40014400
 800992c:	40014800 	.word	0x40014800

08009930 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009930:	b480      	push	{r7}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800995e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	021b      	lsls	r3, r3, #8
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	4313      	orrs	r3, r2
 800996a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	051b      	lsls	r3, r3, #20
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	4313      	orrs	r3, r2
 800997e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a18      	ldr	r2, [pc, #96]	; (80099e4 <TIM_OC6_SetConfig+0xb4>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d00f      	beq.n	80099a8 <TIM_OC6_SetConfig+0x78>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a17      	ldr	r2, [pc, #92]	; (80099e8 <TIM_OC6_SetConfig+0xb8>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d00b      	beq.n	80099a8 <TIM_OC6_SetConfig+0x78>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a16      	ldr	r2, [pc, #88]	; (80099ec <TIM_OC6_SetConfig+0xbc>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d007      	beq.n	80099a8 <TIM_OC6_SetConfig+0x78>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a15      	ldr	r2, [pc, #84]	; (80099f0 <TIM_OC6_SetConfig+0xc0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d003      	beq.n	80099a8 <TIM_OC6_SetConfig+0x78>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a14      	ldr	r2, [pc, #80]	; (80099f4 <TIM_OC6_SetConfig+0xc4>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d109      	bne.n	80099bc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80099ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	029b      	lsls	r3, r3, #10
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	621a      	str	r2, [r3, #32]
}
 80099d6:	bf00      	nop
 80099d8:	371c      	adds	r7, #28
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	40010000 	.word	0x40010000
 80099e8:	40010400 	.word	0x40010400
 80099ec:	40014000 	.word	0x40014000
 80099f0:	40014400 	.word	0x40014400
 80099f4:	40014800 	.word	0x40014800

080099f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d101      	bne.n	8009a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	e068      	b.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a2e      	ldr	r2, [pc, #184]	; (8009af0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d004      	beq.n	8009a44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a2d      	ldr	r2, [pc, #180]	; (8009af4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d108      	bne.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a1e      	ldr	r2, [pc, #120]	; (8009af0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d01d      	beq.n	8009ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a82:	d018      	beq.n	8009ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a1b      	ldr	r2, [pc, #108]	; (8009af8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d013      	beq.n	8009ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a1a      	ldr	r2, [pc, #104]	; (8009afc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d00e      	beq.n	8009ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a18      	ldr	r2, [pc, #96]	; (8009b00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d009      	beq.n	8009ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a13      	ldr	r2, [pc, #76]	; (8009af4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d004      	beq.n	8009ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a14      	ldr	r2, [pc, #80]	; (8009b04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d10c      	bne.n	8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	40010000 	.word	0x40010000
 8009af4:	40010400 	.word	0x40010400
 8009af8:	40000400 	.word	0x40000400
 8009afc:	40000800 	.word	0x40000800
 8009b00:	40000c00 	.word	0x40000c00
 8009b04:	40001800 	.word	0x40001800

08009b08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b12:	2300      	movs	r3, #0
 8009b14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d101      	bne.n	8009b24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b20:	2302      	movs	r3, #2
 8009b22:	e065      	b.n	8009bf0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	041b      	lsls	r3, r3, #16
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a16      	ldr	r2, [pc, #88]	; (8009bfc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d004      	beq.n	8009bb2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a14      	ldr	r2, [pc, #80]	; (8009c00 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d115      	bne.n	8009bde <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbc:	051b      	lsls	r3, r3, #20
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	40010000 	.word	0x40010000
 8009c00:	40010400 	.word	0x40010400

08009c04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e042      	b.n	8009c9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d106      	bne.n	8009c2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7f7 ff69 	bl	8001b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2224      	movs	r2, #36	; 0x24
 8009c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f022 0201 	bic.w	r2, r2, #1
 8009c44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fb06 	bl	800a258 <UART_SetConfig>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d101      	bne.n	8009c56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e022      	b.n	8009c9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f001 f85a 	bl	800ad18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	689a      	ldr	r2, [r3, #8]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f042 0201 	orr.w	r2, r2, #1
 8009c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f001 f8e1 	bl	800ae5c <UART_CheckIdleState>
 8009c9a:	4603      	mov	r3, r0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009cc4:	69fa      	ldr	r2, [r7, #28]
 8009cc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8009cca:	4013      	ands	r3, r2
 8009ccc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d118      	bne.n	8009d06 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	f003 0320 	and.w	r3, r3, #32
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d013      	beq.n	8009d06 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	f003 0320 	and.w	r3, r3, #32
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d104      	bne.n	8009cf2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d009      	beq.n	8009d06 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 8282 	beq.w	800a200 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	4798      	blx	r3
      }
      return;
 8009d04:	e27c      	b.n	800a200 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 80ef 	beq.w	8009eec <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	4b73      	ldr	r3, [pc, #460]	; (8009ee0 <HAL_UART_IRQHandler+0x23c>)
 8009d12:	4013      	ands	r3, r2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d105      	bne.n	8009d24 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	4b72      	ldr	r3, [pc, #456]	; (8009ee4 <HAL_UART_IRQHandler+0x240>)
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 80e4 	beq.w	8009eec <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d010      	beq.n	8009d50 <HAL_UART_IRQHandler+0xac>
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00b      	beq.n	8009d50 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d46:	f043 0201 	orr.w	r2, r3, #1
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	f003 0302 	and.w	r3, r3, #2
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d010      	beq.n	8009d7c <HAL_UART_IRQHandler+0xd8>
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00b      	beq.n	8009d7c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2202      	movs	r2, #2
 8009d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d72:	f043 0204 	orr.w	r2, r3, #4
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	f003 0304 	and.w	r3, r3, #4
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d010      	beq.n	8009da8 <HAL_UART_IRQHandler+0x104>
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00b      	beq.n	8009da8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2204      	movs	r2, #4
 8009d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d9e:	f043 0202 	orr.w	r2, r3, #2
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	f003 0308 	and.w	r3, r3, #8
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d015      	beq.n	8009dde <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	f003 0320 	and.w	r3, r3, #32
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d104      	bne.n	8009dc6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009dbc:	697a      	ldr	r2, [r7, #20]
 8009dbe:	4b48      	ldr	r3, [pc, #288]	; (8009ee0 <HAL_UART_IRQHandler+0x23c>)
 8009dc0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00b      	beq.n	8009dde <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2208      	movs	r2, #8
 8009dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dd4:	f043 0208 	orr.w	r2, r3, #8
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d011      	beq.n	8009e0c <HAL_UART_IRQHandler+0x168>
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00c      	beq.n	8009e0c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e02:	f043 0220 	orr.w	r2, r3, #32
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 81f6 	beq.w	800a204 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	f003 0320 	and.w	r3, r3, #32
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d011      	beq.n	8009e46 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	f003 0320 	and.w	r3, r3, #32
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d104      	bne.n	8009e36 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d007      	beq.n	8009e46 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e4c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e58:	2b40      	cmp	r3, #64	; 0x40
 8009e5a:	d004      	beq.n	8009e66 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d031      	beq.n	8009eca <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f001 f8c4 	bl	800aff4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e76:	2b40      	cmp	r3, #64	; 0x40
 8009e78:	d123      	bne.n	8009ec2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	689a      	ldr	r2, [r3, #8]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e88:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d013      	beq.n	8009eba <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e96:	4a14      	ldr	r2, [pc, #80]	; (8009ee8 <HAL_UART_IRQHandler+0x244>)
 8009e98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7f8 ffda 	bl	8002e58 <HAL_DMA_Abort_IT>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d017      	beq.n	8009eda <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb8:	e00f      	b.n	8009eda <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f9b6 	bl	800a22c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec0:	e00b      	b.n	8009eda <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f9b2 	bl	800a22c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec8:	e007      	b.n	8009eda <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f9ae 	bl	800a22c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009ed8:	e194      	b.n	800a204 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eda:	bf00      	nop
    return;
 8009edc:	e192      	b.n	800a204 <HAL_UART_IRQHandler+0x560>
 8009ede:	bf00      	nop
 8009ee0:	10000001 	.word	0x10000001
 8009ee4:	04000120 	.word	0x04000120
 8009ee8:	0800b059 	.word	0x0800b059

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	f040 810f 	bne.w	800a114 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	f003 0310 	and.w	r3, r3, #16
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 8109 	beq.w	800a114 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	f003 0310 	and.w	r3, r3, #16
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 8103 	beq.w	800a114 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2210      	movs	r2, #16
 8009f14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f20:	2b40      	cmp	r3, #64	; 0x40
 8009f22:	f040 80bb 	bne.w	800a09c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a96      	ldr	r2, [pc, #600]	; (800a188 <HAL_UART_IRQHandler+0x4e4>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d059      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a94      	ldr	r2, [pc, #592]	; (800a18c <HAL_UART_IRQHandler+0x4e8>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d053      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a92      	ldr	r2, [pc, #584]	; (800a190 <HAL_UART_IRQHandler+0x4ec>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d04d      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a90      	ldr	r2, [pc, #576]	; (800a194 <HAL_UART_IRQHandler+0x4f0>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d047      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a8e      	ldr	r2, [pc, #568]	; (800a198 <HAL_UART_IRQHandler+0x4f4>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d041      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a8c      	ldr	r2, [pc, #560]	; (800a19c <HAL_UART_IRQHandler+0x4f8>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d03b      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a8a      	ldr	r2, [pc, #552]	; (800a1a0 <HAL_UART_IRQHandler+0x4fc>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d035      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a88      	ldr	r2, [pc, #544]	; (800a1a4 <HAL_UART_IRQHandler+0x500>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d02f      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a86      	ldr	r2, [pc, #536]	; (800a1a8 <HAL_UART_IRQHandler+0x504>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d029      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a84      	ldr	r2, [pc, #528]	; (800a1ac <HAL_UART_IRQHandler+0x508>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d023      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a82      	ldr	r2, [pc, #520]	; (800a1b0 <HAL_UART_IRQHandler+0x50c>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d01d      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a80      	ldr	r2, [pc, #512]	; (800a1b4 <HAL_UART_IRQHandler+0x510>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d017      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a7e      	ldr	r2, [pc, #504]	; (800a1b8 <HAL_UART_IRQHandler+0x514>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d011      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a7c      	ldr	r2, [pc, #496]	; (800a1bc <HAL_UART_IRQHandler+0x518>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d00b      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a7a      	ldr	r2, [pc, #488]	; (800a1c0 <HAL_UART_IRQHandler+0x51c>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d005      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x342>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a78      	ldr	r2, [pc, #480]	; (800a1c4 <HAL_UART_IRQHandler+0x520>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d105      	bne.n	8009ff2 <HAL_UART_IRQHandler+0x34e>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	e004      	b.n	8009ffc <HAL_UART_IRQHandler+0x358>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009ffe:	893b      	ldrh	r3, [r7, #8]
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 8101 	beq.w	800a208 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a00c:	893a      	ldrh	r2, [r7, #8]
 800a00e:	429a      	cmp	r2, r3
 800a010:	f080 80fa 	bcs.w	800a208 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	893a      	ldrh	r2, [r7, #8]
 800a018:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a020:	69db      	ldr	r3, [r3, #28]
 800a022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a026:	d02b      	beq.n	800a080 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a036:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f022 0201 	bic.w	r2, r2, #1
 800a046:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	689a      	ldr	r2, [r3, #8]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a056:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2220      	movs	r2, #32
 800a05c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 0210 	bic.w	r2, r2, #16
 800a074:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7f8 fbce 	bl	800281c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	b29b      	uxth	r3, r3
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 f8d3 	bl	800a240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a09a:	e0b5      	b.n	800a208 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 80a8 	beq.w	800a20c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800a0bc:	897b      	ldrh	r3, [r7, #10]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f000 80a4 	beq.w	800a20c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0d2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6899      	ldr	r1, [r3, #8]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	4b3a      	ldr	r3, [pc, #232]	; (800a1c8 <HAL_UART_IRQHandler+0x524>)
 800a0e0:	400b      	ands	r3, r1
 800a0e2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2220      	movs	r2, #32
 800a0e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f022 0210 	bic.w	r2, r2, #16
 800a106:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a108:	897b      	ldrh	r3, [r7, #10]
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f897 	bl	800a240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a112:	e07b      	b.n	800a20c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00d      	beq.n	800a13a <HAL_UART_IRQHandler+0x496>
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d008      	beq.n	800a13a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 ffc0 	bl	800b0b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a138:	e06b      	b.n	800a212 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a140:	2b00      	cmp	r3, #0
 800a142:	d012      	beq.n	800a16a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d104      	bne.n	800a158 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d008      	beq.n	800a16a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d057      	beq.n	800a210 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	4798      	blx	r3
    }
    return;
 800a168:	e052      	b.n	800a210 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a170:	2b00      	cmp	r3, #0
 800a172:	d02b      	beq.n	800a1cc <HAL_UART_IRQHandler+0x528>
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d026      	beq.n	800a1cc <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 ff80 	bl	800b084 <UART_EndTransmit_IT>
    return;
 800a184:	e045      	b.n	800a212 <HAL_UART_IRQHandler+0x56e>
 800a186:	bf00      	nop
 800a188:	40020010 	.word	0x40020010
 800a18c:	40020028 	.word	0x40020028
 800a190:	40020040 	.word	0x40020040
 800a194:	40020058 	.word	0x40020058
 800a198:	40020070 	.word	0x40020070
 800a19c:	40020088 	.word	0x40020088
 800a1a0:	400200a0 	.word	0x400200a0
 800a1a4:	400200b8 	.word	0x400200b8
 800a1a8:	40020410 	.word	0x40020410
 800a1ac:	40020428 	.word	0x40020428
 800a1b0:	40020440 	.word	0x40020440
 800a1b4:	40020458 	.word	0x40020458
 800a1b8:	40020470 	.word	0x40020470
 800a1bc:	40020488 	.word	0x40020488
 800a1c0:	400204a0 	.word	0x400204a0
 800a1c4:	400204b8 	.word	0x400204b8
 800a1c8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d008      	beq.n	800a1e8 <HAL_UART_IRQHandler+0x544>
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d003      	beq.n	800a1e8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 ff7d 	bl	800b0e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1e6:	e014      	b.n	800a212 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00f      	beq.n	800a212 <HAL_UART_IRQHandler+0x56e>
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	da0c      	bge.n	800a212 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 ff67 	bl	800b0cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1fe:	e008      	b.n	800a212 <HAL_UART_IRQHandler+0x56e>
      return;
 800a200:	bf00      	nop
 800a202:	e006      	b.n	800a212 <HAL_UART_IRQHandler+0x56e>
    return;
 800a204:	bf00      	nop
 800a206:	e004      	b.n	800a212 <HAL_UART_IRQHandler+0x56e>
      return;
 800a208:	bf00      	nop
 800a20a:	e002      	b.n	800a212 <HAL_UART_IRQHandler+0x56e>
      return;
 800a20c:	bf00      	nop
 800a20e:	e000      	b.n	800a212 <HAL_UART_IRQHandler+0x56e>
    return;
 800a210:	bf00      	nop
  }
}
 800a212:	3720      	adds	r7, #32
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	460b      	mov	r3, r1
 800a24a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a258:	b5b0      	push	{r4, r5, r7, lr}
 800a25a:	b08e      	sub	sp, #56	; 0x38
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	689a      	ldr	r2, [r3, #8]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	431a      	orrs	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	695b      	ldr	r3, [r3, #20]
 800a274:	431a      	orrs	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	69db      	ldr	r3, [r3, #28]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	4bbf      	ldr	r3, [pc, #764]	; (800a584 <UART_SetConfig+0x32c>)
 800a286:	4013      	ands	r3, r2
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	6812      	ldr	r2, [r2, #0]
 800a28c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a28e:	430b      	orrs	r3, r1
 800a290:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68da      	ldr	r2, [r3, #12]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4ab5      	ldr	r2, [pc, #724]	; (800a588 <UART_SetConfig+0x330>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d004      	beq.n	800a2c2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689a      	ldr	r2, [r3, #8]
 800a2c8:	4bb0      	ldr	r3, [pc, #704]	; (800a58c <UART_SetConfig+0x334>)
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	6812      	ldr	r2, [r2, #0]
 800a2d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a2d2:	430b      	orrs	r3, r1
 800a2d4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2dc:	f023 010f 	bic.w	r1, r3, #15
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4aa7      	ldr	r2, [pc, #668]	; (800a590 <UART_SetConfig+0x338>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d176      	bne.n	800a3e4 <UART_SetConfig+0x18c>
 800a2f6:	4ba7      	ldr	r3, [pc, #668]	; (800a594 <UART_SetConfig+0x33c>)
 800a2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2fe:	2b28      	cmp	r3, #40	; 0x28
 800a300:	d86c      	bhi.n	800a3dc <UART_SetConfig+0x184>
 800a302:	a201      	add	r2, pc, #4	; (adr r2, 800a308 <UART_SetConfig+0xb0>)
 800a304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a308:	0800a3ad 	.word	0x0800a3ad
 800a30c:	0800a3dd 	.word	0x0800a3dd
 800a310:	0800a3dd 	.word	0x0800a3dd
 800a314:	0800a3dd 	.word	0x0800a3dd
 800a318:	0800a3dd 	.word	0x0800a3dd
 800a31c:	0800a3dd 	.word	0x0800a3dd
 800a320:	0800a3dd 	.word	0x0800a3dd
 800a324:	0800a3dd 	.word	0x0800a3dd
 800a328:	0800a3b5 	.word	0x0800a3b5
 800a32c:	0800a3dd 	.word	0x0800a3dd
 800a330:	0800a3dd 	.word	0x0800a3dd
 800a334:	0800a3dd 	.word	0x0800a3dd
 800a338:	0800a3dd 	.word	0x0800a3dd
 800a33c:	0800a3dd 	.word	0x0800a3dd
 800a340:	0800a3dd 	.word	0x0800a3dd
 800a344:	0800a3dd 	.word	0x0800a3dd
 800a348:	0800a3bd 	.word	0x0800a3bd
 800a34c:	0800a3dd 	.word	0x0800a3dd
 800a350:	0800a3dd 	.word	0x0800a3dd
 800a354:	0800a3dd 	.word	0x0800a3dd
 800a358:	0800a3dd 	.word	0x0800a3dd
 800a35c:	0800a3dd 	.word	0x0800a3dd
 800a360:	0800a3dd 	.word	0x0800a3dd
 800a364:	0800a3dd 	.word	0x0800a3dd
 800a368:	0800a3c5 	.word	0x0800a3c5
 800a36c:	0800a3dd 	.word	0x0800a3dd
 800a370:	0800a3dd 	.word	0x0800a3dd
 800a374:	0800a3dd 	.word	0x0800a3dd
 800a378:	0800a3dd 	.word	0x0800a3dd
 800a37c:	0800a3dd 	.word	0x0800a3dd
 800a380:	0800a3dd 	.word	0x0800a3dd
 800a384:	0800a3dd 	.word	0x0800a3dd
 800a388:	0800a3cd 	.word	0x0800a3cd
 800a38c:	0800a3dd 	.word	0x0800a3dd
 800a390:	0800a3dd 	.word	0x0800a3dd
 800a394:	0800a3dd 	.word	0x0800a3dd
 800a398:	0800a3dd 	.word	0x0800a3dd
 800a39c:	0800a3dd 	.word	0x0800a3dd
 800a3a0:	0800a3dd 	.word	0x0800a3dd
 800a3a4:	0800a3dd 	.word	0x0800a3dd
 800a3a8:	0800a3d5 	.word	0x0800a3d5
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3b2:	e222      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a3b4:	2304      	movs	r3, #4
 800a3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ba:	e21e      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a3bc:	2308      	movs	r3, #8
 800a3be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3c2:	e21a      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a3c4:	2310      	movs	r3, #16
 800a3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ca:	e216      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a3cc:	2320      	movs	r3, #32
 800a3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3d2:	e212      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a3d4:	2340      	movs	r3, #64	; 0x40
 800a3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3da:	e20e      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a3dc:	2380      	movs	r3, #128	; 0x80
 800a3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3e2:	e20a      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a6b      	ldr	r2, [pc, #428]	; (800a598 <UART_SetConfig+0x340>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d130      	bne.n	800a450 <UART_SetConfig+0x1f8>
 800a3ee:	4b69      	ldr	r3, [pc, #420]	; (800a594 <UART_SetConfig+0x33c>)
 800a3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f2:	f003 0307 	and.w	r3, r3, #7
 800a3f6:	2b05      	cmp	r3, #5
 800a3f8:	d826      	bhi.n	800a448 <UART_SetConfig+0x1f0>
 800a3fa:	a201      	add	r2, pc, #4	; (adr r2, 800a400 <UART_SetConfig+0x1a8>)
 800a3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a400:	0800a419 	.word	0x0800a419
 800a404:	0800a421 	.word	0x0800a421
 800a408:	0800a429 	.word	0x0800a429
 800a40c:	0800a431 	.word	0x0800a431
 800a410:	0800a439 	.word	0x0800a439
 800a414:	0800a441 	.word	0x0800a441
 800a418:	2300      	movs	r3, #0
 800a41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a41e:	e1ec      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a420:	2304      	movs	r3, #4
 800a422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a426:	e1e8      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a428:	2308      	movs	r3, #8
 800a42a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a42e:	e1e4      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a430:	2310      	movs	r3, #16
 800a432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a436:	e1e0      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a438:	2320      	movs	r3, #32
 800a43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a43e:	e1dc      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a440:	2340      	movs	r3, #64	; 0x40
 800a442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a446:	e1d8      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a448:	2380      	movs	r3, #128	; 0x80
 800a44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a44e:	e1d4      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a51      	ldr	r2, [pc, #324]	; (800a59c <UART_SetConfig+0x344>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d130      	bne.n	800a4bc <UART_SetConfig+0x264>
 800a45a:	4b4e      	ldr	r3, [pc, #312]	; (800a594 <UART_SetConfig+0x33c>)
 800a45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	2b05      	cmp	r3, #5
 800a464:	d826      	bhi.n	800a4b4 <UART_SetConfig+0x25c>
 800a466:	a201      	add	r2, pc, #4	; (adr r2, 800a46c <UART_SetConfig+0x214>)
 800a468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46c:	0800a485 	.word	0x0800a485
 800a470:	0800a48d 	.word	0x0800a48d
 800a474:	0800a495 	.word	0x0800a495
 800a478:	0800a49d 	.word	0x0800a49d
 800a47c:	0800a4a5 	.word	0x0800a4a5
 800a480:	0800a4ad 	.word	0x0800a4ad
 800a484:	2300      	movs	r3, #0
 800a486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48a:	e1b6      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a48c:	2304      	movs	r3, #4
 800a48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a492:	e1b2      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a494:	2308      	movs	r3, #8
 800a496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49a:	e1ae      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a49c:	2310      	movs	r3, #16
 800a49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a2:	e1aa      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a4a4:	2320      	movs	r3, #32
 800a4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4aa:	e1a6      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a4ac:	2340      	movs	r3, #64	; 0x40
 800a4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b2:	e1a2      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a4b4:	2380      	movs	r3, #128	; 0x80
 800a4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ba:	e19e      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a37      	ldr	r2, [pc, #220]	; (800a5a0 <UART_SetConfig+0x348>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d130      	bne.n	800a528 <UART_SetConfig+0x2d0>
 800a4c6:	4b33      	ldr	r3, [pc, #204]	; (800a594 <UART_SetConfig+0x33c>)
 800a4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ca:	f003 0307 	and.w	r3, r3, #7
 800a4ce:	2b05      	cmp	r3, #5
 800a4d0:	d826      	bhi.n	800a520 <UART_SetConfig+0x2c8>
 800a4d2:	a201      	add	r2, pc, #4	; (adr r2, 800a4d8 <UART_SetConfig+0x280>)
 800a4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d8:	0800a4f1 	.word	0x0800a4f1
 800a4dc:	0800a4f9 	.word	0x0800a4f9
 800a4e0:	0800a501 	.word	0x0800a501
 800a4e4:	0800a509 	.word	0x0800a509
 800a4e8:	0800a511 	.word	0x0800a511
 800a4ec:	0800a519 	.word	0x0800a519
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4f6:	e180      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a4f8:	2304      	movs	r3, #4
 800a4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fe:	e17c      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a500:	2308      	movs	r3, #8
 800a502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a506:	e178      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a508:	2310      	movs	r3, #16
 800a50a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a50e:	e174      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a510:	2320      	movs	r3, #32
 800a512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a516:	e170      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a518:	2340      	movs	r3, #64	; 0x40
 800a51a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a51e:	e16c      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a520:	2380      	movs	r3, #128	; 0x80
 800a522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a526:	e168      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a1d      	ldr	r2, [pc, #116]	; (800a5a4 <UART_SetConfig+0x34c>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d142      	bne.n	800a5b8 <UART_SetConfig+0x360>
 800a532:	4b18      	ldr	r3, [pc, #96]	; (800a594 <UART_SetConfig+0x33c>)
 800a534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	2b05      	cmp	r3, #5
 800a53c:	d838      	bhi.n	800a5b0 <UART_SetConfig+0x358>
 800a53e:	a201      	add	r2, pc, #4	; (adr r2, 800a544 <UART_SetConfig+0x2ec>)
 800a540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a544:	0800a55d 	.word	0x0800a55d
 800a548:	0800a565 	.word	0x0800a565
 800a54c:	0800a56d 	.word	0x0800a56d
 800a550:	0800a575 	.word	0x0800a575
 800a554:	0800a57d 	.word	0x0800a57d
 800a558:	0800a5a9 	.word	0x0800a5a9
 800a55c:	2300      	movs	r3, #0
 800a55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a562:	e14a      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a564:	2304      	movs	r3, #4
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56a:	e146      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a56c:	2308      	movs	r3, #8
 800a56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a572:	e142      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a574:	2310      	movs	r3, #16
 800a576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57a:	e13e      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a57c:	2320      	movs	r3, #32
 800a57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a582:	e13a      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a584:	cfff69f3 	.word	0xcfff69f3
 800a588:	58000c00 	.word	0x58000c00
 800a58c:	11fff4ff 	.word	0x11fff4ff
 800a590:	40011000 	.word	0x40011000
 800a594:	58024400 	.word	0x58024400
 800a598:	40004400 	.word	0x40004400
 800a59c:	40004800 	.word	0x40004800
 800a5a0:	40004c00 	.word	0x40004c00
 800a5a4:	40005000 	.word	0x40005000
 800a5a8:	2340      	movs	r3, #64	; 0x40
 800a5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ae:	e124      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a5b0:	2380      	movs	r3, #128	; 0x80
 800a5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b6:	e120      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4acc      	ldr	r2, [pc, #816]	; (800a8f0 <UART_SetConfig+0x698>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d176      	bne.n	800a6b0 <UART_SetConfig+0x458>
 800a5c2:	4bcc      	ldr	r3, [pc, #816]	; (800a8f4 <UART_SetConfig+0x69c>)
 800a5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5ca:	2b28      	cmp	r3, #40	; 0x28
 800a5cc:	d86c      	bhi.n	800a6a8 <UART_SetConfig+0x450>
 800a5ce:	a201      	add	r2, pc, #4	; (adr r2, 800a5d4 <UART_SetConfig+0x37c>)
 800a5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d4:	0800a679 	.word	0x0800a679
 800a5d8:	0800a6a9 	.word	0x0800a6a9
 800a5dc:	0800a6a9 	.word	0x0800a6a9
 800a5e0:	0800a6a9 	.word	0x0800a6a9
 800a5e4:	0800a6a9 	.word	0x0800a6a9
 800a5e8:	0800a6a9 	.word	0x0800a6a9
 800a5ec:	0800a6a9 	.word	0x0800a6a9
 800a5f0:	0800a6a9 	.word	0x0800a6a9
 800a5f4:	0800a681 	.word	0x0800a681
 800a5f8:	0800a6a9 	.word	0x0800a6a9
 800a5fc:	0800a6a9 	.word	0x0800a6a9
 800a600:	0800a6a9 	.word	0x0800a6a9
 800a604:	0800a6a9 	.word	0x0800a6a9
 800a608:	0800a6a9 	.word	0x0800a6a9
 800a60c:	0800a6a9 	.word	0x0800a6a9
 800a610:	0800a6a9 	.word	0x0800a6a9
 800a614:	0800a689 	.word	0x0800a689
 800a618:	0800a6a9 	.word	0x0800a6a9
 800a61c:	0800a6a9 	.word	0x0800a6a9
 800a620:	0800a6a9 	.word	0x0800a6a9
 800a624:	0800a6a9 	.word	0x0800a6a9
 800a628:	0800a6a9 	.word	0x0800a6a9
 800a62c:	0800a6a9 	.word	0x0800a6a9
 800a630:	0800a6a9 	.word	0x0800a6a9
 800a634:	0800a691 	.word	0x0800a691
 800a638:	0800a6a9 	.word	0x0800a6a9
 800a63c:	0800a6a9 	.word	0x0800a6a9
 800a640:	0800a6a9 	.word	0x0800a6a9
 800a644:	0800a6a9 	.word	0x0800a6a9
 800a648:	0800a6a9 	.word	0x0800a6a9
 800a64c:	0800a6a9 	.word	0x0800a6a9
 800a650:	0800a6a9 	.word	0x0800a6a9
 800a654:	0800a699 	.word	0x0800a699
 800a658:	0800a6a9 	.word	0x0800a6a9
 800a65c:	0800a6a9 	.word	0x0800a6a9
 800a660:	0800a6a9 	.word	0x0800a6a9
 800a664:	0800a6a9 	.word	0x0800a6a9
 800a668:	0800a6a9 	.word	0x0800a6a9
 800a66c:	0800a6a9 	.word	0x0800a6a9
 800a670:	0800a6a9 	.word	0x0800a6a9
 800a674:	0800a6a1 	.word	0x0800a6a1
 800a678:	2301      	movs	r3, #1
 800a67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a67e:	e0bc      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a680:	2304      	movs	r3, #4
 800a682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a686:	e0b8      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a688:	2308      	movs	r3, #8
 800a68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a68e:	e0b4      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a690:	2310      	movs	r3, #16
 800a692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a696:	e0b0      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a698:	2320      	movs	r3, #32
 800a69a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a69e:	e0ac      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a6a0:	2340      	movs	r3, #64	; 0x40
 800a6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6a6:	e0a8      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a6a8:	2380      	movs	r3, #128	; 0x80
 800a6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ae:	e0a4      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a90      	ldr	r2, [pc, #576]	; (800a8f8 <UART_SetConfig+0x6a0>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d130      	bne.n	800a71c <UART_SetConfig+0x4c4>
 800a6ba:	4b8e      	ldr	r3, [pc, #568]	; (800a8f4 <UART_SetConfig+0x69c>)
 800a6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6be:	f003 0307 	and.w	r3, r3, #7
 800a6c2:	2b05      	cmp	r3, #5
 800a6c4:	d826      	bhi.n	800a714 <UART_SetConfig+0x4bc>
 800a6c6:	a201      	add	r2, pc, #4	; (adr r2, 800a6cc <UART_SetConfig+0x474>)
 800a6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6cc:	0800a6e5 	.word	0x0800a6e5
 800a6d0:	0800a6ed 	.word	0x0800a6ed
 800a6d4:	0800a6f5 	.word	0x0800a6f5
 800a6d8:	0800a6fd 	.word	0x0800a6fd
 800a6dc:	0800a705 	.word	0x0800a705
 800a6e0:	0800a70d 	.word	0x0800a70d
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ea:	e086      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a6ec:	2304      	movs	r3, #4
 800a6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6f2:	e082      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a6f4:	2308      	movs	r3, #8
 800a6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6fa:	e07e      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a6fc:	2310      	movs	r3, #16
 800a6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a702:	e07a      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a704:	2320      	movs	r3, #32
 800a706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a70a:	e076      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a70c:	2340      	movs	r3, #64	; 0x40
 800a70e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a712:	e072      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a714:	2380      	movs	r3, #128	; 0x80
 800a716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a71a:	e06e      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a76      	ldr	r2, [pc, #472]	; (800a8fc <UART_SetConfig+0x6a4>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d130      	bne.n	800a788 <UART_SetConfig+0x530>
 800a726:	4b73      	ldr	r3, [pc, #460]	; (800a8f4 <UART_SetConfig+0x69c>)
 800a728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a72a:	f003 0307 	and.w	r3, r3, #7
 800a72e:	2b05      	cmp	r3, #5
 800a730:	d826      	bhi.n	800a780 <UART_SetConfig+0x528>
 800a732:	a201      	add	r2, pc, #4	; (adr r2, 800a738 <UART_SetConfig+0x4e0>)
 800a734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a738:	0800a751 	.word	0x0800a751
 800a73c:	0800a759 	.word	0x0800a759
 800a740:	0800a761 	.word	0x0800a761
 800a744:	0800a769 	.word	0x0800a769
 800a748:	0800a771 	.word	0x0800a771
 800a74c:	0800a779 	.word	0x0800a779
 800a750:	2300      	movs	r3, #0
 800a752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a756:	e050      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a758:	2304      	movs	r3, #4
 800a75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a75e:	e04c      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a760:	2308      	movs	r3, #8
 800a762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a766:	e048      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a768:	2310      	movs	r3, #16
 800a76a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a76e:	e044      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a770:	2320      	movs	r3, #32
 800a772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a776:	e040      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a778:	2340      	movs	r3, #64	; 0x40
 800a77a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a77e:	e03c      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a780:	2380      	movs	r3, #128	; 0x80
 800a782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a786:	e038      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a5c      	ldr	r2, [pc, #368]	; (800a900 <UART_SetConfig+0x6a8>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d130      	bne.n	800a7f4 <UART_SetConfig+0x59c>
 800a792:	4b58      	ldr	r3, [pc, #352]	; (800a8f4 <UART_SetConfig+0x69c>)
 800a794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a796:	f003 0307 	and.w	r3, r3, #7
 800a79a:	2b05      	cmp	r3, #5
 800a79c:	d826      	bhi.n	800a7ec <UART_SetConfig+0x594>
 800a79e:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <UART_SetConfig+0x54c>)
 800a7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a4:	0800a7bd 	.word	0x0800a7bd
 800a7a8:	0800a7c5 	.word	0x0800a7c5
 800a7ac:	0800a7cd 	.word	0x0800a7cd
 800a7b0:	0800a7d5 	.word	0x0800a7d5
 800a7b4:	0800a7dd 	.word	0x0800a7dd
 800a7b8:	0800a7e5 	.word	0x0800a7e5
 800a7bc:	2302      	movs	r3, #2
 800a7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7c2:	e01a      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a7c4:	2304      	movs	r3, #4
 800a7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ca:	e016      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a7cc:	2308      	movs	r3, #8
 800a7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7d2:	e012      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a7d4:	2310      	movs	r3, #16
 800a7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7da:	e00e      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a7dc:	2320      	movs	r3, #32
 800a7de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7e2:	e00a      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a7e4:	2340      	movs	r3, #64	; 0x40
 800a7e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ea:	e006      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a7ec:	2380      	movs	r3, #128	; 0x80
 800a7ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7f2:	e002      	b.n	800a7fa <UART_SetConfig+0x5a2>
 800a7f4:	2380      	movs	r3, #128	; 0x80
 800a7f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a40      	ldr	r2, [pc, #256]	; (800a900 <UART_SetConfig+0x6a8>)
 800a800:	4293      	cmp	r3, r2
 800a802:	f040 80ef 	bne.w	800a9e4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a806:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a80a:	2b20      	cmp	r3, #32
 800a80c:	dc46      	bgt.n	800a89c <UART_SetConfig+0x644>
 800a80e:	2b02      	cmp	r3, #2
 800a810:	f2c0 8081 	blt.w	800a916 <UART_SetConfig+0x6be>
 800a814:	3b02      	subs	r3, #2
 800a816:	2b1e      	cmp	r3, #30
 800a818:	d87d      	bhi.n	800a916 <UART_SetConfig+0x6be>
 800a81a:	a201      	add	r2, pc, #4	; (adr r2, 800a820 <UART_SetConfig+0x5c8>)
 800a81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a820:	0800a8a3 	.word	0x0800a8a3
 800a824:	0800a917 	.word	0x0800a917
 800a828:	0800a8ab 	.word	0x0800a8ab
 800a82c:	0800a917 	.word	0x0800a917
 800a830:	0800a917 	.word	0x0800a917
 800a834:	0800a917 	.word	0x0800a917
 800a838:	0800a8bb 	.word	0x0800a8bb
 800a83c:	0800a917 	.word	0x0800a917
 800a840:	0800a917 	.word	0x0800a917
 800a844:	0800a917 	.word	0x0800a917
 800a848:	0800a917 	.word	0x0800a917
 800a84c:	0800a917 	.word	0x0800a917
 800a850:	0800a917 	.word	0x0800a917
 800a854:	0800a917 	.word	0x0800a917
 800a858:	0800a8cb 	.word	0x0800a8cb
 800a85c:	0800a917 	.word	0x0800a917
 800a860:	0800a917 	.word	0x0800a917
 800a864:	0800a917 	.word	0x0800a917
 800a868:	0800a917 	.word	0x0800a917
 800a86c:	0800a917 	.word	0x0800a917
 800a870:	0800a917 	.word	0x0800a917
 800a874:	0800a917 	.word	0x0800a917
 800a878:	0800a917 	.word	0x0800a917
 800a87c:	0800a917 	.word	0x0800a917
 800a880:	0800a917 	.word	0x0800a917
 800a884:	0800a917 	.word	0x0800a917
 800a888:	0800a917 	.word	0x0800a917
 800a88c:	0800a917 	.word	0x0800a917
 800a890:	0800a917 	.word	0x0800a917
 800a894:	0800a917 	.word	0x0800a917
 800a898:	0800a909 	.word	0x0800a909
 800a89c:	2b40      	cmp	r3, #64	; 0x40
 800a89e:	d036      	beq.n	800a90e <UART_SetConfig+0x6b6>
 800a8a0:	e039      	b.n	800a916 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a8a2:	f7fd fe9b 	bl	80085dc <HAL_RCCEx_GetD3PCLK1Freq>
 800a8a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8a8:	e03b      	b.n	800a922 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8aa:	f107 0314 	add.w	r3, r7, #20
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fd feaa 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8b8:	e033      	b.n	800a922 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ba:	f107 0308 	add.w	r3, r7, #8
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fd fff6 	bl	80088b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8c8:	e02b      	b.n	800a922 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8ca:	4b0a      	ldr	r3, [pc, #40]	; (800a8f4 <UART_SetConfig+0x69c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f003 0320 	and.w	r3, r3, #32
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d009      	beq.n	800a8ea <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8d6:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <UART_SetConfig+0x69c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	08db      	lsrs	r3, r3, #3
 800a8dc:	f003 0303 	and.w	r3, r3, #3
 800a8e0:	4a08      	ldr	r2, [pc, #32]	; (800a904 <UART_SetConfig+0x6ac>)
 800a8e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8e8:	e01b      	b.n	800a922 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a8ea:	4b06      	ldr	r3, [pc, #24]	; (800a904 <UART_SetConfig+0x6ac>)
 800a8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8ee:	e018      	b.n	800a922 <UART_SetConfig+0x6ca>
 800a8f0:	40011400 	.word	0x40011400
 800a8f4:	58024400 	.word	0x58024400
 800a8f8:	40007800 	.word	0x40007800
 800a8fc:	40007c00 	.word	0x40007c00
 800a900:	58000c00 	.word	0x58000c00
 800a904:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a908:	4bc4      	ldr	r3, [pc, #784]	; (800ac1c <UART_SetConfig+0x9c4>)
 800a90a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a90c:	e009      	b.n	800a922 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a90e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a912:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a914:	e005      	b.n	800a922 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a916:	2300      	movs	r3, #0
 800a918:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a920:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a924:	2b00      	cmp	r3, #0
 800a926:	f000 81da 	beq.w	800acde <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	4abc      	ldr	r2, [pc, #752]	; (800ac20 <UART_SetConfig+0x9c8>)
 800a930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a934:	461a      	mov	r2, r3
 800a936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a938:	fbb3 f3f2 	udiv	r3, r3, r2
 800a93c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	4613      	mov	r3, r2
 800a944:	005b      	lsls	r3, r3, #1
 800a946:	4413      	add	r3, r2
 800a948:	6a3a      	ldr	r2, [r7, #32]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d305      	bcc.n	800a95a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a954:	6a3a      	ldr	r2, [r7, #32]
 800a956:	429a      	cmp	r2, r3
 800a958:	d903      	bls.n	800a962 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a960:	e1bd      	b.n	800acde <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	4618      	mov	r0, r3
 800a966:	f04f 0100 	mov.w	r1, #0
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96e:	4aac      	ldr	r2, [pc, #688]	; (800ac20 <UART_SetConfig+0x9c8>)
 800a970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a974:	b29a      	uxth	r2, r3
 800a976:	f04f 0300 	mov.w	r3, #0
 800a97a:	f7f5 fd11 	bl	80003a0 <__aeabi_uldivmod>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	4610      	mov	r0, r2
 800a984:	4619      	mov	r1, r3
 800a986:	f04f 0200 	mov.w	r2, #0
 800a98a:	f04f 0300 	mov.w	r3, #0
 800a98e:	020b      	lsls	r3, r1, #8
 800a990:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a994:	0202      	lsls	r2, r0, #8
 800a996:	6879      	ldr	r1, [r7, #4]
 800a998:	6849      	ldr	r1, [r1, #4]
 800a99a:	0849      	lsrs	r1, r1, #1
 800a99c:	4608      	mov	r0, r1
 800a99e:	f04f 0100 	mov.w	r1, #0
 800a9a2:	1814      	adds	r4, r2, r0
 800a9a4:	eb43 0501 	adc.w	r5, r3, r1
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	f04f 0300 	mov.w	r3, #0
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	f7f5 fcf3 	bl	80003a0 <__aeabi_uldivmod>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4613      	mov	r3, r2
 800a9c0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9c8:	d308      	bcc.n	800a9dc <UART_SetConfig+0x784>
 800a9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9d0:	d204      	bcs.n	800a9dc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9d8:	60da      	str	r2, [r3, #12]
 800a9da:	e180      	b.n	800acde <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a9e2:	e17c      	b.n	800acde <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	69db      	ldr	r3, [r3, #28]
 800a9e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9ec:	f040 80bf 	bne.w	800ab6e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a9f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9f4:	2b20      	cmp	r3, #32
 800a9f6:	dc49      	bgt.n	800aa8c <UART_SetConfig+0x834>
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	db7c      	blt.n	800aaf6 <UART_SetConfig+0x89e>
 800a9fc:	2b20      	cmp	r3, #32
 800a9fe:	d87a      	bhi.n	800aaf6 <UART_SetConfig+0x89e>
 800aa00:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <UART_SetConfig+0x7b0>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa93 	.word	0x0800aa93
 800aa0c:	0800aa9b 	.word	0x0800aa9b
 800aa10:	0800aaf7 	.word	0x0800aaf7
 800aa14:	0800aaf7 	.word	0x0800aaf7
 800aa18:	0800aaa3 	.word	0x0800aaa3
 800aa1c:	0800aaf7 	.word	0x0800aaf7
 800aa20:	0800aaf7 	.word	0x0800aaf7
 800aa24:	0800aaf7 	.word	0x0800aaf7
 800aa28:	0800aab3 	.word	0x0800aab3
 800aa2c:	0800aaf7 	.word	0x0800aaf7
 800aa30:	0800aaf7 	.word	0x0800aaf7
 800aa34:	0800aaf7 	.word	0x0800aaf7
 800aa38:	0800aaf7 	.word	0x0800aaf7
 800aa3c:	0800aaf7 	.word	0x0800aaf7
 800aa40:	0800aaf7 	.word	0x0800aaf7
 800aa44:	0800aaf7 	.word	0x0800aaf7
 800aa48:	0800aac3 	.word	0x0800aac3
 800aa4c:	0800aaf7 	.word	0x0800aaf7
 800aa50:	0800aaf7 	.word	0x0800aaf7
 800aa54:	0800aaf7 	.word	0x0800aaf7
 800aa58:	0800aaf7 	.word	0x0800aaf7
 800aa5c:	0800aaf7 	.word	0x0800aaf7
 800aa60:	0800aaf7 	.word	0x0800aaf7
 800aa64:	0800aaf7 	.word	0x0800aaf7
 800aa68:	0800aaf7 	.word	0x0800aaf7
 800aa6c:	0800aaf7 	.word	0x0800aaf7
 800aa70:	0800aaf7 	.word	0x0800aaf7
 800aa74:	0800aaf7 	.word	0x0800aaf7
 800aa78:	0800aaf7 	.word	0x0800aaf7
 800aa7c:	0800aaf7 	.word	0x0800aaf7
 800aa80:	0800aaf7 	.word	0x0800aaf7
 800aa84:	0800aaf7 	.word	0x0800aaf7
 800aa88:	0800aae9 	.word	0x0800aae9
 800aa8c:	2b40      	cmp	r3, #64	; 0x40
 800aa8e:	d02e      	beq.n	800aaee <UART_SetConfig+0x896>
 800aa90:	e031      	b.n	800aaf6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa92:	f7fc fe37 	bl	8007704 <HAL_RCC_GetPCLK1Freq>
 800aa96:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa98:	e033      	b.n	800ab02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa9a:	f7fc fe49 	bl	8007730 <HAL_RCC_GetPCLK2Freq>
 800aa9e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aaa0:	e02f      	b.n	800ab02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaa2:	f107 0314 	add.w	r3, r7, #20
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fd fdae 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aab0:	e027      	b.n	800ab02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aab2:	f107 0308 	add.w	r3, r7, #8
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fd fefa 	bl	80088b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aac0:	e01f      	b.n	800ab02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aac2:	4b58      	ldr	r3, [pc, #352]	; (800ac24 <UART_SetConfig+0x9cc>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d009      	beq.n	800aae2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aace:	4b55      	ldr	r3, [pc, #340]	; (800ac24 <UART_SetConfig+0x9cc>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	08db      	lsrs	r3, r3, #3
 800aad4:	f003 0303 	and.w	r3, r3, #3
 800aad8:	4a53      	ldr	r2, [pc, #332]	; (800ac28 <UART_SetConfig+0x9d0>)
 800aada:	fa22 f303 	lsr.w	r3, r2, r3
 800aade:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aae0:	e00f      	b.n	800ab02 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800aae2:	4b51      	ldr	r3, [pc, #324]	; (800ac28 <UART_SetConfig+0x9d0>)
 800aae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aae6:	e00c      	b.n	800ab02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aae8:	4b4c      	ldr	r3, [pc, #304]	; (800ac1c <UART_SetConfig+0x9c4>)
 800aaea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaec:	e009      	b.n	800ab02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaf4:	e005      	b.n	800ab02 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ab00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 80ea 	beq.w	800acde <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0e:	4a44      	ldr	r2, [pc, #272]	; (800ac20 <UART_SetConfig+0x9c8>)
 800ab10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab14:	461a      	mov	r2, r3
 800ab16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab1c:	005a      	lsls	r2, r3, #1
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	085b      	lsrs	r3, r3, #1
 800ab24:	441a      	add	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	2b0f      	cmp	r3, #15
 800ab36:	d916      	bls.n	800ab66 <UART_SetConfig+0x90e>
 800ab38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab3e:	d212      	bcs.n	800ab66 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	f023 030f 	bic.w	r3, r3, #15
 800ab48:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4c:	085b      	lsrs	r3, r3, #1
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	f003 0307 	and.w	r3, r3, #7
 800ab54:	b29a      	uxth	r2, r3
 800ab56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ab62:	60da      	str	r2, [r3, #12]
 800ab64:	e0bb      	b.n	800acde <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ab6c:	e0b7      	b.n	800acde <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab72:	2b20      	cmp	r3, #32
 800ab74:	dc4a      	bgt.n	800ac0c <UART_SetConfig+0x9b4>
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f2c0 8086 	blt.w	800ac88 <UART_SetConfig+0xa30>
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	f200 8083 	bhi.w	800ac88 <UART_SetConfig+0xa30>
 800ab82:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <UART_SetConfig+0x930>)
 800ab84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab88:	0800ac13 	.word	0x0800ac13
 800ab8c:	0800ac2d 	.word	0x0800ac2d
 800ab90:	0800ac89 	.word	0x0800ac89
 800ab94:	0800ac89 	.word	0x0800ac89
 800ab98:	0800ac35 	.word	0x0800ac35
 800ab9c:	0800ac89 	.word	0x0800ac89
 800aba0:	0800ac89 	.word	0x0800ac89
 800aba4:	0800ac89 	.word	0x0800ac89
 800aba8:	0800ac45 	.word	0x0800ac45
 800abac:	0800ac89 	.word	0x0800ac89
 800abb0:	0800ac89 	.word	0x0800ac89
 800abb4:	0800ac89 	.word	0x0800ac89
 800abb8:	0800ac89 	.word	0x0800ac89
 800abbc:	0800ac89 	.word	0x0800ac89
 800abc0:	0800ac89 	.word	0x0800ac89
 800abc4:	0800ac89 	.word	0x0800ac89
 800abc8:	0800ac55 	.word	0x0800ac55
 800abcc:	0800ac89 	.word	0x0800ac89
 800abd0:	0800ac89 	.word	0x0800ac89
 800abd4:	0800ac89 	.word	0x0800ac89
 800abd8:	0800ac89 	.word	0x0800ac89
 800abdc:	0800ac89 	.word	0x0800ac89
 800abe0:	0800ac89 	.word	0x0800ac89
 800abe4:	0800ac89 	.word	0x0800ac89
 800abe8:	0800ac89 	.word	0x0800ac89
 800abec:	0800ac89 	.word	0x0800ac89
 800abf0:	0800ac89 	.word	0x0800ac89
 800abf4:	0800ac89 	.word	0x0800ac89
 800abf8:	0800ac89 	.word	0x0800ac89
 800abfc:	0800ac89 	.word	0x0800ac89
 800ac00:	0800ac89 	.word	0x0800ac89
 800ac04:	0800ac89 	.word	0x0800ac89
 800ac08:	0800ac7b 	.word	0x0800ac7b
 800ac0c:	2b40      	cmp	r3, #64	; 0x40
 800ac0e:	d037      	beq.n	800ac80 <UART_SetConfig+0xa28>
 800ac10:	e03a      	b.n	800ac88 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac12:	f7fc fd77 	bl	8007704 <HAL_RCC_GetPCLK1Freq>
 800ac16:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac18:	e03c      	b.n	800ac94 <UART_SetConfig+0xa3c>
 800ac1a:	bf00      	nop
 800ac1c:	003d0900 	.word	0x003d0900
 800ac20:	0801199c 	.word	0x0801199c
 800ac24:	58024400 	.word	0x58024400
 800ac28:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac2c:	f7fc fd80 	bl	8007730 <HAL_RCC_GetPCLK2Freq>
 800ac30:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac32:	e02f      	b.n	800ac94 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac34:	f107 0314 	add.w	r3, r7, #20
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7fd fce5 	bl	8008608 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac42:	e027      	b.n	800ac94 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac44:	f107 0308 	add.w	r3, r7, #8
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7fd fe31 	bl	80088b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac52:	e01f      	b.n	800ac94 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac54:	4b2c      	ldr	r3, [pc, #176]	; (800ad08 <UART_SetConfig+0xab0>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 0320 	and.w	r3, r3, #32
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d009      	beq.n	800ac74 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac60:	4b29      	ldr	r3, [pc, #164]	; (800ad08 <UART_SetConfig+0xab0>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	08db      	lsrs	r3, r3, #3
 800ac66:	f003 0303 	and.w	r3, r3, #3
 800ac6a:	4a28      	ldr	r2, [pc, #160]	; (800ad0c <UART_SetConfig+0xab4>)
 800ac6c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac72:	e00f      	b.n	800ac94 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800ac74:	4b25      	ldr	r3, [pc, #148]	; (800ad0c <UART_SetConfig+0xab4>)
 800ac76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac78:	e00c      	b.n	800ac94 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac7a:	4b25      	ldr	r3, [pc, #148]	; (800ad10 <UART_SetConfig+0xab8>)
 800ac7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac7e:	e009      	b.n	800ac94 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac86:	e005      	b.n	800ac94 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ac92:	bf00      	nop
    }

    if (pclk != 0U)
 800ac94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d021      	beq.n	800acde <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9e:	4a1d      	ldr	r2, [pc, #116]	; (800ad14 <UART_SetConfig+0xabc>)
 800aca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aca4:	461a      	mov	r2, r3
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca8:	fbb3 f2f2 	udiv	r2, r3, r2
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	085b      	lsrs	r3, r3, #1
 800acb2:	441a      	add	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc2:	2b0f      	cmp	r3, #15
 800acc4:	d908      	bls.n	800acd8 <UART_SetConfig+0xa80>
 800acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800accc:	d204      	bcs.n	800acd8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acd4:	60da      	str	r2, [r3, #12]
 800acd6:	e002      	b.n	800acde <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800acfa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3738      	adds	r7, #56	; 0x38
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bdb0      	pop	{r4, r5, r7, pc}
 800ad06:	bf00      	nop
 800ad08:	58024400 	.word	0x58024400
 800ad0c:	03d09000 	.word	0x03d09000
 800ad10:	003d0900 	.word	0x003d0900
 800ad14:	0801199c 	.word	0x0801199c

0800ad18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad24:	f003 0301 	and.w	r3, r3, #1
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00a      	beq.n	800ad42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	430a      	orrs	r2, r1
 800ad40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad46:	f003 0302 	and.w	r3, r3, #2
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00a      	beq.n	800ad64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	430a      	orrs	r2, r1
 800ad62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad68:	f003 0304 	and.w	r3, r3, #4
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00a      	beq.n	800ad86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	430a      	orrs	r2, r1
 800ad84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad8a:	f003 0308 	and.w	r3, r3, #8
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	430a      	orrs	r2, r1
 800ada6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adac:	f003 0310 	and.w	r3, r3, #16
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00a      	beq.n	800adca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	430a      	orrs	r2, r1
 800adc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adce:	f003 0320 	and.w	r3, r3, #32
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00a      	beq.n	800adec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	430a      	orrs	r2, r1
 800adea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d01a      	beq.n	800ae2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	430a      	orrs	r2, r1
 800ae0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae16:	d10a      	bne.n	800ae2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	430a      	orrs	r2, r1
 800ae2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00a      	beq.n	800ae50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	430a      	orrs	r2, r1
 800ae4e:	605a      	str	r2, [r3, #4]
  }
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af02      	add	r7, sp, #8
 800ae62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae6c:	f7f7 f82e 	bl	8001ecc <HAL_GetTick>
 800ae70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 0308 	and.w	r3, r3, #8
 800ae7c:	2b08      	cmp	r3, #8
 800ae7e:	d10e      	bne.n	800ae9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f82f 	bl	800aef2 <UART_WaitOnFlagUntilTimeout>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e025      	b.n	800aeea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 0304 	and.w	r3, r3, #4
 800aea8:	2b04      	cmp	r3, #4
 800aeaa:	d10e      	bne.n	800aeca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aeac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f819 	bl	800aef2 <UART_WaitOnFlagUntilTimeout>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d001      	beq.n	800aeca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e00f      	b.n	800aeea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2220      	movs	r2, #32
 800aece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2220      	movs	r2, #32
 800aed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	60f8      	str	r0, [r7, #12]
 800aefa:	60b9      	str	r1, [r7, #8]
 800aefc:	603b      	str	r3, [r7, #0]
 800aefe:	4613      	mov	r3, r2
 800af00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af02:	e062      	b.n	800afca <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0a:	d05e      	beq.n	800afca <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af0c:	f7f6 ffde 	bl	8001ecc <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	69ba      	ldr	r2, [r7, #24]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d302      	bcc.n	800af22 <UART_WaitOnFlagUntilTimeout+0x30>
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d11d      	bne.n	800af5e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	689a      	ldr	r2, [r3, #8]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f022 0201 	bic.w	r2, r2, #1
 800af40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2220      	movs	r2, #32
 800af46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2220      	movs	r2, #32
 800af4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800af5a:	2303      	movs	r3, #3
 800af5c:	e045      	b.n	800afea <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 0304 	and.w	r3, r3, #4
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d02e      	beq.n	800afca <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	69db      	ldr	r3, [r3, #28]
 800af72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af7a:	d126      	bne.n	800afca <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af94:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	689a      	ldr	r2, [r3, #8]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f022 0201 	bic.w	r2, r2, #1
 800afa4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2220      	movs	r2, #32
 800afaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2220      	movs	r2, #32
 800afb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2220      	movs	r2, #32
 800afba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800afc6:	2303      	movs	r3, #3
 800afc8:	e00f      	b.n	800afea <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	69da      	ldr	r2, [r3, #28]
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	4013      	ands	r3, r2
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	bf0c      	ite	eq
 800afda:	2301      	moveq	r3, #1
 800afdc:	2300      	movne	r3, #0
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	461a      	mov	r2, r3
 800afe2:	79fb      	ldrb	r3, [r7, #7]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d08d      	beq.n	800af04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b00a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6899      	ldr	r1, [r3, #8]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	4b0f      	ldr	r3, [pc, #60]	; (800b054 <UART_EndRxTransfer+0x60>)
 800b018:	400b      	ands	r3, r1
 800b01a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b020:	2b01      	cmp	r3, #1
 800b022:	d107      	bne.n	800b034 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f022 0210 	bic.w	r2, r2, #16
 800b032:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2220      	movs	r2, #32
 800b038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	effffffe 	.word	0xeffffffe

0800b058 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b064:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2200      	movs	r2, #0
 800b072:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f7ff f8d8 	bl	800a22c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b07c:	bf00      	nop
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b09a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2220      	movs	r2, #32
 800b0a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f7ff f8b4 	bl	800a218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b102:	2b01      	cmp	r3, #1
 800b104:	d101      	bne.n	800b10a <HAL_UARTEx_DisableFifoMode+0x16>
 800b106:	2302      	movs	r3, #2
 800b108:	e027      	b.n	800b15a <HAL_UARTEx_DisableFifoMode+0x66>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2201      	movs	r2, #1
 800b10e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2224      	movs	r2, #36	; 0x24
 800b116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f022 0201 	bic.w	r2, r2, #1
 800b130:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b138:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2220      	movs	r2, #32
 800b14c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b084      	sub	sp, #16
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b176:	2b01      	cmp	r3, #1
 800b178:	d101      	bne.n	800b17e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b17a:	2302      	movs	r3, #2
 800b17c:	e02d      	b.n	800b1da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2224      	movs	r2, #36	; 0x24
 800b18a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f022 0201 	bic.w	r2, r2, #1
 800b1a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	430a      	orrs	r2, r1
 800b1b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f850 	bl	800b260 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2220      	movs	r2, #32
 800b1cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d101      	bne.n	800b1fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b1f6:	2302      	movs	r3, #2
 800b1f8:	e02d      	b.n	800b256 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2224      	movs	r2, #36	; 0x24
 800b206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f022 0201 	bic.w	r2, r2, #1
 800b220:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	430a      	orrs	r2, r1
 800b234:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f812 	bl	800b260 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2220      	movs	r2, #32
 800b248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3710      	adds	r7, #16
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
	...

0800b260 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d108      	bne.n	800b282 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b280:	e031      	b.n	800b2e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b282:	2310      	movs	r3, #16
 800b284:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b286:	2310      	movs	r3, #16
 800b288:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	0e5b      	lsrs	r3, r3, #25
 800b292:	b2db      	uxtb	r3, r3
 800b294:	f003 0307 	and.w	r3, r3, #7
 800b298:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	0f5b      	lsrs	r3, r3, #29
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	f003 0307 	and.w	r3, r3, #7
 800b2a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2aa:	7bbb      	ldrb	r3, [r7, #14]
 800b2ac:	7b3a      	ldrb	r2, [r7, #12]
 800b2ae:	4911      	ldr	r1, [pc, #68]	; (800b2f4 <UARTEx_SetNbDataToProcess+0x94>)
 800b2b0:	5c8a      	ldrb	r2, [r1, r2]
 800b2b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b2b6:	7b3a      	ldrb	r2, [r7, #12]
 800b2b8:	490f      	ldr	r1, [pc, #60]	; (800b2f8 <UARTEx_SetNbDataToProcess+0x98>)
 800b2ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ca:	7b7a      	ldrb	r2, [r7, #13]
 800b2cc:	4909      	ldr	r1, [pc, #36]	; (800b2f4 <UARTEx_SetNbDataToProcess+0x94>)
 800b2ce:	5c8a      	ldrb	r2, [r1, r2]
 800b2d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b2d4:	7b7a      	ldrb	r2, [r7, #13]
 800b2d6:	4908      	ldr	r1, [pc, #32]	; (800b2f8 <UARTEx_SetNbDataToProcess+0x98>)
 800b2d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2da:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b2e6:	bf00      	nop
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	080119b4 	.word	0x080119b4
 800b2f8:	080119bc 	.word	0x080119bc

0800b2fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b2fc:	b084      	sub	sp, #16
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	f107 001c 	add.w	r0, r7, #28
 800b30a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b310:	2b01      	cmp	r3, #1
 800b312:	d120      	bne.n	800b356 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b318:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	68da      	ldr	r2, [r3, #12]
 800b324:	4b2a      	ldr	r3, [pc, #168]	; (800b3d0 <USB_CoreInit+0xd4>)
 800b326:	4013      	ands	r3, r2
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d105      	bne.n	800b34a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f990 	bl	800b670 <USB_CoreReset>
 800b350:	4603      	mov	r3, r0
 800b352:	73fb      	strb	r3, [r7, #15]
 800b354:	e01a      	b.n	800b38c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f984 	bl	800b670 <USB_CoreReset>
 800b368:	4603      	mov	r3, r0
 800b36a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b36c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d106      	bne.n	800b380 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b376:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	639a      	str	r2, [r3, #56]	; 0x38
 800b37e:	e005      	b.n	800b38c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b384:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d116      	bne.n	800b3c0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b396:	b29a      	uxth	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b3a0:	4b0c      	ldr	r3, [pc, #48]	; (800b3d4 <USB_CoreInit+0xd8>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	f043 0206 	orr.w	r2, r3, #6
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	f043 0220 	orr.w	r2, r3, #32
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3cc:	b004      	add	sp, #16
 800b3ce:	4770      	bx	lr
 800b3d0:	ffbdffbf 	.word	0xffbdffbf
 800b3d4:	03ee0000 	.word	0x03ee0000

0800b3d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f043 0201 	orr.w	r2, r3, #1
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b083      	sub	sp, #12
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	f023 0201 	bic.w	r2, r3, #1
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	460b      	mov	r3, r1
 800b426:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b434:	78fb      	ldrb	r3, [r7, #3]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d106      	bne.n	800b448 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	60da      	str	r2, [r3, #12]
 800b446:	e00b      	b.n	800b460 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	60da      	str	r2, [r3, #12]
 800b45a:	e001      	b.n	800b460 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	e003      	b.n	800b468 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b460:	2032      	movs	r0, #50	; 0x32
 800b462:	f7f6 fd3f 	bl	8001ee4 <HAL_Delay>

  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b47a:	2300      	movs	r3, #0
 800b47c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	019b      	lsls	r3, r3, #6
 800b482:	f043 0220 	orr.w	r2, r3, #32
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3301      	adds	r3, #1
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	4a09      	ldr	r2, [pc, #36]	; (800b4b8 <USB_FlushTxFifo+0x48>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d901      	bls.n	800b49c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	e006      	b.n	800b4aa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	691b      	ldr	r3, [r3, #16]
 800b4a0:	f003 0320 	and.w	r3, r3, #32
 800b4a4:	2b20      	cmp	r3, #32
 800b4a6:	d0f0      	beq.n	800b48a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	00030d40 	.word	0x00030d40

0800b4bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2210      	movs	r2, #16
 800b4cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	60fb      	str	r3, [r7, #12]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	4a09      	ldr	r2, [pc, #36]	; (800b4fc <USB_FlushRxFifo+0x40>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d901      	bls.n	800b4e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	e006      	b.n	800b4ee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	f003 0310 	and.w	r3, r3, #16
 800b4e8:	2b10      	cmp	r3, #16
 800b4ea:	d0f0      	beq.n	800b4ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3714      	adds	r7, #20
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	00030d40 	.word	0x00030d40

0800b500 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b500:	b480      	push	{r7}
 800b502:	b089      	sub	sp, #36	; 0x24
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	4611      	mov	r1, r2
 800b50c:	461a      	mov	r2, r3
 800b50e:	460b      	mov	r3, r1
 800b510:	71fb      	strb	r3, [r7, #7]
 800b512:	4613      	mov	r3, r2
 800b514:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b51e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b522:	2b00      	cmp	r3, #0
 800b524:	d123      	bne.n	800b56e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b526:	88bb      	ldrh	r3, [r7, #4]
 800b528:	3303      	adds	r3, #3
 800b52a:	089b      	lsrs	r3, r3, #2
 800b52c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b52e:	2300      	movs	r3, #0
 800b530:	61bb      	str	r3, [r7, #24]
 800b532:	e018      	b.n	800b566 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b534:	79fb      	ldrb	r3, [r7, #7]
 800b536:	031a      	lsls	r2, r3, #12
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	4413      	add	r3, r2
 800b53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b540:	461a      	mov	r2, r3
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	3301      	adds	r3, #1
 800b54c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	3301      	adds	r3, #1
 800b552:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	3301      	adds	r3, #1
 800b558:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	3301      	adds	r3, #1
 800b55e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	3301      	adds	r3, #1
 800b564:	61bb      	str	r3, [r7, #24]
 800b566:	69ba      	ldr	r2, [r7, #24]
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d3e2      	bcc.n	800b534 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3724      	adds	r7, #36	; 0x24
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b08b      	sub	sp, #44	; 0x2c
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	4613      	mov	r3, r2
 800b588:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b592:	88fb      	ldrh	r3, [r7, #6]
 800b594:	089b      	lsrs	r3, r3, #2
 800b596:	b29b      	uxth	r3, r3
 800b598:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b59a:	88fb      	ldrh	r3, [r7, #6]
 800b59c:	f003 0303 	and.w	r3, r3, #3
 800b5a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	623b      	str	r3, [r7, #32]
 800b5a6:	e014      	b.n	800b5d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	3301      	adds	r3, #1
 800b5be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	623b      	str	r3, [r7, #32]
 800b5d2:	6a3a      	ldr	r2, [r7, #32]
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d3e6      	bcc.n	800b5a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b5da:	8bfb      	ldrh	r3, [r7, #30]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d01e      	beq.n	800b61e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	f107 0310 	add.w	r3, r7, #16
 800b5f0:	6812      	ldr	r2, [r2, #0]
 800b5f2:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b5f4:	693a      	ldr	r2, [r7, #16]
 800b5f6:	6a3b      	ldr	r3, [r7, #32]
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	00db      	lsls	r3, r3, #3
 800b5fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b600:	b2da      	uxtb	r2, r3
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	701a      	strb	r2, [r3, #0]
      i++;
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	3301      	adds	r3, #1
 800b60a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60e:	3301      	adds	r3, #1
 800b610:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b612:	8bfb      	ldrh	r3, [r7, #30]
 800b614:	3b01      	subs	r3, #1
 800b616:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b618:	8bfb      	ldrh	r3, [r7, #30]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1ea      	bne.n	800b5f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b620:	4618      	mov	r0, r3
 800b622:	372c      	adds	r7, #44	; 0x2c
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	695b      	ldr	r3, [r3, #20]
 800b638:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	4013      	ands	r3, r2
 800b642:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b644:	68fb      	ldr	r3, [r7, #12]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3714      	adds	r7, #20
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b652:	b480      	push	{r7}
 800b654:	b083      	sub	sp, #12
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	695b      	ldr	r3, [r3, #20]
 800b65e:	f003 0301 	and.w	r3, r3, #1
}
 800b662:	4618      	mov	r0, r3
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
	...

0800b670 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b678:	2300      	movs	r3, #0
 800b67a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3301      	adds	r3, #1
 800b680:	60fb      	str	r3, [r7, #12]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	4a13      	ldr	r2, [pc, #76]	; (800b6d4 <USB_CoreReset+0x64>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d901      	bls.n	800b68e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b68a:	2303      	movs	r3, #3
 800b68c:	e01b      	b.n	800b6c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	691b      	ldr	r3, [r3, #16]
 800b692:	2b00      	cmp	r3, #0
 800b694:	daf2      	bge.n	800b67c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b696:	2300      	movs	r3, #0
 800b698:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	691b      	ldr	r3, [r3, #16]
 800b69e:	f043 0201 	orr.w	r2, r3, #1
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	60fb      	str	r3, [r7, #12]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	4a09      	ldr	r2, [pc, #36]	; (800b6d4 <USB_CoreReset+0x64>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d901      	bls.n	800b6b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e006      	b.n	800b6c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d0f0      	beq.n	800b6a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	00030d40 	.word	0x00030d40

0800b6d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b6d8:	b084      	sub	sp, #16
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b084      	sub	sp, #16
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	f107 001c 	add.w	r0, r7, #28
 800b6e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d018      	beq.n	800b750 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b720:	2b01      	cmp	r3, #1
 800b722:	d10a      	bne.n	800b73a <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b732:	f043 0304 	orr.w	r3, r3, #4
 800b736:	6013      	str	r3, [r2, #0]
 800b738:	e014      	b.n	800b764 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b748:	f023 0304 	bic.w	r3, r3, #4
 800b74c:	6013      	str	r3, [r2, #0]
 800b74e:	e009      	b.n	800b764 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b75e:	f023 0304 	bic.w	r3, r3, #4
 800b762:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b764:	2110      	movs	r1, #16
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff fe82 	bl	800b470 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff fea5 	bl	800b4bc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b772:	2300      	movs	r3, #0
 800b774:	60fb      	str	r3, [r7, #12]
 800b776:	e015      	b.n	800b7a4 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	015a      	lsls	r2, r3, #5
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	4413      	add	r3, r2
 800b780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b784:	461a      	mov	r2, r3
 800b786:	f04f 33ff 	mov.w	r3, #4294967295
 800b78a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	015a      	lsls	r2, r3, #5
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	4413      	add	r3, r2
 800b794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b798:	461a      	mov	r2, r3
 800b79a:	2300      	movs	r3, #0
 800b79c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	60fb      	str	r3, [r7, #12]
 800b7a4:	6a3b      	ldr	r3, [r7, #32]
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d3e5      	bcc.n	800b778 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f882 	bl	800b8b8 <USB_DriveVbus>

  HAL_Delay(200U);
 800b7b4:	20c8      	movs	r0, #200	; 0xc8
 800b7b6:	f7f6 fb95 	bl	8001ee4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00b      	beq.n	800b7ec <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7da:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a14      	ldr	r2, [pc, #80]	; (800b830 <USB_HostInit+0x158>)
 800b7e0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a13      	ldr	r2, [pc, #76]	; (800b834 <USB_HostInit+0x15c>)
 800b7e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b7ea:	e009      	b.n	800b800 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2280      	movs	r2, #128	; 0x80
 800b7f0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a10      	ldr	r2, [pc, #64]	; (800b838 <USB_HostInit+0x160>)
 800b7f6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a10      	ldr	r2, [pc, #64]	; (800b83c <USB_HostInit+0x164>)
 800b7fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b802:	2b00      	cmp	r3, #0
 800b804:	d105      	bne.n	800b812 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	f043 0210 	orr.w	r2, r3, #16
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	699a      	ldr	r2, [r3, #24]
 800b816:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <USB_HostInit+0x168>)
 800b818:	4313      	orrs	r3, r2
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b82a:	b004      	add	sp, #16
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	01000200 	.word	0x01000200
 800b834:	00e00300 	.word	0x00e00300
 800b838:	00600080 	.word	0x00600080
 800b83c:	004000e0 	.word	0x004000e0
 800b840:	a3200008 	.word	0xa3200008

0800b844 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b862:	f023 0303 	bic.w	r3, r3, #3
 800b866:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	78fb      	ldrb	r3, [r7, #3]
 800b872:	f003 0303 	and.w	r3, r3, #3
 800b876:	68f9      	ldr	r1, [r7, #12]
 800b878:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b87c:	4313      	orrs	r3, r2
 800b87e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b880:	78fb      	ldrb	r3, [r7, #3]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d107      	bne.n	800b896 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b88c:	461a      	mov	r2, r3
 800b88e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b892:	6053      	str	r3, [r2, #4]
 800b894:	e009      	b.n	800b8aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b896:	78fb      	ldrb	r3, [r7, #3]
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d106      	bne.n	800b8aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	f241 7370 	movw	r3, #6000	; 0x1770
 800b8a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b8dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d109      	bne.n	800b8fc <USB_DriveVbus+0x44>
 800b8e8:	78fb      	ldrb	r3, [r7, #3]
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d106      	bne.n	800b8fc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b8f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b8fa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b906:	d109      	bne.n	800b91c <USB_DriveVbus+0x64>
 800b908:	78fb      	ldrb	r3, [r7, #3]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d106      	bne.n	800b91c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b91a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b085      	sub	sp, #20
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b936:	2300      	movs	r3, #0
 800b938:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	0c5b      	lsrs	r3, r3, #17
 800b948:	f003 0303 	and.w	r3, r3, #3
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	b29b      	uxth	r3, r3
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3714      	adds	r7, #20
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
	...

0800b97c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	4608      	mov	r0, r1
 800b986:	4611      	mov	r1, r2
 800b988:	461a      	mov	r2, r3
 800b98a:	4603      	mov	r3, r0
 800b98c:	70fb      	strb	r3, [r7, #3]
 800b98e:	460b      	mov	r3, r1
 800b990:	70bb      	strb	r3, [r7, #2]
 800b992:	4613      	mov	r3, r2
 800b994:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b996:	2300      	movs	r3, #0
 800b998:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b99e:	78fb      	ldrb	r3, [r7, #3]
 800b9a0:	015a      	lsls	r2, r3, #5
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b9b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b9b6:	2b03      	cmp	r3, #3
 800b9b8:	d87e      	bhi.n	800bab8 <USB_HC_Init+0x13c>
 800b9ba:	a201      	add	r2, pc, #4	; (adr r2, 800b9c0 <USB_HC_Init+0x44>)
 800b9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c0:	0800b9d1 	.word	0x0800b9d1
 800b9c4:	0800ba7b 	.word	0x0800ba7b
 800b9c8:	0800b9d1 	.word	0x0800b9d1
 800b9cc:	0800ba3d 	.word	0x0800ba3d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b9d0:	78fb      	ldrb	r3, [r7, #3]
 800b9d2:	015a      	lsls	r2, r3, #5
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9dc:	461a      	mov	r2, r3
 800b9de:	f240 439d 	movw	r3, #1181	; 0x49d
 800b9e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b9e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	da10      	bge.n	800ba0e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b9ec:	78fb      	ldrb	r3, [r7, #3]
 800b9ee:	015a      	lsls	r2, r3, #5
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	78fa      	ldrb	r2, [r7, #3]
 800b9fc:	0151      	lsls	r1, r2, #5
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	440a      	add	r2, r1
 800ba02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba0a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800ba0c:	e057      	b.n	800babe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d051      	beq.n	800babe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800ba1a:	78fb      	ldrb	r3, [r7, #3]
 800ba1c:	015a      	lsls	r2, r3, #5
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	4413      	add	r3, r2
 800ba22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	78fa      	ldrb	r2, [r7, #3]
 800ba2a:	0151      	lsls	r1, r2, #5
 800ba2c:	693a      	ldr	r2, [r7, #16]
 800ba2e:	440a      	add	r2, r1
 800ba30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ba38:	60d3      	str	r3, [r2, #12]
      break;
 800ba3a:	e040      	b.n	800babe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ba3c:	78fb      	ldrb	r3, [r7, #3]
 800ba3e:	015a      	lsls	r2, r3, #5
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	4413      	add	r3, r2
 800ba44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba48:	461a      	mov	r2, r3
 800ba4a:	f240 639d 	movw	r3, #1693	; 0x69d
 800ba4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ba50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	da34      	bge.n	800bac2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ba58:	78fb      	ldrb	r3, [r7, #3]
 800ba5a:	015a      	lsls	r2, r3, #5
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	4413      	add	r3, r2
 800ba60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	78fa      	ldrb	r2, [r7, #3]
 800ba68:	0151      	lsls	r1, r2, #5
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	440a      	add	r2, r1
 800ba6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba76:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ba78:	e023      	b.n	800bac2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ba7a:	78fb      	ldrb	r3, [r7, #3]
 800ba7c:	015a      	lsls	r2, r3, #5
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	4413      	add	r3, r2
 800ba82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba86:	461a      	mov	r2, r3
 800ba88:	f240 2325 	movw	r3, #549	; 0x225
 800ba8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ba8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	da17      	bge.n	800bac6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ba96:	78fb      	ldrb	r3, [r7, #3]
 800ba98:	015a      	lsls	r2, r3, #5
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	78fa      	ldrb	r2, [r7, #3]
 800baa6:	0151      	lsls	r1, r2, #5
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	440a      	add	r2, r1
 800baac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bab0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800bab4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800bab6:	e006      	b.n	800bac6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	77fb      	strb	r3, [r7, #31]
      break;
 800babc:	e004      	b.n	800bac8 <USB_HC_Init+0x14c>
      break;
 800babe:	bf00      	nop
 800bac0:	e002      	b.n	800bac8 <USB_HC_Init+0x14c>
      break;
 800bac2:	bf00      	nop
 800bac4:	e000      	b.n	800bac8 <USB_HC_Init+0x14c>
      break;
 800bac6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bace:	699a      	ldr	r2, [r3, #24]
 800bad0:	78fb      	ldrb	r3, [r7, #3]
 800bad2:	f003 030f 	and.w	r3, r3, #15
 800bad6:	2101      	movs	r1, #1
 800bad8:	fa01 f303 	lsl.w	r3, r1, r3
 800badc:	6939      	ldr	r1, [r7, #16]
 800bade:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bae2:	4313      	orrs	r3, r2
 800bae4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	699b      	ldr	r3, [r3, #24]
 800baea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800baf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	da03      	bge.n	800bb02 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bafa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bafe:	61bb      	str	r3, [r7, #24]
 800bb00:	e001      	b.n	800bb06 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800bb02:	2300      	movs	r3, #0
 800bb04:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7ff ff0f 	bl	800b92a <USB_GetHostSpeed>
 800bb0c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800bb0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d106      	bne.n	800bb24 <USB_HC_Init+0x1a8>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d003      	beq.n	800bb24 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bb1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bb20:	617b      	str	r3, [r7, #20]
 800bb22:	e001      	b.n	800bb28 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bb24:	2300      	movs	r3, #0
 800bb26:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bb28:	787b      	ldrb	r3, [r7, #1]
 800bb2a:	059b      	lsls	r3, r3, #22
 800bb2c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bb30:	78bb      	ldrb	r3, [r7, #2]
 800bb32:	02db      	lsls	r3, r3, #11
 800bb34:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bb38:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bb3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bb3e:	049b      	lsls	r3, r3, #18
 800bb40:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bb44:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bb46:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bb48:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bb4c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bb52:	78fb      	ldrb	r3, [r7, #3]
 800bb54:	0159      	lsls	r1, r3, #5
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	440b      	add	r3, r1
 800bb5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb5e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bb64:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800bb66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bb6a:	2b03      	cmp	r3, #3
 800bb6c:	d10f      	bne.n	800bb8e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800bb6e:	78fb      	ldrb	r3, [r7, #3]
 800bb70:	015a      	lsls	r2, r3, #5
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	4413      	add	r3, r2
 800bb76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	78fa      	ldrb	r2, [r7, #3]
 800bb7e:	0151      	lsls	r1, r2, #5
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	440a      	add	r2, r1
 800bb84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb8c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bb8e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3720      	adds	r7, #32
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b08c      	sub	sp, #48	; 0x30
 800bb9c:	af02      	add	r7, sp, #8
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	4613      	mov	r3, r2
 800bba4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	785b      	ldrb	r3, [r3, #1]
 800bbae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bbb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbb4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d02d      	beq.n	800bc1e <USB_HC_StartXfer+0x86>
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	791b      	ldrb	r3, [r3, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d129      	bne.n	800bc1e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800bbca:	79fb      	ldrb	r3, [r7, #7]
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d117      	bne.n	800bc00 <USB_HC_StartXfer+0x68>
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	79db      	ldrb	r3, [r3, #7]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d003      	beq.n	800bbe0 <USB_HC_StartXfer+0x48>
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	79db      	ldrb	r3, [r3, #7]
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d10f      	bne.n	800bc00 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	015a      	lsls	r2, r3, #5
 800bbe4:	6a3b      	ldr	r3, [r7, #32]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	69fa      	ldr	r2, [r7, #28]
 800bbf0:	0151      	lsls	r1, r2, #5
 800bbf2:	6a3a      	ldr	r2, [r7, #32]
 800bbf4:	440a      	add	r2, r1
 800bbf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbfe:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800bc00:	79fb      	ldrb	r3, [r7, #7]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10b      	bne.n	800bc1e <USB_HC_StartXfer+0x86>
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	795b      	ldrb	r3, [r3, #5]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d107      	bne.n	800bc1e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	785b      	ldrb	r3, [r3, #1]
 800bc12:	4619      	mov	r1, r3
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f000 fa2f 	bl	800c078 <USB_DoPing>
      return HAL_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e0f8      	b.n	800be10 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	695b      	ldr	r3, [r3, #20]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d018      	beq.n	800bc58 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	8912      	ldrh	r2, [r2, #8]
 800bc2e:	4413      	add	r3, r2
 800bc30:	3b01      	subs	r3, #1
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	8912      	ldrh	r2, [r2, #8]
 800bc36:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc3a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800bc3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bc3e:	8b7b      	ldrh	r3, [r7, #26]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d90b      	bls.n	800bc5c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800bc44:	8b7b      	ldrh	r3, [r7, #26]
 800bc46:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800bc48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	8912      	ldrh	r2, [r2, #8]
 800bc4e:	fb02 f203 	mul.w	r2, r2, r3
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	611a      	str	r2, [r3, #16]
 800bc56:	e001      	b.n	800bc5c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	78db      	ldrb	r3, [r3, #3]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d007      	beq.n	800bc74 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800bc64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	8912      	ldrh	r2, [r2, #8]
 800bc6a:	fb02 f203 	mul.w	r2, r2, r3
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	611a      	str	r2, [r3, #16]
 800bc72:	e003      	b.n	800bc7c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	695a      	ldr	r2, [r3, #20]
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bc84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc86:	04d9      	lsls	r1, r3, #19
 800bc88:	4b63      	ldr	r3, [pc, #396]	; (800be18 <USB_HC_StartXfer+0x280>)
 800bc8a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bc8c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	7a9b      	ldrb	r3, [r3, #10]
 800bc92:	075b      	lsls	r3, r3, #29
 800bc94:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bc98:	69f9      	ldr	r1, [r7, #28]
 800bc9a:	0148      	lsls	r0, r1, #5
 800bc9c:	6a39      	ldr	r1, [r7, #32]
 800bc9e:	4401      	add	r1, r0
 800bca0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bca4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bca6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800bca8:	79fb      	ldrb	r3, [r7, #7]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d009      	beq.n	800bcc2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	68d9      	ldr	r1, [r3, #12]
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	015a      	lsls	r2, r3, #5
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	4413      	add	r3, r2
 800bcba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcbe:	460a      	mov	r2, r1
 800bcc0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	bf0c      	ite	eq
 800bcd2:	2301      	moveq	r3, #1
 800bcd4:	2300      	movne	r3, #0
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	015a      	lsls	r2, r3, #5
 800bcde:	6a3b      	ldr	r3, [r7, #32]
 800bce0:	4413      	add	r3, r2
 800bce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	69fa      	ldr	r2, [r7, #28]
 800bcea:	0151      	lsls	r1, r2, #5
 800bcec:	6a3a      	ldr	r2, [r7, #32]
 800bcee:	440a      	add	r2, r1
 800bcf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bcf8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	015a      	lsls	r2, r3, #5
 800bcfe:	6a3b      	ldr	r3, [r7, #32]
 800bd00:	4413      	add	r3, r2
 800bd02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	7e7b      	ldrb	r3, [r7, #25]
 800bd0a:	075b      	lsls	r3, r3, #29
 800bd0c:	69f9      	ldr	r1, [r7, #28]
 800bd0e:	0148      	lsls	r0, r1, #5
 800bd10:	6a39      	ldr	r1, [r7, #32]
 800bd12:	4401      	add	r1, r0
 800bd14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	015a      	lsls	r2, r3, #5
 800bd20:	6a3b      	ldr	r3, [r7, #32]
 800bd22:	4413      	add	r3, r2
 800bd24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bd32:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	78db      	ldrb	r3, [r3, #3]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d004      	beq.n	800bd46 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd42:	613b      	str	r3, [r7, #16]
 800bd44:	e003      	b.n	800bd4e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd4c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd54:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	015a      	lsls	r2, r3, #5
 800bd5a:	6a3b      	ldr	r3, [r7, #32]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd62:	461a      	mov	r2, r3
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800bd68:	79fb      	ldrb	r3, [r7, #7]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d001      	beq.n	800bd72 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	e04e      	b.n	800be10 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	78db      	ldrb	r3, [r3, #3]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d149      	bne.n	800be0e <USB_HC_StartXfer+0x276>
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d045      	beq.n	800be0e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	79db      	ldrb	r3, [r3, #7]
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d830      	bhi.n	800bdec <USB_HC_StartXfer+0x254>
 800bd8a:	a201      	add	r2, pc, #4	; (adr r2, 800bd90 <USB_HC_StartXfer+0x1f8>)
 800bd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd90:	0800bda1 	.word	0x0800bda1
 800bd94:	0800bdc5 	.word	0x0800bdc5
 800bd98:	0800bda1 	.word	0x0800bda1
 800bd9c:	0800bdc5 	.word	0x0800bdc5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	695b      	ldr	r3, [r3, #20]
 800bda4:	3303      	adds	r3, #3
 800bda6:	089b      	lsrs	r3, r3, #2
 800bda8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bdaa:	8afa      	ldrh	r2, [r7, #22]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d91c      	bls.n	800bdf0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	f043 0220 	orr.w	r2, r3, #32
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	619a      	str	r2, [r3, #24]
        }
        break;
 800bdc2:	e015      	b.n	800bdf0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	695b      	ldr	r3, [r3, #20]
 800bdc8:	3303      	adds	r3, #3
 800bdca:	089b      	lsrs	r3, r3, #2
 800bdcc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bdce:	8afa      	ldrh	r2, [r7, #22]
 800bdd0:	6a3b      	ldr	r3, [r7, #32]
 800bdd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdd6:	691b      	ldr	r3, [r3, #16]
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d90a      	bls.n	800bdf4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	699b      	ldr	r3, [r3, #24]
 800bde2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	619a      	str	r2, [r3, #24]
        }
        break;
 800bdea:	e003      	b.n	800bdf4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800bdec:	bf00      	nop
 800bdee:	e002      	b.n	800bdf6 <USB_HC_StartXfer+0x25e>
        break;
 800bdf0:	bf00      	nop
 800bdf2:	e000      	b.n	800bdf6 <USB_HC_StartXfer+0x25e>
        break;
 800bdf4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	68d9      	ldr	r1, [r3, #12]
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	785a      	ldrb	r2, [r3, #1]
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	b29b      	uxth	r3, r3
 800be04:	2000      	movs	r0, #0
 800be06:	9000      	str	r0, [sp, #0]
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f7ff fb79 	bl	800b500 <USB_WritePacket>
  }

  return HAL_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3728      	adds	r7, #40	; 0x28
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	1ff80000 	.word	0x1ff80000

0800be1c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be2e:	695b      	ldr	r3, [r3, #20]
 800be30:	b29b      	uxth	r3, r3
}
 800be32:	4618      	mov	r0, r3
 800be34:	3714      	adds	r7, #20
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800be3e:	b480      	push	{r7}
 800be40:	b089      	sub	sp, #36	; 0x24
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	460b      	mov	r3, r1
 800be48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800be4e:	78fb      	ldrb	r3, [r7, #3]
 800be50:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800be52:	2300      	movs	r3, #0
 800be54:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	015a      	lsls	r2, r3, #5
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	4413      	add	r3, r2
 800be5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	0c9b      	lsrs	r3, r3, #18
 800be66:	f003 0303 	and.w	r3, r3, #3
 800be6a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	015a      	lsls	r2, r3, #5
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	4413      	add	r3, r2
 800be74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	0fdb      	lsrs	r3, r3, #31
 800be7c:	f003 0301 	and.w	r3, r3, #1
 800be80:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	f003 0320 	and.w	r3, r3, #32
 800be8a:	2b20      	cmp	r3, #32
 800be8c:	d104      	bne.n	800be98 <USB_HC_Halt+0x5a>
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d101      	bne.n	800be98 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	e0e8      	b.n	800c06a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d002      	beq.n	800bea4 <USB_HC_Halt+0x66>
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d173      	bne.n	800bf8c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	015a      	lsls	r2, r3, #5
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	4413      	add	r3, r2
 800beac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	697a      	ldr	r2, [r7, #20]
 800beb4:	0151      	lsls	r1, r2, #5
 800beb6:	69ba      	ldr	r2, [r7, #24]
 800beb8:	440a      	add	r2, r1
 800beba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bebe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bec2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	f003 0320 	and.w	r3, r3, #32
 800becc:	2b00      	cmp	r3, #0
 800bece:	f040 80cb 	bne.w	800c068 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d143      	bne.n	800bf66 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	015a      	lsls	r2, r3, #5
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	4413      	add	r3, r2
 800bee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	697a      	ldr	r2, [r7, #20]
 800beee:	0151      	lsls	r1, r2, #5
 800bef0:	69ba      	ldr	r2, [r7, #24]
 800bef2:	440a      	add	r2, r1
 800bef4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bef8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800befc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	015a      	lsls	r2, r3, #5
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	4413      	add	r3, r2
 800bf06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	697a      	ldr	r2, [r7, #20]
 800bf0e:	0151      	lsls	r1, r2, #5
 800bf10:	69ba      	ldr	r2, [r7, #24]
 800bf12:	440a      	add	r2, r1
 800bf14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf1c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	015a      	lsls	r2, r3, #5
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	4413      	add	r3, r2
 800bf26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	697a      	ldr	r2, [r7, #20]
 800bf2e:	0151      	lsls	r1, r2, #5
 800bf30:	69ba      	ldr	r2, [r7, #24]
 800bf32:	440a      	add	r2, r1
 800bf34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf3c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	3301      	adds	r3, #1
 800bf42:	61fb      	str	r3, [r7, #28]
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf4a:	d81d      	bhi.n	800bf88 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	015a      	lsls	r2, r3, #5
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	4413      	add	r3, r2
 800bf54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf62:	d0ec      	beq.n	800bf3e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf64:	e080      	b.n	800c068 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	015a      	lsls	r2, r3, #5
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	0151      	lsls	r1, r2, #5
 800bf78:	69ba      	ldr	r2, [r7, #24]
 800bf7a:	440a      	add	r2, r1
 800bf7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf84:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf86:	e06f      	b.n	800c068 <USB_HC_Halt+0x22a>
            break;
 800bf88:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf8a:	e06d      	b.n	800c068 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	015a      	lsls	r2, r3, #5
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	4413      	add	r3, r2
 800bf94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	697a      	ldr	r2, [r7, #20]
 800bf9c:	0151      	lsls	r1, r2, #5
 800bf9e:	69ba      	ldr	r2, [r7, #24]
 800bfa0:	440a      	add	r2, r1
 800bfa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bfa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfaa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d143      	bne.n	800c044 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	015a      	lsls	r2, r3, #5
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	697a      	ldr	r2, [r7, #20]
 800bfcc:	0151      	lsls	r1, r2, #5
 800bfce:	69ba      	ldr	r2, [r7, #24]
 800bfd0:	440a      	add	r2, r1
 800bfd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bfd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	015a      	lsls	r2, r3, #5
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	0151      	lsls	r1, r2, #5
 800bfee:	69ba      	ldr	r2, [r7, #24]
 800bff0:	440a      	add	r2, r1
 800bff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bffa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	015a      	lsls	r2, r3, #5
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	4413      	add	r3, r2
 800c004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	0151      	lsls	r1, r2, #5
 800c00e:	69ba      	ldr	r2, [r7, #24]
 800c010:	440a      	add	r2, r1
 800c012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c016:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c01a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	3301      	adds	r3, #1
 800c020:	61fb      	str	r3, [r7, #28]
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c028:	d81d      	bhi.n	800c066 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	015a      	lsls	r2, r3, #5
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	4413      	add	r3, r2
 800c032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c03c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c040:	d0ec      	beq.n	800c01c <USB_HC_Halt+0x1de>
 800c042:	e011      	b.n	800c068 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	015a      	lsls	r2, r3, #5
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	4413      	add	r3, r2
 800c04c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	697a      	ldr	r2, [r7, #20]
 800c054:	0151      	lsls	r1, r2, #5
 800c056:	69ba      	ldr	r2, [r7, #24]
 800c058:	440a      	add	r2, r1
 800c05a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c05e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c062:	6013      	str	r3, [r2, #0]
 800c064:	e000      	b.n	800c068 <USB_HC_Halt+0x22a>
          break;
 800c066:	bf00      	nop
    }
  }

  return HAL_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3724      	adds	r7, #36	; 0x24
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
	...

0800c078 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c078:	b480      	push	{r7}
 800c07a:	b087      	sub	sp, #28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c088:	78fb      	ldrb	r3, [r7, #3]
 800c08a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c08c:	2301      	movs	r3, #1
 800c08e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	04da      	lsls	r2, r3, #19
 800c094:	4b15      	ldr	r3, [pc, #84]	; (800c0ec <USB_DoPing+0x74>)
 800c096:	4013      	ands	r3, r2
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	0151      	lsls	r1, r2, #5
 800c09c:	697a      	ldr	r2, [r7, #20]
 800c09e:	440a      	add	r2, r1
 800c0a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0a8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	015a      	lsls	r2, r3, #5
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c0c0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0c8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	015a      	lsls	r2, r3, #5
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	371c      	adds	r7, #28
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	1ff80000 	.word	0x1ff80000

0800c0f0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7ff f97a 	bl	800b3fa <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c106:	2110      	movs	r1, #16
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff f9b1 	bl	800b470 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff f9d4 	bl	800b4bc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c114:	2300      	movs	r3, #0
 800c116:	613b      	str	r3, [r7, #16]
 800c118:	e01f      	b.n	800c15a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	015a      	lsls	r2, r3, #5
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	4413      	add	r3, r2
 800c122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c130:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c138:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c140:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	015a      	lsls	r2, r3, #5
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	4413      	add	r3, r2
 800c14a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c14e:	461a      	mov	r2, r3
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	3301      	adds	r3, #1
 800c158:	613b      	str	r3, [r7, #16]
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	2b0f      	cmp	r3, #15
 800c15e:	d9dc      	bls.n	800c11a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c160:	2300      	movs	r3, #0
 800c162:	613b      	str	r3, [r7, #16]
 800c164:	e034      	b.n	800c1d0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	015a      	lsls	r2, r3, #5
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	4413      	add	r3, r2
 800c16e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c17c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c184:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c18c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	015a      	lsls	r2, r3, #5
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	4413      	add	r3, r2
 800c196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c19a:	461a      	mov	r2, r3
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	617b      	str	r3, [r7, #20]
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1ac:	d80c      	bhi.n	800c1c8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	015a      	lsls	r2, r3, #5
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1c4:	d0ec      	beq.n	800c1a0 <USB_StopHost+0xb0>
 800c1c6:	e000      	b.n	800c1ca <USB_StopHost+0xda>
        break;
 800c1c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	613b      	str	r3, [r7, #16]
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	2b0f      	cmp	r3, #15
 800c1d4:	d9c7      	bls.n	800c166 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1dc:	461a      	mov	r2, r3
 800c1de:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f7ff f8f3 	bl	800b3d8 <USB_EnableGlobalInt>

  return HAL_OK;
 800c1f2:	2300      	movs	r3, #0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3718      	adds	r7, #24
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c200:	4904      	ldr	r1, [pc, #16]	; (800c214 <MX_FATFS_Init+0x18>)
 800c202:	4805      	ldr	r0, [pc, #20]	; (800c218 <MX_FATFS_Init+0x1c>)
 800c204:	f001 f98a 	bl	800d51c <FATFS_LinkDriver>
 800c208:	4603      	mov	r3, r0
 800c20a:	461a      	mov	r2, r3
 800c20c:	4b03      	ldr	r3, [pc, #12]	; (800c21c <MX_FATFS_Init+0x20>)
 800c20e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c210:	bf00      	nop
 800c212:	bd80      	pop	{r7, pc}
 800c214:	2400067c 	.word	0x2400067c
 800c218:	24000010 	.word	0x24000010
 800c21c:	24000680 	.word	0x24000680

0800c220 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	4603      	mov	r3, r0
 800c228:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800c22a:	4b06      	ldr	r3, [pc, #24]	; (800c244 <USER_initialize+0x24>)
 800c22c:	2201      	movs	r2, #1
 800c22e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c230:	4b04      	ldr	r3, [pc, #16]	; (800c244 <USER_initialize+0x24>)
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c236:	4618      	mov	r0, r3
 800c238:	370c      	adds	r7, #12
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop
 800c244:	2400000d 	.word	0x2400000d

0800c248 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	4603      	mov	r3, r0
 800c250:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800c252:	4b06      	ldr	r3, [pc, #24]	; (800c26c <USER_status+0x24>)
 800c254:	2201      	movs	r2, #1
 800c256:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c258:	4b04      	ldr	r3, [pc, #16]	; (800c26c <USER_status+0x24>)
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c25e:	4618      	mov	r0, r3
 800c260:	370c      	adds	r7, #12
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	2400000d 	.word	0x2400000d

0800c270 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	60b9      	str	r1, [r7, #8]
 800c278:	607a      	str	r2, [r7, #4]
 800c27a:	603b      	str	r3, [r7, #0]
 800c27c:	4603      	mov	r3, r0
 800c27e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800c280:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c282:	4618      	mov	r0, r3
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr

0800c28e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c28e:	b480      	push	{r7}
 800c290:	b085      	sub	sp, #20
 800c292:	af00      	add	r7, sp, #0
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
 800c298:	603b      	str	r3, [r7, #0]
 800c29a:	4603      	mov	r3, r0
 800c29c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800c29e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3714      	adds	r7, #20
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	603a      	str	r2, [r7, #0]
 800c2b6:	71fb      	strb	r3, [r7, #7]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	73fb      	strb	r3, [r7, #15]
    return res;
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c2ce:	b590      	push	{r4, r7, lr}
 800c2d0:	b089      	sub	sp, #36	; 0x24
 800c2d2:	af04      	add	r7, sp, #16
 800c2d4:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	2202      	movs	r2, #2
 800c2da:	2102      	movs	r1, #2
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fcb7 	bl	800cc50 <USBH_FindInterface>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c2e6:	7bfb      	ldrb	r3, [r7, #15]
 800c2e8:	2bff      	cmp	r3, #255	; 0xff
 800c2ea:	d002      	beq.n	800c2f2 <USBH_CDC_InterfaceInit+0x24>
 800c2ec:	7bfb      	ldrb	r3, [r7, #15]
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d901      	bls.n	800c2f6 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	e15a      	b.n	800c5ac <USBH_CDC_InterfaceInit+0x2de>
  }

  status = USBH_SelectInterface(phost, interface);
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fc88 	bl	800cc10 <USBH_SelectInterface>
 800c300:	4603      	mov	r3, r0
 800c302:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c304:	7bbb      	ldrb	r3, [r7, #14]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d001      	beq.n	800c30e <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c30a:	2302      	movs	r3, #2
 800c30c:	e14e      	b.n	800c5ac <USBH_CDC_InterfaceInit+0x2de>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800c314:	4413      	add	r3, r2
 800c316:	681c      	ldr	r4, [r3, #0]
 800c318:	2050      	movs	r0, #80	; 0x50
 800c31a:	f004 fa4f 	bl	80107bc <malloc>
 800c31e:	4603      	mov	r3, r0
 800c320:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800c328:	4413      	add	r3, r2
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	69db      	ldr	r3, [r3, #28]
 800c32e:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <USBH_CDC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c336:	2302      	movs	r3, #2
 800c338:	e138      	b.n	800c5ac <USBH_CDC_InterfaceInit+0x2de>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c33a:	2250      	movs	r2, #80	; 0x50
 800c33c:	2100      	movs	r1, #0
 800c33e:	68b8      	ldr	r0, [r7, #8]
 800c340:	f004 fa5a 	bl	80107f8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c344:	7bfb      	ldrb	r3, [r7, #15]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	211a      	movs	r1, #26
 800c34a:	fb01 f303 	mul.w	r3, r1, r3
 800c34e:	441a      	add	r2, r3
 800c350:	f643 138e 	movw	r3, #14734	; 0x398e
 800c354:	4413      	add	r3, r2
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	b25b      	sxtb	r3, r3
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	da17      	bge.n	800c38e <USBH_CDC_InterfaceInit+0xc0>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c35e:	7bfb      	ldrb	r3, [r7, #15]
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	211a      	movs	r1, #26
 800c364:	fb01 f303 	mul.w	r3, r1, r3
 800c368:	441a      	add	r2, r3
 800c36a:	f643 138e 	movw	r3, #14734	; 0x398e
 800c36e:	4413      	add	r3, r2
 800c370:	781a      	ldrb	r2, [r3, #0]
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c376:	7bfb      	ldrb	r3, [r7, #15]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	211a      	movs	r1, #26
 800c37c:	fb01 f303 	mul.w	r3, r1, r3
 800c380:	441a      	add	r2, r3
 800c382:	f643 1390 	movw	r3, #14736	; 0x3990
 800c386:	4413      	add	r3, r2
 800c388:	881a      	ldrh	r2, [r3, #0]
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	785b      	ldrb	r3, [r3, #1]
 800c392:	4619      	mov	r1, r3
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f001 f80e 	bl	800d3b6 <USBH_AllocPipe>
 800c39a:	4603      	mov	r3, r0
 800c39c:	461a      	mov	r2, r3
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	7819      	ldrb	r1, [r3, #0]
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	7858      	ldrb	r0, [r3, #1]
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	f643 135c 	movw	r3, #14684	; 0x395c
 800c3b0:	4413      	add	r3, r2
 800c3b2:	781c      	ldrb	r4, [r3, #0]
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	f643 135d 	movw	r3, #14685	; 0x395d
 800c3ba:	4413      	add	r3, r2
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	8952      	ldrh	r2, [r2, #10]
 800c3c2:	9202      	str	r2, [sp, #8]
 800c3c4:	2203      	movs	r2, #3
 800c3c6:	9201      	str	r2, [sp, #4]
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	4623      	mov	r3, r4
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 ffc2 	bl	800d358 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	4619      	mov	r1, r3
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f004 f919 	bl	8010614 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	210a      	movs	r1, #10
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fc31 	bl	800cc50 <USBH_FindInterface>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c3f2:	7bfb      	ldrb	r3, [r7, #15]
 800c3f4:	2bff      	cmp	r3, #255	; 0xff
 800c3f6:	d002      	beq.n	800c3fe <USBH_CDC_InterfaceInit+0x130>
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d901      	bls.n	800c402 <USBH_CDC_InterfaceInit+0x134>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c3fe:	2302      	movs	r3, #2
 800c400:	e0d4      	b.n	800c5ac <USBH_CDC_InterfaceInit+0x2de>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c402:	7bfb      	ldrb	r3, [r7, #15]
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	211a      	movs	r1, #26
 800c408:	fb01 f303 	mul.w	r3, r1, r3
 800c40c:	441a      	add	r2, r3
 800c40e:	f643 138e 	movw	r3, #14734	; 0x398e
 800c412:	4413      	add	r3, r2
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	b25b      	sxtb	r3, r3
 800c418:	2b00      	cmp	r3, #0
 800c41a:	da18      	bge.n	800c44e <USBH_CDC_InterfaceInit+0x180>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	211a      	movs	r1, #26
 800c422:	fb01 f303 	mul.w	r3, r1, r3
 800c426:	441a      	add	r2, r3
 800c428:	f643 138e 	movw	r3, #14734	; 0x398e
 800c42c:	4413      	add	r3, r2
 800c42e:	781a      	ldrb	r2, [r3, #0]
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c434:	7bfb      	ldrb	r3, [r7, #15]
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	211a      	movs	r1, #26
 800c43a:	fb01 f303 	mul.w	r3, r1, r3
 800c43e:	441a      	add	r2, r3
 800c440:	f643 1390 	movw	r3, #14736	; 0x3990
 800c444:	4413      	add	r3, r2
 800c446:	881a      	ldrh	r2, [r3, #0]
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	835a      	strh	r2, [r3, #26]
 800c44c:	e017      	b.n	800c47e <USBH_CDC_InterfaceInit+0x1b0>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c44e:	7bfb      	ldrb	r3, [r7, #15]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	211a      	movs	r1, #26
 800c454:	fb01 f303 	mul.w	r3, r1, r3
 800c458:	441a      	add	r2, r3
 800c45a:	f643 138e 	movw	r3, #14734	; 0x398e
 800c45e:	4413      	add	r3, r2
 800c460:	781a      	ldrb	r2, [r3, #0]
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c466:	7bfb      	ldrb	r3, [r7, #15]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	211a      	movs	r1, #26
 800c46c:	fb01 f303 	mul.w	r3, r1, r3
 800c470:	441a      	add	r2, r3
 800c472:	f643 1390 	movw	r3, #14736	; 0x3990
 800c476:	4413      	add	r3, r2
 800c478:	881a      	ldrh	r2, [r3, #0]
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c47e:	7bfb      	ldrb	r3, [r7, #15]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	211a      	movs	r1, #26
 800c484:	fb01 f303 	mul.w	r3, r1, r3
 800c488:	441a      	add	r2, r3
 800c48a:	f643 1396 	movw	r3, #14742	; 0x3996
 800c48e:	4413      	add	r3, r2
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	b25b      	sxtb	r3, r3
 800c494:	2b00      	cmp	r3, #0
 800c496:	da18      	bge.n	800c4ca <USBH_CDC_InterfaceInit+0x1fc>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c498:	7bfb      	ldrb	r3, [r7, #15]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	211a      	movs	r1, #26
 800c49e:	fb01 f303 	mul.w	r3, r1, r3
 800c4a2:	441a      	add	r2, r3
 800c4a4:	f643 1396 	movw	r3, #14742	; 0x3996
 800c4a8:	4413      	add	r3, r2
 800c4aa:	781a      	ldrb	r2, [r3, #0]
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	211a      	movs	r1, #26
 800c4b6:	fb01 f303 	mul.w	r3, r1, r3
 800c4ba:	441a      	add	r2, r3
 800c4bc:	f643 1398 	movw	r3, #14744	; 0x3998
 800c4c0:	4413      	add	r3, r2
 800c4c2:	881a      	ldrh	r2, [r3, #0]
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	835a      	strh	r2, [r3, #26]
 800c4c8:	e017      	b.n	800c4fa <USBH_CDC_InterfaceInit+0x22c>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c4ca:	7bfb      	ldrb	r3, [r7, #15]
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	211a      	movs	r1, #26
 800c4d0:	fb01 f303 	mul.w	r3, r1, r3
 800c4d4:	441a      	add	r2, r3
 800c4d6:	f643 1396 	movw	r3, #14742	; 0x3996
 800c4da:	4413      	add	r3, r2
 800c4dc:	781a      	ldrb	r2, [r3, #0]
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c4e2:	7bfb      	ldrb	r3, [r7, #15]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	211a      	movs	r1, #26
 800c4e8:	fb01 f303 	mul.w	r3, r1, r3
 800c4ec:	441a      	add	r2, r3
 800c4ee:	f643 1398 	movw	r3, #14744	; 0x3998
 800c4f2:	4413      	add	r3, r2
 800c4f4:	881a      	ldrh	r2, [r3, #0]
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	7b9b      	ldrb	r3, [r3, #14]
 800c4fe:	4619      	mov	r1, r3
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 ff58 	bl	800d3b6 <USBH_AllocPipe>
 800c506:	4603      	mov	r3, r0
 800c508:	461a      	mov	r2, r3
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	7bdb      	ldrb	r3, [r3, #15]
 800c512:	4619      	mov	r1, r3
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 ff4e 	bl	800d3b6 <USBH_AllocPipe>
 800c51a:	4603      	mov	r3, r0
 800c51c:	461a      	mov	r2, r3
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	7b59      	ldrb	r1, [r3, #13]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	7b98      	ldrb	r0, [r3, #14]
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	f643 135c 	movw	r3, #14684	; 0x395c
 800c530:	4413      	add	r3, r2
 800c532:	781c      	ldrb	r4, [r3, #0]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	f643 135d 	movw	r3, #14685	; 0x395d
 800c53a:	4413      	add	r3, r2
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	68ba      	ldr	r2, [r7, #8]
 800c540:	8b12      	ldrh	r2, [r2, #24]
 800c542:	9202      	str	r2, [sp, #8]
 800c544:	2202      	movs	r2, #2
 800c546:	9201      	str	r2, [sp, #4]
 800c548:	9300      	str	r3, [sp, #0]
 800c54a:	4623      	mov	r3, r4
 800c54c:	4602      	mov	r2, r0
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 ff02 	bl	800d358 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	7b19      	ldrb	r1, [r3, #12]
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	7bd8      	ldrb	r0, [r3, #15]
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	f643 135c 	movw	r3, #14684	; 0x395c
 800c562:	4413      	add	r3, r2
 800c564:	781c      	ldrb	r4, [r3, #0]
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	f643 135d 	movw	r3, #14685	; 0x395d
 800c56c:	4413      	add	r3, r2
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	8b52      	ldrh	r2, [r2, #26]
 800c574:	9202      	str	r2, [sp, #8]
 800c576:	2202      	movs	r2, #2
 800c578:	9201      	str	r2, [sp, #4]
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	4623      	mov	r3, r4
 800c57e:	4602      	mov	r2, r0
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fee9 	bl	800d358 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	2200      	movs	r2, #0
 800c58a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	7b5b      	ldrb	r3, [r3, #13]
 800c592:	2200      	movs	r2, #0
 800c594:	4619      	mov	r1, r3
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f004 f83c 	bl	8010614 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	7b1b      	ldrb	r3, [r3, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f004 f835 	bl	8010614 <USBH_LL_SetToggle>

  return USBH_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3714      	adds	r7, #20
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd90      	pop	{r4, r7, pc}

0800c5b4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800c5c2:	4413      	add	r3, r2
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	69db      	ldr	r3, [r3, #28]
 800c5c8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00e      	beq.n	800c5f0 <USBH_CDC_InterfaceDeInit+0x3c>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 fedc 	bl	800d396 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 ff08 	bl	800d3fa <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	7b1b      	ldrb	r3, [r3, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00e      	beq.n	800c616 <USBH_CDC_InterfaceDeInit+0x62>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	7b1b      	ldrb	r3, [r3, #12]
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 fec9 	bl	800d396 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	7b1b      	ldrb	r3, [r3, #12]
 800c608:	4619      	mov	r1, r3
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fef5 	bl	800d3fa <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	7b5b      	ldrb	r3, [r3, #13]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00e      	beq.n	800c63c <USBH_CDC_InterfaceDeInit+0x88>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	7b5b      	ldrb	r3, [r3, #13]
 800c622:	4619      	mov	r1, r3
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 feb6 	bl	800d396 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	7b5b      	ldrb	r3, [r3, #13]
 800c62e:	4619      	mov	r1, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 fee2 	bl	800d3fa <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800c642:	4413      	add	r3, r2
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	69db      	ldr	r3, [r3, #28]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00f      	beq.n	800c66c <USBH_CDC_InterfaceDeInit+0xb8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800c652:	4413      	add	r3, r2
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	69db      	ldr	r3, [r3, #28]
 800c658:	4618      	mov	r0, r3
 800c65a:	f004 f8b7 	bl	80107cc <free>
    phost->pActiveClass->pData = 0U;
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800c664:	4413      	add	r3, r2
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2200      	movs	r2, #0
 800c66a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b084      	sub	sp, #16
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800c684:	4413      	add	r3, r2
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	69db      	ldr	r3, [r3, #28]
 800c68a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	3340      	adds	r3, #64	; 0x40
 800c690:	4619      	mov	r1, r3
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f8b5 	bl	800c802 <GetLineCoding>
 800c698:	4603      	mov	r3, r0
 800c69a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c69c:	7afb      	ldrb	r3, [r7, #11]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d107      	bne.n	800c6b2 <USBH_CDC_ClassRequest+0x3c>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	f643 2314 	movw	r3, #14868	; 0x3a14
 800c6a8:	4413      	add	r3, r2
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2102      	movs	r1, #2
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c6b2:	7afb      	ldrb	r3, [r7, #11]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800c6d2:	4413      	add	r3, r2
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	69db      	ldr	r3, [r3, #28]
 800c6d8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c6e0:	2b04      	cmp	r3, #4
 800c6e2:	d877      	bhi.n	800c7d4 <USBH_CDC_Process+0x118>
 800c6e4:	a201      	add	r2, pc, #4	; (adr r2, 800c6ec <USBH_CDC_Process+0x30>)
 800c6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ea:	bf00      	nop
 800c6ec:	0800c701 	.word	0x0800c701
 800c6f0:	0800c707 	.word	0x0800c707
 800c6f4:	0800c737 	.word	0x0800c737
 800c6f8:	0800c7ab 	.word	0x0800c7ab
 800c6fc:	0800c7b9 	.word	0x0800c7b9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c700:	2300      	movs	r3, #0
 800c702:	73fb      	strb	r3, [r7, #15]
      break;
 800c704:	e06d      	b.n	800c7e2 <USBH_CDC_Process+0x126>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c70a:	4619      	mov	r1, r3
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 f897 	bl	800c840 <SetLineCoding>
 800c712:	4603      	mov	r3, r0
 800c714:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c716:	7bbb      	ldrb	r3, [r7, #14]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d104      	bne.n	800c726 <USBH_CDC_Process+0x6a>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	2202      	movs	r2, #2
 800c720:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c724:	e058      	b.n	800c7d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c726:	7bbb      	ldrb	r3, [r7, #14]
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d055      	beq.n	800c7d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2204      	movs	r2, #4
 800c730:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c734:	e050      	b.n	800c7d8 <USBH_CDC_Process+0x11c>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	3340      	adds	r3, #64	; 0x40
 800c73a:	4619      	mov	r1, r3
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 f860 	bl	800c802 <GetLineCoding>
 800c742:	4603      	mov	r3, r0
 800c744:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c746:	7bbb      	ldrb	r3, [r7, #14]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d126      	bne.n	800c79a <USBH_CDC_Process+0xde>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	2200      	movs	r2, #0
 800c750:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c75e:	791b      	ldrb	r3, [r3, #4]
 800c760:	429a      	cmp	r2, r3
 800c762:	d13b      	bne.n	800c7dc <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c76e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c770:	429a      	cmp	r2, r3
 800c772:	d133      	bne.n	800c7dc <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c77e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c780:	429a      	cmp	r2, r3
 800c782:	d12b      	bne.n	800c7dc <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c78c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c78e:	429a      	cmp	r2, r3
 800c790:	d124      	bne.n	800c7dc <USBH_CDC_Process+0x120>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f95c 	bl	800ca50 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c798:	e020      	b.n	800c7dc <USBH_CDC_Process+0x120>
        if (req_status != USBH_BUSY)
 800c79a:	7bbb      	ldrb	r3, [r7, #14]
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d01d      	beq.n	800c7dc <USBH_CDC_Process+0x120>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	2204      	movs	r2, #4
 800c7a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c7a8:	e018      	b.n	800c7dc <USBH_CDC_Process+0x120>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f867 	bl	800c87e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f8dc 	bl	800c96e <CDC_ProcessReception>
      break;
 800c7b6:	e014      	b.n	800c7e2 <USBH_CDC_Process+0x126>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 fb49 	bl	800ce52 <USBH_ClrFeature>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c7c4:	7bbb      	ldrb	r3, [r7, #14]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10a      	bne.n	800c7e0 <USBH_CDC_Process+0x124>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c7d2:	e005      	b.n	800c7e0 <USBH_CDC_Process+0x124>

    default:
      break;
 800c7d4:	bf00      	nop
 800c7d6:	e004      	b.n	800c7e2 <USBH_CDC_Process+0x126>
      break;
 800c7d8:	bf00      	nop
 800c7da:	e002      	b.n	800c7e2 <USBH_CDC_Process+0x126>
      break;
 800c7dc:	bf00      	nop
 800c7de:	e000      	b.n	800c7e2 <USBH_CDC_Process+0x126>
      break;
 800c7e0:	bf00      	nop

  }

  return status;
 800c7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3710      	adds	r7, #16
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	370c      	adds	r7, #12
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr

0800c802 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b082      	sub	sp, #8
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	22a1      	movs	r2, #161	; 0xa1
 800c810:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2221      	movs	r2, #33	; 0x21
 800c816:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2207      	movs	r2, #7
 800c828:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	2207      	movs	r2, #7
 800c82e:	4619      	mov	r1, r3
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fb32 	bl	800ce9a <USBH_CtlReq>
 800c836:	4603      	mov	r3, r0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3708      	adds	r7, #8
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2221      	movs	r2, #33	; 0x21
 800c84e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2220      	movs	r2, #32
 800c854:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2207      	movs	r2, #7
 800c866:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	2207      	movs	r2, #7
 800c86c:	4619      	mov	r1, r3
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 fb13 	bl	800ce9a <USBH_CtlReq>
 800c874:	4603      	mov	r3, r0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3708      	adds	r7, #8
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b086      	sub	sp, #24
 800c882:	af02      	add	r7, sp, #8
 800c884:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800c88c:	4413      	add	r3, r2
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	69db      	ldr	r3, [r3, #28]
 800c892:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c894:	2300      	movs	r3, #0
 800c896:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d002      	beq.n	800c8a8 <CDC_ProcessTransmission+0x2a>
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	d023      	beq.n	800c8ee <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800c8a6:	e05e      	b.n	800c966 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	8b12      	ldrh	r2, [r2, #24]
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d90b      	bls.n	800c8cc <CDC_ProcessTransmission+0x4e>
        USBH_BulkSendData(phost,
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	69d9      	ldr	r1, [r3, #28]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	8b1a      	ldrh	r2, [r3, #24]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	7b5b      	ldrb	r3, [r3, #13]
 800c8c0:	2001      	movs	r0, #1
 800c8c2:	9000      	str	r0, [sp, #0]
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fd02 	bl	800d2ce <USBH_BulkSendData>
 800c8ca:	e00b      	b.n	800c8e4 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	7b5b      	ldrb	r3, [r3, #13]
 800c8da:	2001      	movs	r0, #1
 800c8dc:	9000      	str	r0, [sp, #0]
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 fcf5 	bl	800d2ce <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2202      	movs	r2, #2
 800c8e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c8ec:	e03b      	b.n	800c966 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	7b5b      	ldrb	r3, [r3, #13]
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f003 fe5f 	bl	80105b8 <USBH_LL_GetURBState>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c8fe:	7afb      	ldrb	r3, [r7, #11]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d128      	bne.n	800c956 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	8b12      	ldrh	r2, [r2, #24]
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d90e      	bls.n	800c92e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	8b12      	ldrh	r2, [r2, #24]
 800c918:	1a9a      	subs	r2, r3, r2
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	69db      	ldr	r3, [r3, #28]
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	8b12      	ldrh	r2, [r2, #24]
 800c926:	441a      	add	r2, r3
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	61da      	str	r2, [r3, #28]
 800c92c:	e002      	b.n	800c934 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d004      	beq.n	800c946 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2201      	movs	r2, #1
 800c940:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c944:	e00e      	b.n	800c964 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2200      	movs	r2, #0
 800c94a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f86a 	bl	800ca28 <USBH_CDC_TransmitCallback>
      break;
 800c954:	e006      	b.n	800c964 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800c956:	7afb      	ldrb	r3, [r7, #11]
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d103      	bne.n	800c964 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2201      	movs	r2, #1
 800c960:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c964:	bf00      	nop
  }
}
 800c966:	bf00      	nop
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b086      	sub	sp, #24
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800c97c:	4413      	add	r3, r2
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	69db      	ldr	r3, [r3, #28]
 800c982:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c984:	2300      	movs	r3, #0
 800c986:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c98e:	2b03      	cmp	r3, #3
 800c990:	d002      	beq.n	800c998 <CDC_ProcessReception+0x2a>
 800c992:	2b04      	cmp	r3, #4
 800c994:	d00e      	beq.n	800c9b4 <CDC_ProcessReception+0x46>
#endif
      }
      break;

    default:
      break;
 800c996:	e043      	b.n	800ca20 <CDC_ProcessReception+0xb2>
      USBH_BulkReceiveData(phost,
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	6a19      	ldr	r1, [r3, #32]
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	8b5a      	ldrh	r2, [r3, #26]
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	7b1b      	ldrb	r3, [r3, #12]
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fcb9 	bl	800d31c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	2204      	movs	r2, #4
 800c9ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c9b2:	e035      	b.n	800ca20 <CDC_ProcessReception+0xb2>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	7b1b      	ldrb	r3, [r3, #12]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f003 fdfc 	bl	80105b8 <USBH_LL_GetURBState>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c9c4:	7cfb      	ldrb	r3, [r7, #19]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d129      	bne.n	800ca1e <CDC_ProcessReception+0xb0>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	7b1b      	ldrb	r3, [r3, #12]
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f003 fd57 	bl	8010484 <USBH_LL_GetLastXferSize>
 800c9d6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d016      	beq.n	800ca10 <CDC_ProcessReception+0xa2>
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	8b5b      	ldrh	r3, [r3, #26]
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d910      	bls.n	800ca10 <CDC_ProcessReception+0xa2>
          CDC_Handle->RxDataLength -= length ;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	1ad2      	subs	r2, r2, r3
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	6a1a      	ldr	r2, [r3, #32]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	441a      	add	r2, r3
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	2203      	movs	r2, #3
 800ca0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ca0e:	e006      	b.n	800ca1e <CDC_ProcessReception+0xb0>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 f80f 	bl	800ca3c <USBH_CDC_ReceiveCallback>
      break;
 800ca1e:	bf00      	nop
  }
}
 800ca20:	bf00      	nop
 800ca22:	3718      	adds	r7, #24
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ca30:	bf00      	nop
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ca44:	bf00      	nop
 800ca46:	370c      	adds	r7, #12
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d101      	bne.n	800ca7c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ca78:	2302      	movs	r3, #2
 800ca7a:	e038      	b.n	800caee <USBH_Init+0x8a>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	f643 230c 	movw	r3, #14860	; 0x3a0c
 800ca82:	4413      	add	r3, r2
 800ca84:	79fa      	ldrb	r2, [r7, #7]
 800ca86:	701a      	strb	r2, [r3, #0]

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800ca8e:	4413      	add	r3, r2
 800ca90:	2200      	movs	r2, #0
 800ca92:	601a      	str	r2, [r3, #0]
  phost->ClassNumber = 0U;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	601a      	str	r2, [r3, #0]

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f000 f829 	bl	800caf6 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	f643 1363 	movw	r3, #14691	; 0x3963
 800caaa:	4413      	add	r3, r2
 800caac:	2200      	movs	r2, #0
 800caae:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	f643 1360 	movw	r3, #14688	; 0x3960
 800cab6:	4413      	add	r3, r2
 800cab8:	2200      	movs	r2, #0
 800caba:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	f643 1361 	movw	r3, #14689	; 0x3961
 800cac2:	4413      	add	r3, r2
 800cac4:	2200      	movs	r2, #0
 800cac6:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	f643 1362 	movw	r3, #14690	; 0x3962
 800cace:	4413      	add	r3, r2
 800cad0:	2200      	movs	r2, #0
 800cad2:	701a      	strb	r2, [r3, #0]

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d005      	beq.n	800cae6 <USBH_Init+0x82>
  {
    phost->pUser = pUsrFunc;
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	f643 2314 	movw	r3, #14868	; 0x3a14
 800cae0:	4413      	add	r3, r2
 800cae2:	68ba      	ldr	r2, [r7, #8]
 800cae4:	601a      	str	r2, [r3, #0]

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f003 fc52 	bl	8010390 <USBH_LL_Init>

  return USBH_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800caf6:	b480      	push	{r7}
 800caf8:	b085      	sub	sp, #20
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800cafe:	2300      	movs	r3, #0
 800cb00:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cb02:	2300      	movs	r3, #0
 800cb04:	60fb      	str	r3, [r7, #12]
 800cb06:	e00a      	b.n	800cb1e <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	2200      	movs	r2, #0
 800cb16:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	60fb      	str	r3, [r7, #12]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2b0e      	cmp	r3, #14
 800cb22:	d9f1      	bls.n	800cb08 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cb24:	2300      	movs	r3, #0
 800cb26:	60fb      	str	r3, [r7, #12]
 800cb28:	e009      	b.n	800cb3e <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	4413      	add	r3, r2
 800cb30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cb34:	2200      	movs	r2, #0
 800cb36:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	60fb      	str	r3, [r7, #12]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 800cb44:	d3f1      	bcc.n	800cb2a <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2201      	movs	r2, #1
 800cb56:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	f643 2304 	movw	r3, #14852	; 0x3a04
 800cb5e:	4413      	add	r3, r2
 800cb60:	2200      	movs	r2, #0
 800cb62:	601a      	str	r2, [r3, #0]

  phost->Control.state = CTRL_SETUP;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2201      	movs	r2, #1
 800cb68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2240      	movs	r2, #64	; 0x40
 800cb6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2200      	movs	r2, #0
 800cb74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	f643 135c 	movw	r3, #14684	; 0x395c
 800cb7c:	4413      	add	r3, r2
 800cb7e:	2200      	movs	r2, #0
 800cb80:	701a      	strb	r2, [r3, #0]
  phost->device.speed = USBH_SPEED_FULL;
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	f643 135d 	movw	r3, #14685	; 0x395d
 800cb88:	4413      	add	r3, r2
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	701a      	strb	r2, [r3, #0]
  phost->device.RstCnt = 0U;
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	f643 135f 	movw	r3, #14687	; 0x395f
 800cb94:	4413      	add	r3, r2
 800cb96:	2200      	movs	r2, #0
 800cb98:	701a      	strb	r2, [r3, #0]
  phost->device.EnumCnt = 0U;
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	f643 135e 	movw	r3, #14686	; 0x395e
 800cba0:	4413      	add	r3, r2
 800cba2:	2200      	movs	r2, #0
 800cba4:	701a      	strb	r2, [r3, #0]

  return USBH_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3714      	adds	r7, #20
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d01a      	beq.n	800cbfe <USBH_RegisterClass+0x4a>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d111      	bne.n	800cbf8 <USBH_RegisterClass+0x44>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	1c59      	adds	r1, r3, #1
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	f502 5267 	add.w	r2, r2, #14784	; 0x39c0
 800cbe4:	6011      	str	r1, [r2, #0]
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	f603 636e 	addw	r3, r3, #3694	; 0xe6e
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	73fb      	strb	r3, [r7, #15]
 800cbf6:	e004      	b.n	800cc02 <USBH_RegisterClass+0x4e>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	73fb      	strb	r3, [r7, #15]
 800cbfc:	e001      	b.n	800cc02 <USBH_RegisterClass+0x4e>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cbfe:	2302      	movs	r3, #2
 800cc00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc02:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b085      	sub	sp, #20
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	f643 137c 	movw	r3, #14716	; 0x397c
 800cc26:	4413      	add	r3, r2
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	78fa      	ldrb	r2, [r7, #3]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d206      	bcs.n	800cc3e <USBH_SelectInterface+0x2e>
  {
    phost->device.current_interface = interface;
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	f643 1364 	movw	r3, #14692	; 0x3964
 800cc36:	4413      	add	r3, r2
 800cc38:	78fa      	ldrb	r2, [r7, #3]
 800cc3a:	701a      	strb	r2, [r3, #0]
 800cc3c:	e001      	b.n	800cc42 <USBH_SelectInterface+0x32>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cc3e:	2302      	movs	r3, #2
 800cc40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b087      	sub	sp, #28
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	4608      	mov	r0, r1
 800cc5a:	4611      	mov	r1, r2
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	4603      	mov	r3, r0
 800cc60:	70fb      	strb	r3, [r7, #3]
 800cc62:	460b      	mov	r3, r1
 800cc64:	70bb      	strb	r3, [r7, #2]
 800cc66:	4613      	mov	r3, r2
 800cc68:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	f643 1378 	movw	r3, #14712	; 0x3978
 800cc78:	4413      	add	r3, r2
 800cc7a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cc7c:	e025      	b.n	800ccca <USBH_FindInterface+0x7a>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cc7e:	7dfb      	ldrb	r3, [r7, #23]
 800cc80:	221a      	movs	r2, #26
 800cc82:	fb02 f303 	mul.w	r3, r2, r3
 800cc86:	3308      	adds	r3, #8
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	3302      	adds	r3, #2
 800cc8e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	795b      	ldrb	r3, [r3, #5]
 800cc94:	78fa      	ldrb	r2, [r7, #3]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d002      	beq.n	800cca0 <USBH_FindInterface+0x50>
 800cc9a:	78fb      	ldrb	r3, [r7, #3]
 800cc9c:	2bff      	cmp	r3, #255	; 0xff
 800cc9e:	d111      	bne.n	800ccc4 <USBH_FindInterface+0x74>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cca4:	78ba      	ldrb	r2, [r7, #2]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d002      	beq.n	800ccb0 <USBH_FindInterface+0x60>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ccaa:	78bb      	ldrb	r3, [r7, #2]
 800ccac:	2bff      	cmp	r3, #255	; 0xff
 800ccae:	d109      	bne.n	800ccc4 <USBH_FindInterface+0x74>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ccb4:	787a      	ldrb	r2, [r7, #1]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d002      	beq.n	800ccc0 <USBH_FindInterface+0x70>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ccba:	787b      	ldrb	r3, [r7, #1]
 800ccbc:	2bff      	cmp	r3, #255	; 0xff
 800ccbe:	d101      	bne.n	800ccc4 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 800ccc0:	7dfb      	ldrb	r3, [r7, #23]
 800ccc2:	e006      	b.n	800ccd2 <USBH_FindInterface+0x82>
    }
    if_ix++;
 800ccc4:	7dfb      	ldrb	r3, [r7, #23]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ccca:	7dfb      	ldrb	r3, [r7, #23]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d9d6      	bls.n	800cc7e <USBH_FindInterface+0x2e>
  }
  return 0xFFU;
 800ccd0:	23ff      	movs	r3, #255	; 0xff
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	371c      	adds	r7, #28
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b082      	sub	sp, #8
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f003 fb92 	bl	8010410 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ccec:	2101      	movs	r1, #1
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f003 fc77 	bl	80105e2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3708      	adds	r7, #8
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b083      	sub	sp, #12
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	f643 2304 	movw	r3, #14852	; 0x3a04
 800cd0e:	4413      	add	r3, r2
 800cd10:	683a      	ldr	r2, [r7, #0]
 800cd12:	601a      	str	r2, [r3, #0]
}
 800cd14:	bf00      	nop
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	f643 2304 	movw	r3, #14852	; 0x3a04
 800cd2e:	4413      	add	r3, r2
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	6879      	ldr	r1, [r7, #4]
 800cd36:	f643 2304 	movw	r3, #14852	; 0x3a04
 800cd3a:	440b      	add	r3, r1
 800cd3c:	601a      	str	r2, [r3, #0]
  USBH_HandleSof(phost);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 f804 	bl	800cd4c <USBH_HandleSof>
}
 800cd44:	bf00      	nop
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	2b0b      	cmp	r3, #11
 800cd5c:	d10e      	bne.n	800cd7c <USBH_HandleSof+0x30>
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800cd64:	4413      	add	r3, r2
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d007      	beq.n	800cd7c <USBH_HandleSof+0x30>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800cd72:	4413      	add	r3, r2
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	699b      	ldr	r3, [r3, #24]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	4798      	blx	r3
  }
}
 800cd7c:	bf00      	nop
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	f643 1363 	movw	r3, #14691	; 0x3963
 800cd92:	4413      	add	r3, r2
 800cd94:	2201      	movs	r2, #1
 800cd96:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800cd98:	bf00      	nop
}
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	f643 1363 	movw	r3, #14691	; 0x3963
 800cdb2:	4413      	add	r3, r2
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	701a      	strb	r2, [r3, #0]

  return;
 800cdb8:	bf00      	nop
}
 800cdba:	370c      	adds	r7, #12
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	f643 1360 	movw	r3, #14688	; 0x3960
 800cdd2:	4413      	add	r3, r2
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	f643 1361 	movw	r3, #14689	; 0x3961
 800cdde:	4413      	add	r3, r2
 800cde0:	2200      	movs	r2, #0
 800cde2:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	f643 1362 	movw	r3, #14690	; 0x3962
 800cdea:	4413      	add	r3, r2
 800cdec:	2200      	movs	r2, #0
 800cdee:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	370c      	adds	r7, #12
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr

0800cdfe <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b082      	sub	sp, #8
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	f643 1361 	movw	r3, #14689	; 0x3961
 800ce0c:	4413      	add	r3, r2
 800ce0e:	2201      	movs	r2, #1
 800ce10:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	f643 1360 	movw	r3, #14688	; 0x3960
 800ce18:	4413      	add	r3, r2
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	701a      	strb	r2, [r3, #0]
  phost->device.PortEnabled = 0U;
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	f643 1363 	movw	r3, #14691	; 0x3963
 800ce24:	4413      	add	r3, r2
 800ce26:	2200      	movs	r2, #0
 800ce28:	701a      	strb	r2, [r3, #0]

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f003 fb0d 	bl	801044a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	791b      	ldrb	r3, [r3, #4]
 800ce34:	4619      	mov	r1, r3
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 fadf 	bl	800d3fa <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	795b      	ldrb	r3, [r3, #5]
 800ce40:	4619      	mov	r1, r3
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fad9 	bl	800d3fa <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b082      	sub	sp, #8
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	789b      	ldrb	r3, [r3, #2]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d10f      	bne.n	800ce86 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2202      	movs	r2, #2
 800ce6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ce78:	78fb      	ldrb	r3, [r7, #3]
 800ce7a:	b29a      	uxth	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ce86:	2200      	movs	r2, #0
 800ce88:	2100      	movs	r1, #0
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 f805 	bl	800ce9a <USBH_CtlReq>
 800ce90:	4603      	mov	r3, r0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b086      	sub	sp, #24
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	60f8      	str	r0, [r7, #12]
 800cea2:	60b9      	str	r1, [r7, #8]
 800cea4:	4613      	mov	r3, r2
 800cea6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	789b      	ldrb	r3, [r3, #2]
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d002      	beq.n	800ceba <USBH_CtlReq+0x20>
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d00f      	beq.n	800ced8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ceb8:	e027      	b.n	800cf0a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	68ba      	ldr	r2, [r7, #8]
 800cebe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	88fa      	ldrh	r2, [r7, #6]
 800cec4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2201      	movs	r2, #1
 800ceca:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2202      	movs	r2, #2
 800ced0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ced2:	2301      	movs	r3, #1
 800ced4:	75fb      	strb	r3, [r7, #23]
      break;
 800ced6:	e018      	b.n	800cf0a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f000 f81b 	bl	800cf14 <USBH_HandleControl>
 800cede:	4603      	mov	r3, r0
 800cee0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cee2:	7dfb      	ldrb	r3, [r7, #23]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d002      	beq.n	800ceee <USBH_CtlReq+0x54>
 800cee8:	7dfb      	ldrb	r3, [r7, #23]
 800ceea:	2b03      	cmp	r3, #3
 800ceec:	d106      	bne.n	800cefc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2201      	movs	r2, #1
 800cef2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2200      	movs	r2, #0
 800cef8:	761a      	strb	r2, [r3, #24]
      break;
 800cefa:	e005      	b.n	800cf08 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800cefc:	7dfb      	ldrb	r3, [r7, #23]
 800cefe:	2b02      	cmp	r3, #2
 800cf00:	d102      	bne.n	800cf08 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2201      	movs	r2, #1
 800cf06:	709a      	strb	r2, [r3, #2]
      break;
 800cf08:	bf00      	nop
  }
  return status;
 800cf0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3718      	adds	r7, #24
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b086      	sub	sp, #24
 800cf18:	af02      	add	r7, sp, #8
 800cf1a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cf20:	2300      	movs	r3, #0
 800cf22:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	7e1b      	ldrb	r3, [r3, #24]
 800cf28:	3b01      	subs	r3, #1
 800cf2a:	2b0a      	cmp	r3, #10
 800cf2c:	f200 8160 	bhi.w	800d1f0 <USBH_HandleControl+0x2dc>
 800cf30:	a201      	add	r2, pc, #4	; (adr r2, 800cf38 <USBH_HandleControl+0x24>)
 800cf32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf36:	bf00      	nop
 800cf38:	0800cf65 	.word	0x0800cf65
 800cf3c:	0800cf7f 	.word	0x0800cf7f
 800cf40:	0800cfe9 	.word	0x0800cfe9
 800cf44:	0800d013 	.word	0x0800d013
 800cf48:	0800d04b 	.word	0x0800d04b
 800cf4c:	0800d079 	.word	0x0800d079
 800cf50:	0800d0cb 	.word	0x0800d0cb
 800cf54:	0800d0f1 	.word	0x0800d0f1
 800cf58:	0800d12d 	.word	0x0800d12d
 800cf5c:	0800d157 	.word	0x0800d157
 800cf60:	0800d195 	.word	0x0800d195
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f103 0110 	add.w	r1, r3, #16
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	795b      	ldrb	r3, [r3, #5]
 800cf6e:	461a      	mov	r2, r3
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 f94d 	bl	800d210 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2202      	movs	r2, #2
 800cf7a:	761a      	strb	r2, [r3, #24]
      break;
 800cf7c:	e143      	b.n	800d206 <USBH_HandleControl+0x2f2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	795b      	ldrb	r3, [r3, #5]
 800cf82:	4619      	mov	r1, r3
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f003 fb17 	bl	80105b8 <USBH_LL_GetURBState>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cf8e:	7bbb      	ldrb	r3, [r7, #14]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d11e      	bne.n	800cfd2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	7c1b      	ldrb	r3, [r3, #16]
 800cf98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf9c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	8adb      	ldrh	r3, [r3, #22]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00a      	beq.n	800cfbc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cfa6:	7b7b      	ldrb	r3, [r7, #13]
 800cfa8:	2b80      	cmp	r3, #128	; 0x80
 800cfaa:	d103      	bne.n	800cfb4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2203      	movs	r2, #3
 800cfb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cfb2:	e11f      	b.n	800d1f4 <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_DATA_OUT;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2205      	movs	r2, #5
 800cfb8:	761a      	strb	r2, [r3, #24]
      break;
 800cfba:	e11b      	b.n	800d1f4 <USBH_HandleControl+0x2e0>
          if (direction == USB_D2H)
 800cfbc:	7b7b      	ldrb	r3, [r7, #13]
 800cfbe:	2b80      	cmp	r3, #128	; 0x80
 800cfc0:	d103      	bne.n	800cfca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2209      	movs	r2, #9
 800cfc6:	761a      	strb	r2, [r3, #24]
      break;
 800cfc8:	e114      	b.n	800d1f4 <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_STATUS_IN;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2207      	movs	r2, #7
 800cfce:	761a      	strb	r2, [r3, #24]
      break;
 800cfd0:	e110      	b.n	800d1f4 <USBH_HandleControl+0x2e0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cfd2:	7bbb      	ldrb	r3, [r7, #14]
 800cfd4:	2b04      	cmp	r3, #4
 800cfd6:	d003      	beq.n	800cfe0 <USBH_HandleControl+0xcc>
 800cfd8:	7bbb      	ldrb	r3, [r7, #14]
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	f040 810a 	bne.w	800d1f4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	220b      	movs	r2, #11
 800cfe4:	761a      	strb	r2, [r3, #24]
      break;
 800cfe6:	e105      	b.n	800d1f4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	f643 2304 	movw	r3, #14852	; 0x3a04
 800cfee:	4413      	add	r3, r2
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6899      	ldr	r1, [r3, #8]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	899a      	ldrh	r2, [r3, #12]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	791b      	ldrb	r3, [r3, #4]
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 f944 	bl	800d292 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2204      	movs	r2, #4
 800d00e:	761a      	strb	r2, [r3, #24]
      break;
 800d010:	e0f9      	b.n	800d206 <USBH_HandleControl+0x2f2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	791b      	ldrb	r3, [r3, #4]
 800d016:	4619      	mov	r1, r3
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f003 facd 	bl	80105b8 <USBH_LL_GetURBState>
 800d01e:	4603      	mov	r3, r0
 800d020:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d022:	7bbb      	ldrb	r3, [r7, #14]
 800d024:	2b01      	cmp	r3, #1
 800d026:	d102      	bne.n	800d02e <USBH_HandleControl+0x11a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2209      	movs	r2, #9
 800d02c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d02e:	7bbb      	ldrb	r3, [r7, #14]
 800d030:	2b05      	cmp	r3, #5
 800d032:	d102      	bne.n	800d03a <USBH_HandleControl+0x126>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d034:	2303      	movs	r3, #3
 800d036:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d038:	e0de      	b.n	800d1f8 <USBH_HandleControl+0x2e4>
        if (URB_Status == USBH_URB_ERROR)
 800d03a:	7bbb      	ldrb	r3, [r7, #14]
 800d03c:	2b04      	cmp	r3, #4
 800d03e:	f040 80db 	bne.w	800d1f8 <USBH_HandleControl+0x2e4>
          phost->Control.state = CTRL_ERROR;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	220b      	movs	r2, #11
 800d046:	761a      	strb	r2, [r3, #24]
      break;
 800d048:	e0d6      	b.n	800d1f8 <USBH_HandleControl+0x2e4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6899      	ldr	r1, [r3, #8]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	899a      	ldrh	r2, [r3, #12]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	795b      	ldrb	r3, [r3, #5]
 800d056:	2001      	movs	r0, #1
 800d058:	9000      	str	r0, [sp, #0]
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f8f2 	bl	800d244 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	f643 2304 	movw	r3, #14852	; 0x3a04
 800d066:	4413      	add	r3, r2
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2206      	movs	r2, #6
 800d074:	761a      	strb	r2, [r3, #24]
      break;
 800d076:	e0c6      	b.n	800d206 <USBH_HandleControl+0x2f2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	795b      	ldrb	r3, [r3, #5]
 800d07c:	4619      	mov	r1, r3
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f003 fa9a 	bl	80105b8 <USBH_LL_GetURBState>
 800d084:	4603      	mov	r3, r0
 800d086:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d088:	7bbb      	ldrb	r3, [r7, #14]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d103      	bne.n	800d096 <USBH_HandleControl+0x182>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2207      	movs	r2, #7
 800d092:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d094:	e0b2      	b.n	800d1fc <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_STALL)
 800d096:	7bbb      	ldrb	r3, [r7, #14]
 800d098:	2b05      	cmp	r3, #5
 800d09a:	d105      	bne.n	800d0a8 <USBH_HandleControl+0x194>
        phost->Control.state = CTRL_STALLED;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	220c      	movs	r2, #12
 800d0a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d0a2:	2303      	movs	r3, #3
 800d0a4:	73fb      	strb	r3, [r7, #15]
      break;
 800d0a6:	e0a9      	b.n	800d1fc <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d0a8:	7bbb      	ldrb	r3, [r7, #14]
 800d0aa:	2b02      	cmp	r3, #2
 800d0ac:	d103      	bne.n	800d0b6 <USBH_HandleControl+0x1a2>
        phost->Control.state = CTRL_DATA_OUT;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2205      	movs	r2, #5
 800d0b2:	761a      	strb	r2, [r3, #24]
      break;
 800d0b4:	e0a2      	b.n	800d1fc <USBH_HandleControl+0x2e8>
        if (URB_Status == USBH_URB_ERROR)
 800d0b6:	7bbb      	ldrb	r3, [r7, #14]
 800d0b8:	2b04      	cmp	r3, #4
 800d0ba:	f040 809f 	bne.w	800d1fc <USBH_HandleControl+0x2e8>
          phost->Control.state = CTRL_ERROR;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	220b      	movs	r2, #11
 800d0c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	73fb      	strb	r3, [r7, #15]
      break;
 800d0c8:	e098      	b.n	800d1fc <USBH_HandleControl+0x2e8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	791b      	ldrb	r3, [r3, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 f8dd 	bl	800d292 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	f643 2304 	movw	r3, #14852	; 0x3a04
 800d0de:	4413      	add	r3, r2
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2208      	movs	r2, #8
 800d0ec:	761a      	strb	r2, [r3, #24]

      break;
 800d0ee:	e08a      	b.n	800d206 <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	791b      	ldrb	r3, [r3, #4]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f003 fa5e 	bl	80105b8 <USBH_LL_GetURBState>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d100:	7bbb      	ldrb	r3, [r7, #14]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d105      	bne.n	800d112 <USBH_HandleControl+0x1fe>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	220d      	movs	r2, #13
 800d10a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d10c:	2300      	movs	r3, #0
 800d10e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d110:	e076      	b.n	800d200 <USBH_HandleControl+0x2ec>
      else if (URB_Status == USBH_URB_ERROR)
 800d112:	7bbb      	ldrb	r3, [r7, #14]
 800d114:	2b04      	cmp	r3, #4
 800d116:	d103      	bne.n	800d120 <USBH_HandleControl+0x20c>
        phost->Control.state = CTRL_ERROR;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	220b      	movs	r2, #11
 800d11c:	761a      	strb	r2, [r3, #24]
      break;
 800d11e:	e06f      	b.n	800d200 <USBH_HandleControl+0x2ec>
        if (URB_Status == USBH_URB_STALL)
 800d120:	7bbb      	ldrb	r3, [r7, #14]
 800d122:	2b05      	cmp	r3, #5
 800d124:	d16c      	bne.n	800d200 <USBH_HandleControl+0x2ec>
          status = USBH_NOT_SUPPORTED;
 800d126:	2303      	movs	r3, #3
 800d128:	73fb      	strb	r3, [r7, #15]
      break;
 800d12a:	e069      	b.n	800d200 <USBH_HandleControl+0x2ec>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	795b      	ldrb	r3, [r3, #5]
 800d130:	2201      	movs	r2, #1
 800d132:	9200      	str	r2, [sp, #0]
 800d134:	2200      	movs	r2, #0
 800d136:	2100      	movs	r1, #0
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f883 	bl	800d244 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	f643 2304 	movw	r3, #14852	; 0x3a04
 800d144:	4413      	add	r3, r2
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	b29a      	uxth	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	220a      	movs	r2, #10
 800d152:	761a      	strb	r2, [r3, #24]
      break;
 800d154:	e057      	b.n	800d206 <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	795b      	ldrb	r3, [r3, #5]
 800d15a:	4619      	mov	r1, r3
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f003 fa2b 	bl	80105b8 <USBH_LL_GetURBState>
 800d162:	4603      	mov	r3, r0
 800d164:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d166:	7bbb      	ldrb	r3, [r7, #14]
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d105      	bne.n	800d178 <USBH_HandleControl+0x264>
      {
        status = USBH_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	220d      	movs	r2, #13
 800d174:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d176:	e045      	b.n	800d204 <USBH_HandleControl+0x2f0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d178:	7bbb      	ldrb	r3, [r7, #14]
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d103      	bne.n	800d186 <USBH_HandleControl+0x272>
        phost->Control.state = CTRL_STATUS_OUT;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2209      	movs	r2, #9
 800d182:	761a      	strb	r2, [r3, #24]
      break;
 800d184:	e03e      	b.n	800d204 <USBH_HandleControl+0x2f0>
        if (URB_Status == USBH_URB_ERROR)
 800d186:	7bbb      	ldrb	r3, [r7, #14]
 800d188:	2b04      	cmp	r3, #4
 800d18a:	d13b      	bne.n	800d204 <USBH_HandleControl+0x2f0>
          phost->Control.state = CTRL_ERROR;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	220b      	movs	r2, #11
 800d190:	761a      	strb	r2, [r3, #24]
      break;
 800d192:	e037      	b.n	800d204 <USBH_HandleControl+0x2f0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	7e5b      	ldrb	r3, [r3, #25]
 800d198:	3301      	adds	r3, #1
 800d19a:	b2da      	uxtb	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	765a      	strb	r2, [r3, #25]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	7e5b      	ldrb	r3, [r3, #25]
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d806      	bhi.n	800d1b6 <USBH_HandleControl+0x2a2>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d1b4:	e027      	b.n	800d206 <USBH_HandleControl+0x2f2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	f643 2314 	movw	r3, #14868	; 0x3a14
 800d1bc:	4413      	add	r3, r2
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2106      	movs	r1, #6
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	795b      	ldrb	r3, [r3, #5]
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 f911 	bl	800d3fa <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	791b      	ldrb	r3, [r3, #4]
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 f90b 	bl	800d3fa <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d1ea:	2302      	movs	r3, #2
 800d1ec:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ee:	e00a      	b.n	800d206 <USBH_HandleControl+0x2f2>

    default:
      break;
 800d1f0:	bf00      	nop
 800d1f2:	e008      	b.n	800d206 <USBH_HandleControl+0x2f2>
      break;
 800d1f4:	bf00      	nop
 800d1f6:	e006      	b.n	800d206 <USBH_HandleControl+0x2f2>
      break;
 800d1f8:	bf00      	nop
 800d1fa:	e004      	b.n	800d206 <USBH_HandleControl+0x2f2>
      break;
 800d1fc:	bf00      	nop
 800d1fe:	e002      	b.n	800d206 <USBH_HandleControl+0x2f2>
      break;
 800d200:	bf00      	nop
 800d202:	e000      	b.n	800d206 <USBH_HandleControl+0x2f2>
      break;
 800d204:	bf00      	nop
  }

  return status;
 800d206:	7bfb      	ldrb	r3, [r7, #15]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b088      	sub	sp, #32
 800d214:	af04      	add	r7, sp, #16
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	4613      	mov	r3, r2
 800d21c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d21e:	79f9      	ldrb	r1, [r7, #7]
 800d220:	2300      	movs	r3, #0
 800d222:	9303      	str	r3, [sp, #12]
 800d224:	2308      	movs	r3, #8
 800d226:	9302      	str	r3, [sp, #8]
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	9301      	str	r3, [sp, #4]
 800d22c:	2300      	movs	r3, #0
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	2300      	movs	r3, #0
 800d232:	2200      	movs	r2, #0
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	f003 f98c 	bl	8010552 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b088      	sub	sp, #32
 800d248:	af04      	add	r7, sp, #16
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	4611      	mov	r1, r2
 800d250:	461a      	mov	r2, r3
 800d252:	460b      	mov	r3, r1
 800d254:	80fb      	strh	r3, [r7, #6]
 800d256:	4613      	mov	r3, r2
 800d258:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d25a:	68fa      	ldr	r2, [r7, #12]
 800d25c:	f643 135d 	movw	r3, #14685	; 0x395d
 800d260:	4413      	add	r3, r2
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <USBH_CtlSendData+0x28>
  {
    do_ping = 0U;
 800d268:	2300      	movs	r3, #0
 800d26a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d26c:	7979      	ldrb	r1, [r7, #5]
 800d26e:	7e3b      	ldrb	r3, [r7, #24]
 800d270:	9303      	str	r3, [sp, #12]
 800d272:	88fb      	ldrh	r3, [r7, #6]
 800d274:	9302      	str	r3, [sp, #8]
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	9301      	str	r3, [sp, #4]
 800d27a:	2301      	movs	r3, #1
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	2300      	movs	r3, #0
 800d280:	2200      	movs	r2, #0
 800d282:	68f8      	ldr	r0, [r7, #12]
 800d284:	f003 f965 	bl	8010552 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d288:	2300      	movs	r3, #0
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b088      	sub	sp, #32
 800d296:	af04      	add	r7, sp, #16
 800d298:	60f8      	str	r0, [r7, #12]
 800d29a:	60b9      	str	r1, [r7, #8]
 800d29c:	4611      	mov	r1, r2
 800d29e:	461a      	mov	r2, r3
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	80fb      	strh	r3, [r7, #6]
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d2a8:	7979      	ldrb	r1, [r7, #5]
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	9303      	str	r3, [sp, #12]
 800d2ae:	88fb      	ldrh	r3, [r7, #6]
 800d2b0:	9302      	str	r3, [sp, #8]
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	9301      	str	r3, [sp, #4]
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	9300      	str	r3, [sp, #0]
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	2201      	movs	r2, #1
 800d2be:	68f8      	ldr	r0, [r7, #12]
 800d2c0:	f003 f947 	bl	8010552 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d2c4:	2300      	movs	r3, #0

}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3710      	adds	r7, #16
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b088      	sub	sp, #32
 800d2d2:	af04      	add	r7, sp, #16
 800d2d4:	60f8      	str	r0, [r7, #12]
 800d2d6:	60b9      	str	r1, [r7, #8]
 800d2d8:	4611      	mov	r1, r2
 800d2da:	461a      	mov	r2, r3
 800d2dc:	460b      	mov	r3, r1
 800d2de:	80fb      	strh	r3, [r7, #6]
 800d2e0:	4613      	mov	r3, r2
 800d2e2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d2e4:	68fa      	ldr	r2, [r7, #12]
 800d2e6:	f643 135d 	movw	r3, #14685	; 0x395d
 800d2ea:	4413      	add	r3, r2
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d001      	beq.n	800d2f6 <USBH_BulkSendData+0x28>
  {
    do_ping = 0U;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d2f6:	7979      	ldrb	r1, [r7, #5]
 800d2f8:	7e3b      	ldrb	r3, [r7, #24]
 800d2fa:	9303      	str	r3, [sp, #12]
 800d2fc:	88fb      	ldrh	r3, [r7, #6]
 800d2fe:	9302      	str	r3, [sp, #8]
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	9301      	str	r3, [sp, #4]
 800d304:	2301      	movs	r3, #1
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	2302      	movs	r3, #2
 800d30a:	2200      	movs	r2, #0
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	f003 f920 	bl	8010552 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3710      	adds	r7, #16
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b088      	sub	sp, #32
 800d320:	af04      	add	r7, sp, #16
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	4611      	mov	r1, r2
 800d328:	461a      	mov	r2, r3
 800d32a:	460b      	mov	r3, r1
 800d32c:	80fb      	strh	r3, [r7, #6]
 800d32e:	4613      	mov	r3, r2
 800d330:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d332:	7979      	ldrb	r1, [r7, #5]
 800d334:	2300      	movs	r3, #0
 800d336:	9303      	str	r3, [sp, #12]
 800d338:	88fb      	ldrh	r3, [r7, #6]
 800d33a:	9302      	str	r3, [sp, #8]
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	9301      	str	r3, [sp, #4]
 800d340:	2301      	movs	r3, #1
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	2302      	movs	r3, #2
 800d346:	2201      	movs	r2, #1
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f003 f902 	bl	8010552 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d34e:	2300      	movs	r3, #0
}
 800d350:	4618      	mov	r0, r3
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af04      	add	r7, sp, #16
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	4608      	mov	r0, r1
 800d362:	4611      	mov	r1, r2
 800d364:	461a      	mov	r2, r3
 800d366:	4603      	mov	r3, r0
 800d368:	70fb      	strb	r3, [r7, #3]
 800d36a:	460b      	mov	r3, r1
 800d36c:	70bb      	strb	r3, [r7, #2]
 800d36e:	4613      	mov	r3, r2
 800d370:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d372:	7878      	ldrb	r0, [r7, #1]
 800d374:	78ba      	ldrb	r2, [r7, #2]
 800d376:	78f9      	ldrb	r1, [r7, #3]
 800d378:	8b3b      	ldrh	r3, [r7, #24]
 800d37a:	9302      	str	r3, [sp, #8]
 800d37c:	7d3b      	ldrb	r3, [r7, #20]
 800d37e:	9301      	str	r3, [sp, #4]
 800d380:	7c3b      	ldrb	r3, [r7, #16]
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	4603      	mov	r3, r0
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f003 f891 	bl	80104ae <USBH_LL_OpenPipe>

  return USBH_OK;
 800d38c:	2300      	movs	r3, #0
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3708      	adds	r7, #8
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b082      	sub	sp, #8
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
 800d39e:	460b      	mov	r3, r1
 800d3a0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d3a2:	78fb      	ldrb	r3, [r7, #3]
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f003 f8b2 	bl	8010510 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3708      	adds	r7, #8
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b084      	sub	sp, #16
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
 800d3be:	460b      	mov	r3, r1
 800d3c0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f839 	bl	800d43a <USBH_GetFreePipe>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d3cc:	89fb      	ldrh	r3, [r7, #14]
 800d3ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d00b      	beq.n	800d3ee <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d3d6:	78fa      	ldrb	r2, [r7, #3]
 800d3d8:	89fb      	ldrh	r3, [r7, #14]
 800d3da:	f003 030f 	and.w	r3, r3, #15
 800d3de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3e2:	6879      	ldr	r1, [r7, #4]
 800d3e4:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	440b      	add	r3, r1
 800d3ec:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d3ee:	89fb      	ldrh	r3, [r7, #14]
 800d3f0:	b2db      	uxtb	r3, r3
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d3fa:	b480      	push	{r7}
 800d3fc:	b083      	sub	sp, #12
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
 800d402:	460b      	mov	r3, r1
 800d404:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d406:	78fb      	ldrb	r3, [r7, #3]
 800d408:	2b0a      	cmp	r3, #10
 800d40a:	d80f      	bhi.n	800d42c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d40c:	78fb      	ldrb	r3, [r7, #3]
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800d414:	009b      	lsls	r3, r3, #2
 800d416:	4413      	add	r3, r2
 800d418:	685a      	ldr	r2, [r3, #4]
 800d41a:	78fb      	ldrb	r3, [r7, #3]
 800d41c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d420:	6879      	ldr	r1, [r7, #4]
 800d422:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	440b      	add	r3, r1
 800d42a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	370c      	adds	r7, #12
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr

0800d43a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d43a:	b480      	push	{r7}
 800d43c:	b085      	sub	sp, #20
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d442:	2300      	movs	r3, #0
 800d444:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d446:	2300      	movs	r3, #0
 800d448:	73fb      	strb	r3, [r7, #15]
 800d44a:	e010      	b.n	800d46e <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	4413      	add	r3, r2
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d102      	bne.n	800d468 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800d462:	7bfb      	ldrb	r3, [r7, #15]
 800d464:	b29b      	uxth	r3, r3
 800d466:	e007      	b.n	800d478 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 800d468:	7bfb      	ldrb	r3, [r7, #15]
 800d46a:	3301      	adds	r3, #1
 800d46c:	73fb      	strb	r3, [r7, #15]
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
 800d470:	2b0a      	cmp	r3, #10
 800d472:	d9eb      	bls.n	800d44c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d474:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3714      	adds	r7, #20
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d484:	b480      	push	{r7}
 800d486:	b087      	sub	sp, #28
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	4613      	mov	r3, r2
 800d490:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d492:	2301      	movs	r3, #1
 800d494:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d496:	2300      	movs	r3, #0
 800d498:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d49a:	4b1f      	ldr	r3, [pc, #124]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d49c:	7a5b      	ldrb	r3, [r3, #9]
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d131      	bne.n	800d508 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d4a4:	4b1c      	ldr	r3, [pc, #112]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4a6:	7a5b      	ldrb	r3, [r3, #9]
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	4b1a      	ldr	r3, [pc, #104]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4ae:	2100      	movs	r1, #0
 800d4b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d4b2:	4b19      	ldr	r3, [pc, #100]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4b4:	7a5b      	ldrb	r3, [r3, #9]
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	4a17      	ldr	r2, [pc, #92]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	4413      	add	r3, r2
 800d4be:	68fa      	ldr	r2, [r7, #12]
 800d4c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d4c2:	4b15      	ldr	r3, [pc, #84]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4c4:	7a5b      	ldrb	r3, [r3, #9]
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	4b13      	ldr	r3, [pc, #76]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4cc:	4413      	add	r3, r2
 800d4ce:	79fa      	ldrb	r2, [r7, #7]
 800d4d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d4d2:	4b11      	ldr	r3, [pc, #68]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4d4:	7a5b      	ldrb	r3, [r3, #9]
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	1c5a      	adds	r2, r3, #1
 800d4da:	b2d1      	uxtb	r1, r2
 800d4dc:	4a0e      	ldr	r2, [pc, #56]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4de:	7251      	strb	r1, [r2, #9]
 800d4e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d4e2:	7dbb      	ldrb	r3, [r7, #22]
 800d4e4:	3330      	adds	r3, #48	; 0x30
 800d4e6:	b2da      	uxtb	r2, r3
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	223a      	movs	r2, #58	; 0x3a
 800d4f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	3302      	adds	r3, #2
 800d4f8:	222f      	movs	r2, #47	; 0x2f
 800d4fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	3303      	adds	r3, #3
 800d500:	2200      	movs	r2, #0
 800d502:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d504:	2300      	movs	r3, #0
 800d506:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d508:	7dfb      	ldrb	r3, [r7, #23]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	371c      	adds	r7, #28
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	24000178 	.word	0x24000178

0800d51c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d526:	2200      	movs	r2, #0
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7ff ffaa 	bl	800d484 <FATFS_LinkDriverEx>
 800d530:	4603      	mov	r3, r0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 800d53a:	b480      	push	{r7}
 800d53c:	b083      	sub	sp, #12
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	605a      	str	r2, [r3, #4]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	685a      	ldr	r2, [r3, #4]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	601a      	str	r2, [r3, #0]
}
 800d550:	bf00      	nop
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	685a      	ldr	r2, [r3, #4]
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	683a      	ldr	r2, [r7, #0]
 800d57a:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	683a      	ldr	r2, [r7, #0]
 800d582:	601a      	str	r2, [r3, #0]
}
 800d584:	bf00      	nop
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800d59a:	6839      	ldr	r1, [r7, #0]
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f7ff ffdd 	bl	800d55c <metal_list_add_before>
}
 800d5a2:	bf00      	nop
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b082      	sub	sp, #8
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 800d5b4:	6839      	ldr	r1, [r7, #0]
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f001 ff8a 	bl	800f4d0 <metal_machine_cache_flush>
}
 800d5bc:	bf00      	nop
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 800d5ce:	6839      	ldr	r1, [r7, #0]
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f001 ff88 	bl	800f4e6 <metal_machine_cache_invalidate>
}
 800d5d6:	bf00      	nop
 800d5d8:	3708      	adds	r7, #8
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b082      	sub	sp, #8
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
 800d5e6:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 800d5e8:	6839      	ldr	r1, [r7, #0]
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f7ff ffdd 	bl	800d5aa <__metal_cache_flush>
}
 800d5f0:	bf00      	nop
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 800d602:	6839      	ldr	r1, [r7, #0]
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7ff ffdd 	bl	800d5c4 <__metal_cache_invalidate>
}
 800d60a:	bf00      	nop
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
	...

0800d614 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d008      	beq.n	800d634 <metal_bus_register+0x20>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d004      	beq.n	800d634 <metal_bus_register+0x20>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d102      	bne.n	800d63a <metal_bus_register+0x26>
		return -EINVAL;
 800d634:	f06f 0315 	mvn.w	r3, #21
 800d638:	e026      	b.n	800d688 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	2100      	movs	r1, #0
 800d640:	4618      	mov	r0, r3
 800d642:	f000 f82b 	bl	800d69c <metal_bus_find>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d102      	bne.n	800d652 <metal_bus_register+0x3e>
		return -EEXIST;
 800d64c:	f06f 0310 	mvn.w	r3, #16
 800d650:	e01a      	b.n	800d688 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	331c      	adds	r3, #28
 800d656:	4618      	mov	r0, r3
 800d658:	f7ff ff6f 	bl	800d53a <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	3324      	adds	r3, #36	; 0x24
 800d660:	4619      	mov	r1, r3
 800d662:	480b      	ldr	r0, [pc, #44]	; (800d690 <metal_bus_register+0x7c>)
 800d664:	f7ff ff94 	bl	800d590 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 800d668:	4b0a      	ldr	r3, [pc, #40]	; (800d694 <metal_bus_register+0x80>)
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	2b06      	cmp	r3, #6
 800d66e:	d90a      	bls.n	800d686 <metal_bus_register+0x72>
 800d670:	4b08      	ldr	r3, [pc, #32]	; (800d694 <metal_bus_register+0x80>)
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d006      	beq.n	800d686 <metal_bus_register+0x72>
 800d678:	4b06      	ldr	r3, [pc, #24]	; (800d694 <metal_bus_register+0x80>)
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	6812      	ldr	r2, [r2, #0]
 800d680:	4905      	ldr	r1, [pc, #20]	; (800d698 <metal_bus_register+0x84>)
 800d682:	2007      	movs	r0, #7
 800d684:	4798      	blx	r3
	return 0;
 800d686:	2300      	movs	r3, #0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	24000af0 	.word	0x24000af0
 800d694:	24000ae8 	.word	0x24000ae8
 800d698:	0801179c 	.word	0x0801179c

0800d69c <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 800d6a6:	4b13      	ldr	r3, [pc, #76]	; (800d6f4 <metal_bus_find+0x58>)
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	60fb      	str	r3, [r7, #12]
 800d6ac:	e017      	b.n	800d6de <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	3b24      	subs	r3, #36	; 0x24
 800d6b2:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	6879      	ldr	r1, [r7, #4]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7f2 fe10 	bl	80002e0 <strcmp>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d003      	beq.n	800d6ce <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	e007      	b.n	800d6de <metal_bus_find+0x42>
			continue;
		if (result)
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d002      	beq.n	800d6da <metal_bus_find+0x3e>
			*result = bus;
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	68ba      	ldr	r2, [r7, #8]
 800d6d8:	601a      	str	r2, [r3, #0]
		return 0;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	e005      	b.n	800d6ea <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	4a05      	ldr	r2, [pc, #20]	; (800d6f8 <metal_bus_find+0x5c>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d1e3      	bne.n	800d6ae <metal_bus_find+0x12>
	}
	return -ENOENT;
 800d6e6:	f06f 0301 	mvn.w	r3, #1
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	24000ae8 	.word	0x24000ae8
 800d6f8:	24000af0 	.word	0x24000af0

0800d6fc <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b086      	sub	sp, #24
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00d      	beq.n	800d72a <metal_device_open+0x2e>
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d009      	beq.n	800d72a <metal_device_open+0x2e>
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d006      	beq.n	800d72a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d002      	beq.n	800d72a <metal_device_open+0x2e>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d102      	bne.n	800d730 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 800d72a:	f06f 0315 	mvn.w	r3, #21
 800d72e:	e01f      	b.n	800d770 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 800d730:	f107 0310 	add.w	r3, r7, #16
 800d734:	4619      	mov	r1, r3
 800d736:	68f8      	ldr	r0, [r7, #12]
 800d738:	f7ff ffb0 	bl	800d69c <metal_bus_find>
 800d73c:	6178      	str	r0, [r7, #20]
	if (error)
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d001      	beq.n	800d748 <metal_device_open+0x4c>
		return error;
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	e013      	b.n	800d770 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d102      	bne.n	800d756 <metal_device_open+0x5a>
		return -ENODEV;
 800d750:	f06f 0312 	mvn.w	r3, #18
 800d754:	e00c      	b.n	800d770 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	6938      	ldr	r0, [r7, #16]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	68b9      	ldr	r1, [r7, #8]
 800d760:	4798      	blx	r3
 800d762:	6178      	str	r0, [r7, #20]
	if (error)
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d001      	beq.n	800d76e <metal_device_open+0x72>
		return error;
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	e000      	b.n	800d770 <metal_device_open+0x74>

	return 0;
 800d76e:	2300      	movs	r3, #0
}
 800d770:	4618      	mov	r0, r3
 800d772:	3718      	adds	r7, #24
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d008      	beq.n	800d79a <metal_register_generic_device+0x22>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d003      	beq.n	800d79a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 800d796:	2b02      	cmp	r3, #2
 800d798:	d902      	bls.n	800d7a0 <metal_register_generic_device+0x28>
		return -EINVAL;
 800d79a:	f06f 0315 	mvn.w	r3, #21
 800d79e:	e009      	b.n	800d7b4 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	4a06      	ldr	r2, [pc, #24]	; (800d7bc <metal_register_generic_device+0x44>)
 800d7a4:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	336c      	adds	r3, #108	; 0x6c
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	4804      	ldr	r0, [pc, #16]	; (800d7c0 <metal_register_generic_device+0x48>)
 800d7ae:	f7ff feef 	bl	800d590 <metal_list_add_tail>
			    &device->node);
	return 0;
 800d7b2:	2300      	movs	r3, #0
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	24000044 	.word	0x24000044
 800d7c0:	24000b00 	.word	0x24000b00

0800d7c4 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b086      	sub	sp, #24
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 800d7d0:	4b12      	ldr	r3, [pc, #72]	; (800d81c <metal_generic_dev_open+0x58>)
 800d7d2:	699b      	ldr	r3, [r3, #24]
 800d7d4:	617b      	str	r3, [r7, #20]
 800d7d6:	e017      	b.n	800d808 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	3b6c      	subs	r3, #108	; 0x6c
 800d7dc:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	68b9      	ldr	r1, [r7, #8]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7f2 fd7b 	bl	80002e0 <strcmp>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d003      	beq.n	800d7f8 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	617b      	str	r3, [r7, #20]
 800d7f6:	e007      	b.n	800d808 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	693a      	ldr	r2, [r7, #16]
 800d7fc:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 800d7fe:	6938      	ldr	r0, [r7, #16]
 800d800:	f000 f88c 	bl	800d91c <metal_generic_dev_sys_open>
 800d804:	4603      	mov	r3, r0
 800d806:	e005      	b.n	800d814 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	4a05      	ldr	r2, [pc, #20]	; (800d820 <metal_generic_dev_open+0x5c>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d1e3      	bne.n	800d7d8 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 800d810:	f06f 0312 	mvn.w	r3, #18
}
 800d814:	4618      	mov	r0, r3
 800d816:	3718      	adds	r7, #24
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	24000ae8 	.word	0x24000ae8
 800d820:	24000b00 	.word	0x24000b00

0800d824 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b086      	sub	sp, #24
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	607a      	str	r2, [r7, #4]
 800d830:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 800d832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	429a      	cmp	r2, r3
 800d838:	d009      	beq.n	800d84e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 800d83a:	6a3a      	ldr	r2, [r7, #32]
 800d83c:	4613      	mov	r3, r2
 800d83e:	005b      	lsls	r3, r3, #1
 800d840:	4413      	add	r3, r2
 800d842:	009b      	lsls	r3, r3, #2
 800d844:	461a      	mov	r2, r3
 800d846:	6839      	ldr	r1, [r7, #0]
 800d848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d84a:	f002 ffc7 	bl	80107dc <memcpy>
	for (i = 0; i < nents_in; i++) {
 800d84e:	2300      	movs	r3, #0
 800d850:	617b      	str	r3, [r7, #20]
 800d852:	e02f      	b.n	800d8b4 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2b02      	cmp	r3, #2
 800d858:	d114      	bne.n	800d884 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 800d85a:	697a      	ldr	r2, [r7, #20]
 800d85c:	4613      	mov	r3, r2
 800d85e:	005b      	lsls	r3, r3, #1
 800d860:	4413      	add	r3, r2
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	461a      	mov	r2, r3
 800d866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d868:	4413      	add	r3, r2
 800d86a:	6818      	ldr	r0, [r3, #0]
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	4613      	mov	r3, r2
 800d870:	005b      	lsls	r3, r3, #1
 800d872:	4413      	add	r3, r2
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	461a      	mov	r2, r3
 800d878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87a:	4413      	add	r3, r2
 800d87c:	689b      	ldr	r3, [r3, #8]
 800d87e:	4619      	mov	r1, r3
 800d880:	f7ff fead 	bl	800d5de <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 800d884:	697a      	ldr	r2, [r7, #20]
 800d886:	4613      	mov	r3, r2
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	4413      	add	r3, r2
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	461a      	mov	r2, r3
 800d890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d892:	4413      	add	r3, r2
 800d894:	6818      	ldr	r0, [r3, #0]
 800d896:	697a      	ldr	r2, [r7, #20]
 800d898:	4613      	mov	r3, r2
 800d89a:	005b      	lsls	r3, r3, #1
 800d89c:	4413      	add	r3, r2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a4:	4413      	add	r3, r2
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	f7ff fea5 	bl	800d5f8 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	617b      	str	r3, [r7, #20]
 800d8b4:	697a      	ldr	r2, [r7, #20]
 800d8b6:	6a3b      	ldr	r3, [r7, #32]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	dbcb      	blt.n	800d854 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 800d8bc:	6a3b      	ldr	r3, [r7, #32]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3718      	adds	r7, #24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b086      	sub	sp, #24
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	60f8      	str	r0, [r7, #12]
 800d8ce:	60b9      	str	r1, [r7, #8]
 800d8d0:	607a      	str	r2, [r7, #4]
 800d8d2:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	617b      	str	r3, [r7, #20]
 800d8d8:	e017      	b.n	800d90a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 800d8da:	697a      	ldr	r2, [r7, #20]
 800d8dc:	4613      	mov	r3, r2
 800d8de:	005b      	lsls	r3, r3, #1
 800d8e0:	4413      	add	r3, r2
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	6818      	ldr	r0, [r3, #0]
 800d8ec:	697a      	ldr	r2, [r7, #20]
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	005b      	lsls	r3, r3, #1
 800d8f2:	4413      	add	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	4413      	add	r3, r2
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	4619      	mov	r1, r3
 800d900:	f7ff fe7a 	bl	800d5f8 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	3301      	adds	r3, #1
 800d908:	617b      	str	r3, [r7, #20]
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	6a3b      	ldr	r3, [r7, #32]
 800d90e:	429a      	cmp	r2, r3
 800d910:	dbe3      	blt.n	800d8da <metal_generic_dev_dma_unmap+0x14>
	}
}
 800d912:	bf00      	nop
 800d914:	bf00      	nop
 800d916:	3718      	adds	r7, #24
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 800d924:	2300      	movs	r3, #0
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	e013      	b.n	800d952 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	4613      	mov	r3, r2
 800d92e:	005b      	lsls	r3, r3, #1
 800d930:	4413      	add	r3, r2
 800d932:	011b      	lsls	r3, r3, #4
 800d934:	3308      	adds	r3, #8
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	4413      	add	r3, r2
 800d93a:	3304      	adds	r3, #4
 800d93c:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00b      	beq.n	800d95e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 800d946:	68b8      	ldr	r0, [r7, #8]
 800d948:	f000 f81e 	bl	800d988 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	3301      	adds	r3, #1
 800d950:	60fb      	str	r3, [r7, #12]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d3e6      	bcc.n	800d92a <metal_generic_dev_sys_open+0xe>
 800d95c:	e000      	b.n	800d960 <metal_generic_dev_sys_open+0x44>
			break;
 800d95e:	bf00      	nop
	}

	return 0;
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
	...

0800d96c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 800d974:	4803      	ldr	r0, [pc, #12]	; (800d984 <metal_sys_init+0x18>)
 800d976:	f7ff fe4d 	bl	800d614 <metal_bus_register>
	return 0;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3708      	adds	r7, #8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	24000044 	.word	0x24000044

0800d988 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b086      	sub	sp, #24
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	613b      	str	r3, [r7, #16]
	if (psize) {
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d02c      	beq.n	800d9fc <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	693a      	ldr	r2, [r7, #16]
 800d9a8:	fa22 f303 	lsr.w	r3, r2, r3
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d005      	beq.n	800d9bc <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d9ba:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 800d9bc:	2300      	movs	r3, #0
 800d9be:	617b      	str	r3, [r7, #20]
 800d9c0:	e013      	b.n	800d9ea <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	685a      	ldr	r2, [r3, #4]
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	4413      	add	r3, r2
 800d9cc:	6819      	ldr	r1, [r3, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	695b      	ldr	r3, [r3, #20]
 800d9d2:	693a      	ldr	r2, [r7, #16]
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f001 fd91 	bl	800f4fc <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	68fa      	ldr	r2, [r7, #12]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	617b      	str	r3, [r7, #20]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	689a      	ldr	r2, [r3, #8]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d9f6:	697a      	ldr	r2, [r7, #20]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d9e2      	bls.n	800d9c2 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 800d9fc:	bf00      	nop
 800d9fe:	3718      	adds	r7, #24
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <metal_list_init>:
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	605a      	str	r2, [r3, #4]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	685a      	ldr	r2, [r3, #4]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	601a      	str	r2, [r3, #0]
}
 800da1a:	bf00      	nop
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
	...

0800da28 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
	int error = 0;
 800da30:	2300      	movs	r3, #0
 800da32:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 800da34:	2220      	movs	r2, #32
 800da36:	2100      	movs	r1, #0
 800da38:	4810      	ldr	r0, [pc, #64]	; (800da7c <metal_init+0x54>)
 800da3a:	f002 fedd 	bl	80107f8 <memset>

	_metal.common.log_handler   = params->log_handler;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4a0e      	ldr	r2, [pc, #56]	; (800da7c <metal_init+0x54>)
 800da44:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	791a      	ldrb	r2, [r3, #4]
 800da4a:	4b0c      	ldr	r3, [pc, #48]	; (800da7c <metal_init+0x54>)
 800da4c:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 800da4e:	480c      	ldr	r0, [pc, #48]	; (800da80 <metal_init+0x58>)
 800da50:	f7ff ffd8 	bl	800da04 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 800da54:	480b      	ldr	r0, [pc, #44]	; (800da84 <metal_init+0x5c>)
 800da56:	f7ff ffd5 	bl	800da04 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 800da5a:	480b      	ldr	r0, [pc, #44]	; (800da88 <metal_init+0x60>)
 800da5c:	f7ff ffd2 	bl	800da04 <metal_list_init>

	error = metal_sys_init(params);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7ff ff83 	bl	800d96c <metal_sys_init>
 800da66:	60f8      	str	r0, [r7, #12]
	if (error)
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d001      	beq.n	800da72 <metal_init+0x4a>
		return error;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	e000      	b.n	800da74 <metal_init+0x4c>

	return error;
 800da72:	68fb      	ldr	r3, [r7, #12]
}
 800da74:	4618      	mov	r0, r3
 800da76:	3710      	adds	r7, #16
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	24000ae8 	.word	0x24000ae8
 800da80:	24000af0 	.word	0x24000af0
 800da84:	24000af8 	.word	0x24000af8
 800da88:	24000b00 	.word	0x24000b00

0800da8c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 800da9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da9e:	d009      	beq.n	800dab4 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	683a      	ldr	r2, [r7, #0]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d804      	bhi.n	800dab4 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681a      	ldr	r2, [r3, #0]
		: NULL);
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	4413      	add	r3, r2
 800dab2:	e000      	b.n	800dab6 <metal_io_virt+0x2a>
 800dab4:	2300      	movs	r3, #0
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	370c      	adds	r7, #12
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr

0800dac2 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 800dac2:	b5b0      	push	{r4, r5, r7, lr}
 800dac4:	b08a      	sub	sp, #40	; 0x28
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	60f8      	str	r0, [r7, #12]
 800daca:	60b9      	str	r1, [r7, #8]
 800dacc:	607a      	str	r2, [r7, #4]
 800dace:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 800dad0:	f107 0310 	add.w	r3, r7, #16
 800dad4:	2200      	movs	r2, #0
 800dad6:	601a      	str	r2, [r3, #0]
 800dad8:	605a      	str	r2, [r3, #4]
 800dada:	609a      	str	r2, [r3, #8]
 800dadc:	60da      	str	r2, [r3, #12]
 800dade:	611a      	str	r2, [r3, #16]
 800dae0:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	68ba      	ldr	r2, [r7, #8]
 800dae6:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	605a      	str	r2, [r3, #4]
	io->size = size;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	683a      	ldr	r2, [r7, #0]
 800daf2:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daf8:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 800dafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafc:	2b1f      	cmp	r3, #31
 800dafe:	d904      	bls.n	800db0a <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f04f 32ff 	mov.w	r2, #4294967295
 800db06:	611a      	str	r2, [r3, #16]
 800db08:	e006      	b.n	800db18 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 800db0a:	2201      	movs	r2, #1
 800db0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0e:	fa02 f303 	lsl.w	r3, r2, r3
 800db12:	1e5a      	subs	r2, r3, #1
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db1c:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 800db1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00b      	beq.n	800db3c <metal_io_init+0x7a>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800db28:	f103 0418 	add.w	r4, r3, #24
 800db2c:	4615      	mov	r5, r2
 800db2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db32:	e895 0003 	ldmia.w	r5, {r0, r1}
 800db36:	e884 0003 	stmia.w	r4, {r0, r1}
 800db3a:	e00a      	b.n	800db52 <metal_io_init+0x90>
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f103 0418 	add.w	r4, r3, #24
 800db42:	f107 0510 	add.w	r5, r7, #16
 800db46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800db4e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f7ff ff18 	bl	800d988 <metal_sys_io_mem_map>
}
 800db58:	bf00      	nop
 800db5a:	3728      	adds	r7, #40	; 0x28
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bdb0      	pop	{r4, r5, r7, pc}

0800db60 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 800db60:	b590      	push	{r4, r7, lr}
 800db62:	b08b      	sub	sp, #44	; 0x2c
 800db64:	af02      	add	r7, sp, #8
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	607a      	str	r2, [r7, #4]
 800db6c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 800db6e:	68b9      	ldr	r1, [r7, #8]
 800db70:	68f8      	ldr	r0, [r7, #12]
 800db72:	f7ff ff8b 	bl	800da8c <metal_io_virt>
 800db76:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	68ba      	ldr	r2, [r7, #8]
 800db82:	429a      	cmp	r2, r3
 800db84:	d902      	bls.n	800db8c <metal_io_block_read+0x2c>
		return -ERANGE;
 800db86:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800db8a:	e05c      	b.n	800dc46 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 800db8c:	683a      	ldr	r2, [r7, #0]
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	441a      	add	r2, r3
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	429a      	cmp	r2, r3
 800db98:	d904      	bls.n	800dba4 <metal_io_block_read+0x44>
		len = io->size - offset;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	689a      	ldr	r2, [r3, #8]
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	603b      	str	r3, [r7, #0]
	retlen = len;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	6a1b      	ldr	r3, [r3, #32]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d00a      	beq.n	800dbc6 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	6a1c      	ldr	r4, [r3, #32]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	2305      	movs	r3, #5
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	68b9      	ldr	r1, [r7, #8]
 800dbbe:	68f8      	ldr	r0, [r7, #12]
 800dbc0:	47a0      	blx	r4
 800dbc2:	6178      	str	r0, [r7, #20]
 800dbc4:	e03e      	b.n	800dc44 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 800dbc6:	f3bf 8f5b 	dmb	ish
		while ( len && (
 800dbca:	e00c      	b.n	800dbe6 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 800dbd0:	69bb      	ldr	r3, [r7, #24]
 800dbd2:	701a      	strb	r2, [r3, #0]
			dest++;
 800dbd4:	69bb      	ldr	r3, [r7, #24]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	61bb      	str	r3, [r7, #24]
			ptr++;
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	61fb      	str	r3, [r7, #28]
			len--;
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	3b01      	subs	r3, #1
 800dbe4:	603b      	str	r3, [r7, #0]
		while ( len && (
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d017      	beq.n	800dc1c <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1ea      	bne.n	800dbcc <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d1e5      	bne.n	800dbcc <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800dc00:	e00c      	b.n	800dc1c <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	681a      	ldr	r2, [r3, #0]
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	3304      	adds	r3, #4
 800dc14:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	3b04      	subs	r3, #4
 800dc1a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	2b03      	cmp	r3, #3
 800dc20:	dcef      	bgt.n	800dc02 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 800dc22:	e00c      	b.n	800dc3e <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 800dc2c:	69bb      	ldr	r3, [r7, #24]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	61bb      	str	r3, [r7, #24]
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	3301      	adds	r3, #1
 800dc36:	61fb      	str	r3, [r7, #28]
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	603b      	str	r3, [r7, #0]
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d1ef      	bne.n	800dc24 <metal_io_block_read+0xc4>
	}
	return retlen;
 800dc44:	697b      	ldr	r3, [r7, #20]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3724      	adds	r7, #36	; 0x24
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd90      	pop	{r4, r7, pc}

0800dc4e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 800dc4e:	b590      	push	{r4, r7, lr}
 800dc50:	b08b      	sub	sp, #44	; 0x2c
 800dc52:	af02      	add	r7, sp, #8
 800dc54:	60f8      	str	r0, [r7, #12]
 800dc56:	60b9      	str	r1, [r7, #8]
 800dc58:	607a      	str	r2, [r7, #4]
 800dc5a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 800dc5c:	68b9      	ldr	r1, [r7, #8]
 800dc5e:	68f8      	ldr	r0, [r7, #12]
 800dc60:	f7ff ff14 	bl	800da8c <metal_io_virt>
 800dc64:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	689b      	ldr	r3, [r3, #8]
 800dc6e:	68ba      	ldr	r2, [r7, #8]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d902      	bls.n	800dc7a <metal_io_block_write+0x2c>
		return -ERANGE;
 800dc74:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800dc78:	e05b      	b.n	800dd32 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	441a      	add	r2, r3
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	689b      	ldr	r3, [r3, #8]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d904      	bls.n	800dc92 <metal_io_block_write+0x44>
		len = io->size - offset;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	689a      	ldr	r2, [r3, #8]
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	1ad3      	subs	r3, r2, r3
 800dc90:	603b      	str	r3, [r7, #0]
	retlen = len;
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d017      	beq.n	800dcce <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	9300      	str	r3, [sp, #0]
 800dca6:	2305      	movs	r3, #5
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	68b9      	ldr	r1, [r7, #8]
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	47a0      	blx	r4
 800dcb0:	6178      	str	r0, [r7, #20]
 800dcb2:	e03d      	b.n	800dd30 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	701a      	strb	r2, [r3, #0]
			ptr++;
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	61fb      	str	r3, [r7, #28]
			source++;
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	61bb      	str	r3, [r7, #24]
			len--;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	3b01      	subs	r3, #1
 800dccc:	603b      	str	r3, [r7, #0]
		while ( len && (
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d017      	beq.n	800dd04 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d1ea      	bne.n	800dcb4 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d1e5      	bne.n	800dcb4 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800dce8:	e00c      	b.n	800dd04 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 800dcea:	69bb      	ldr	r3, [r7, #24]
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	3304      	adds	r3, #4
 800dcf6:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	3304      	adds	r3, #4
 800dcfc:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	3b04      	subs	r3, #4
 800dd02:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	2b03      	cmp	r3, #3
 800dd08:	dcef      	bgt.n	800dcea <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 800dd0a:	e00c      	b.n	800dd26 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	3301      	adds	r3, #1
 800dd18:	61fb      	str	r3, [r7, #28]
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	61bb      	str	r3, [r7, #24]
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	3b01      	subs	r3, #1
 800dd24:	603b      	str	r3, [r7, #0]
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d1ef      	bne.n	800dd0c <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 800dd2c:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800dd30:	697b      	ldr	r3, [r7, #20]
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3724      	adds	r7, #36	; 0x24
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd90      	pop	{r4, r7, pc}

0800dd3a <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 800dd3a:	b590      	push	{r4, r7, lr}
 800dd3c:	b08b      	sub	sp, #44	; 0x2c
 800dd3e:	af02      	add	r7, sp, #8
 800dd40:	60f8      	str	r0, [r7, #12]
 800dd42:	60b9      	str	r1, [r7, #8]
 800dd44:	603b      	str	r3, [r7, #0]
 800dd46:	4613      	mov	r3, r2
 800dd48:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 800dd4a:	68b9      	ldr	r1, [r7, #8]
 800dd4c:	68f8      	ldr	r0, [r7, #12]
 800dd4e:	f7ff fe9d 	bl	800da8c <metal_io_virt>
 800dd52:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	68ba      	ldr	r2, [r7, #8]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d902      	bls.n	800dd68 <metal_io_block_set+0x2e>
		return -ERANGE;
 800dd62:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800dd66:	e05d      	b.n	800de24 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 800dd68:	683a      	ldr	r2, [r7, #0]
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	441a      	add	r2, r3
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d904      	bls.n	800dd80 <metal_io_block_set+0x46>
		len = io->size - offset;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	689a      	ldr	r2, [r3, #8]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	1ad3      	subs	r3, r2, r3
 800dd7e:	603b      	str	r3, [r7, #0]
	retlen = len;
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d009      	beq.n	800dda0 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800dd90:	79fa      	ldrb	r2, [r7, #7]
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	2305      	movs	r3, #5
 800dd98:	68b9      	ldr	r1, [r7, #8]
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	47a0      	blx	r4
 800dd9e:	e040      	b.n	800de22 <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 800dda0:	79fb      	ldrb	r3, [r7, #7]
 800dda2:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 800dda4:	2301      	movs	r3, #1
 800dda6:	617b      	str	r3, [r7, #20]
 800dda8:	e00a      	b.n	800ddc0 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 800ddaa:	79fa      	ldrb	r2, [r7, #7]
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	00db      	lsls	r3, r3, #3
 800ddb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ddb4:	69ba      	ldr	r2, [r7, #24]
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	617b      	str	r3, [r7, #20]
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	2b03      	cmp	r3, #3
 800ddc4:	d9f1      	bls.n	800ddaa <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800ddc6:	e008      	b.n	800ddda <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	79fa      	ldrb	r2, [r7, #7]
 800ddcc:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	61fb      	str	r3, [r7, #28]
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	3b01      	subs	r3, #1
 800ddd8:	603b      	str	r3, [r7, #0]
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00e      	beq.n	800ddfe <metal_io_block_set+0xc4>
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	f003 0303 	and.w	r3, r3, #3
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d1ee      	bne.n	800ddc8 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800ddea:	e008      	b.n	800ddfe <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	69ba      	ldr	r2, [r7, #24]
 800ddf0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	3304      	adds	r3, #4
 800ddf6:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	3b04      	subs	r3, #4
 800ddfc:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	2b03      	cmp	r3, #3
 800de02:	dcf3      	bgt.n	800ddec <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 800de04:	e008      	b.n	800de18 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	79fa      	ldrb	r2, [r7, #7]
 800de0a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	3301      	adds	r3, #1
 800de10:	61fb      	str	r3, [r7, #28]
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	3b01      	subs	r3, #1
 800de16:	603b      	str	r3, [r7, #0]
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d1f3      	bne.n	800de06 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 800de1e:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800de22:	693b      	ldr	r3, [r7, #16]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3724      	adds	r7, #36	; 0x24
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd90      	pop	{r4, r7, pc}

0800de2c <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 800de2c:	b40e      	push	{r1, r2, r3}
 800de2e:	b480      	push	{r7}
 800de30:	b082      	sub	sp, #8
 800de32:	af00      	add	r7, sp, #0
 800de34:	4603      	mov	r3, r0
 800de36:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	b003      	add	sp, #12
 800de44:	4770      	bx	lr

0800de46 <metal_io_virt>:
{
 800de46:	b480      	push	{r7}
 800de48:	b083      	sub	sp, #12
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
 800de4e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
		: NULL);
 800de54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de58:	d009      	beq.n	800de6e <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	689b      	ldr	r3, [r3, #8]
 800de5e:	683a      	ldr	r2, [r7, #0]
 800de60:	429a      	cmp	r2, r3
 800de62:	d804      	bhi.n	800de6e <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681a      	ldr	r2, [r3, #0]
		: NULL);
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	4413      	add	r3, r2
 800de6c:	e000      	b.n	800de70 <metal_io_virt+0x2a>
 800de6e:	2300      	movs	r3, #0
}
 800de70:	4618      	mov	r0, r3
 800de72:	370c      	adds	r7, #12
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr

0800de7c <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b085      	sub	sp, #20
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	683a      	ldr	r2, [r7, #0]
 800de8c:	1ad3      	subs	r3, r2, r3
 800de8e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	689b      	ldr	r3, [r3, #8]
 800de94:	68fa      	ldr	r2, [r7, #12]
 800de96:	429a      	cmp	r2, r3
 800de98:	d201      	bcs.n	800de9e <metal_io_virt_to_offset+0x22>
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	e001      	b.n	800dea2 <metal_io_virt_to_offset+0x26>
 800de9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3714      	adds	r7, #20
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr
	...

0800deb0 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 800deb0:	b590      	push	{r4, r7, lr}
 800deb2:	b08d      	sub	sp, #52	; 0x34
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	60b9      	str	r1, [r7, #8]
 800deba:	603b      	str	r3, [r7, #0]
 800debc:	4613      	mov	r3, r2
 800debe:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 800dec0:	68b9      	ldr	r1, [r7, #8]
 800dec2:	68f8      	ldr	r0, [r7, #12]
 800dec4:	f7ff ffbf 	bl	800de46 <metal_io_virt>
 800dec8:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	699b      	ldr	r3, [r3, #24]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d009      	beq.n	800dee6 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	699c      	ldr	r4, [r3, #24]
 800ded6:	79fa      	ldrb	r2, [r7, #7]
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	68b9      	ldr	r1, [r7, #8]
 800dedc:	68f8      	ldr	r0, [r7, #12]
 800dede:	47a0      	blx	r4
 800dee0:	4602      	mov	r2, r0
 800dee2:	460b      	mov	r3, r1
 800dee4:	e057      	b.n	800df96 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 800dee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d011      	beq.n	800df10 <metal_io_read+0x60>
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	2b01      	cmp	r3, #1
 800def0:	d10e      	bne.n	800df10 <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 800def2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def4:	62bb      	str	r3, [r7, #40]	; 0x28
 800def6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def8:	f3bf 8f5b 	dmb	ish
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	f3bf 8f5b 	dmb	ish
 800df02:	b2db      	uxtb	r3, r3
 800df04:	76fb      	strb	r3, [r7, #27]
 800df06:	7efb      	ldrb	r3, [r7, #27]
 800df08:	b2da      	uxtb	r2, r3
 800df0a:	f04f 0300 	mov.w	r3, #0
 800df0e:	e042      	b.n	800df96 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 800df10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df12:	2b00      	cmp	r3, #0
 800df14:	d011      	beq.n	800df3a <metal_io_read+0x8a>
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2b02      	cmp	r3, #2
 800df1a:	d10e      	bne.n	800df3a <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 800df1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1e:	627b      	str	r3, [r7, #36]	; 0x24
 800df20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df22:	f3bf 8f5b 	dmb	ish
 800df26:	881b      	ldrh	r3, [r3, #0]
 800df28:	f3bf 8f5b 	dmb	ish
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	833b      	strh	r3, [r7, #24]
 800df30:	8b3b      	ldrh	r3, [r7, #24]
 800df32:	b29a      	uxth	r2, r3
 800df34:	f04f 0300 	mov.w	r3, #0
 800df38:	e02d      	b.n	800df96 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 800df3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d010      	beq.n	800df62 <metal_io_read+0xb2>
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	2b04      	cmp	r3, #4
 800df44:	d10d      	bne.n	800df62 <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 800df46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df48:	623b      	str	r3, [r7, #32]
 800df4a:	6a3b      	ldr	r3, [r7, #32]
 800df4c:	f3bf 8f5b 	dmb	ish
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f3bf 8f5b 	dmb	ish
 800df56:	617b      	str	r3, [r7, #20]
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	461a      	mov	r2, r3
 800df5c:	f04f 0300 	mov.w	r3, #0
 800df60:	e019      	b.n	800df96 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 800df62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df64:	2b00      	cmp	r3, #0
 800df66:	d010      	beq.n	800df8a <metal_io_read+0xda>
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	2b04      	cmp	r3, #4
 800df6c:	d10d      	bne.n	800df8a <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 800df6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df70:	61fb      	str	r3, [r7, #28]
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	f3bf 8f5b 	dmb	ish
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f3bf 8f5b 	dmb	ish
 800df7e:	613b      	str	r3, [r7, #16]
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	461a      	mov	r2, r3
 800df84:	f04f 0300 	mov.w	r3, #0
 800df88:	e005      	b.n	800df96 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 800df8a:	4b05      	ldr	r3, [pc, #20]	; (800dfa0 <metal_io_read+0xf0>)
 800df8c:	4a05      	ldr	r2, [pc, #20]	; (800dfa4 <metal_io_read+0xf4>)
 800df8e:	21f0      	movs	r1, #240	; 0xf0
 800df90:	4805      	ldr	r0, [pc, #20]	; (800dfa8 <metal_io_read+0xf8>)
 800df92:	f002 fbb9 	bl	8010708 <__assert_func>
	return 0; /* quiet compiler */
}
 800df96:	4610      	mov	r0, r2
 800df98:	4619      	mov	r1, r3
 800df9a:	3734      	adds	r7, #52	; 0x34
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd90      	pop	{r4, r7, pc}
 800dfa0:	0801185c 	.word	0x0801185c
 800dfa4:	08011a08 	.word	0x08011a08
 800dfa8:	08011860 	.word	0x08011860

0800dfac <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 800dfac:	b590      	push	{r4, r7, lr}
 800dfae:	b08f      	sub	sp, #60	; 0x3c
 800dfb0:	af02      	add	r7, sp, #8
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 800dfba:	68b9      	ldr	r1, [r7, #8]
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f7ff ff42 	bl	800de46 <metal_io_virt>
 800dfc2:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	69db      	ldr	r3, [r3, #28]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d00c      	beq.n	800dfe6 <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	69dc      	ldr	r4, [r3, #28]
 800dfd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfd2:	9301      	str	r3, [sp, #4]
 800dfd4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dfd8:	9300      	str	r3, [sp, #0]
 800dfda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfde:	68b9      	ldr	r1, [r7, #8]
 800dfe0:	68f8      	ldr	r0, [r7, #12]
 800dfe2:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 800dfe4:	e04e      	b.n	800e084 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 800dfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00e      	beq.n	800e00a <metal_io_write+0x5e>
 800dfec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfee:	2b01      	cmp	r3, #1
 800dff0:	d10b      	bne.n	800e00a <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 800dff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff4:	62bb      	str	r3, [r7, #40]	; 0x28
 800dff6:	783b      	ldrb	r3, [r7, #0]
 800dff8:	76fb      	strb	r3, [r7, #27]
 800dffa:	7efa      	ldrb	r2, [r7, #27]
 800dffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffe:	f3bf 8f5b 	dmb	ish
 800e002:	701a      	strb	r2, [r3, #0]
 800e004:	f3bf 8f5b 	dmb	ish
 800e008:	e03c      	b.n	800e084 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 800e00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00e      	beq.n	800e02e <metal_io_write+0x82>
 800e010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e012:	2b02      	cmp	r3, #2
 800e014:	d10b      	bne.n	800e02e <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 800e016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e018:	627b      	str	r3, [r7, #36]	; 0x24
 800e01a:	883b      	ldrh	r3, [r7, #0]
 800e01c:	833b      	strh	r3, [r7, #24]
 800e01e:	8b3a      	ldrh	r2, [r7, #24]
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e022:	f3bf 8f5b 	dmb	ish
 800e026:	801a      	strh	r2, [r3, #0]
 800e028:	f3bf 8f5b 	dmb	ish
 800e02c:	e02a      	b.n	800e084 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 800e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e030:	2b00      	cmp	r3, #0
 800e032:	d00e      	beq.n	800e052 <metal_io_write+0xa6>
 800e034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e036:	2b04      	cmp	r3, #4
 800e038:	d10b      	bne.n	800e052 <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 800e03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03c:	623b      	str	r3, [r7, #32]
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	617b      	str	r3, [r7, #20]
 800e042:	697a      	ldr	r2, [r7, #20]
 800e044:	6a3b      	ldr	r3, [r7, #32]
 800e046:	f3bf 8f5b 	dmb	ish
 800e04a:	601a      	str	r2, [r3, #0]
 800e04c:	f3bf 8f5b 	dmb	ish
 800e050:	e018      	b.n	800e084 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 800e052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e054:	2b00      	cmp	r3, #0
 800e056:	d00e      	beq.n	800e076 <metal_io_write+0xca>
 800e058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e05a:	2b04      	cmp	r3, #4
 800e05c:	d10b      	bne.n	800e076 <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 800e05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e060:	61fb      	str	r3, [r7, #28]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	613b      	str	r3, [r7, #16]
 800e066:	693a      	ldr	r2, [r7, #16]
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	f3bf 8f5b 	dmb	ish
 800e06e:	601a      	str	r2, [r3, #0]
 800e070:	f3bf 8f5b 	dmb	ish
 800e074:	e006      	b.n	800e084 <metal_io_write+0xd8>
		metal_assert (0);
 800e076:	4b05      	ldr	r3, [pc, #20]	; (800e08c <metal_io_write+0xe0>)
 800e078:	4a05      	ldr	r2, [pc, #20]	; (800e090 <metal_io_write+0xe4>)
 800e07a:	f44f 7189 	mov.w	r1, #274	; 0x112
 800e07e:	4805      	ldr	r0, [pc, #20]	; (800e094 <metal_io_write+0xe8>)
 800e080:	f002 fb42 	bl	8010708 <__assert_func>
}
 800e084:	bf00      	nop
 800e086:	3734      	adds	r7, #52	; 0x34
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd90      	pop	{r4, r7, pc}
 800e08c:	0801185c 	.word	0x0801185c
 800e090:	08011a18 	.word	0x08011a18
 800e094:	08011860 	.word	0x08011860

0800e098 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f002 fb8b 	bl	80107bc <malloc>
 800e0a6:	4603      	mov	r3, r0
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
	free(ptr);
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f002 fb87 	bl	80107cc <free>
}
 800e0be:	bf00      	nop
 800e0c0:	3708      	adds	r7, #8
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b084      	sub	sp, #16
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	3307      	adds	r3, #7
 800e0d2:	00db      	lsls	r3, r3, #3
 800e0d4:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 800e0d6:	68f8      	ldr	r0, [r7, #12]
 800e0d8:	f7ff ffde 	bl	800e098 <metal_allocate_memory>
 800e0dc:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d004      	beq.n	800e0ee <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 800e0e4:	68fa      	ldr	r2, [r7, #12]
 800e0e6:	2100      	movs	r1, #0
 800e0e8:	68b8      	ldr	r0, [r7, #8]
 800e0ea:	f002 fb85 	bl	80107f8 <memset>
	}

	return vqs;
 800e0ee:	68bb      	ldr	r3, [r7, #8]
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b086      	sub	sp, #24
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	891b      	ldrh	r3, [r3, #8]
 800e104:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	3b18      	subs	r3, #24
 800e110:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e116:	697a      	ldr	r2, [r7, #20]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d905      	bls.n	800e128 <rproc_virtio_virtqueue_notify+0x30>
 800e11c:	4b0d      	ldr	r3, [pc, #52]	; (800e154 <rproc_virtio_virtqueue_notify+0x5c>)
 800e11e:	4a0e      	ldr	r2, [pc, #56]	; (800e158 <rproc_virtio_virtqueue_notify+0x60>)
 800e120:	2133      	movs	r1, #51	; 0x33
 800e122:	480e      	ldr	r0, [pc, #56]	; (800e15c <rproc_virtio_virtqueue_notify+0x64>)
 800e124:	f002 faf0 	bl	8010708 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e12c:	697a      	ldr	r2, [r7, #20]
 800e12e:	4613      	mov	r3, r2
 800e130:	005b      	lsls	r3, r3, #1
 800e132:	4413      	add	r3, r2
 800e134:	00db      	lsls	r3, r3, #3
 800e136:	440b      	add	r3, r1
 800e138:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	691b      	ldr	r3, [r3, #16]
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	6810      	ldr	r0, [r2, #0]
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	6912      	ldr	r2, [r2, #16]
 800e146:	4611      	mov	r1, r2
 800e148:	4798      	blx	r3
}
 800e14a:	bf00      	nop
 800e14c:	3718      	adds	r7, #24
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	080118a8 	.word	0x080118a8
 800e158:	080119e8 	.word	0x080119e8
 800e15c:	080118c4 	.word	0x080118c4

0800e160 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b086      	sub	sp, #24
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	3b18      	subs	r3, #24
 800e16c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	3318      	adds	r3, #24
 800e17e:	4619      	mov	r1, r3
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f7ff fe7b 	bl	800de7c <metal_io_virt_to_offset>
 800e186:	4601      	mov	r1, r0
 800e188:	2301      	movs	r3, #1
 800e18a:	2205      	movs	r2, #5
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f7ff fe8f 	bl	800deb0 <metal_io_read>
 800e192:	4602      	mov	r2, r0
 800e194:	460b      	mov	r3, r1
 800e196:	4613      	mov	r3, r2
 800e198:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 800e19a:	7afb      	ldrb	r3, [r7, #11]
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3718      	adds	r7, #24
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b088      	sub	sp, #32
 800e1a8:	af02      	add	r7, sp, #8
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	3b18      	subs	r3, #24
 800e1b4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	689b      	ldr	r3, [r3, #8]
 800e1ba:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	68db      	ldr	r3, [r3, #12]
 800e1c0:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	3318      	adds	r3, #24
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f7ff fe57 	bl	800de7c <metal_io_virt_to_offset>
 800e1ce:	4601      	mov	r1, r0
 800e1d0:	78fa      	ldrb	r2, [r7, #3]
 800e1d2:	f04f 0300 	mov.w	r3, #0
 800e1d6:	2001      	movs	r0, #1
 800e1d8:	9001      	str	r0, [sp, #4]
 800e1da:	2005      	movs	r0, #5
 800e1dc:	9000      	str	r0, [sp, #0]
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f7ff fee4 	bl	800dfac <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	691b      	ldr	r3, [r3, #16]
 800e1e8:	697a      	ldr	r2, [r7, #20]
 800e1ea:	6810      	ldr	r0, [r2, #0]
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	6812      	ldr	r2, [r2, #0]
 800e1f0:	4611      	mov	r1, r2
 800e1f2:	4798      	blx	r3
}
 800e1f4:	bf00      	nop
 800e1f6:	3718      	adds	r7, #24
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	3b18      	subs	r3, #24
 800e208:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	689b      	ldr	r3, [r3, #8]
 800e20e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	330c      	adds	r3, #12
 800e21a:	4619      	mov	r1, r3
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f7ff fe2d 	bl	800de7c <metal_io_virt_to_offset>
 800e222:	4601      	mov	r1, r0
 800e224:	2304      	movs	r3, #4
 800e226:	2205      	movs	r2, #5
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f7ff fe41 	bl	800deb0 <metal_io_read>
 800e22e:	4602      	mov	r2, r0
 800e230:	460b      	mov	r3, r1
 800e232:	4613      	mov	r3, r2
 800e234:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 800e236:	68bb      	ldr	r3, [r7, #8]
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3718      	adds	r7, #24
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b088      	sub	sp, #32
 800e244:	af02      	add	r7, sp, #8
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	3b18      	subs	r3, #24
 800e24e:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	330c      	adds	r3, #12
 800e260:	4619      	mov	r1, r3
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f7ff fe0a 	bl	800de7c <metal_io_virt_to_offset>
 800e268:	4601      	mov	r1, r0
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	461a      	mov	r2, r3
 800e26e:	f04f 0300 	mov.w	r3, #0
 800e272:	2004      	movs	r0, #4
 800e274:	9001      	str	r0, [sp, #4]
 800e276:	2005      	movs	r0, #5
 800e278:	9000      	str	r0, [sp, #0]
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f7ff fe96 	bl	800dfac <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	691b      	ldr	r3, [r3, #16]
 800e284:	697a      	ldr	r2, [r7, #20]
 800e286:	6810      	ldr	r0, [r2, #0]
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	6812      	ldr	r2, [r2, #0]
 800e28c:	4611      	mov	r1, r2
 800e28e:	4798      	blx	r3
}
 800e290:	bf00      	nop
 800e292:	3718      	adds	r7, #24
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	370c      	adds	r7, #12
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr

0800e2b0 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b085      	sub	sp, #20
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
 800e2bc:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 800e2be:	bf00      	nop
 800e2c0:	3714      	adds	r7, #20
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr

0800e2ca <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 800e2ca:	b480      	push	{r7}
 800e2cc:	b085      	sub	sp, #20
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	60f8      	str	r0, [r7, #12]
 800e2d2:	60b9      	str	r1, [r7, #8]
 800e2d4:	607a      	str	r2, [r7, #4]
 800e2d6:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 800e2d8:	bf00      	nop
 800e2da:	3714      	adds	r7, #20
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr

0800e2e4 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	699b      	ldr	r3, [r3, #24]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d103      	bne.n	800e2fc <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 800e2f4:	2140      	movs	r1, #64	; 0x40
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7ff ff54 	bl	800e1a4 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 800e2fc:	bf00      	nop
 800e2fe:	3708      	adds	r7, #8
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b08e      	sub	sp, #56	; 0x38
 800e308:	af00      	add	r7, sp, #0
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	60b9      	str	r1, [r7, #8]
 800e30e:	607a      	str	r2, [r7, #4]
 800e310:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 800e316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e318:	7e5b      	ldrb	r3, [r3, #25]
 800e31a:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 800e31c:	2050      	movs	r0, #80	; 0x50
 800e31e:	f7ff febb 	bl	800e098 <metal_allocate_memory>
 800e322:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 800e324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e326:	2b00      	cmp	r3, #0
 800e328:	d101      	bne.n	800e32e <rproc_virtio_create_vdev+0x2a>
		return NULL;
 800e32a:	2300      	movs	r3, #0
 800e32c:	e092      	b.n	800e454 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 800e32e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e330:	4613      	mov	r3, r2
 800e332:	005b      	lsls	r3, r3, #1
 800e334:	4413      	add	r3, r2
 800e336:	00db      	lsls	r3, r3, #3
 800e338:	4618      	mov	r0, r3
 800e33a:	f7ff fead 	bl	800e098 <metal_allocate_memory>
 800e33e:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 800e340:	6a3b      	ldr	r3, [r7, #32]
 800e342:	2b00      	cmp	r3, #0
 800e344:	f000 8081 	beq.w	800e44a <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 800e348:	2250      	movs	r2, #80	; 0x50
 800e34a:	2100      	movs	r1, #0
 800e34c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e34e:	f002 fa53 	bl	80107f8 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 800e352:	2218      	movs	r2, #24
 800e354:	2100      	movs	r1, #0
 800e356:	6a38      	ldr	r0, [r7, #32]
 800e358:	f002 fa4e 	bl	80107f8 <memset>
	vdev = &rpvdev->vdev;
 800e35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35e:	3318      	adds	r3, #24
 800e360:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 800e362:	2300      	movs	r3, #0
 800e364:	637b      	str	r3, [r7, #52]	; 0x34
 800e366:	e025      	b.n	800e3b4 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 800e368:	2300      	movs	r3, #0
 800e36a:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 800e36c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e36e:	4613      	mov	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4413      	add	r3, r2
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	3318      	adds	r3, #24
 800e378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e37a:	4413      	add	r3, r2
 800e37c:	3304      	adds	r3, #4
 800e37e:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d102      	bne.n	800e38c <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 800e386:	69bb      	ldr	r3, [r7, #24]
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 800e38c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e38e:	f7ff fe9a 	bl	800e0c6 <virtqueue_allocate>
 800e392:	6178      	str	r0, [r7, #20]
		if (!vq)
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d031      	beq.n	800e3fe <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 800e39a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e39c:	4613      	mov	r3, r2
 800e39e:	005b      	lsls	r3, r3, #1
 800e3a0:	4413      	add	r3, r2
 800e3a2:	00db      	lsls	r3, r3, #3
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	6a3b      	ldr	r3, [r7, #32]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	697a      	ldr	r2, [r7, #20]
 800e3ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 800e3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	637b      	str	r3, [r7, #52]	; 0x34
 800e3b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d3d5      	bcc.n	800e368 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 800e3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3c0:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 800e3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3c6:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	6a3a      	ldr	r2, [r7, #32]
 800e3cc:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3d2:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 800e3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d6:	683a      	ldr	r2, [r7, #0]
 800e3d8:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	68ba      	ldr	r2, [r7, #8]
 800e3de:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	68fa      	ldr	r2, [r7, #12]
 800e3e4:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3ea:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3f0:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 800e3f2:	69fb      	ldr	r3, [r7, #28]
 800e3f4:	4a19      	ldr	r2, [pc, #100]	; (800e45c <rproc_virtio_create_vdev+0x158>)
 800e3f6:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 800e3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fa:	3318      	adds	r3, #24
 800e3fc:	e02a      	b.n	800e454 <rproc_virtio_create_vdev+0x150>
			goto err1;
 800e3fe:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 800e400:	2300      	movs	r3, #0
 800e402:	637b      	str	r3, [r7, #52]	; 0x34
 800e404:	e019      	b.n	800e43a <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 800e406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e408:	4613      	mov	r3, r2
 800e40a:	005b      	lsls	r3, r3, #1
 800e40c:	4413      	add	r3, r2
 800e40e:	00db      	lsls	r3, r3, #3
 800e410:	461a      	mov	r2, r3
 800e412:	6a3b      	ldr	r3, [r7, #32]
 800e414:	4413      	add	r3, r2
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d00b      	beq.n	800e434 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 800e41c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e41e:	4613      	mov	r3, r2
 800e420:	005b      	lsls	r3, r3, #1
 800e422:	4413      	add	r3, r2
 800e424:	00db      	lsls	r3, r3, #3
 800e426:	461a      	mov	r2, r3
 800e428:	6a3b      	ldr	r3, [r7, #32]
 800e42a:	4413      	add	r3, r2
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff fe3e 	bl	800e0b0 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 800e434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e436:	3301      	adds	r3, #1
 800e438:	637b      	str	r3, [r7, #52]	; 0x34
 800e43a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43e:	429a      	cmp	r2, r3
 800e440:	d3e1      	bcc.n	800e406 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 800e442:	6a38      	ldr	r0, [r7, #32]
 800e444:	f7ff fe34 	bl	800e0b0 <metal_free_memory>
 800e448:	e000      	b.n	800e44c <rproc_virtio_create_vdev+0x148>
		goto err0;
 800e44a:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 800e44c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e44e:	f7ff fe2f 	bl	800e0b0 <metal_free_memory>
	return NULL;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3738      	adds	r7, #56	; 0x38
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	080119c4 	.word	0x080119c4

0800e460 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 800e460:	b480      	push	{r7}
 800e462:	b087      	sub	sp, #28
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]
 800e46c:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e472:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 800e474:	68ba      	ldr	r2, [r7, #8]
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	429a      	cmp	r2, r3
 800e47a:	d302      	bcc.n	800e482 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 800e47c:	f06f 0301 	mvn.w	r3, #1
 800e480:	e019      	b.n	800e4b6 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e486:	68ba      	ldr	r2, [r7, #8]
 800e488:	4613      	mov	r3, r2
 800e48a:	005b      	lsls	r3, r3, #1
 800e48c:	4413      	add	r3, r2
 800e48e:	00db      	lsls	r3, r3, #3
 800e490:	440b      	add	r3, r1
 800e492:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	6a3a      	ldr	r2, [r7, #32]
 800e498:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	683a      	ldr	r2, [r7, #0]
 800e4a4:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 800e4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4b2:	609a      	str	r2, [r3, #8]

	return 0;
 800e4b4:	2300      	movs	r3, #0
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	371c      	adds	r7, #28
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr

0800e4c2 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b086      	sub	sp, #24
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
 800e4ca:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d102      	bne.n	800e4d8 <rproc_virtio_notified+0x16>
		return -EINVAL;
 800e4d2:	f06f 0315 	mvn.w	r3, #21
 800e4d6:	e02c      	b.n	800e532 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	683a      	ldr	r2, [r7, #0]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d101      	bne.n	800e4e6 <rproc_virtio_notified+0x24>
		return 0;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	e025      	b.n	800e532 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ea:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	617b      	str	r3, [r7, #20]
 800e4f0:	e01a      	b.n	800e528 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e4f6:	697a      	ldr	r2, [r7, #20]
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	005b      	lsls	r3, r3, #1
 800e4fc:	4413      	add	r3, r2
 800e4fe:	00db      	lsls	r3, r3, #3
 800e500:	440b      	add	r3, r1
 800e502:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	691b      	ldr	r3, [r3, #16]
 800e508:	683a      	ldr	r2, [r7, #0]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d003      	beq.n	800e516 <rproc_virtio_notified+0x54>
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e514:	d105      	bne.n	800e522 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 800e51c:	68b8      	ldr	r0, [r7, #8]
 800e51e:	f001 fb58 	bl	800fbd2 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	3301      	adds	r3, #1
 800e526:	617b      	str	r3, [r7, #20]
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d3e0      	bcc.n	800e4f2 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	3718      	adds	r7, #24
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}

0800e53a <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 800e53a:	b580      	push	{r7, lr}
 800e53c:	b084      	sub	sp, #16
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	699b      	ldr	r3, [r3, #24]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00a      	beq.n	800e560 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f7ff fe08 	bl	800e160 <rproc_virtio_get_status>
 800e550:	4603      	mov	r3, r0
 800e552:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 800e554:	7bfb      	ldrb	r3, [r7, #15]
 800e556:	f003 0304 	and.w	r3, r3, #4
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d102      	bne.n	800e564 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 800e55e:	e7f4      	b.n	800e54a <rproc_virtio_wait_remote_ready+0x10>
		return;
 800e560:	bf00      	nop
 800e562:	e000      	b.n	800e566 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 800e564:	bf00      	nop
	}
}
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800e574:	bf00      	nop
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2201      	movs	r2, #1
 800e57a:	4611      	mov	r1, r2
 800e57c:	f3bf 8f5b 	dmb	ish
 800e580:	e8d3 2f4f 	ldrexb	r2, [r3]
 800e584:	e8c3 1f40 	strexb	r0, r1, [r3]
 800e588:	2800      	cmp	r0, #0
 800e58a:	d1f9      	bne.n	800e580 <__metal_mutex_acquire+0x14>
 800e58c:	f3bf 8f5b 	dmb	ish
 800e590:	b2d3      	uxtb	r3, r2
 800e592:	2b00      	cmp	r3, #0
 800e594:	d1ef      	bne.n	800e576 <__metal_mutex_acquire+0xa>
		;
	}
}
 800e596:	bf00      	nop
 800e598:	bf00      	nop
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f3bf 8f5b 	dmb	ish
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	701a      	strb	r2, [r3, #0]
 800e5b6:	f3bf 8f5b 	dmb	ish
}
 800e5ba:	bf00      	nop
 800e5bc:	370c      	adds	r7, #12
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr

0800e5c6 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b082      	sub	sp, #8
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7ff ffcc 	bl	800e56c <__metal_mutex_acquire>
}
 800e5d4:	bf00      	nop
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f7ff ffdd 	bl	800e5a4 <__metal_mutex_release>
}
 800e5ea:	bf00      	nop
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <metal_list_add_before>:
{
 800e5f2:	b480      	push	{r7}
 800e5f4:	b083      	sub	sp, #12
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	685a      	ldr	r2, [r3, #4]
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	683a      	ldr	r2, [r7, #0]
 800e610:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	683a      	ldr	r2, [r7, #0]
 800e618:	601a      	str	r2, [r3, #0]
}
 800e61a:	bf00      	nop
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr

0800e626 <metal_list_add_tail>:
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b082      	sub	sp, #8
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
 800e62e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800e630:	6839      	ldr	r1, [r7, #0]
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f7ff ffdd 	bl	800e5f2 <metal_list_add_before>
}
 800e638:	bf00      	nop
 800e63a:	3708      	adds	r7, #8
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 800e640:	b480      	push	{r7}
 800e642:	b083      	sub	sp, #12
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	6852      	ldr	r2, [r2, #4]
 800e650:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	6812      	ldr	r2, [r2, #0]
 800e65a:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	605a      	str	r2, [r3, #4]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	685a      	ldr	r2, [r3, #4]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	601a      	str	r2, [r3, #0]
}
 800e66a:	bf00      	nop
 800e66c:	370c      	adds	r7, #12
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr

0800e676 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 800e676:	b480      	push	{r7}
 800e678:	b083      	sub	sp, #12
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
 800e67e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	095b      	lsrs	r3, r3, #5
 800e684:	009a      	lsls	r2, r3, #2
 800e686:	6879      	ldr	r1, [r7, #4]
 800e688:	440a      	add	r2, r1
 800e68a:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800e68c:	683a      	ldr	r2, [r7, #0]
 800e68e:	f002 021f 	and.w	r2, r2, #31
 800e692:	2001      	movs	r0, #1
 800e694:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	4403      	add	r3, r0
 800e69e:	430a      	orrs	r2, r1
 800e6a0:	601a      	str	r2, [r3, #0]
}
 800e6a2:	bf00      	nop
 800e6a4:	370c      	adds	r7, #12
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr

0800e6ae <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 800e6ae:	b480      	push	{r7}
 800e6b0:	b083      	sub	sp, #12
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
 800e6b6:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	095b      	lsrs	r3, r3, #5
 800e6bc:	009b      	lsls	r3, r3, #2
 800e6be:	687a      	ldr	r2, [r7, #4]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	f003 031f 	and.w	r3, r3, #31
 800e6ca:	2101      	movs	r1, #1
 800e6cc:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800e6d0:	4013      	ands	r3, r2
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	370c      	adds	r7, #12
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6dc:	4770      	bx	lr

0800e6de <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 800e6de:	b480      	push	{r7}
 800e6e0:	b083      	sub	sp, #12
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
 800e6e6:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	095b      	lsrs	r3, r3, #5
 800e6ec:	009a      	lsls	r2, r3, #2
 800e6ee:	6879      	ldr	r1, [r7, #4]
 800e6f0:	440a      	add	r2, r1
 800e6f2:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800e6f4:	683a      	ldr	r2, [r7, #0]
 800e6f6:	f002 021f 	and.w	r2, r2, #31
 800e6fa:	2001      	movs	r0, #1
 800e6fc:	fa00 f202 	lsl.w	r2, r0, r2
 800e700:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	4403      	add	r3, r0
 800e708:	400a      	ands	r2, r1
 800e70a:	601a      	str	r2, [r3, #0]
}
 800e70c:	bf00      	nop
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 800e722:	6839      	ldr	r1, [r7, #0]
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f7ff ffc2 	bl	800e6ae <metal_bitmap_is_bit_set>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	bf0c      	ite	eq
 800e730:	2301      	moveq	r3, #1
 800e732:	2300      	movne	r3, #0
 800e734:	b2db      	uxtb	r3, r3
}
 800e736:	4618      	mov	r0, r3
 800e738:	3708      	adds	r7, #8
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}

0800e73e <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 800e73e:	b580      	push	{r7, lr}
 800e740:	b086      	sub	sp, #24
 800e742:	af00      	add	r7, sp, #0
 800e744:	60f8      	str	r0, [r7, #12]
 800e746:	60b9      	str	r1, [r7, #8]
 800e748:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	617b      	str	r3, [r7, #20]
 800e74e:	e002      	b.n	800e756 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	3301      	adds	r3, #1
 800e754:	617b      	str	r3, [r7, #20]
	for (bit = start;
 800e756:	697a      	ldr	r2, [r7, #20]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d207      	bcs.n	800e76e <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	4619      	mov	r1, r3
 800e762:	68f8      	ldr	r0, [r7, #12]
 800e764:	f7ff ffd8 	bl	800e718 <metal_bitmap_is_bit_clear>
 800e768:	4603      	mov	r3, r0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d0f0      	beq.n	800e750 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 800e76e:	697b      	ldr	r3, [r7, #20]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3718      	adds	r7, #24
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <rpmsg_init_ept>:
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	60f8      	str	r0, [r7, #12]
 800e780:	60b9      	str	r1, [r7, #8]
 800e782:	607a      	str	r2, [r7, #4]
 800e784:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2220      	movs	r2, #32
 800e78a:	68b9      	ldr	r1, [r7, #8]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f002 fbf5 	bl	8010f7c <strncpy>
	ept->addr = src;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	683a      	ldr	r2, [r7, #0]
 800e79c:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	69ba      	ldr	r2, [r7, #24]
 800e7a2:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	69fa      	ldr	r2, [r7, #28]
 800e7a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e7aa:	bf00      	nop
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b084      	sub	sp, #16
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 800e7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e7c0:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7ff ffb8 	bl	800e73e <metal_bitmap_next_clear_bit>
 800e7ce:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	68ba      	ldr	r2, [r7, #8]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d206      	bcs.n	800e7e6 <rpmsg_get_address+0x34>
		addr = nextbit;
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	4619      	mov	r1, r3
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f7ff ff48 	bl	800e676 <metal_bitmap_set_bit>
	}

	return addr;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800e7fc:	687a      	ldr	r2, [r7, #4]
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	429a      	cmp	r2, r3
 800e802:	da03      	bge.n	800e80c <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 800e804:	6879      	ldr	r1, [r7, #4]
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f7ff ff69 	bl	800e6de <metal_bitmap_clear_bit>
}
 800e80c:	bf00      	nop
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	429a      	cmp	r2, r3
 800e826:	da05      	bge.n	800e834 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 800e828:	6879      	ldr	r1, [r7, #4]
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	f7ff ff3f 	bl	800e6ae <metal_bitmap_is_bit_set>
 800e830:	4603      	mov	r3, r0
 800e832:	e000      	b.n	800e836 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 800e834:	4b02      	ldr	r3, [pc, #8]	; (800e840 <rpmsg_is_address_set+0x2c>)
}
 800e836:	4618      	mov	r0, r3
 800e838:	3710      	adds	r7, #16
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	fffff82d 	.word	0xfffff82d

0800e844 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	429a      	cmp	r2, r3
 800e856:	da05      	bge.n	800e864 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 800e858:	6879      	ldr	r1, [r7, #4]
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	f7ff ff0b 	bl	800e676 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 800e860:	2300      	movs	r3, #0
 800e862:	e000      	b.n	800e866 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 800e864:	4b02      	ldr	r3, [pc, #8]	; (800e870 <rpmsg_set_address+0x2c>)
	}
}
 800e866:	4618      	mov	r0, r3
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	fffff82d 	.word	0xfffff82d

0800e874 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 800e874:	b590      	push	{r4, r7, lr}
 800e876:	b089      	sub	sp, #36	; 0x24
 800e878:	af02      	add	r7, sp, #8
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	60b9      	str	r1, [r7, #8]
 800e87e:	607a      	str	r2, [r7, #4]
 800e880:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00a      	beq.n	800e89e <rpmsg_send_offchannel_raw+0x2a>
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	6a1b      	ldr	r3, [r3, #32]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d006      	beq.n	800e89e <rpmsg_send_offchannel_raw+0x2a>
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d003      	beq.n	800e89e <rpmsg_send_offchannel_raw+0x2a>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e89c:	d101      	bne.n	800e8a2 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 800e89e:	4b0d      	ldr	r3, [pc, #52]	; (800e8d4 <rpmsg_send_offchannel_raw+0x60>)
 800e8a0:	e014      	b.n	800e8cc <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	6a1b      	ldr	r3, [r3, #32]
 800e8a6:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00c      	beq.n	800e8ca <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800e8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b6:	9301      	str	r3, [sp, #4]
 800e8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	68b9      	ldr	r1, [r7, #8]
 800e8c2:	6978      	ldr	r0, [r7, #20]
 800e8c4:	47a0      	blx	r4
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	e000      	b.n	800e8cc <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 800e8ca:	4b02      	ldr	r3, [pc, #8]	; (800e8d4 <rpmsg_send_offchannel_raw+0x60>)
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	371c      	adds	r7, #28
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd90      	pop	{r4, r7, pc}
 800e8d4:	fffff82d 	.word	0xfffff82d

0800e8d8 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b090      	sub	sp, #64	; 0x40
 800e8dc:	af02      	add	r7, sp, #8
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 800e8ec:	6879      	ldr	r1, [r7, #4]
 800e8ee:	f107 030c 	add.w	r3, r7, #12
 800e8f2:	2220      	movs	r2, #32
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f002 fb41 	bl	8010f7c <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e8fe:	f107 030c 	add.w	r3, r7, #12
 800e902:	2201      	movs	r2, #1
 800e904:	9201      	str	r2, [sp, #4]
 800e906:	2228      	movs	r2, #40	; 0x28
 800e908:	9200      	str	r2, [sp, #0]
 800e90a:	2235      	movs	r2, #53	; 0x35
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f7ff ffb1 	bl	800e874 <rpmsg_send_offchannel_raw>
 800e912:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 800e914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e916:	2b00      	cmp	r3, #0
 800e918:	da01      	bge.n	800e91e <rpmsg_send_ns_message+0x46>
		return ret;
 800e91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e91c:	e000      	b.n	800e920 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 800e91e:	2300      	movs	r3, #0
}
 800e920:	4618      	mov	r0, r3
 800e922:	3738      	adds	r7, #56	; 0x38
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b088      	sub	sp, #32
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	607a      	str	r2, [r7, #4]
 800e934:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	61fb      	str	r3, [r7, #28]
 800e93c:	e04b      	b.n	800e9d6 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 800e93e:	2300      	movs	r3, #0
 800e940:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	3b34      	subs	r3, #52	; 0x34
 800e946:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e94e:	d006      	beq.n	800e95e <rpmsg_get_endpoint+0x36>
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	429a      	cmp	r2, r3
 800e958:	d101      	bne.n	800e95e <rpmsg_get_endpoint+0x36>
			return ept;
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	e040      	b.n	800e9e0 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	429a      	cmp	r2, r3
 800e966:	d106      	bne.n	800e976 <rpmsg_get_endpoint+0x4e>
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e96c:	683a      	ldr	r2, [r7, #0]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d101      	bne.n	800e976 <rpmsg_get_endpoint+0x4e>
			return ept;
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	e034      	b.n	800e9e0 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00c      	beq.n	800e996 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	2220      	movs	r2, #32
 800e980:	68b9      	ldr	r1, [r7, #8]
 800e982:	4618      	mov	r0, r3
 800e984:	f002 fae8 	bl	8010f58 <strncmp>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	bf0c      	ite	eq
 800e98e:	2301      	moveq	r3, #1
 800e990:	2300      	movne	r3, #0
 800e992:	b2db      	uxtb	r3, r3
 800e994:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d018      	beq.n	800e9ce <rpmsg_get_endpoint+0xa6>
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d015      	beq.n	800e9ce <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a8:	d006      	beq.n	800e9b8 <rpmsg_get_endpoint+0x90>
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ae:	683a      	ldr	r2, [r7, #0]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d101      	bne.n	800e9b8 <rpmsg_get_endpoint+0x90>
			return ept;
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	e013      	b.n	800e9e0 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9be:	d107      	bne.n	800e9d0 <rpmsg_get_endpoint+0xa8>
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c8:	d102      	bne.n	800e9d0 <rpmsg_get_endpoint+0xa8>
			return ept;
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	e008      	b.n	800e9e0 <rpmsg_get_endpoint+0xb8>
			continue;
 800e9ce:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	61fb      	str	r3, [r7, #28]
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	69fa      	ldr	r2, [r7, #28]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d1af      	bne.n	800e93e <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 800e9de:	2300      	movs	r3, #0
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3720      	adds	r7, #32
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d016      	beq.n	800ea24 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a1b      	ldr	r3, [r3, #32]
 800e9fa:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea04:	d008      	beq.n	800ea18 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800ea10:	461a      	mov	r2, r3
 800ea12:	2180      	movs	r1, #128	; 0x80
 800ea14:	f7ff feec 	bl	800e7f0 <rpmsg_release_address>
	metal_list_del(&ept->node);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	3334      	adds	r3, #52	; 0x34
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7ff fe0f 	bl	800e640 <metal_list_del>
 800ea22:	e000      	b.n	800ea26 <rpmsg_unregister_endpoint+0x3e>
		return;
 800ea24:	bf00      	nop
}
 800ea26:	3710      	adds	r7, #16
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	3334      	adds	r3, #52	; 0x34
 800ea42:	4619      	mov	r1, r3
 800ea44:	4610      	mov	r0, r2
 800ea46:	f7ff fdee 	bl	800e626 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 800ea4a:	2300      	movs	r3, #0
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3708      	adds	r7, #8
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b088      	sub	sp, #32
 800ea58:	af02      	add	r7, sp, #8
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	607a      	str	r2, [r7, #4]
 800ea60:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	613b      	str	r3, [r7, #16]

	if (!ept)
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d101      	bne.n	800ea70 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 800ea6c:	4b37      	ldr	r3, [pc, #220]	; (800eb4c <rpmsg_create_ept+0xf8>)
 800ea6e:	e068      	b.n	800eb42 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	3358      	adds	r3, #88	; 0x58
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7ff fda6 	bl	800e5c6 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea80:	d018      	beq.n	800eab4 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	3348      	adds	r3, #72	; 0x48
 800ea86:	683a      	ldr	r2, [r7, #0]
 800ea88:	2180      	movs	r1, #128	; 0x80
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7ff fec2 	bl	800e814 <rpmsg_is_address_set>
 800ea90:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d107      	bne.n	800eaa8 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	3348      	adds	r3, #72	; 0x48
 800ea9c:	683a      	ldr	r2, [r7, #0]
 800ea9e:	2180      	movs	r1, #128	; 0x80
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7ff fecf 	bl	800e844 <rpmsg_set_address>
 800eaa6:	e00c      	b.n	800eac2 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	dd40      	ble.n	800eb30 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 800eaae:	2300      	movs	r3, #0
 800eab0:	617b      	str	r3, [r7, #20]
			goto ret_status;
 800eab2:	e040      	b.n	800eb36 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	3348      	adds	r3, #72	; 0x48
 800eab8:	2180      	movs	r1, #128	; 0x80
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7ff fe79 	bl	800e7b2 <rpmsg_get_address>
 800eac0:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 800eac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac4:	9301      	str	r3, [sp, #4]
 800eac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac8:	9300      	str	r3, [sp, #0]
 800eaca:	6a3b      	ldr	r3, [r7, #32]
 800eacc:	693a      	ldr	r2, [r7, #16]
 800eace:	6879      	ldr	r1, [r7, #4]
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f7ff fe51 	bl	800e778 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 800ead6:	68f9      	ldr	r1, [r7, #12]
 800ead8:	68b8      	ldr	r0, [r7, #8]
 800eada:	f7ff ffa7 	bl	800ea2c <rpmsg_register_endpoint>
 800eade:	6178      	str	r0, [r7, #20]
	if (status < 0)
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	da06      	bge.n	800eaf4 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	3348      	adds	r3, #72	; 0x48
 800eaea:	693a      	ldr	r2, [r7, #16]
 800eaec:	2180      	movs	r1, #128	; 0x80
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7ff fe7e 	bl	800e7f0 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d11c      	bne.n	800eb34 <rpmsg_create_ept+0xe0>
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb02:	d117      	bne.n	800eb34 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	3358      	adds	r3, #88	; 0x58
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7ff fd67 	bl	800e5dc <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 800eb0e:	2100      	movs	r1, #0
 800eb10:	68f8      	ldr	r0, [r7, #12]
 800eb12:	f7ff fee1 	bl	800e8d8 <rpmsg_send_ns_message>
 800eb16:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	3358      	adds	r3, #88	; 0x58
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7ff fd52 	bl	800e5c6 <metal_mutex_acquire>
		if (status)
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d005      	beq.n	800eb34 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 800eb28:	68f8      	ldr	r0, [r7, #12]
 800eb2a:	f7ff ff5d 	bl	800e9e8 <rpmsg_unregister_endpoint>
 800eb2e:	e002      	b.n	800eb36 <rpmsg_create_ept+0xe2>
			goto ret_status;
 800eb30:	bf00      	nop
 800eb32:	e000      	b.n	800eb36 <rpmsg_create_ept+0xe2>
	}

ret_status:
 800eb34:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	3358      	adds	r3, #88	; 0x58
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7ff fd4e 	bl	800e5dc <metal_mutex_release>
	return status;
 800eb40:	697b      	ldr	r3, [r7, #20]
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3718      	adds	r7, #24
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	fffff82d 	.word	0xfffff82d

0800eb50 <__metal_cache_invalidate>:
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 800eb5a:	6839      	ldr	r1, [r7, #0]
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 fcc2 	bl	800f4e6 <metal_machine_cache_invalidate>
}
 800eb62:	bf00      	nop
 800eb64:	3708      	adds	r7, #8
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <metal_cache_invalidate>:
{
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b082      	sub	sp, #8
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
 800eb72:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 800eb74:	6839      	ldr	r1, [r7, #0]
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7ff ffea 	bl	800eb50 <__metal_cache_invalidate>
}
 800eb7c:	bf00      	nop
 800eb7e:	3708      	adds	r7, #8
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	370c      	adds	r7, #12
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr

0800eb9a <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 800eb9a:	b580      	push	{r7, lr}
 800eb9c:	b082      	sub	sp, #8
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f7ff ffee 	bl	800eb84 <__metal_sleep_usec>
 800eba8:	4603      	mov	r3, r0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3708      	adds	r7, #8
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <metal_list_init>:
{
 800ebb2:	b480      	push	{r7}
 800ebb4:	b083      	sub	sp, #12
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	605a      	str	r2, [r3, #4]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	685a      	ldr	r2, [r3, #4]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	601a      	str	r2, [r3, #0]
}
 800ebc8:	bf00      	nop
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <metal_io_virt_to_offset>:
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	683a      	ldr	r2, [r7, #0]
 800ebe4:	1ad3      	subs	r3, r2, r3
 800ebe6:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	68fa      	ldr	r2, [r7, #12]
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d201      	bcs.n	800ebf6 <metal_io_virt_to_offset+0x22>
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	e001      	b.n	800ebfa <metal_io_virt_to_offset+0x26>
 800ebf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3714      	adds	r7, #20
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr

0800ec06 <__metal_mutex_init>:
{
 800ec06:	b480      	push	{r7}
 800ec08:	b085      	sub	sp, #20
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	60fb      	str	r3, [r7, #12]
 800ec12:	2300      	movs	r3, #0
 800ec14:	60bb      	str	r3, [r7, #8]
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	461a      	mov	r2, r3
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f3bf 8f5b 	dmb	ish
 800ec20:	601a      	str	r2, [r3, #0]
 800ec22:	f3bf 8f5b 	dmb	ish
}
 800ec26:	bf00      	nop
 800ec28:	3714      	adds	r7, #20
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr

0800ec32 <__metal_mutex_acquire>:
{
 800ec32:	b480      	push	{r7}
 800ec34:	b083      	sub	sp, #12
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800ec3a:	bf00      	nop
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2201      	movs	r2, #1
 800ec40:	4611      	mov	r1, r2
 800ec42:	f3bf 8f5b 	dmb	ish
 800ec46:	e8d3 2f4f 	ldrexb	r2, [r3]
 800ec4a:	e8c3 1f40 	strexb	r0, r1, [r3]
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d1f9      	bne.n	800ec46 <__metal_mutex_acquire+0x14>
 800ec52:	f3bf 8f5b 	dmb	ish
 800ec56:	b2d3      	uxtb	r3, r2
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d1ef      	bne.n	800ec3c <__metal_mutex_acquire+0xa>
}
 800ec5c:	bf00      	nop
 800ec5e:	bf00      	nop
 800ec60:	370c      	adds	r7, #12
 800ec62:	46bd      	mov	sp, r7
 800ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec68:	4770      	bx	lr

0800ec6a <__metal_mutex_release>:
{
 800ec6a:	b480      	push	{r7}
 800ec6c:	b083      	sub	sp, #12
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f3bf 8f5b 	dmb	ish
 800ec78:	2200      	movs	r2, #0
 800ec7a:	701a      	strb	r2, [r3, #0]
 800ec7c:	f3bf 8f5b 	dmb	ish
}
 800ec80:	bf00      	nop
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <metal_mutex_init>:
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f7ff ffb6 	bl	800ec06 <__metal_mutex_init>
}
 800ec9a:	bf00      	nop
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <metal_mutex_acquire>:
{
 800eca2:	b580      	push	{r7, lr}
 800eca4:	b082      	sub	sp, #8
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f7ff ffc1 	bl	800ec32 <__metal_mutex_acquire>
}
 800ecb0:	bf00      	nop
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <metal_mutex_release>:
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7ff ffd2 	bl	800ec6a <__metal_mutex_release>
}
 800ecc6:	bf00      	nop
 800ecc8:	3708      	adds	r7, #8
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <rpmsg_init_ept>:
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b084      	sub	sp, #16
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	60f8      	str	r0, [r7, #12]
 800ecd6:	60b9      	str	r1, [r7, #8]
 800ecd8:	607a      	str	r2, [r7, #4]
 800ecda:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2220      	movs	r2, #32
 800ece0:	68b9      	ldr	r1, [r7, #8]
 800ece2:	4618      	mov	r0, r3
 800ece4:	f002 f94a 	bl	8010f7c <strncpy>
	ept->addr = src;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	687a      	ldr	r2, [r7, #4]
 800ecec:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	683a      	ldr	r2, [r7, #0]
 800ecf2:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	69ba      	ldr	r2, [r7, #24]
 800ecf8:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	69fa      	ldr	r2, [r7, #28]
 800ecfe:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ed00:	bf00      	nop
 800ed02:	3710      	adds	r7, #16
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed14:	699b      	ldr	r3, [r3, #24]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	370c      	adds	r7, #12
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr

0800ed22 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b082      	sub	sp, #8
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed32:	6a1b      	ldr	r3, [r3, #32]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	687a      	ldr	r2, [r7, #4]
 800ed38:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ed3a:	78f9      	ldrb	r1, [r7, #3]
 800ed3c:	4610      	mov	r0, r2
 800ed3e:	4798      	blx	r3
}
 800ed40:	bf00      	nop
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed54:	6a1b      	ldr	r3, [r3, #32]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ed5c:	4610      	mov	r0, r2
 800ed5e:	4798      	blx	r3
 800ed60:	4603      	mov	r3, r0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b082      	sub	sp, #8
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed76:	6a1b      	ldr	r3, [r3, #32]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ed7e:	4610      	mov	r0, r2
 800ed80:	4798      	blx	r3
 800ed82:	4603      	mov	r3, r0
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3708      	adds	r7, #8
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b086      	sub	sp, #24
 800ed90:	af02      	add	r7, sp, #8
 800ed92:	60f8      	str	r0, [r7, #12]
 800ed94:	60b9      	str	r1, [r7, #8]
 800ed96:	607a      	str	r2, [r7, #4]
 800ed98:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ed9e:	68b9      	ldr	r1, [r7, #8]
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	9300      	str	r3, [sp, #0]
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	f000 fbf2 	bl	800f590 <virtio_create_virtqueues>
 800edac:	4603      	mov	r3, r0
					callbacks);
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}

0800edb6 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 800edb6:	b580      	push	{r7, lr}
 800edb8:	b082      	sub	sp, #8
 800edba:	af00      	add	r7, sp, #0
 800edbc:	6078      	str	r0, [r7, #4]
 800edbe:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 800edc0:	f04f 33ff 	mov.w	r3, #4294967295
 800edc4:	683a      	ldr	r2, [r7, #0]
 800edc6:	2100      	movs	r1, #0
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f7ff fdad 	bl	800e928 <rpmsg_get_endpoint>
 800edce:	4603      	mov	r3, r0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3708      	adds	r7, #8
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 800edd8:	b480      	push	{r7}
 800edda:	b085      	sub	sp, #20
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	683a      	ldr	r2, [r7, #0]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d901      	bls.n	800edf0 <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 800edec:	2300      	movs	r3, #0
 800edee:	e00f      	b.n	800ee10 <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6899      	ldr	r1, [r3, #8]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	1acb      	subs	r3, r1, r3
 800edfe:	4413      	add	r3, r2
 800ee00:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	685a      	ldr	r2, [r3, #4]
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	1ad2      	subs	r2, r2, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	605a      	str	r2, [r3, #4]

	return buffer;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3714      	adds	r7, #20
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b085      	sub	sp, #20
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
	if (!shpool)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d01d      	beq.n	800ee6a <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f003 0303 	and.w	r3, r3, #3
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d004      	beq.n	800ee48 <rpmsg_virtio_init_shm_pool+0x2c>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f023 0303 	bic.w	r3, r3, #3
 800ee44:	3304      	adds	r3, #4
 800ee46:	e000      	b.n	800ee4a <rpmsg_virtio_init_shm_pool+0x2e>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f003 0303 	and.w	r3, r3, #3
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d004      	beq.n	800ee62 <rpmsg_virtio_init_shm_pool+0x46>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f023 0303 	bic.w	r3, r3, #3
 800ee5e:	3304      	adds	r3, #4
 800ee60:	e000      	b.n	800ee64 <rpmsg_virtio_init_shm_pool+0x48>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	68fa      	ldr	r2, [r7, #12]
 800ee66:	6053      	str	r3, [r2, #4]
 800ee68:	e000      	b.n	800ee6c <rpmsg_virtio_init_shm_pool+0x50>
		return;
 800ee6a:	bf00      	nop
}
 800ee6c:	3714      	adds	r7, #20
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr

0800ee76 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b08a      	sub	sp, #40	; 0x28
 800ee7a:	af02      	add	r7, sp, #8
 800ee7c:	60f8      	str	r0, [r7, #12]
 800ee7e:	60b9      	str	r1, [r7, #8]
 800ee80:	607a      	str	r2, [r7, #4]
 800ee82:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f7ff ff3f 	bl	800ed08 <rpmsg_virtio_get_role>
 800ee8a:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10d      	bne.n	800eeae <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800ee9e:	f107 0114 	add.w	r1, r7, #20
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	9300      	str	r3, [sp, #0]
 800eea6:	2301      	movs	r3, #1
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f000 fcc0 	bl	800f82e <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 800eeae:	bf00      	nop
 800eeb0:	3720      	adds	r7, #32
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b08a      	sub	sp, #40	; 0x28
 800eeba:	af02      	add	r7, sp, #8
 800eebc:	60f8      	str	r0, [r7, #12]
 800eebe:	60b9      	str	r1, [r7, #8]
 800eec0:	607a      	str	r2, [r7, #4]
 800eec2:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	f7ff ff1f 	bl	800ed08 <rpmsg_virtio_get_role>
 800eeca:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d10f      	bne.n	800eef2 <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800eede:	f107 0114 	add.w	r1, r7, #20
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	2301      	movs	r3, #1
 800eee8:	2200      	movs	r2, #0
 800eeea:	f000 fca0 	bl	800f82e <virtqueue_add_buffer>
 800eeee:	4603      	mov	r3, r0
 800eef0:	e000      	b.n	800eef4 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 800eef2:	2300      	movs	r3, #0
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3720      	adds	r7, #32
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b086      	sub	sp, #24
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800ef08:	68f8      	ldr	r0, [r7, #12]
 800ef0a:	f7ff fefd 	bl	800ed08 <rpmsg_virtio_get_role>
 800ef0e:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800ef10:	2300      	movs	r3, #0
 800ef12:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d116      	bne.n	800ef48 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	68b9      	ldr	r1, [r7, #8]
 800ef22:	4618      	mov	r0, r3
 800ef24:	f000 fcc7 	bl	800f8b6 <virtqueue_get_buffer>
 800ef28:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d10b      	bne.n	800ef48 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef34:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7ff ff4d 	bl	800edd8 <rpmsg_virtio_shm_pool_get_buffer>
 800ef3e:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef46:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 800ef48:	697b      	ldr	r3, [r7, #20]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3718      	adds	r7, #24
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b086      	sub	sp, #24
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	60f8      	str	r0, [r7, #12]
 800ef5a:	60b9      	str	r1, [r7, #8]
 800ef5c:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800ef5e:	68f8      	ldr	r0, [r7, #12]
 800ef60:	f7ff fed2 	bl	800ed08 <rpmsg_virtio_get_role>
 800ef64:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800ef66:	2300      	movs	r3, #0
 800ef68:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d107      	bne.n	800ef80 <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	68b9      	ldr	r1, [r7, #8]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f000 fc9c 	bl	800f8b6 <virtqueue_get_buffer>
 800ef7e:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d005      	beq.n	800ef92 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	6978      	ldr	r0, [r7, #20]
 800ef8e:	f7ff fdec 	bl	800eb6a <metal_cache_invalidate>
	}

	return data;
 800ef92:	697b      	ldr	r3, [r7, #20]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3718      	adds	r7, #24
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7ff feaf 	bl	800ed08 <rpmsg_virtio_get_role>
 800efaa:	60b8      	str	r0, [r7, #8]
	int length = 0;
 800efac:	2300      	movs	r3, #0
 800efae:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d102      	bne.n	800efbc <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 800efb6:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800efba:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 800efbc:	68fb      	ldr	r3, [r7, #12]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
	...

0800efc8 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b090      	sub	sp, #64	; 0x40
 800efcc:	af00      	add	r7, sp, #0
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	60b9      	str	r1, [r7, #8]
 800efd2:	607a      	str	r2, [r7, #4]
 800efd4:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 800efd6:	2300      	movs	r3, #0
 800efd8:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 800efda:	2300      	movs	r3, #0
 800efdc:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 800efe2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800efe4:	f7ff feb0 	bl	800ed48 <rpmsg_virtio_get_status>
 800efe8:	4603      	mov	r3, r0
 800efea:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 800efec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efee:	f003 0304 	and.w	r3, r3, #4
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d101      	bne.n	800effa <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 800eff6:	4b45      	ldr	r3, [pc, #276]	; (800f10c <rpmsg_virtio_send_offchannel_raw+0x144>)
 800eff8:	e083      	b.n	800f102 <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 800effa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800effc:	2b00      	cmp	r3, #0
 800effe:	d003      	beq.n	800f008 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 800f000:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800f004:	63bb      	str	r3, [r7, #56]	; 0x38
 800f006:	e001      	b.n	800f00c <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 800f008:	2300      	movs	r3, #0
 800f00a:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	3358      	adds	r3, #88	; 0x58
 800f010:	4618      	mov	r0, r3
 800f012:	f7ff fe46 	bl	800eca2 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 800f016:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f018:	f7ff ffc0 	bl	800ef9c <_rpmsg_virtio_get_buffer_size>
 800f01c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 800f01e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f022:	429a      	cmp	r2, r3
 800f024:	dc08      	bgt.n	800f038 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 800f026:	f107 0216 	add.w	r2, r7, #22
 800f02a:	f107 0310 	add.w	r3, r7, #16
 800f02e:	4619      	mov	r1, r3
 800f030:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f032:	f7ff ff63 	bl	800eefc <rpmsg_virtio_get_tx_buffer>
 800f036:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	3358      	adds	r3, #88	; 0x58
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7ff fe3b 	bl	800ecb8 <metal_mutex_release>
		if (buffer || !tick_count)
 800f042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f044:	2b00      	cmp	r3, #0
 800f046:	d10e      	bne.n	800f066 <rpmsg_virtio_send_offchannel_raw+0x9e>
 800f048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00b      	beq.n	800f066 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 800f04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f050:	2b00      	cmp	r3, #0
 800f052:	d001      	beq.n	800f058 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 800f054:	4b2e      	ldr	r3, [pc, #184]	; (800f110 <rpmsg_virtio_send_offchannel_raw+0x148>)
 800f056:	e054      	b.n	800f102 <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 800f058:	200a      	movs	r0, #10
 800f05a:	f7ff fd9e 	bl	800eb9a <metal_sleep_usec>
		tick_count--;
 800f05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f060:	3b01      	subs	r3, #1
 800f062:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 800f064:	e7d2      	b.n	800f00c <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 800f066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d101      	bne.n	800f070 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 800f06c:	4b29      	ldr	r3, [pc, #164]	; (800f114 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 800f06e:	e048      	b.n	800f102 <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 800f078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 800f07e:	2300      	movs	r3, #0
 800f080:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 800f082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f086:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 800f088:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f08a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f08c:	f7ff fda2 	bl	800ebd4 <metal_io_virt_to_offset>
 800f090:	4601      	mov	r1, r0
 800f092:	f107 0218 	add.w	r2, r7, #24
 800f096:	2310      	movs	r3, #16
 800f098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f09a:	f7fe fdd8 	bl	800dc4e <metal_io_block_write>
 800f09e:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 800f0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a2:	2b10      	cmp	r3, #16
 800f0a4:	d000      	beq.n	800f0a8 <rpmsg_virtio_send_offchannel_raw+0xe0>
 800f0a6:	e7fe      	b.n	800f0a6 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 800f0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0aa:	3310      	adds	r3, #16
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0b0:	f7ff fd90 	bl	800ebd4 <metal_io_virt_to_offset>
 800f0b4:	4601      	mov	r1, r0
 800f0b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0b8:	683a      	ldr	r2, [r7, #0]
 800f0ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0bc:	f7fe fdc7 	bl	800dc4e <metal_io_block_write>
 800f0c0:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 800f0c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d000      	beq.n	800f0cc <rpmsg_virtio_send_offchannel_raw+0x104>
 800f0ca:	e7fe      	b.n	800f0ca <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	3358      	adds	r3, #88	; 0x58
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7ff fde6 	bl	800eca2 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 800f0d6:	693a      	ldr	r2, [r7, #16]
 800f0d8:	8afb      	ldrh	r3, [r7, #22]
 800f0da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f0dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0de:	f7ff feea 	bl	800eeb6 <rpmsg_virtio_enqueue_buffer>
 800f0e2:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 800f0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d000      	beq.n	800f0ec <rpmsg_virtio_send_offchannel_raw+0x124>
 800f0ea:	e7fe      	b.n	800f0ea <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 800f0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f000 fc5a 	bl	800f9aa <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	3358      	adds	r3, #88	; 0x58
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7ff fddc 	bl	800ecb8 <metal_mutex_release>

	return size;
 800f100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800f102:	4618      	mov	r0, r3
 800f104:	3740      	adds	r7, #64	; 0x40
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	fffff82c 	.word	0xfffff82c
 800f110:	fffff82b 	.word	0xfffff82b
 800f114:	fffff82e 	.word	0xfffff82e

0800f118 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 800f118:	b480      	push	{r7}
 800f11a:	b083      	sub	sp, #12
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 800f120:	bf00      	nop
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 800f12c:	b590      	push	{r4, r7, lr}
 800f12e:	b08d      	sub	sp, #52	; 0x34
 800f130:	af02      	add	r7, sp, #8
 800f132:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 800f13a:	6a3b      	ldr	r3, [r7, #32]
 800f13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f13e:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 800f144:	69bb      	ldr	r3, [r7, #24]
 800f146:	3358      	adds	r3, #88	; 0x58
 800f148:	4618      	mov	r0, r3
 800f14a:	f7ff fdaa 	bl	800eca2 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 800f14e:	f107 020a 	add.w	r2, r7, #10
 800f152:	f107 030c 	add.w	r3, r7, #12
 800f156:	4619      	mov	r1, r3
 800f158:	69f8      	ldr	r0, [r7, #28]
 800f15a:	f7ff fefa 	bl	800ef52 <rpmsg_virtio_get_rx_buffer>
 800f15e:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	3358      	adds	r3, #88	; 0x58
 800f164:	4618      	mov	r0, r3
 800f166:	f7ff fda7 	bl	800ecb8 <metal_mutex_release>

	while (rp_hdr) {
 800f16a:	e04c      	b.n	800f206 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 800f16c:	69bb      	ldr	r3, [r7, #24]
 800f16e:	3358      	adds	r3, #88	; 0x58
 800f170:	4618      	mov	r0, r3
 800f172:	f7ff fd96 	bl	800eca2 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 800f176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	4619      	mov	r1, r3
 800f17c:	69b8      	ldr	r0, [r7, #24]
 800f17e:	f7ff fe1a 	bl	800edb6 <rpmsg_get_ept_from_addr>
 800f182:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 800f184:	69bb      	ldr	r3, [r7, #24]
 800f186:	3358      	adds	r3, #88	; 0x58
 800f188:	4618      	mov	r0, r3
 800f18a:	f7ff fd95 	bl	800ecb8 <metal_mutex_release>

		if (!ept)
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d03c      	beq.n	800f20e <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f19c:	d103      	bne.n	800f1a6 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 800f19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800f1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ac:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 800f1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b2:	899b      	ldrh	r3, [r3, #12]
 800f1b4:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1c0:	9300      	str	r3, [sp, #0]
 800f1c2:	4613      	mov	r3, r2
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	6978      	ldr	r0, [r7, #20]
 800f1c8:	47a0      	blx	r4
 800f1ca:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d000      	beq.n	800f1d4 <rpmsg_virtio_rx_callback+0xa8>
 800f1d2:	e7fe      	b.n	800f1d2 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 800f1d4:	69bb      	ldr	r3, [r7, #24]
 800f1d6:	3358      	adds	r3, #88	; 0x58
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7ff fd62 	bl	800eca2 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800f1de:	68fa      	ldr	r2, [r7, #12]
 800f1e0:	897b      	ldrh	r3, [r7, #10]
 800f1e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1e4:	69f8      	ldr	r0, [r7, #28]
 800f1e6:	f7ff fe46 	bl	800ee76 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 800f1ea:	f107 020a 	add.w	r2, r7, #10
 800f1ee:	f107 030c 	add.w	r3, r7, #12
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	69f8      	ldr	r0, [r7, #28]
 800f1f6:	f7ff feac 	bl	800ef52 <rpmsg_virtio_get_rx_buffer>
 800f1fa:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	3358      	adds	r3, #88	; 0x58
 800f200:	4618      	mov	r0, r3
 800f202:	f7ff fd59 	bl	800ecb8 <metal_mutex_release>
	while (rp_hdr) {
 800f206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d1af      	bne.n	800f16c <rpmsg_virtio_rx_callback+0x40>
 800f20c:	e000      	b.n	800f210 <rpmsg_virtio_rx_callback+0xe4>
			return;
 800f20e:	bf00      	nop
	}
}
 800f210:	372c      	adds	r7, #44	; 0x2c
 800f212:	46bd      	mov	sp, r7
 800f214:	bd90      	pop	{r4, r7, pc}

0800f216 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b092      	sub	sp, #72	; 0x48
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	60f8      	str	r0, [r7, #12]
 800f21e:	60b9      	str	r1, [r7, #8]
 800f220:	607a      	str	r2, [r7, #4]
 800f222:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6a1b      	ldr	r3, [r3, #32]
 800f228:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 800f22a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f22c:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 800f22e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f232:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2b28      	cmp	r3, #40	; 0x28
 800f23c:	d001      	beq.n	800f242 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 800f23e:	2300      	movs	r3, #0
 800f240:	e057      	b.n	800f2f2 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 800f242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 800f244:	4619      	mov	r1, r3
 800f246:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f248:	f7ff fcc4 	bl	800ebd4 <metal_io_virt_to_offset>
 800f24c:	4601      	mov	r1, r0
 800f24e:	f107 0210 	add.w	r2, r7, #16
 800f252:	2320      	movs	r3, #32
 800f254:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f256:	f7fe fc83 	bl	800db60 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 800f25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f25c:	6a1b      	ldr	r3, [r3, #32]
 800f25e:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 800f260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f262:	3358      	adds	r3, #88	; 0x58
 800f264:	4618      	mov	r0, r3
 800f266:	f7ff fd1c 	bl	800eca2 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 800f26a:	f107 0110 	add.w	r1, r7, #16
 800f26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f270:	f04f 32ff 	mov.w	r2, #4294967295
 800f274:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f276:	f7ff fb57 	bl	800e928 <rpmsg_get_endpoint>
 800f27a:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 800f27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f280:	f003 0301 	and.w	r3, r3, #1
 800f284:	2b00      	cmp	r3, #0
 800f286:	d017      	beq.n	800f2b8 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 800f288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d003      	beq.n	800f296 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 800f28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f290:	f04f 32ff 	mov.w	r2, #4294967295
 800f294:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 800f296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f298:	3358      	adds	r3, #88	; 0x58
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7ff fd0c 	bl	800ecb8 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 800f2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d024      	beq.n	800f2f0 <rpmsg_virtio_ns_callback+0xda>
 800f2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d020      	beq.n	800f2f0 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 800f2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2b2:	68f8      	ldr	r0, [r7, #12]
 800f2b4:	4798      	blx	r3
 800f2b6:	e01b      	b.n	800f2f0 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 800f2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d110      	bne.n	800f2e0 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 800f2be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2c0:	3358      	adds	r3, #88	; 0x58
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7ff fcf8 	bl	800ecb8 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 800f2c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00f      	beq.n	800f2f0 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 800f2d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2d4:	f107 0110 	add.w	r1, r7, #16
 800f2d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f2dc:	4798      	blx	r3
 800f2de:	e007      	b.n	800f2f0 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 800f2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2e4:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 800f2e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2e8:	3358      	adds	r3, #88	; 0x58
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7ff fce4 	bl	800ecb8 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800f2f0:	2300      	movs	r3, #0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3748      	adds	r7, #72	; 0x48
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
	...

0800f2fc <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b094      	sub	sp, #80	; 0x50
 800f300:	af02      	add	r7, sp, #8
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
 800f308:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 800f30e:	2264      	movs	r2, #100	; 0x64
 800f310:	2100      	movs	r1, #0
 800f312:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f314:	f001 fa70 	bl	80107f8 <memset>
	metal_mutex_init(&rdev->lock);
 800f318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f31a:	3358      	adds	r3, #88	; 0x58
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7ff fcb5 	bl	800ec8c <metal_mutex_init>
	rvdev->vdev = vdev;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	68ba      	ldr	r2, [r7, #8]
 800f326:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 800f328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 800f334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f336:	4a5d      	ldr	r2, [pc, #372]	; (800f4ac <rpmsg_init_vdev+0x1b0>)
 800f338:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 800f33a:	68f8      	ldr	r0, [r7, #12]
 800f33c:	f7ff fce4 	bl	800ed08 <rpmsg_virtio_get_role>
 800f340:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800f342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f344:	2b00      	cmp	r3, #0
 800f346:	d120      	bne.n	800f38a <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 800f348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d101      	bne.n	800f352 <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 800f34e:	4b58      	ldr	r3, [pc, #352]	; (800f4b0 <rpmsg_init_vdev+0x1b4>)
 800f350:	e0a7      	b.n	800f4a2 <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 800f352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f354:	689b      	ldr	r3, [r3, #8]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d101      	bne.n	800f35e <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 800f35a:	4b56      	ldr	r3, [pc, #344]	; (800f4b4 <rpmsg_init_vdev+0x1b8>)
 800f35c:	e0a1      	b.n	800f4a2 <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f362:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 800f364:	4b54      	ldr	r3, [pc, #336]	; (800f4b8 <rpmsg_init_vdev+0x1bc>)
 800f366:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 800f368:	4b54      	ldr	r3, [pc, #336]	; (800f4bc <rpmsg_init_vdev+0x1c0>)
 800f36a:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 800f36c:	4b54      	ldr	r3, [pc, #336]	; (800f4c0 <rpmsg_init_vdev+0x1c4>)
 800f36e:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 800f370:	4b54      	ldr	r3, [pc, #336]	; (800f4c4 <rpmsg_init_vdev+0x1c8>)
 800f372:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f378:	681a      	ldr	r2, [r3, #0]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f382:	3318      	adds	r3, #24
 800f384:	681a      	ldr	r2, [r3, #0]
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	683a      	ldr	r2, [r7, #0]
 800f38e:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 800f390:	f107 0220 	add.w	r2, r7, #32
 800f394:	f107 0318 	add.w	r3, r7, #24
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	4613      	mov	r3, r2
 800f39c:	2202      	movs	r2, #2
 800f39e:	2100      	movs	r1, #0
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	f7ff fcf3 	bl	800ed8c <rpmsg_virtio_create_virtqueues>
 800f3a6:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 800f3a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d001      	beq.n	800f3b2 <rpmsg_init_vdev+0xb6>
		return status;
 800f3ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3b0:	e077      	b.n	800f4a2 <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	643b      	str	r3, [r7, #64]	; 0x40
 800f3b6:	e00f      	b.n	800f3d8 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f3bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f3be:	4613      	mov	r3, r2
 800f3c0:	005b      	lsls	r3, r3, #1
 800f3c2:	4413      	add	r3, r2
 800f3c4:	00db      	lsls	r3, r3, #3
 800f3c6:	440b      	add	r3, r1
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 800f3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ce:	683a      	ldr	r2, [r7, #0]
 800f3d0:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800f3d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	643b      	str	r3, [r7, #64]	; 0x40
 800f3d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d9ec      	bls.n	800f3b8 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800f3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d137      	bne.n	800f454 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 800f3e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3e8:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3ee:	e02a      	b.n	800f446 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800f3f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f3f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f3f6:	f7ff fcef 	bl	800edd8 <rpmsg_virtio_shm_pool_get_buffer>
 800f3fa:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 800f3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d101      	bne.n	800f406 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800f402:	4b2c      	ldr	r3, [pc, #176]	; (800f4b4 <rpmsg_init_vdev+0x1b8>)
 800f404:	e04d      	b.n	800f4a2 <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 800f406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f408:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 800f40a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f40c:	6838      	ldr	r0, [r7, #0]
 800f40e:	f7ff fbe1 	bl	800ebd4 <metal_io_virt_to_offset>
 800f412:	4601      	mov	r1, r0
 800f414:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f418:	2200      	movs	r2, #0
 800f41a:	6838      	ldr	r0, [r7, #0]
 800f41c:	f7fe fc8d 	bl	800dd3a <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800f424:	f107 0110 	add.w	r1, r7, #16
 800f428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42a:	9300      	str	r3, [sp, #0]
 800f42c:	2301      	movs	r3, #1
 800f42e:	2200      	movs	r2, #0
 800f430:	f000 f9fd 	bl	800f82e <virtqueue_add_buffer>
 800f434:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 800f436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d001      	beq.n	800f440 <rpmsg_init_vdev+0x144>
				return status;
 800f43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f43e:	e030      	b.n	800f4a2 <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800f440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f442:	3301      	adds	r3, #1
 800f444:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f44a:	895b      	ldrh	r3, [r3, #10]
 800f44c:	461a      	mov	r2, r3
 800f44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f450:	4293      	cmp	r3, r2
 800f452:	d3cd      	bcc.n	800f3f0 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 800f454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f456:	4618      	mov	r0, r3
 800f458:	f7ff fbab 	bl	800ebb2 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f7ff fc84 	bl	800ed6a <rpmsg_virtio_get_features>
 800f462:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 800f464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f466:	f003 0301 	and.w	r3, r3, #1
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d011      	beq.n	800f492 <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 800f46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f470:	f103 0008 	add.w	r0, r3, #8
 800f474:	2300      	movs	r3, #0
 800f476:	9301      	str	r3, [sp, #4]
 800f478:	4b13      	ldr	r3, [pc, #76]	; (800f4c8 <rpmsg_init_vdev+0x1cc>)
 800f47a:	9300      	str	r3, [sp, #0]
 800f47c:	2335      	movs	r3, #53	; 0x35
 800f47e:	2235      	movs	r2, #53	; 0x35
 800f480:	4912      	ldr	r1, [pc, #72]	; (800f4cc <rpmsg_init_vdev+0x1d0>)
 800f482:	f7ff fc24 	bl	800ecce <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 800f486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f488:	3308      	adds	r3, #8
 800f48a:	4619      	mov	r1, r3
 800f48c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f48e:	f7ff facd 	bl	800ea2c <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 800f492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f494:	2b00      	cmp	r3, #0
 800f496:	d103      	bne.n	800f4a0 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 800f498:	2104      	movs	r1, #4
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f7ff fc41 	bl	800ed22 <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 800f4a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3748      	adds	r7, #72	; 0x48
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	0800efc9 	.word	0x0800efc9
 800f4b0:	fffff82d 	.word	0xfffff82d
 800f4b4:	fffff82e 	.word	0xfffff82e
 800f4b8:	08011950 	.word	0x08011950
 800f4bc:	08011958 	.word	0x08011958
 800f4c0:	0800f12d 	.word	0x0800f12d
 800f4c4:	0800f119 	.word	0x0800f119
 800f4c8:	0800f217 	.word	0x0800f217
 800f4cc:	08011960 	.word	0x08011960

0800f4d0 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b083      	sub	sp, #12
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800f4da:	bf00      	nop
 800f4dc:	370c      	adds	r7, #12
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr

0800f4e6 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 800f4e6:	b480      	push	{r7}
 800f4e8:	b083      	sub	sp, #12
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
 800f4ee:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b085      	sub	sp, #20
 800f500:	af00      	add	r7, sp, #0
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
 800f508:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 800f50a:	68fb      	ldr	r3, [r7, #12]
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3714      	adds	r7, #20
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr

0800f518 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 800f518:	b480      	push	{r7}
 800f51a:	b085      	sub	sp, #20
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	011b      	lsls	r3, r3, #4
 800f526:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	3303      	adds	r3, #3
 800f52c:	005a      	lsls	r2, r3, #1
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	4413      	add	r3, r2
 800f532:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	4413      	add	r3, r2
 800f53a:	1e5a      	subs	r2, r3, #1
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	425b      	negs	r3, r3
 800f540:	4013      	ands	r3, r2
 800f542:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	4413      	add	r3, r2
 800f54c:	3306      	adds	r3, #6
 800f54e:	60fb      	str	r3, [r7, #12]

	return size;
 800f550:	68fb      	ldr	r3, [r7, #12]
}
 800f552:	4618      	mov	r0, r3
 800f554:	3714      	adds	r7, #20
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr

0800f55e <metal_io_virt_to_offset>:
{
 800f55e:	b480      	push	{r7}
 800f560:	b085      	sub	sp, #20
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
 800f566:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	683a      	ldr	r2, [r7, #0]
 800f56e:	1ad3      	subs	r3, r2, r3
 800f570:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	68fa      	ldr	r2, [r7, #12]
 800f578:	429a      	cmp	r2, r3
 800f57a:	d201      	bcs.n	800f580 <metal_io_virt_to_offset+0x22>
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	e001      	b.n	800f584 <metal_io_virt_to_offset+0x26>
 800f580:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f584:	4618      	mov	r0, r3
 800f586:	3714      	adds	r7, #20
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr

0800f590 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 800f590:	b590      	push	{r4, r7, lr}
 800f592:	b091      	sub	sp, #68	; 0x44
 800f594:	af04      	add	r7, sp, #16
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5a2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d902      	bls.n	800f5b2 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 800f5ac:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800f5b0:	e053      	b.n	800f65a <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5b6:	e04b      	b.n	800f650 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f5bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5be:	4613      	mov	r3, r2
 800f5c0:	005b      	lsls	r3, r3, #1
 800f5c2:	4413      	add	r3, r2
 800f5c4:	00db      	lsls	r3, r3, #3
 800f5c6:	440b      	add	r3, r1
 800f5c8:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5cc:	3304      	adds	r3, #4
 800f5ce:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	699b      	ldr	r3, [r3, #24]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d118      	bne.n	800f60a <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5da:	695b      	ldr	r3, [r3, #20]
 800f5dc:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 800f5de:	6a3b      	ldr	r3, [r7, #32]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	69f8      	ldr	r0, [r7, #28]
 800f5e6:	f7ff ffba 	bl	800f55e <metal_io_virt_to_offset>
 800f5ea:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 800f5ec:	6a3b      	ldr	r3, [r7, #32]
 800f5ee:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	6a3b      	ldr	r3, [r7, #32]
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	4610      	mov	r0, r2
 800f5fa:	f7ff ff8d 	bl	800f518 <vring_size>
 800f5fe:	4603      	mov	r3, r0
 800f600:	2200      	movs	r2, #0
 800f602:	69b9      	ldr	r1, [r7, #24]
 800f604:	69f8      	ldr	r0, [r7, #28]
 800f606:	f7fe fb98 	bl	800dd3a <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800f60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60c:	b298      	uxth	r0, r3
 800f60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	683a      	ldr	r2, [r7, #0]
 800f614:	4413      	add	r3, r2
 800f616:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800f618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61a:	009b      	lsls	r3, r3, #2
 800f61c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f61e:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800f620:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800f622:	68fa      	ldr	r2, [r7, #12]
 800f624:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800f626:	6a12      	ldr	r2, [r2, #32]
 800f628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f62a:	6809      	ldr	r1, [r1, #0]
 800f62c:	9102      	str	r1, [sp, #8]
 800f62e:	9201      	str	r2, [sp, #4]
 800f630:	9300      	str	r3, [sp, #0]
 800f632:	6a3b      	ldr	r3, [r7, #32]
 800f634:	4622      	mov	r2, r4
 800f636:	4601      	mov	r1, r0
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f000 f8c4 	bl	800f7c6 <virtqueue_create>
 800f63e:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d001      	beq.n	800f64a <virtio_create_virtqueues+0xba>
			return ret;
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	e007      	b.n	800f65a <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 800f64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f64c:	3301      	adds	r3, #1
 800f64e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	429a      	cmp	r2, r3
 800f656:	d3af      	bcc.n	800f5b8 <virtio_create_virtqueues+0x28>
	}
	return 0;
 800f658:	2300      	movs	r3, #0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3734      	adds	r7, #52	; 0x34
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd90      	pop	{r4, r7, pc}

0800f662 <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 800f662:	b480      	push	{r7}
 800f664:	b085      	sub	sp, #20
 800f666:	af00      	add	r7, sp, #0
 800f668:	60f8      	str	r0, [r7, #12]
 800f66a:	60b9      	str	r1, [r7, #8]
 800f66c:	607a      	str	r2, [r7, #4]
 800f66e:	603b      	str	r3, [r7, #0]
	vr->num = num;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	68ba      	ldr	r2, [r7, #8]
 800f674:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	687a      	ldr	r2, [r7, #4]
 800f67a:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	011b      	lsls	r3, r3, #4
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	441a      	add	r2, r3
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	689a      	ldr	r2, [r3, #8]
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	005b      	lsls	r3, r3, #1
 800f690:	4413      	add	r3, r2
 800f692:	3304      	adds	r3, #4
 800f694:	461a      	mov	r2, r3
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 800f69a:	1c5a      	adds	r2, r3, #1
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	425b      	negs	r3, r3
 800f6a0:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 800f6a2:	461a      	mov	r2, r3
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	60da      	str	r2, [r3, #12]
}
 800f6a8:	bf00      	nop
 800f6aa:	3714      	adds	r7, #20
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr

0800f6b4 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	80fb      	strh	r3, [r7, #6]
 800f6be:	460b      	mov	r3, r1
 800f6c0:	80bb      	strh	r3, [r7, #4]
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 800f6c6:	88ba      	ldrh	r2, [r7, #4]
 800f6c8:	88fb      	ldrh	r3, [r7, #6]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	3b01      	subs	r3, #1
 800f6d0:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 800f6d2:	88b9      	ldrh	r1, [r7, #4]
 800f6d4:	887b      	ldrh	r3, [r7, #2]
 800f6d6:	1acb      	subs	r3, r1, r3
 800f6d8:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	bf34      	ite	cc
 800f6de:	2301      	movcc	r3, #1
 800f6e0:	2300      	movcs	r3, #0
 800f6e2:	b2db      	uxtb	r3, r3
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <metal_io_virt_to_offset>:
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b085      	sub	sp, #20
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	683a      	ldr	r2, [r7, #0]
 800f700:	1ad3      	subs	r3, r2, r3
 800f702:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	68fa      	ldr	r2, [r7, #12]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d201      	bcs.n	800f712 <metal_io_virt_to_offset+0x22>
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	e001      	b.n	800f716 <metal_io_virt_to_offset+0x26>
 800f712:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f716:	4618      	mov	r0, r3
 800f718:	3714      	adds	r7, #20
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr

0800f722 <metal_io_phys>:
{
 800f722:	b480      	push	{r7}
 800f724:	b085      	sub	sp, #20
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
 800f72a:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 800f730:	2b1f      	cmp	r3, #31
 800f732:	d805      	bhi.n	800f740 <metal_io_phys+0x1e>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	683a      	ldr	r2, [r7, #0]
 800f73a:	fa22 f303 	lsr.w	r3, r2, r3
 800f73e:	e000      	b.n	800f742 <metal_io_phys+0x20>
 800f740:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 800f742:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d010      	beq.n	800f76e <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	689b      	ldr	r3, [r3, #8]
 800f750:	683a      	ldr	r2, [r7, #0]
 800f752:	429a      	cmp	r2, r3
 800f754:	d80b      	bhi.n	800f76e <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	685a      	ldr	r2, [r3, #4]
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	4413      	add	r3, r2
 800f760:	681a      	ldr	r2, [r3, #0]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6919      	ldr	r1, [r3, #16]
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 800f76a:	4413      	add	r3, r2
 800f76c:	e001      	b.n	800f772 <metal_io_phys+0x50>
 800f76e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f772:	4618      	mov	r0, r3
 800f774:	3714      	adds	r7, #20
 800f776:	46bd      	mov	sp, r7
 800f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77c:	4770      	bx	lr

0800f77e <metal_io_virt_to_phys>:
{
 800f77e:	b580      	push	{r7, lr}
 800f780:	b082      	sub	sp, #8
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
 800f786:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 800f788:	6839      	ldr	r1, [r7, #0]
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f7ff ffb0 	bl	800f6f0 <metal_io_virt_to_offset>
 800f790:	4603      	mov	r3, r0
 800f792:	4619      	mov	r1, r3
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f7ff ffc4 	bl	800f722 <metal_io_phys>
 800f79a:	4603      	mov	r3, r0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3708      	adds	r7, #8
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b2:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 800f7b4:	6839      	ldr	r1, [r7, #0]
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f7ff ffe1 	bl	800f77e <metal_io_virt_to_phys>
 800f7bc:	4603      	mov	r3, r0
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b086      	sub	sp, #24
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	60f8      	str	r0, [r7, #12]
 800f7ce:	607a      	str	r2, [r7, #4]
 800f7d0:	603b      	str	r3, [r7, #0]
 800f7d2:	460b      	mov	r3, r1
 800f7d4:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d121      	bne.n	800f824 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 800f7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e2:	68fa      	ldr	r2, [r7, #12]
 800f7e4:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 800f7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e8:	687a      	ldr	r2, [r7, #4]
 800f7ea:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 800f7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ee:	897a      	ldrh	r2, [r7, #10]
 800f7f0:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	891a      	ldrh	r2, [r3, #8]
 800f7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f8:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 800f7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7fc:	895a      	ldrh	r2, [r3, #10]
 800f7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f800:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 800f802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f804:	6a3a      	ldr	r2, [r7, #32]
 800f806:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 800f808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f80c:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	6819      	ldr	r1, [r3, #0]
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	461a      	mov	r2, r3
 800f818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f81a:	f000 f97a 	bl	800fb12 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 800f81e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f820:	f000 f899 	bl	800f956 <virtqueue_disable_cb>
	}

	return (status);
 800f824:	697b      	ldr	r3, [r7, #20]
}
 800f826:	4618      	mov	r0, r3
 800f828:	3718      	adds	r7, #24
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 800f82e:	b580      	push	{r7, lr}
 800f830:	b08a      	sub	sp, #40	; 0x28
 800f832:	af02      	add	r7, sp, #8
 800f834:	60f8      	str	r0, [r7, #12]
 800f836:	60b9      	str	r1, [r7, #8]
 800f838:	607a      	str	r2, [r7, #4]
 800f83a:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 800f83c:	2300      	movs	r3, #0
 800f83e:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 800f840:	2300      	movs	r3, #0
 800f842:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	4413      	add	r3, r2
 800f84a:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 800f84c:	69bb      	ldr	r3, [r7, #24]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d12c      	bne.n	800f8ac <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800f856:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 800f858:	8a7b      	ldrh	r3, [r7, #18]
 800f85a:	3307      	adds	r3, #7
 800f85c:	00db      	lsls	r3, r3, #3
 800f85e:	68fa      	ldr	r2, [r7, #12]
 800f860:	4413      	add	r3, r2
 800f862:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f868:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	b29a      	uxth	r2, r3
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	69d9      	ldr	r1, [r3, #28]
 800f876:	8a7a      	ldrh	r2, [r7, #18]
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	9301      	str	r3, [sp, #4]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	9300      	str	r3, [sp, #0]
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	68f8      	ldr	r0, [r7, #12]
 800f884:	f000 f8a7 	bl	800f9d6 <vq_ring_add_buffer>
 800f888:	4603      	mov	r3, r0
 800f88a:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	8a3a      	ldrh	r2, [r7, #16]
 800f890:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	b29b      	uxth	r3, r3
 800f89a:	1ad3      	subs	r3, r2, r3
 800f89c:	b29a      	uxth	r2, r3
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 800f8a2:	8a7b      	ldrh	r3, [r7, #18]
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	68f8      	ldr	r0, [r7, #12]
 800f8a8:	f000 f966 	bl	800fb78 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 800f8ac:	69bb      	ldr	r3, [r7, #24]
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3720      	adds	r7, #32
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b088      	sub	sp, #32
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	60f8      	str	r0, [r7, #12]
 800f8be:	60b9      	str	r1, [r7, #8]
 800f8c0:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d006      	beq.n	800f8d6 <virtqueue_get_buffer+0x20>
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d0:	885b      	ldrh	r3, [r3, #2]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d101      	bne.n	800f8da <virtqueue_get_buffer+0x24>
		return (NULL);
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	e039      	b.n	800f94e <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8de:	1c5a      	adds	r2, r3, #1
 800f8e0:	b291      	uxth	r1, r2
 800f8e2:	68fa      	ldr	r2, [r7, #12]
 800f8e4:	8651      	strh	r1, [r2, #50]	; 0x32
 800f8e6:	b21a      	sxth	r2, r3
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	895b      	ldrh	r3, [r3, #10]
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	b21b      	sxth	r3, r3
 800f8f2:	4013      	ands	r3, r2
 800f8f4:	b21b      	sxth	r3, r3
 800f8f6:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8fc:	8bfb      	ldrh	r3, [r7, #30]
 800f8fe:	00db      	lsls	r3, r3, #3
 800f900:	4413      	add	r3, r2
 800f902:	3304      	adds	r3, #4
 800f904:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 800f906:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	82fb      	strh	r3, [r7, #22]
	if (len)
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d003      	beq.n	800f91e <virtqueue_get_buffer+0x68>
		*len = uep->len;
 800f916:	69bb      	ldr	r3, [r7, #24]
 800f918:	685a      	ldr	r2, [r3, #4]
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 800f91e:	8afb      	ldrh	r3, [r7, #22]
 800f920:	4619      	mov	r1, r3
 800f922:	68f8      	ldr	r0, [r7, #12]
 800f924:	f000 f8ae 	bl	800fa84 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 800f928:	8afa      	ldrh	r2, [r7, #22]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	3207      	adds	r2, #7
 800f92e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800f932:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 800f934:	8afa      	ldrh	r2, [r7, #22]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	3207      	adds	r2, #7
 800f93a:	2100      	movs	r1, #0
 800f93c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d002      	beq.n	800f94c <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	8bfa      	ldrh	r2, [r7, #30]
 800f94a:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 800f94c:	693b      	ldr	r3, [r7, #16]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3720      	adds	r7, #32
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}

0800f956 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 800f956:	b480      	push	{r7}
 800f958:	b083      	sub	sp, #12
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	68db      	ldr	r3, [r3, #12]
 800f962:	f003 0302 	and.w	r3, r3, #2
 800f966:	2b00      	cmp	r3, #0
 800f968:	d010      	beq.n	800f98c <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	895b      	ldrh	r3, [r3, #10]
 800f972:	1ad3      	subs	r3, r2, r3
 800f974:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6a1a      	ldr	r2, [r3, #32]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800f97e:	3901      	subs	r1, #1
 800f980:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 800f982:	005b      	lsls	r3, r3, #1
 800f984:	4413      	add	r3, r2
 800f986:	460a      	mov	r2, r1
 800f988:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 800f98a:	e008      	b.n	800f99e <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6a1b      	ldr	r3, [r3, #32]
 800f990:	881a      	ldrh	r2, [r3, #0]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6a1b      	ldr	r3, [r3, #32]
 800f996:	f042 0201 	orr.w	r2, r2, #1
 800f99a:	b292      	uxth	r2, r2
 800f99c:	801a      	strh	r2, [r3, #0]
}
 800f99e:	bf00      	nop
 800f9a0:	370c      	adds	r7, #12
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr

0800f9aa <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 800f9aa:	b580      	push	{r7, lr}
 800f9ac:	b082      	sub	sp, #8
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 800f9b2:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 f91d 	bl	800fbf6 <vq_ring_must_notify_host>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d002      	beq.n	800f9c8 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 f94d 	bl	800fc62 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 800f9ce:	bf00      	nop
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b088      	sub	sp, #32
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	60f8      	str	r0, [r7, #12]
 800f9de:	60b9      	str	r1, [r7, #8]
 800f9e0:	603b      	str	r3, [r7, #0]
 800f9e2:	4613      	mov	r3, r2
 800f9e4:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 800f9e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ea:	4413      	add	r3, r2
 800f9ec:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	61fb      	str	r3, [r7, #28]
 800f9f2:	88fb      	ldrh	r3, [r7, #6]
 800f9f4:	837b      	strh	r3, [r7, #26]
 800f9f6:	e03c      	b.n	800fa72 <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 800f9f8:	8b7b      	ldrh	r3, [r7, #26]
 800f9fa:	011b      	lsls	r3, r3, #4
 800f9fc:	68ba      	ldr	r2, [r7, #8]
 800f9fe:	4413      	add	r3, r2
 800fa00:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	00db      	lsls	r3, r3, #3
 800fa06:	683a      	ldr	r2, [r7, #0]
 800fa08:	4413      	add	r3, r2
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f7ff fec8 	bl	800f7a4 <virtqueue_virt_to_phys>
 800fa14:	4603      	mov	r3, r0
 800fa16:	461a      	mov	r2, r3
 800fa18:	f04f 0300 	mov.w	r3, #0
 800fa1c:	6939      	ldr	r1, [r7, #16]
 800fa1e:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	00db      	lsls	r3, r3, #3
 800fa26:	683a      	ldr	r2, [r7, #0]
 800fa28:	4413      	add	r3, r2
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	2200      	movs	r2, #0
 800fa36:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	3b01      	subs	r3, #1
 800fa3c:	69fa      	ldr	r2, [r7, #28]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	da06      	bge.n	800fa50 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	899b      	ldrh	r3, [r3, #12]
 800fa46:	f043 0301 	orr.w	r3, r3, #1
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 800fa50:	69fa      	ldr	r2, [r7, #28]
 800fa52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa54:	429a      	cmp	r2, r3
 800fa56:	db06      	blt.n	800fa66 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	899b      	ldrh	r3, [r3, #12]
 800fa5c:	f043 0302 	orr.w	r3, r3, #2
 800fa60:	b29a      	uxth	r2, r3
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	3301      	adds	r3, #1
 800fa6a:	61fb      	str	r3, [r7, #28]
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	89db      	ldrh	r3, [r3, #14]
 800fa70:	837b      	strh	r3, [r7, #26]
 800fa72:	69fa      	ldr	r2, [r7, #28]
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	dbbe      	blt.n	800f9f8 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 800fa7a:	8b7b      	ldrh	r3, [r7, #26]
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3720      	adds	r7, #32
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b085      	sub	sp, #20
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	460b      	mov	r3, r1
 800fa8e:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	69da      	ldr	r2, [r3, #28]
 800fa94:	887b      	ldrh	r3, [r7, #2]
 800fa96:	011b      	lsls	r3, r3, #4
 800fa98:	4413      	add	r3, r2
 800fa9a:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 800fa9c:	887b      	ldrh	r3, [r7, #2]
 800fa9e:	3307      	adds	r3, #7
 800faa0:	00db      	lsls	r3, r3, #3
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	4413      	add	r3, r2
 800faa6:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	889b      	ldrh	r3, [r3, #4]
 800fab0:	4413      	add	r3, r2
 800fab2:	b29a      	uxth	r2, r3
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	889b      	ldrh	r3, [r3, #4]
 800fabc:	3b01      	subs	r3, #1
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	899b      	ldrh	r3, [r3, #12]
 800fac8:	f003 0304 	and.w	r3, r3, #4
 800facc:	2b00      	cmp	r3, #0
 800face:	d113      	bne.n	800faf8 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 800fad0:	e00c      	b.n	800faec <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	69da      	ldr	r2, [r3, #28]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	89db      	ldrh	r3, [r3, #14]
 800fada:	011b      	lsls	r3, r3, #4
 800fadc:	4413      	add	r3, r2
 800fade:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	889b      	ldrh	r3, [r3, #4]
 800fae4:	3b01      	subs	r3, #1
 800fae6:	b29a      	uxth	r2, r3
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	899b      	ldrh	r3, [r3, #12]
 800faf0:	f003 0301 	and.w	r3, r3, #1
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d1ec      	bne.n	800fad2 <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	887a      	ldrh	r2, [r7, #2]
 800fb04:	861a      	strh	r2, [r3, #48]	; 0x30
}
 800fb06:	bf00      	nop
 800fb08:	3714      	adds	r7, #20
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr

0800fb12 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b088      	sub	sp, #32
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	60f8      	str	r0, [r7, #12]
 800fb1a:	60b9      	str	r1, [r7, #8]
 800fb1c:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	895b      	ldrh	r3, [r3, #10]
 800fb22:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	3318      	adds	r3, #24
 800fb28:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 800fb2a:	69b9      	ldr	r1, [r7, #24]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	68ba      	ldr	r2, [r7, #8]
 800fb30:	6978      	ldr	r0, [r7, #20]
 800fb32:	f7ff fd96 	bl	800f662 <vring_init>

	for (i = 0; i < size - 1; i++)
 800fb36:	2300      	movs	r3, #0
 800fb38:	61fb      	str	r3, [r7, #28]
 800fb3a:	e00c      	b.n	800fb56 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	6859      	ldr	r1, [r3, #4]
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	011b      	lsls	r3, r3, #4
 800fb48:	440b      	add	r3, r1
 800fb4a:	3201      	adds	r2, #1
 800fb4c:	b292      	uxth	r2, r2
 800fb4e:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	3301      	adds	r3, #1
 800fb54:	61fb      	str	r3, [r7, #28]
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	69fa      	ldr	r2, [r7, #28]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	dbed      	blt.n	800fb3c <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	685a      	ldr	r2, [r3, #4]
 800fb64:	69fb      	ldr	r3, [r7, #28]
 800fb66:	011b      	lsls	r3, r3, #4
 800fb68:	4413      	add	r3, r2
 800fb6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800fb6e:	81da      	strh	r2, [r3, #14]
}
 800fb70:	bf00      	nop
 800fb72:	3720      	adds	r7, #32
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b085      	sub	sp, #20
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	460b      	mov	r3, r1
 800fb82:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6a1b      	ldr	r3, [r3, #32]
 800fb88:	885b      	ldrh	r3, [r3, #2]
 800fb8a:	b21a      	sxth	r2, r3
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	895b      	ldrh	r3, [r3, #10]
 800fb90:	3b01      	subs	r3, #1
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	b21b      	sxth	r3, r3
 800fb96:	4013      	ands	r3, r2
 800fb98:	b21b      	sxth	r3, r3
 800fb9a:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6a1a      	ldr	r2, [r3, #32]
 800fba0:	89fb      	ldrh	r3, [r7, #14]
 800fba2:	005b      	lsls	r3, r3, #1
 800fba4:	4413      	add	r3, r2
 800fba6:	887a      	ldrh	r2, [r7, #2]
 800fba8:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 800fbaa:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6a1b      	ldr	r3, [r3, #32]
 800fbb2:	885a      	ldrh	r2, [r3, #2]
 800fbb4:	3201      	adds	r2, #1
 800fbb6:	b292      	uxth	r2, r2
 800fbb8:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800fbc6:	bf00      	nop
 800fbc8:	3714      	adds	r7, #20
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr

0800fbd2 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b082      	sub	sp, #8
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 800fbda:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	691b      	ldr	r3, [r3, #16]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d003      	beq.n	800fbee <virtqueue_notification+0x1c>
		vq->callback(vq);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	691b      	ldr	r3, [r3, #16]
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	4798      	blx	r3
}
 800fbee:	bf00      	nop
 800fbf0:	3708      	adds	r7, #8
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}

0800fbf6 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 800fbf6:	b580      	push	{r7, lr}
 800fbf8:	b084      	sub	sp, #16
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	68db      	ldr	r3, [r3, #12]
 800fc02:	f003 0302 	and.w	r3, r3, #2
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d01d      	beq.n	800fc46 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6a1b      	ldr	r3, [r3, #32]
 800fc0e:	885b      	ldrh	r3, [r3, #2]
 800fc10:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc16:	89fa      	ldrh	r2, [r7, #14]
 800fc18:	1ad3      	subs	r3, r2, r3
 800fc1a:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	699b      	ldr	r3, [r3, #24]
 800fc24:	00db      	lsls	r3, r3, #3
 800fc26:	4413      	add	r3, r2
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 800fc2c:	89ba      	ldrh	r2, [r7, #12]
 800fc2e:	89f9      	ldrh	r1, [r7, #14]
 800fc30:	897b      	ldrh	r3, [r7, #10]
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7ff fd3e 	bl	800f6b4 <vring_need_event>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	bf14      	ite	ne
 800fc3e:	2301      	movne	r3, #1
 800fc40:	2300      	moveq	r3, #0
 800fc42:	b2db      	uxtb	r3, r3
 800fc44:	e009      	b.n	800fc5a <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc4a:	881b      	ldrh	r3, [r3, #0]
 800fc4c:	f003 0301 	and.w	r3, r3, #1
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	bf0c      	ite	eq
 800fc54:	2301      	moveq	r3, #1
 800fc56:	2300      	movne	r3, #0
 800fc58:	b2db      	uxtb	r3, r3
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3710      	adds	r7, #16
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}

0800fc62 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 800fc62:	b580      	push	{r7, lr}
 800fc64:	b082      	sub	sp, #8
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	695b      	ldr	r3, [r3, #20]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d003      	beq.n	800fc7a <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	695b      	ldr	r3, [r3, #20]
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	4798      	blx	r3
}
 800fc7a:	bf00      	nop
 800fc7c:	3708      	adds	r7, #8
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
	...

0800fc84 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 800fc8c:	4b04      	ldr	r3, [pc, #16]	; (800fca0 <HAL_HSEM_FreeCallback+0x1c>)
 800fc8e:	2201      	movs	r2, #1
 800fc90:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800fc92:	2002      	movs	r0, #2
 800fc94:	f7f6 fbee 	bl	8006474 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 800fc98:	bf00      	nop
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	24000184 	.word	0x24000184

0800fca4 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800fcaa:	4b0b      	ldr	r3, [pc, #44]	; (800fcd8 <MAILBOX_Init+0x34>)
 800fcac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcb0:	4a09      	ldr	r2, [pc, #36]	; (800fcd8 <MAILBOX_Init+0x34>)
 800fcb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fcb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fcba:	4b07      	ldr	r3, [pc, #28]	; (800fcd8 <MAILBOX_Init+0x34>)
 800fcbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fcc4:	607b      	str	r3, [r7, #4]
 800fcc6:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800fcc8:	2002      	movs	r0, #2
 800fcca:	f7f6 fbd3 	bl	8006474 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 800fcce:	2300      	movs	r3, #0
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3708      	adds	r7, #8
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}
 800fcd8:	58024400 	.word	0x58024400

0800fcdc <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 800fce4:	4b09      	ldr	r3, [pc, #36]	; (800fd0c <MAILBOX_Poll+0x30>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d108      	bne.n	800fcfe <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 800fcec:	2100      	movs	r1, #0
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7fe fbe7 	bl	800e4c2 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 800fcf4:	4b05      	ldr	r3, [pc, #20]	; (800fd0c <MAILBOX_Poll+0x30>)
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	601a      	str	r2, [r3, #0]
    return 0;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	e001      	b.n	800fd02 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 800fcfe:	f06f 030a 	mvn.w	r3, #10
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	24000184 	.word	0x24000184

0800fd10 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800fd1a:	2000      	movs	r0, #0
 800fd1c:	f7f6 fb7c 	bl	8006418 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800fd20:	2100      	movs	r1, #0
 800fd22:	2000      	movs	r0, #0
 800fd24:	f7f6 fb92 	bl	800644c <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 800fd28:	2300      	movs	r3, #0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3708      	adds	r7, #8
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}

0800fd32 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 800fd32:	b480      	push	{r7}
 800fd34:	b083      	sub	sp, #12
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd42:	d006      	beq.n	800fd52 <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800fd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd4c:	d001      	beq.n	800fd52 <is_rpmsg_ept_ready+0x20>
 800fd4e:	2301      	movs	r3, #1
 800fd50:	e000      	b.n	800fd54 <is_rpmsg_ept_ready+0x22>
 800fd52:	2300      	movs	r3, #0
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	370c      	adds	r7, #12
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 800fd60:	b480      	push	{r7}
 800fd62:	b083      	sub	sp, #12
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 800fd6e:	683a      	ldr	r2, [r7, #0]
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d209      	bcs.n	800fd88 <metal_device_io_region+0x28>
 800fd74:	683a      	ldr	r2, [r7, #0]
 800fd76:	4613      	mov	r3, r2
 800fd78:	005b      	lsls	r3, r3, #1
 800fd7a:	4413      	add	r3, r2
 800fd7c:	011b      	lsls	r3, r3, #4
 800fd7e:	3308      	adds	r3, #8
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	4413      	add	r3, r2
 800fd84:	3304      	adds	r3, #4
 800fd86:	e000      	b.n	800fd8a <metal_device_io_region+0x2a>
 800fd88:	2300      	movs	r3, #0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	370c      	adds	r7, #12
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr
	...

0800fd98 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 800fd98:	b590      	push	{r4, r7, lr}
 800fd9a:	b08d      	sub	sp, #52	; 0x34
 800fd9c:	af04      	add	r7, sp, #16
 800fd9e:	6078      	str	r0, [r7, #4]
  int status = 0;
 800fda0:	2300      	movs	r3, #0
 800fda2:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800fda4:	2300      	movs	r3, #0
 800fda6:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 800fda8:	4a41      	ldr	r2, [pc, #260]	; (800feb0 <OPENAMP_shmem_init+0x118>)
 800fdaa:	f107 0310 	add.w	r3, r7, #16
 800fdae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdb2:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 800fdbe:	f107 0310 	add.w	r3, r7, #16
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7fd fe30 	bl	800da28 <metal_init>

  status = metal_register_generic_device(&shm_device);
 800fdc8:	483a      	ldr	r0, [pc, #232]	; (800feb4 <OPENAMP_shmem_init+0x11c>)
 800fdca:	f7fd fcd5 	bl	800d778 <metal_register_generic_device>
 800fdce:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d001      	beq.n	800fdda <OPENAMP_shmem_init+0x42>
    return status;
 800fdd6:	69fb      	ldr	r3, [r7, #28]
 800fdd8:	e066      	b.n	800fea8 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 800fdda:	f107 0318 	add.w	r3, r7, #24
 800fdde:	461a      	mov	r2, r3
 800fde0:	4935      	ldr	r1, [pc, #212]	; (800feb8 <OPENAMP_shmem_init+0x120>)
 800fde2:	4836      	ldr	r0, [pc, #216]	; (800febc <OPENAMP_shmem_init+0x124>)
 800fde4:	f7fd fc8a 	bl	800d6fc <metal_device_open>
 800fde8:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d001      	beq.n	800fdf4 <OPENAMP_shmem_init+0x5c>
    return status;
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	e059      	b.n	800fea8 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 800fdf4:	4a32      	ldr	r2, [pc, #200]	; (800fec0 <OPENAMP_shmem_init+0x128>)
 800fdf6:	4b33      	ldr	r3, [pc, #204]	; (800fec4 <OPENAMP_shmem_init+0x12c>)
 800fdf8:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800fdfa:	69bb      	ldr	r3, [r7, #24]
 800fdfc:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 800fe00:	4a31      	ldr	r2, [pc, #196]	; (800fec8 <OPENAMP_shmem_init+0x130>)
 800fe02:	4b2f      	ldr	r3, [pc, #188]	; (800fec0 <OPENAMP_shmem_init+0x128>)
 800fe04:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800fe06:	461a      	mov	r2, r3
 800fe08:	2300      	movs	r3, #0
 800fe0a:	9302      	str	r3, [sp, #8]
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	9301      	str	r3, [sp, #4]
 800fe10:	f04f 33ff 	mov.w	r3, #4294967295
 800fe14:	9300      	str	r3, [sp, #0]
 800fe16:	4613      	mov	r3, r2
 800fe18:	4a2a      	ldr	r2, [pc, #168]	; (800fec4 <OPENAMP_shmem_init+0x12c>)
 800fe1a:	4929      	ldr	r1, [pc, #164]	; (800fec0 <OPENAMP_shmem_init+0x128>)
 800fe1c:	f7fd fe51 	bl	800dac2 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	2100      	movs	r1, #0
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7ff ff9b 	bl	800fd60 <metal_device_io_region>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	4a27      	ldr	r2, [pc, #156]	; (800fecc <OPENAMP_shmem_init+0x134>)
 800fe2e:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 800fe30:	4b26      	ldr	r3, [pc, #152]	; (800fecc <OPENAMP_shmem_init+0x134>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d102      	bne.n	800fe3e <OPENAMP_shmem_init+0xa6>
    return -1;
 800fe38:	f04f 33ff 	mov.w	r3, #4294967295
 800fe3c:	e034      	b.n	800fea8 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 800fe3e:	f107 0208 	add.w	r2, r7, #8
 800fe42:	f107 030c 	add.w	r3, r7, #12
 800fe46:	4619      	mov	r1, r3
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f000 f91d 	bl	8010088 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	4a1f      	ldr	r2, [pc, #124]	; (800fed0 <OPENAMP_shmem_init+0x138>)
 800fe52:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 800fe54:	4b1e      	ldr	r3, [pc, #120]	; (800fed0 <OPENAMP_shmem_init+0x138>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d102      	bne.n	800fe62 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 800fe5c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe60:	e022      	b.n	800fea8 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800fe62:	69bb      	ldr	r3, [r7, #24]
 800fe64:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800fe68:	4b19      	ldr	r3, [pc, #100]	; (800fed0 <OPENAMP_shmem_init+0x138>)
 800fe6a:	6819      	ldr	r1, [r3, #0]
 800fe6c:	4b18      	ldr	r3, [pc, #96]	; (800fed0 <OPENAMP_shmem_init+0x138>)
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	461c      	mov	r4, r3
 800fe74:	2300      	movs	r3, #0
 800fe76:	9302      	str	r3, [sp, #8]
 800fe78:	2300      	movs	r3, #0
 800fe7a:	9301      	str	r3, [sp, #4]
 800fe7c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe80:	9300      	str	r3, [sp, #0]
 800fe82:	4623      	mov	r3, r4
 800fe84:	f7fd fe1d 	bl	800dac2 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 800fe88:	69bb      	ldr	r3, [r7, #24]
 800fe8a:	2101      	movs	r1, #1
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7ff ff67 	bl	800fd60 <metal_device_io_region>
 800fe92:	4603      	mov	r3, r0
 800fe94:	4a0f      	ldr	r2, [pc, #60]	; (800fed4 <OPENAMP_shmem_init+0x13c>)
 800fe96:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 800fe98:	4b0e      	ldr	r3, [pc, #56]	; (800fed4 <OPENAMP_shmem_init+0x13c>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d102      	bne.n	800fea6 <OPENAMP_shmem_init+0x10e>
    return -1;
 800fea0:	f04f 33ff 	mov.w	r3, #4294967295
 800fea4:	e000      	b.n	800fea8 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800fea6:	2300      	movs	r3, #0
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3724      	adds	r7, #36	; 0x24
 800feac:	46bd      	mov	sp, r7
 800feae:	bd90      	pop	{r4, r7, pc}
 800feb0:	08011978 	.word	0x08011978
 800feb4:	24000070 	.word	0x24000070
 800feb8:	08011964 	.word	0x08011964
 800febc:	08011970 	.word	0x08011970
 800fec0:	38000400 	.word	0x38000400
 800fec4:	24000218 	.word	0x24000218
 800fec8:	38010000 	.word	0x38010000
 800fecc:	24000188 	.word	0x24000188
 800fed0:	24000190 	.word	0x24000190
 800fed4:	2400018c 	.word	0x2400018c

0800fed8 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 800fed8:	b590      	push	{r4, r7, lr}
 800feda:	b08b      	sub	sp, #44	; 0x2c
 800fedc:	af04      	add	r7, sp, #16
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 800fee2:	2300      	movs	r3, #0
 800fee4:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 800fee6:	2300      	movs	r3, #0
 800fee8:	613b      	str	r3, [r7, #16]
  int status = 0;
 800feea:	2300      	movs	r3, #0
 800feec:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 800feee:	f7ff fed9 	bl	800fca4 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f7ff ff50 	bl	800fd98 <OPENAMP_shmem_init>
 800fef8:	60f8      	str	r0, [r7, #12]
  if(status)
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d001      	beq.n	800ff04 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	e06a      	b.n	800ffda <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	4b37      	ldr	r3, [pc, #220]	; (800ffe4 <MX_OPENAMP_Init+0x10c>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f103 0218 	add.w	r2, r3, #24
 800ff0e:	4b36      	ldr	r3, [pc, #216]	; (800ffe8 <MX_OPENAMP_Init+0x110>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2100      	movs	r1, #0
 800ff14:	9102      	str	r1, [sp, #8]
 800ff16:	4935      	ldr	r1, [pc, #212]	; (800ffec <MX_OPENAMP_Init+0x114>)
 800ff18:	9101      	str	r1, [sp, #4]
 800ff1a:	2100      	movs	r1, #0
 800ff1c:	9100      	str	r1, [sp, #0]
 800ff1e:	21ff      	movs	r1, #255	; 0xff
 800ff20:	f7fe f9f0 	bl	800e304 <rproc_virtio_create_vdev>
 800ff24:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d102      	bne.n	800ff32 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 800ff2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff30:	e053      	b.n	800ffda <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 800ff32:	6938      	ldr	r0, [r7, #16]
 800ff34:	f7fe fb01 	bl	800e53a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 800ff38:	4b2a      	ldr	r3, [pc, #168]	; (800ffe4 <MX_OPENAMP_Init+0x10c>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	3334      	adds	r3, #52	; 0x34
 800ff3e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800ff48:	461c      	mov	r4, r3
 800ff4a:	4b29      	ldr	r3, [pc, #164]	; (800fff0 <MX_OPENAMP_Init+0x118>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800ff4e:	697a      	ldr	r2, [r7, #20]
 800ff50:	6892      	ldr	r2, [r2, #8]
 800ff52:	6979      	ldr	r1, [r7, #20]
 800ff54:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800ff56:	9102      	str	r1, [sp, #8]
 800ff58:	9201      	str	r2, [sp, #4]
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	4623      	mov	r3, r4
 800ff5e:	4602      	mov	r2, r0
 800ff60:	2100      	movs	r1, #0
 800ff62:	6938      	ldr	r0, [r7, #16]
 800ff64:	f7fe fa7c 	bl	800e460 <rproc_virtio_init_vring>
 800ff68:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d001      	beq.n	800ff74 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	e032      	b.n	800ffda <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 800ff74:	4b1b      	ldr	r3, [pc, #108]	; (800ffe4 <MX_OPENAMP_Init+0x10c>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	3348      	adds	r3, #72	; 0x48
 800ff7a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800ff84:	461c      	mov	r4, r3
 800ff86:	4b1a      	ldr	r3, [pc, #104]	; (800fff0 <MX_OPENAMP_Init+0x118>)
 800ff88:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800ff8a:	697a      	ldr	r2, [r7, #20]
 800ff8c:	6892      	ldr	r2, [r2, #8]
 800ff8e:	6979      	ldr	r1, [r7, #20]
 800ff90:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800ff92:	9102      	str	r1, [sp, #8]
 800ff94:	9201      	str	r2, [sp, #4]
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	4623      	mov	r3, r4
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	2101      	movs	r1, #1
 800ff9e:	6938      	ldr	r0, [r7, #16]
 800ffa0:	f7fe fa5e 	bl	800e460 <rproc_virtio_init_vring>
 800ffa4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d001      	beq.n	800ffb0 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	e014      	b.n	800ffda <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800ffb0:	4b10      	ldr	r3, [pc, #64]	; (800fff4 <MX_OPENAMP_Init+0x11c>)
 800ffb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffb6:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 800ffb8:	4a0f      	ldr	r2, [pc, #60]	; (800fff8 <MX_OPENAMP_Init+0x120>)
 800ffba:	4b0e      	ldr	r3, [pc, #56]	; (800fff4 <MX_OPENAMP_Init+0x11c>)
 800ffbc:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	480e      	ldr	r0, [pc, #56]	; (800fffc <MX_OPENAMP_Init+0x124>)
 800ffc2:	f7fe ff2b 	bl	800ee1c <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800ffc6:	4b0a      	ldr	r3, [pc, #40]	; (800fff0 <MX_OPENAMP_Init+0x118>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	4a0c      	ldr	r2, [pc, #48]	; (800fffc <MX_OPENAMP_Init+0x124>)
 800ffcc:	9200      	str	r2, [sp, #0]
 800ffce:	683a      	ldr	r2, [r7, #0]
 800ffd0:	6939      	ldr	r1, [r7, #16]
 800ffd2:	480b      	ldr	r0, [pc, #44]	; (8010000 <MX_OPENAMP_Init+0x128>)
 800ffd4:	f7ff f992 	bl	800f2fc <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 800ffd8:	2300      	movs	r3, #0
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	371c      	adds	r7, #28
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd90      	pop	{r4, r7, pc}
 800ffe2:	bf00      	nop
 800ffe4:	24000190 	.word	0x24000190
 800ffe8:	2400018c 	.word	0x2400018c
 800ffec:	0800fd11 	.word	0x0800fd11
 800fff0:	24000188 	.word	0x24000188
 800fff4:	38000400 	.word	0x38000400
 800fff8:	38010000 	.word	0x38010000
 800fffc:	24000194 	.word	0x24000194
 8010000:	240001a0 	.word	0x240001a0

08010004 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b08a      	sub	sp, #40	; 0x28
 8010008:	af04      	add	r7, sp, #16
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	607a      	str	r2, [r7, #4]
 8010010:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8010012:	2300      	movs	r3, #0
 8010014:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8010016:	6a3b      	ldr	r3, [r7, #32]
 8010018:	9302      	str	r3, [sp, #8]
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	9301      	str	r3, [sp, #4]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	9300      	str	r3, [sp, #0]
 8010022:	f04f 33ff 	mov.w	r3, #4294967295
 8010026:	68ba      	ldr	r2, [r7, #8]
 8010028:	4904      	ldr	r1, [pc, #16]	; (801003c <OPENAMP_create_endpoint+0x38>)
 801002a:	68f8      	ldr	r0, [r7, #12]
 801002c:	f7fe fd12 	bl	800ea54 <rpmsg_create_ept>
 8010030:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8010032:	697b      	ldr	r3, [r7, #20]
}
 8010034:	4618      	mov	r0, r3
 8010036:	3718      	adds	r7, #24
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}
 801003c:	240001a0 	.word	0x240001a0

08010040 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8010044:	4b03      	ldr	r3, [pc, #12]	; (8010054 <OPENAMP_check_for_message+0x14>)
 8010046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010048:	4618      	mov	r0, r3
 801004a:	f7ff fe47 	bl	800fcdc <MAILBOX_Poll>
}
 801004e:	bf00      	nop
 8010050:	bd80      	pop	{r7, pc}
 8010052:	bf00      	nop
 8010054:	240001a0 	.word	0x240001a0

08010058 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 8010060:	e004      	b.n	801006c <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 8010062:	4b08      	ldr	r3, [pc, #32]	; (8010084 <OPENAMP_Wait_EndPointready+0x2c>)
 8010064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010066:	4618      	mov	r0, r3
 8010068:	f7ff fe38 	bl	800fcdc <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f7ff fe60 	bl	800fd32 <is_rpmsg_ept_ready>
 8010072:	4603      	mov	r3, r0
 8010074:	2b00      	cmp	r3, #0
 8010076:	d0f4      	beq.n	8010062 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 8010078:	bf00      	nop
 801007a:	bf00      	nop
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	240001a0 	.word	0x240001a0

08010088 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	60b9      	str	r1, [r7, #8]
 8010092:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 8010094:	228c      	movs	r2, #140	; 0x8c
 8010096:	2100      	movs	r1, #0
 8010098:	481e      	ldr	r0, [pc, #120]	; (8010114 <resource_table_init+0x8c>)
 801009a:	f000 fbad 	bl	80107f8 <memset>
	resource_table.num = 1;
 801009e:	4b1d      	ldr	r3, [pc, #116]	; (8010114 <resource_table_init+0x8c>)
 80100a0:	2201      	movs	r2, #1
 80100a2:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 80100a4:	4b1b      	ldr	r3, [pc, #108]	; (8010114 <resource_table_init+0x8c>)
 80100a6:	2201      	movs	r2, #1
 80100a8:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 80100aa:	4b1a      	ldr	r3, [pc, #104]	; (8010114 <resource_table_init+0x8c>)
 80100ac:	2218      	movs	r2, #24
 80100ae:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 80100b0:	4b19      	ldr	r3, [pc, #100]	; (8010118 <resource_table_init+0x90>)
 80100b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80100b6:	4a17      	ldr	r2, [pc, #92]	; (8010114 <resource_table_init+0x8c>)
 80100b8:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 80100ba:	4b16      	ldr	r3, [pc, #88]	; (8010114 <resource_table_init+0x8c>)
 80100bc:	2204      	movs	r2, #4
 80100be:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 80100c0:	4b14      	ldr	r3, [pc, #80]	; (8010114 <resource_table_init+0x8c>)
 80100c2:	2204      	movs	r2, #4
 80100c4:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 80100c6:	4b13      	ldr	r3, [pc, #76]	; (8010114 <resource_table_init+0x8c>)
 80100c8:	2200      	movs	r2, #0
 80100ca:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 80100cc:	4a12      	ldr	r2, [pc, #72]	; (8010118 <resource_table_init+0x90>)
 80100ce:	4b11      	ldr	r3, [pc, #68]	; (8010114 <resource_table_init+0x8c>)
 80100d0:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 80100d2:	4b10      	ldr	r3, [pc, #64]	; (8010114 <resource_table_init+0x8c>)
 80100d4:	2204      	movs	r2, #4
 80100d6:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 80100d8:	4b0e      	ldr	r3, [pc, #56]	; (8010114 <resource_table_init+0x8c>)
 80100da:	2204      	movs	r2, #4
 80100dc:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 80100de:	4b0d      	ldr	r3, [pc, #52]	; (8010114 <resource_table_init+0x8c>)
 80100e0:	2201      	movs	r2, #1
 80100e2:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 80100e4:	4b0b      	ldr	r3, [pc, #44]	; (8010114 <resource_table_init+0x8c>)
 80100e6:	2203      	movs	r2, #3
 80100e8:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 80100ea:	4b0a      	ldr	r3, [pc, #40]	; (8010114 <resource_table_init+0x8c>)
 80100ec:	2207      	movs	r2, #7
 80100ee:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 80100f0:	4b08      	ldr	r3, [pc, #32]	; (8010114 <resource_table_init+0x8c>)
 80100f2:	2202      	movs	r2, #2
 80100f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 80100f8:	4b06      	ldr	r3, [pc, #24]	; (8010114 <resource_table_init+0x8c>)
 80100fa:	2201      	movs	r2, #1
 80100fc:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	228c      	movs	r2, #140	; 0x8c
 8010102:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	4a03      	ldr	r2, [pc, #12]	; (8010114 <resource_table_init+0x8c>)
 8010108:	601a      	str	r2, [r3, #0]
}
 801010a:	bf00      	nop
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	38000000 	.word	0x38000000
 8010118:	38000400 	.word	0x38000400

0801011c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010120:	2201      	movs	r2, #1
 8010122:	490e      	ldr	r1, [pc, #56]	; (801015c <MX_USB_HOST_Init+0x40>)
 8010124:	480e      	ldr	r0, [pc, #56]	; (8010160 <MX_USB_HOST_Init+0x44>)
 8010126:	f7fc fc9d 	bl	800ca64 <USBH_Init>
 801012a:	4603      	mov	r3, r0
 801012c:	2b00      	cmp	r3, #0
 801012e:	d001      	beq.n	8010134 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010130:	f7f0 ff2e 	bl	8000f90 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010134:	490b      	ldr	r1, [pc, #44]	; (8010164 <MX_USB_HOST_Init+0x48>)
 8010136:	480a      	ldr	r0, [pc, #40]	; (8010160 <MX_USB_HOST_Init+0x44>)
 8010138:	f7fc fd3c 	bl	800cbb4 <USBH_RegisterClass>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	d001      	beq.n	8010146 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010142:	f7f0 ff25 	bl	8000f90 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010146:	4806      	ldr	r0, [pc, #24]	; (8010160 <MX_USB_HOST_Init+0x44>)
 8010148:	f7fc fdc9 	bl	800ccde <USBH_Start>
 801014c:	4603      	mov	r3, r0
 801014e:	2b00      	cmp	r3, #0
 8010150:	d001      	beq.n	8010156 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010152:	f7f0 ff1d 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010156:	bf00      	nop
 8010158:	bd80      	pop	{r7, pc}
 801015a:	bf00      	nop
 801015c:	08010169 	.word	0x08010169
 8010160:	24000b08 	.word	0x24000b08
 8010164:	24000024 	.word	0x24000024

08010168 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	460b      	mov	r3, r1
 8010172:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010174:	78fb      	ldrb	r3, [r7, #3]
 8010176:	3b01      	subs	r3, #1
 8010178:	2b04      	cmp	r3, #4
 801017a:	d819      	bhi.n	80101b0 <USBH_UserProcess+0x48>
 801017c:	a201      	add	r2, pc, #4	; (adr r2, 8010184 <USBH_UserProcess+0x1c>)
 801017e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010182:	bf00      	nop
 8010184:	080101b1 	.word	0x080101b1
 8010188:	080101a1 	.word	0x080101a1
 801018c:	080101b1 	.word	0x080101b1
 8010190:	080101a9 	.word	0x080101a9
 8010194:	08010199 	.word	0x08010199
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010198:	4b09      	ldr	r3, [pc, #36]	; (80101c0 <USBH_UserProcess+0x58>)
 801019a:	2203      	movs	r2, #3
 801019c:	701a      	strb	r2, [r3, #0]
  break;
 801019e:	e008      	b.n	80101b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80101a0:	4b07      	ldr	r3, [pc, #28]	; (80101c0 <USBH_UserProcess+0x58>)
 80101a2:	2202      	movs	r2, #2
 80101a4:	701a      	strb	r2, [r3, #0]
  break;
 80101a6:	e004      	b.n	80101b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80101a8:	4b05      	ldr	r3, [pc, #20]	; (80101c0 <USBH_UserProcess+0x58>)
 80101aa:	2201      	movs	r2, #1
 80101ac:	701a      	strb	r2, [r3, #0]
  break;
 80101ae:	e000      	b.n	80101b2 <USBH_UserProcess+0x4a>

  default:
  break;
 80101b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80101b2:	bf00      	nop
 80101b4:	370c      	adds	r7, #12
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
 80101be:	bf00      	nop
 80101c0:	2400021c 	.word	0x2400021c

080101c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b0b8      	sub	sp, #224	; 0xe0
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80101cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80101d0:	2200      	movs	r2, #0
 80101d2:	601a      	str	r2, [r3, #0]
 80101d4:	605a      	str	r2, [r3, #4]
 80101d6:	609a      	str	r2, [r3, #8]
 80101d8:	60da      	str	r2, [r3, #12]
 80101da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80101dc:	f107 0310 	add.w	r3, r7, #16
 80101e0:	22bc      	movs	r2, #188	; 0xbc
 80101e2:	2100      	movs	r1, #0
 80101e4:	4618      	mov	r0, r3
 80101e6:	f000 fb07 	bl	80107f8 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	4a3b      	ldr	r2, [pc, #236]	; (80102dc <HAL_HCD_MspInit+0x118>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d16e      	bne.n	80102d2 <HAL_HCD_MspInit+0x10e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80101f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80101f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80101fa:	2301      	movs	r3, #1
 80101fc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80101fe:	2312      	movs	r3, #18
 8010200:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8010202:	2302      	movs	r3, #2
 8010204:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8010206:	2303      	movs	r3, #3
 8010208:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 801020a:	2302      	movs	r3, #2
 801020c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 801020e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010212:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8010214:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010218:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 801021a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801021e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010222:	f107 0310 	add.w	r3, r7, #16
 8010226:	4618      	mov	r0, r3
 8010228:	f7f7 fa98 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d001      	beq.n	8010236 <HAL_HCD_MspInit+0x72>
    {
      Error_Handler();
 8010232:	f7f0 fead 	bl	8000f90 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010236:	f7f6 fae5 	bl	8006804 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801023a:	4b29      	ldr	r3, [pc, #164]	; (80102e0 <HAL_HCD_MspInit+0x11c>)
 801023c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010240:	4a27      	ldr	r2, [pc, #156]	; (80102e0 <HAL_HCD_MspInit+0x11c>)
 8010242:	f043 0301 	orr.w	r3, r3, #1
 8010246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801024a:	4b25      	ldr	r3, [pc, #148]	; (80102e0 <HAL_HCD_MspInit+0x11c>)
 801024c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010250:	f003 0301 	and.w	r3, r3, #1
 8010254:	60fb      	str	r3, [r7, #12]
 8010256:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8010258:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 801025c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010260:	2302      	movs	r3, #2
 8010262:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010266:	2300      	movs	r3, #0
 8010268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801026c:	2300      	movs	r3, #0
 801026e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010272:	230a      	movs	r3, #10
 8010274:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010278:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801027c:	4619      	mov	r1, r3
 801027e:	4819      	ldr	r0, [pc, #100]	; (80102e4 <HAL_HCD_MspInit+0x120>)
 8010280:	f7f4 f994 	bl	80045ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010288:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801028c:	2300      	movs	r3, #0
 801028e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010292:	2300      	movs	r3, #0
 8010294:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010298:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801029c:	4619      	mov	r1, r3
 801029e:	4811      	ldr	r0, [pc, #68]	; (80102e4 <HAL_HCD_MspInit+0x120>)
 80102a0:	f7f4 f984 	bl	80045ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80102a4:	4b0e      	ldr	r3, [pc, #56]	; (80102e0 <HAL_HCD_MspInit+0x11c>)
 80102a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80102aa:	4a0d      	ldr	r2, [pc, #52]	; (80102e0 <HAL_HCD_MspInit+0x11c>)
 80102ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80102b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80102b4:	4b0a      	ldr	r3, [pc, #40]	; (80102e0 <HAL_HCD_MspInit+0x11c>)
 80102b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80102ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80102be:	60bb      	str	r3, [r7, #8]
 80102c0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80102c2:	2200      	movs	r2, #0
 80102c4:	2100      	movs	r1, #0
 80102c6:	2065      	movs	r0, #101	; 0x65
 80102c8:	f7f1 ff17 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80102cc:	2065      	movs	r0, #101	; 0x65
 80102ce:	f7f1 ff2e 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80102d2:	bf00      	nop
 80102d4:	37e0      	adds	r7, #224	; 0xe0
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	40080000 	.word	0x40080000
 80102e0:	58024400 	.word	0x58024400
 80102e4:	58020000 	.word	0x58020000

080102e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fc fd12 	bl	800cd20 <USBH_LL_IncTimer>
}
 80102fc:	bf00      	nop
 80102fe:	3708      	adds	r7, #8
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010312:	4618      	mov	r0, r3
 8010314:	f7fc fd56 	bl	800cdc4 <USBH_LL_Connect>
}
 8010318:	bf00      	nop
 801031a:	3708      	adds	r7, #8
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801032e:	4618      	mov	r0, r3
 8010330:	f7fc fd65 	bl	800cdfe <USBH_LL_Disconnect>
}
 8010334:	bf00      	nop
 8010336:	3708      	adds	r7, #8
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801033c:	b480      	push	{r7}
 801033e:	b083      	sub	sp, #12
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	460b      	mov	r3, r1
 8010346:	70fb      	strb	r3, [r7, #3]
 8010348:	4613      	mov	r3, r2
 801034a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801034c:	bf00      	nop
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010366:	4618      	mov	r0, r3
 8010368:	f7fc fd0c 	bl	800cd84 <USBH_LL_PortEnabled>
}
 801036c:	bf00      	nop
 801036e:	3708      	adds	r7, #8
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010382:	4618      	mov	r0, r3
 8010384:	f7fc fd0e 	bl	800cda4 <USBH_LL_PortDisabled>
}
 8010388:	bf00      	nop
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	f643 230c 	movw	r3, #14860	; 0x3a0c
 801039e:	4413      	add	r3, r2
 80103a0:	781b      	ldrb	r3, [r3, #0]
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	d12b      	bne.n	80103fe <USBH_LL_Init+0x6e>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80103a6:	4a18      	ldr	r2, [pc, #96]	; (8010408 <USBH_LL_Init+0x78>)
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	f643 2310 	movw	r3, #14864	; 0x3a10
 80103b4:	4413      	add	r3, r2
 80103b6:	4a14      	ldr	r2, [pc, #80]	; (8010408 <USBH_LL_Init+0x78>)
 80103b8:	601a      	str	r2, [r3, #0]

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80103ba:	4b13      	ldr	r3, [pc, #76]	; (8010408 <USBH_LL_Init+0x78>)
 80103bc:	4a13      	ldr	r2, [pc, #76]	; (801040c <USBH_LL_Init+0x7c>)
 80103be:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 80103c0:	4b11      	ldr	r3, [pc, #68]	; (8010408 <USBH_LL_Init+0x78>)
 80103c2:	2210      	movs	r2, #16
 80103c4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80103c6:	4b10      	ldr	r3, [pc, #64]	; (8010408 <USBH_LL_Init+0x78>)
 80103c8:	2201      	movs	r2, #1
 80103ca:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80103cc:	4b0e      	ldr	r3, [pc, #56]	; (8010408 <USBH_LL_Init+0x78>)
 80103ce:	2200      	movs	r2, #0
 80103d0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80103d2:	4b0d      	ldr	r3, [pc, #52]	; (8010408 <USBH_LL_Init+0x78>)
 80103d4:	2202      	movs	r2, #2
 80103d6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80103d8:	4b0b      	ldr	r3, [pc, #44]	; (8010408 <USBH_LL_Init+0x78>)
 80103da:	2200      	movs	r2, #0
 80103dc:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80103de:	480a      	ldr	r0, [pc, #40]	; (8010408 <USBH_LL_Init+0x78>)
 80103e0:	f7f4 fad2 	bl	8004988 <HAL_HCD_Init>
 80103e4:	4603      	mov	r3, r0
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d001      	beq.n	80103ee <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 80103ea:	f7f0 fdd1 	bl	8000f90 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80103ee:	4806      	ldr	r0, [pc, #24]	; (8010408 <USBH_LL_Init+0x78>)
 80103f0:	f7f4 fea0 	bl	8005134 <HAL_HCD_GetCurrentFrame>
 80103f4:	4603      	mov	r3, r0
 80103f6:	4619      	mov	r1, r3
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f7fc fc80 	bl	800ccfe <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80103fe:	2300      	movs	r3, #0
}
 8010400:	4618      	mov	r0, r3
 8010402:	3708      	adds	r7, #8
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	24004520 	.word	0x24004520
 801040c:	40080000 	.word	0x40080000

08010410 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010418:	2300      	movs	r3, #0
 801041a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801041c:	2300      	movs	r3, #0
 801041e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	f643 2310 	movw	r3, #14864	; 0x3a10
 8010426:	4413      	add	r3, r2
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4618      	mov	r0, r3
 801042c:	f7f4 fe1a 	bl	8005064 <HAL_HCD_Start>
 8010430:	4603      	mov	r3, r0
 8010432:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010434:	7bfb      	ldrb	r3, [r7, #15]
 8010436:	4618      	mov	r0, r3
 8010438:	f000 f91e 	bl	8010678 <USBH_Get_USB_Status>
 801043c:	4603      	mov	r3, r0
 801043e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010440:	7bbb      	ldrb	r3, [r7, #14]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b084      	sub	sp, #16
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010452:	2300      	movs	r3, #0
 8010454:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010456:	2300      	movs	r3, #0
 8010458:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801045a:	687a      	ldr	r2, [r7, #4]
 801045c:	f643 2310 	movw	r3, #14864	; 0x3a10
 8010460:	4413      	add	r3, r2
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4618      	mov	r0, r3
 8010466:	f7f4 fe20 	bl	80050aa <HAL_HCD_Stop>
 801046a:	4603      	mov	r3, r0
 801046c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801046e:	7bfb      	ldrb	r3, [r7, #15]
 8010470:	4618      	mov	r0, r3
 8010472:	f000 f901 	bl	8010678 <USBH_Get_USB_Status>
 8010476:	4603      	mov	r3, r0
 8010478:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801047a:	7bbb      	ldrb	r3, [r7, #14]
}
 801047c:	4618      	mov	r0, r3
 801047e:	3710      	adds	r7, #16
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	460b      	mov	r3, r1
 801048e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	f643 2310 	movw	r3, #14864	; 0x3a10
 8010496:	4413      	add	r3, r2
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	78fa      	ldrb	r2, [r7, #3]
 801049c:	4611      	mov	r1, r2
 801049e:	4618      	mov	r0, r3
 80104a0:	f7f4 fe34 	bl	800510c <HAL_HCD_HC_GetXferCount>
 80104a4:	4603      	mov	r3, r0
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3708      	adds	r7, #8
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}

080104ae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80104ae:	b590      	push	{r4, r7, lr}
 80104b0:	b089      	sub	sp, #36	; 0x24
 80104b2:	af04      	add	r7, sp, #16
 80104b4:	6078      	str	r0, [r7, #4]
 80104b6:	4608      	mov	r0, r1
 80104b8:	4611      	mov	r1, r2
 80104ba:	461a      	mov	r2, r3
 80104bc:	4603      	mov	r3, r0
 80104be:	70fb      	strb	r3, [r7, #3]
 80104c0:	460b      	mov	r3, r1
 80104c2:	70bb      	strb	r3, [r7, #2]
 80104c4:	4613      	mov	r3, r2
 80104c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104c8:	2300      	movs	r3, #0
 80104ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80104cc:	2300      	movs	r3, #0
 80104ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80104d0:	687a      	ldr	r2, [r7, #4]
 80104d2:	f643 2310 	movw	r3, #14864	; 0x3a10
 80104d6:	4413      	add	r3, r2
 80104d8:	6818      	ldr	r0, [r3, #0]
 80104da:	787c      	ldrb	r4, [r7, #1]
 80104dc:	78ba      	ldrb	r2, [r7, #2]
 80104de:	78f9      	ldrb	r1, [r7, #3]
 80104e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80104e2:	9302      	str	r3, [sp, #8]
 80104e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80104e8:	9301      	str	r3, [sp, #4]
 80104ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80104ee:	9300      	str	r3, [sp, #0]
 80104f0:	4623      	mov	r3, r4
 80104f2:	f7f4 faab 	bl	8004a4c <HAL_HCD_HC_Init>
 80104f6:	4603      	mov	r3, r0
 80104f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80104fa:	7bfb      	ldrb	r3, [r7, #15]
 80104fc:	4618      	mov	r0, r3
 80104fe:	f000 f8bb 	bl	8010678 <USBH_Get_USB_Status>
 8010502:	4603      	mov	r3, r0
 8010504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010506:	7bbb      	ldrb	r3, [r7, #14]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3714      	adds	r7, #20
 801050c:	46bd      	mov	sp, r7
 801050e:	bd90      	pop	{r4, r7, pc}

08010510 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	460b      	mov	r3, r1
 801051a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801051c:	2300      	movs	r3, #0
 801051e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010520:	2300      	movs	r3, #0
 8010522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	f643 2310 	movw	r3, #14864	; 0x3a10
 801052a:	4413      	add	r3, r2
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	78fa      	ldrb	r2, [r7, #3]
 8010530:	4611      	mov	r1, r2
 8010532:	4618      	mov	r0, r3
 8010534:	f7f4 fb19 	bl	8004b6a <HAL_HCD_HC_Halt>
 8010538:	4603      	mov	r3, r0
 801053a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801053c:	7bfb      	ldrb	r3, [r7, #15]
 801053e:	4618      	mov	r0, r3
 8010540:	f000 f89a 	bl	8010678 <USBH_Get_USB_Status>
 8010544:	4603      	mov	r3, r0
 8010546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010548:	7bbb      	ldrb	r3, [r7, #14]
}
 801054a:	4618      	mov	r0, r3
 801054c:	3710      	adds	r7, #16
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010552:	b590      	push	{r4, r7, lr}
 8010554:	b089      	sub	sp, #36	; 0x24
 8010556:	af04      	add	r7, sp, #16
 8010558:	6078      	str	r0, [r7, #4]
 801055a:	4608      	mov	r0, r1
 801055c:	4611      	mov	r1, r2
 801055e:	461a      	mov	r2, r3
 8010560:	4603      	mov	r3, r0
 8010562:	70fb      	strb	r3, [r7, #3]
 8010564:	460b      	mov	r3, r1
 8010566:	70bb      	strb	r3, [r7, #2]
 8010568:	4613      	mov	r3, r2
 801056a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801056c:	2300      	movs	r3, #0
 801056e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010570:	2300      	movs	r3, #0
 8010572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	f643 2310 	movw	r3, #14864	; 0x3a10
 801057a:	4413      	add	r3, r2
 801057c:	6818      	ldr	r0, [r3, #0]
 801057e:	787c      	ldrb	r4, [r7, #1]
 8010580:	78ba      	ldrb	r2, [r7, #2]
 8010582:	78f9      	ldrb	r1, [r7, #3]
 8010584:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010588:	9303      	str	r3, [sp, #12]
 801058a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801058c:	9302      	str	r3, [sp, #8]
 801058e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010590:	9301      	str	r3, [sp, #4]
 8010592:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010596:	9300      	str	r3, [sp, #0]
 8010598:	4623      	mov	r3, r4
 801059a:	f7f4 fb09 	bl	8004bb0 <HAL_HCD_HC_SubmitRequest>
 801059e:	4603      	mov	r3, r0
 80105a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80105a2:	7bfb      	ldrb	r3, [r7, #15]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f000 f867 	bl	8010678 <USBH_Get_USB_Status>
 80105aa:	4603      	mov	r3, r0
 80105ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	3714      	adds	r7, #20
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd90      	pop	{r4, r7, pc}

080105b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	460b      	mov	r3, r1
 80105c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	f643 2310 	movw	r3, #14864	; 0x3a10
 80105ca:	4413      	add	r3, r2
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	78fa      	ldrb	r2, [r7, #3]
 80105d0:	4611      	mov	r1, r2
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7f4 fd86 	bl	80050e4 <HAL_HCD_HC_GetURBState>
 80105d8:	4603      	mov	r3, r0
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3708      	adds	r7, #8
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b082      	sub	sp, #8
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
 80105ea:	460b      	mov	r3, r1
 80105ec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80105ee:	687a      	ldr	r2, [r7, #4]
 80105f0:	f643 230c 	movw	r3, #14860	; 0x3a0c
 80105f4:	4413      	add	r3, r2
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	2b01      	cmp	r3, #1
 80105fa:	d103      	bne.n	8010604 <USBH_LL_DriverVBUS+0x22>
    MX_DriverVbusFS(state);
 80105fc:	78fb      	ldrb	r3, [r7, #3]
 80105fe:	4618      	mov	r0, r3
 8010600:	f000 f866 	bl	80106d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010604:	20c8      	movs	r0, #200	; 0xc8
 8010606:	f7f1 fc6d 	bl	8001ee4 <HAL_Delay>
  return USBH_OK;
 801060a:	2300      	movs	r3, #0
}
 801060c:	4618      	mov	r0, r3
 801060e:	3708      	adds	r7, #8
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}

08010614 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010614:	b480      	push	{r7}
 8010616:	b085      	sub	sp, #20
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	460b      	mov	r3, r1
 801061e:	70fb      	strb	r3, [r7, #3]
 8010620:	4613      	mov	r3, r2
 8010622:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	f643 2310 	movw	r3, #14864	; 0x3a10
 801062a:	4413      	add	r3, r2
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010630:	78fb      	ldrb	r3, [r7, #3]
 8010632:	68fa      	ldr	r2, [r7, #12]
 8010634:	212c      	movs	r1, #44	; 0x2c
 8010636:	fb01 f303 	mul.w	r3, r1, r3
 801063a:	4413      	add	r3, r2
 801063c:	333b      	adds	r3, #59	; 0x3b
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d009      	beq.n	8010658 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010644:	78fb      	ldrb	r3, [r7, #3]
 8010646:	68fa      	ldr	r2, [r7, #12]
 8010648:	212c      	movs	r1, #44	; 0x2c
 801064a:	fb01 f303 	mul.w	r3, r1, r3
 801064e:	4413      	add	r3, r2
 8010650:	3354      	adds	r3, #84	; 0x54
 8010652:	78ba      	ldrb	r2, [r7, #2]
 8010654:	701a      	strb	r2, [r3, #0]
 8010656:	e008      	b.n	801066a <USBH_LL_SetToggle+0x56>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010658:	78fb      	ldrb	r3, [r7, #3]
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	212c      	movs	r1, #44	; 0x2c
 801065e:	fb01 f303 	mul.w	r3, r1, r3
 8010662:	4413      	add	r3, r2
 8010664:	3355      	adds	r3, #85	; 0x55
 8010666:	78ba      	ldrb	r2, [r7, #2]
 8010668:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801066a:	2300      	movs	r3, #0
}
 801066c:	4618      	mov	r0, r3
 801066e:	3714      	adds	r7, #20
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr

08010678 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010678:	b480      	push	{r7}
 801067a:	b085      	sub	sp, #20
 801067c:	af00      	add	r7, sp, #0
 801067e:	4603      	mov	r3, r0
 8010680:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010682:	2300      	movs	r3, #0
 8010684:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010686:	79fb      	ldrb	r3, [r7, #7]
 8010688:	2b03      	cmp	r3, #3
 801068a:	d817      	bhi.n	80106bc <USBH_Get_USB_Status+0x44>
 801068c:	a201      	add	r2, pc, #4	; (adr r2, 8010694 <USBH_Get_USB_Status+0x1c>)
 801068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010692:	bf00      	nop
 8010694:	080106a5 	.word	0x080106a5
 8010698:	080106ab 	.word	0x080106ab
 801069c:	080106b1 	.word	0x080106b1
 80106a0:	080106b7 	.word	0x080106b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80106a4:	2300      	movs	r3, #0
 80106a6:	73fb      	strb	r3, [r7, #15]
    break;
 80106a8:	e00b      	b.n	80106c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80106aa:	2302      	movs	r3, #2
 80106ac:	73fb      	strb	r3, [r7, #15]
    break;
 80106ae:	e008      	b.n	80106c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80106b0:	2301      	movs	r3, #1
 80106b2:	73fb      	strb	r3, [r7, #15]
    break;
 80106b4:	e005      	b.n	80106c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80106b6:	2302      	movs	r3, #2
 80106b8:	73fb      	strb	r3, [r7, #15]
    break;
 80106ba:	e002      	b.n	80106c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80106bc:	2302      	movs	r3, #2
 80106be:	73fb      	strb	r3, [r7, #15]
    break;
 80106c0:	bf00      	nop
  }
  return usb_status;
 80106c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3714      	adds	r7, #20
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr

080106d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	4603      	mov	r3, r0
 80106d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80106da:	79fb      	ldrb	r3, [r7, #7]
 80106dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80106de:	79fb      	ldrb	r3, [r7, #7]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d102      	bne.n	80106ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80106e4:	2301      	movs	r3, #1
 80106e6:	73fb      	strb	r3, [r7, #15]
 80106e8:	e001      	b.n	80106ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80106ea:	2300      	movs	r3, #0
 80106ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,(GPIO_PinState)data);
 80106ee:	7bfb      	ldrb	r3, [r7, #15]
 80106f0:	461a      	mov	r2, r3
 80106f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80106f6:	4803      	ldr	r0, [pc, #12]	; (8010704 <MX_DriverVbusFS+0x34>)
 80106f8:	f7f4 f908 	bl	800490c <HAL_GPIO_WritePin>
}
 80106fc:	bf00      	nop
 80106fe:	3710      	adds	r7, #16
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	58020000 	.word	0x58020000

08010708 <__assert_func>:
 8010708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801070a:	4614      	mov	r4, r2
 801070c:	461a      	mov	r2, r3
 801070e:	4b09      	ldr	r3, [pc, #36]	; (8010734 <__assert_func+0x2c>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	4605      	mov	r5, r0
 8010714:	68d8      	ldr	r0, [r3, #12]
 8010716:	b14c      	cbz	r4, 801072c <__assert_func+0x24>
 8010718:	4b07      	ldr	r3, [pc, #28]	; (8010738 <__assert_func+0x30>)
 801071a:	9100      	str	r1, [sp, #0]
 801071c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010720:	4906      	ldr	r1, [pc, #24]	; (801073c <__assert_func+0x34>)
 8010722:	462b      	mov	r3, r5
 8010724:	f000 f814 	bl	8010750 <fiprintf>
 8010728:	f000 fcfc 	bl	8011124 <abort>
 801072c:	4b04      	ldr	r3, [pc, #16]	; (8010740 <__assert_func+0x38>)
 801072e:	461c      	mov	r4, r3
 8010730:	e7f3      	b.n	801071a <__assert_func+0x12>
 8010732:	bf00      	nop
 8010734:	240000ec 	.word	0x240000ec
 8010738:	08011a27 	.word	0x08011a27
 801073c:	08011a34 	.word	0x08011a34
 8010740:	08011a62 	.word	0x08011a62

08010744 <__errno>:
 8010744:	4b01      	ldr	r3, [pc, #4]	; (801074c <__errno+0x8>)
 8010746:	6818      	ldr	r0, [r3, #0]
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop
 801074c:	240000ec 	.word	0x240000ec

08010750 <fiprintf>:
 8010750:	b40e      	push	{r1, r2, r3}
 8010752:	b503      	push	{r0, r1, lr}
 8010754:	4601      	mov	r1, r0
 8010756:	ab03      	add	r3, sp, #12
 8010758:	4805      	ldr	r0, [pc, #20]	; (8010770 <fiprintf+0x20>)
 801075a:	f853 2b04 	ldr.w	r2, [r3], #4
 801075e:	6800      	ldr	r0, [r0, #0]
 8010760:	9301      	str	r3, [sp, #4]
 8010762:	f000 f925 	bl	80109b0 <_vfiprintf_r>
 8010766:	b002      	add	sp, #8
 8010768:	f85d eb04 	ldr.w	lr, [sp], #4
 801076c:	b003      	add	sp, #12
 801076e:	4770      	bx	lr
 8010770:	240000ec 	.word	0x240000ec

08010774 <__libc_init_array>:
 8010774:	b570      	push	{r4, r5, r6, lr}
 8010776:	4d0d      	ldr	r5, [pc, #52]	; (80107ac <__libc_init_array+0x38>)
 8010778:	4c0d      	ldr	r4, [pc, #52]	; (80107b0 <__libc_init_array+0x3c>)
 801077a:	1b64      	subs	r4, r4, r5
 801077c:	10a4      	asrs	r4, r4, #2
 801077e:	2600      	movs	r6, #0
 8010780:	42a6      	cmp	r6, r4
 8010782:	d109      	bne.n	8010798 <__libc_init_array+0x24>
 8010784:	4d0b      	ldr	r5, [pc, #44]	; (80107b4 <__libc_init_array+0x40>)
 8010786:	4c0c      	ldr	r4, [pc, #48]	; (80107b8 <__libc_init_array+0x44>)
 8010788:	f000 ffee 	bl	8011768 <_init>
 801078c:	1b64      	subs	r4, r4, r5
 801078e:	10a4      	asrs	r4, r4, #2
 8010790:	2600      	movs	r6, #0
 8010792:	42a6      	cmp	r6, r4
 8010794:	d105      	bne.n	80107a2 <__libc_init_array+0x2e>
 8010796:	bd70      	pop	{r4, r5, r6, pc}
 8010798:	f855 3b04 	ldr.w	r3, [r5], #4
 801079c:	4798      	blx	r3
 801079e:	3601      	adds	r6, #1
 80107a0:	e7ee      	b.n	8010780 <__libc_init_array+0xc>
 80107a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80107a6:	4798      	blx	r3
 80107a8:	3601      	adds	r6, #1
 80107aa:	e7f2      	b.n	8010792 <__libc_init_array+0x1e>
 80107ac:	08011b04 	.word	0x08011b04
 80107b0:	08011b04 	.word	0x08011b04
 80107b4:	08011b04 	.word	0x08011b04
 80107b8:	08011b08 	.word	0x08011b08

080107bc <malloc>:
 80107bc:	4b02      	ldr	r3, [pc, #8]	; (80107c8 <malloc+0xc>)
 80107be:	4601      	mov	r1, r0
 80107c0:	6818      	ldr	r0, [r3, #0]
 80107c2:	f000 b871 	b.w	80108a8 <_malloc_r>
 80107c6:	bf00      	nop
 80107c8:	240000ec 	.word	0x240000ec

080107cc <free>:
 80107cc:	4b02      	ldr	r3, [pc, #8]	; (80107d8 <free+0xc>)
 80107ce:	4601      	mov	r1, r0
 80107d0:	6818      	ldr	r0, [r3, #0]
 80107d2:	f000 b819 	b.w	8010808 <_free_r>
 80107d6:	bf00      	nop
 80107d8:	240000ec 	.word	0x240000ec

080107dc <memcpy>:
 80107dc:	440a      	add	r2, r1
 80107de:	4291      	cmp	r1, r2
 80107e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80107e4:	d100      	bne.n	80107e8 <memcpy+0xc>
 80107e6:	4770      	bx	lr
 80107e8:	b510      	push	{r4, lr}
 80107ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80107f2:	4291      	cmp	r1, r2
 80107f4:	d1f9      	bne.n	80107ea <memcpy+0xe>
 80107f6:	bd10      	pop	{r4, pc}

080107f8 <memset>:
 80107f8:	4402      	add	r2, r0
 80107fa:	4603      	mov	r3, r0
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d100      	bne.n	8010802 <memset+0xa>
 8010800:	4770      	bx	lr
 8010802:	f803 1b01 	strb.w	r1, [r3], #1
 8010806:	e7f9      	b.n	80107fc <memset+0x4>

08010808 <_free_r>:
 8010808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801080a:	2900      	cmp	r1, #0
 801080c:	d048      	beq.n	80108a0 <_free_r+0x98>
 801080e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010812:	9001      	str	r0, [sp, #4]
 8010814:	2b00      	cmp	r3, #0
 8010816:	f1a1 0404 	sub.w	r4, r1, #4
 801081a:	bfb8      	it	lt
 801081c:	18e4      	addlt	r4, r4, r3
 801081e:	f000 fea7 	bl	8011570 <__malloc_lock>
 8010822:	4a20      	ldr	r2, [pc, #128]	; (80108a4 <_free_r+0x9c>)
 8010824:	9801      	ldr	r0, [sp, #4]
 8010826:	6813      	ldr	r3, [r2, #0]
 8010828:	4615      	mov	r5, r2
 801082a:	b933      	cbnz	r3, 801083a <_free_r+0x32>
 801082c:	6063      	str	r3, [r4, #4]
 801082e:	6014      	str	r4, [r2, #0]
 8010830:	b003      	add	sp, #12
 8010832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010836:	f000 bea1 	b.w	801157c <__malloc_unlock>
 801083a:	42a3      	cmp	r3, r4
 801083c:	d90b      	bls.n	8010856 <_free_r+0x4e>
 801083e:	6821      	ldr	r1, [r4, #0]
 8010840:	1862      	adds	r2, r4, r1
 8010842:	4293      	cmp	r3, r2
 8010844:	bf04      	itt	eq
 8010846:	681a      	ldreq	r2, [r3, #0]
 8010848:	685b      	ldreq	r3, [r3, #4]
 801084a:	6063      	str	r3, [r4, #4]
 801084c:	bf04      	itt	eq
 801084e:	1852      	addeq	r2, r2, r1
 8010850:	6022      	streq	r2, [r4, #0]
 8010852:	602c      	str	r4, [r5, #0]
 8010854:	e7ec      	b.n	8010830 <_free_r+0x28>
 8010856:	461a      	mov	r2, r3
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	b10b      	cbz	r3, 8010860 <_free_r+0x58>
 801085c:	42a3      	cmp	r3, r4
 801085e:	d9fa      	bls.n	8010856 <_free_r+0x4e>
 8010860:	6811      	ldr	r1, [r2, #0]
 8010862:	1855      	adds	r5, r2, r1
 8010864:	42a5      	cmp	r5, r4
 8010866:	d10b      	bne.n	8010880 <_free_r+0x78>
 8010868:	6824      	ldr	r4, [r4, #0]
 801086a:	4421      	add	r1, r4
 801086c:	1854      	adds	r4, r2, r1
 801086e:	42a3      	cmp	r3, r4
 8010870:	6011      	str	r1, [r2, #0]
 8010872:	d1dd      	bne.n	8010830 <_free_r+0x28>
 8010874:	681c      	ldr	r4, [r3, #0]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	6053      	str	r3, [r2, #4]
 801087a:	4421      	add	r1, r4
 801087c:	6011      	str	r1, [r2, #0]
 801087e:	e7d7      	b.n	8010830 <_free_r+0x28>
 8010880:	d902      	bls.n	8010888 <_free_r+0x80>
 8010882:	230c      	movs	r3, #12
 8010884:	6003      	str	r3, [r0, #0]
 8010886:	e7d3      	b.n	8010830 <_free_r+0x28>
 8010888:	6825      	ldr	r5, [r4, #0]
 801088a:	1961      	adds	r1, r4, r5
 801088c:	428b      	cmp	r3, r1
 801088e:	bf04      	itt	eq
 8010890:	6819      	ldreq	r1, [r3, #0]
 8010892:	685b      	ldreq	r3, [r3, #4]
 8010894:	6063      	str	r3, [r4, #4]
 8010896:	bf04      	itt	eq
 8010898:	1949      	addeq	r1, r1, r5
 801089a:	6021      	streq	r1, [r4, #0]
 801089c:	6054      	str	r4, [r2, #4]
 801089e:	e7c7      	b.n	8010830 <_free_r+0x28>
 80108a0:	b003      	add	sp, #12
 80108a2:	bd30      	pop	{r4, r5, pc}
 80108a4:	24000220 	.word	0x24000220

080108a8 <_malloc_r>:
 80108a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108aa:	1ccd      	adds	r5, r1, #3
 80108ac:	f025 0503 	bic.w	r5, r5, #3
 80108b0:	3508      	adds	r5, #8
 80108b2:	2d0c      	cmp	r5, #12
 80108b4:	bf38      	it	cc
 80108b6:	250c      	movcc	r5, #12
 80108b8:	2d00      	cmp	r5, #0
 80108ba:	4606      	mov	r6, r0
 80108bc:	db01      	blt.n	80108c2 <_malloc_r+0x1a>
 80108be:	42a9      	cmp	r1, r5
 80108c0:	d903      	bls.n	80108ca <_malloc_r+0x22>
 80108c2:	230c      	movs	r3, #12
 80108c4:	6033      	str	r3, [r6, #0]
 80108c6:	2000      	movs	r0, #0
 80108c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108ca:	f000 fe51 	bl	8011570 <__malloc_lock>
 80108ce:	4921      	ldr	r1, [pc, #132]	; (8010954 <_malloc_r+0xac>)
 80108d0:	680a      	ldr	r2, [r1, #0]
 80108d2:	4614      	mov	r4, r2
 80108d4:	b99c      	cbnz	r4, 80108fe <_malloc_r+0x56>
 80108d6:	4f20      	ldr	r7, [pc, #128]	; (8010958 <_malloc_r+0xb0>)
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	b923      	cbnz	r3, 80108e6 <_malloc_r+0x3e>
 80108dc:	4621      	mov	r1, r4
 80108de:	4630      	mov	r0, r6
 80108e0:	f000 fb2a 	bl	8010f38 <_sbrk_r>
 80108e4:	6038      	str	r0, [r7, #0]
 80108e6:	4629      	mov	r1, r5
 80108e8:	4630      	mov	r0, r6
 80108ea:	f000 fb25 	bl	8010f38 <_sbrk_r>
 80108ee:	1c43      	adds	r3, r0, #1
 80108f0:	d123      	bne.n	801093a <_malloc_r+0x92>
 80108f2:	230c      	movs	r3, #12
 80108f4:	6033      	str	r3, [r6, #0]
 80108f6:	4630      	mov	r0, r6
 80108f8:	f000 fe40 	bl	801157c <__malloc_unlock>
 80108fc:	e7e3      	b.n	80108c6 <_malloc_r+0x1e>
 80108fe:	6823      	ldr	r3, [r4, #0]
 8010900:	1b5b      	subs	r3, r3, r5
 8010902:	d417      	bmi.n	8010934 <_malloc_r+0x8c>
 8010904:	2b0b      	cmp	r3, #11
 8010906:	d903      	bls.n	8010910 <_malloc_r+0x68>
 8010908:	6023      	str	r3, [r4, #0]
 801090a:	441c      	add	r4, r3
 801090c:	6025      	str	r5, [r4, #0]
 801090e:	e004      	b.n	801091a <_malloc_r+0x72>
 8010910:	6863      	ldr	r3, [r4, #4]
 8010912:	42a2      	cmp	r2, r4
 8010914:	bf0c      	ite	eq
 8010916:	600b      	streq	r3, [r1, #0]
 8010918:	6053      	strne	r3, [r2, #4]
 801091a:	4630      	mov	r0, r6
 801091c:	f000 fe2e 	bl	801157c <__malloc_unlock>
 8010920:	f104 000b 	add.w	r0, r4, #11
 8010924:	1d23      	adds	r3, r4, #4
 8010926:	f020 0007 	bic.w	r0, r0, #7
 801092a:	1ac2      	subs	r2, r0, r3
 801092c:	d0cc      	beq.n	80108c8 <_malloc_r+0x20>
 801092e:	1a1b      	subs	r3, r3, r0
 8010930:	50a3      	str	r3, [r4, r2]
 8010932:	e7c9      	b.n	80108c8 <_malloc_r+0x20>
 8010934:	4622      	mov	r2, r4
 8010936:	6864      	ldr	r4, [r4, #4]
 8010938:	e7cc      	b.n	80108d4 <_malloc_r+0x2c>
 801093a:	1cc4      	adds	r4, r0, #3
 801093c:	f024 0403 	bic.w	r4, r4, #3
 8010940:	42a0      	cmp	r0, r4
 8010942:	d0e3      	beq.n	801090c <_malloc_r+0x64>
 8010944:	1a21      	subs	r1, r4, r0
 8010946:	4630      	mov	r0, r6
 8010948:	f000 faf6 	bl	8010f38 <_sbrk_r>
 801094c:	3001      	adds	r0, #1
 801094e:	d1dd      	bne.n	801090c <_malloc_r+0x64>
 8010950:	e7cf      	b.n	80108f2 <_malloc_r+0x4a>
 8010952:	bf00      	nop
 8010954:	24000220 	.word	0x24000220
 8010958:	24000224 	.word	0x24000224

0801095c <__sfputc_r>:
 801095c:	6893      	ldr	r3, [r2, #8]
 801095e:	3b01      	subs	r3, #1
 8010960:	2b00      	cmp	r3, #0
 8010962:	b410      	push	{r4}
 8010964:	6093      	str	r3, [r2, #8]
 8010966:	da08      	bge.n	801097a <__sfputc_r+0x1e>
 8010968:	6994      	ldr	r4, [r2, #24]
 801096a:	42a3      	cmp	r3, r4
 801096c:	db01      	blt.n	8010972 <__sfputc_r+0x16>
 801096e:	290a      	cmp	r1, #10
 8010970:	d103      	bne.n	801097a <__sfputc_r+0x1e>
 8010972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010976:	f000 bb15 	b.w	8010fa4 <__swbuf_r>
 801097a:	6813      	ldr	r3, [r2, #0]
 801097c:	1c58      	adds	r0, r3, #1
 801097e:	6010      	str	r0, [r2, #0]
 8010980:	7019      	strb	r1, [r3, #0]
 8010982:	4608      	mov	r0, r1
 8010984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010988:	4770      	bx	lr

0801098a <__sfputs_r>:
 801098a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801098c:	4606      	mov	r6, r0
 801098e:	460f      	mov	r7, r1
 8010990:	4614      	mov	r4, r2
 8010992:	18d5      	adds	r5, r2, r3
 8010994:	42ac      	cmp	r4, r5
 8010996:	d101      	bne.n	801099c <__sfputs_r+0x12>
 8010998:	2000      	movs	r0, #0
 801099a:	e007      	b.n	80109ac <__sfputs_r+0x22>
 801099c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109a0:	463a      	mov	r2, r7
 80109a2:	4630      	mov	r0, r6
 80109a4:	f7ff ffda 	bl	801095c <__sfputc_r>
 80109a8:	1c43      	adds	r3, r0, #1
 80109aa:	d1f3      	bne.n	8010994 <__sfputs_r+0xa>
 80109ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080109b0 <_vfiprintf_r>:
 80109b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b4:	460d      	mov	r5, r1
 80109b6:	b09d      	sub	sp, #116	; 0x74
 80109b8:	4614      	mov	r4, r2
 80109ba:	4698      	mov	r8, r3
 80109bc:	4606      	mov	r6, r0
 80109be:	b118      	cbz	r0, 80109c8 <_vfiprintf_r+0x18>
 80109c0:	6983      	ldr	r3, [r0, #24]
 80109c2:	b90b      	cbnz	r3, 80109c8 <_vfiprintf_r+0x18>
 80109c4:	f000 fcd0 	bl	8011368 <__sinit>
 80109c8:	4b89      	ldr	r3, [pc, #548]	; (8010bf0 <_vfiprintf_r+0x240>)
 80109ca:	429d      	cmp	r5, r3
 80109cc:	d11b      	bne.n	8010a06 <_vfiprintf_r+0x56>
 80109ce:	6875      	ldr	r5, [r6, #4]
 80109d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109d2:	07d9      	lsls	r1, r3, #31
 80109d4:	d405      	bmi.n	80109e2 <_vfiprintf_r+0x32>
 80109d6:	89ab      	ldrh	r3, [r5, #12]
 80109d8:	059a      	lsls	r2, r3, #22
 80109da:	d402      	bmi.n	80109e2 <_vfiprintf_r+0x32>
 80109dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109de:	f000 fd61 	bl	80114a4 <__retarget_lock_acquire_recursive>
 80109e2:	89ab      	ldrh	r3, [r5, #12]
 80109e4:	071b      	lsls	r3, r3, #28
 80109e6:	d501      	bpl.n	80109ec <_vfiprintf_r+0x3c>
 80109e8:	692b      	ldr	r3, [r5, #16]
 80109ea:	b9eb      	cbnz	r3, 8010a28 <_vfiprintf_r+0x78>
 80109ec:	4629      	mov	r1, r5
 80109ee:	4630      	mov	r0, r6
 80109f0:	f000 fb2a 	bl	8011048 <__swsetup_r>
 80109f4:	b1c0      	cbz	r0, 8010a28 <_vfiprintf_r+0x78>
 80109f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109f8:	07dc      	lsls	r4, r3, #31
 80109fa:	d50e      	bpl.n	8010a1a <_vfiprintf_r+0x6a>
 80109fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010a00:	b01d      	add	sp, #116	; 0x74
 8010a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a06:	4b7b      	ldr	r3, [pc, #492]	; (8010bf4 <_vfiprintf_r+0x244>)
 8010a08:	429d      	cmp	r5, r3
 8010a0a:	d101      	bne.n	8010a10 <_vfiprintf_r+0x60>
 8010a0c:	68b5      	ldr	r5, [r6, #8]
 8010a0e:	e7df      	b.n	80109d0 <_vfiprintf_r+0x20>
 8010a10:	4b79      	ldr	r3, [pc, #484]	; (8010bf8 <_vfiprintf_r+0x248>)
 8010a12:	429d      	cmp	r5, r3
 8010a14:	bf08      	it	eq
 8010a16:	68f5      	ldreq	r5, [r6, #12]
 8010a18:	e7da      	b.n	80109d0 <_vfiprintf_r+0x20>
 8010a1a:	89ab      	ldrh	r3, [r5, #12]
 8010a1c:	0598      	lsls	r0, r3, #22
 8010a1e:	d4ed      	bmi.n	80109fc <_vfiprintf_r+0x4c>
 8010a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a22:	f000 fd40 	bl	80114a6 <__retarget_lock_release_recursive>
 8010a26:	e7e9      	b.n	80109fc <_vfiprintf_r+0x4c>
 8010a28:	2300      	movs	r3, #0
 8010a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8010a2c:	2320      	movs	r3, #32
 8010a2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a32:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a36:	2330      	movs	r3, #48	; 0x30
 8010a38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010bfc <_vfiprintf_r+0x24c>
 8010a3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a40:	f04f 0901 	mov.w	r9, #1
 8010a44:	4623      	mov	r3, r4
 8010a46:	469a      	mov	sl, r3
 8010a48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a4c:	b10a      	cbz	r2, 8010a52 <_vfiprintf_r+0xa2>
 8010a4e:	2a25      	cmp	r2, #37	; 0x25
 8010a50:	d1f9      	bne.n	8010a46 <_vfiprintf_r+0x96>
 8010a52:	ebba 0b04 	subs.w	fp, sl, r4
 8010a56:	d00b      	beq.n	8010a70 <_vfiprintf_r+0xc0>
 8010a58:	465b      	mov	r3, fp
 8010a5a:	4622      	mov	r2, r4
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	4630      	mov	r0, r6
 8010a60:	f7ff ff93 	bl	801098a <__sfputs_r>
 8010a64:	3001      	adds	r0, #1
 8010a66:	f000 80aa 	beq.w	8010bbe <_vfiprintf_r+0x20e>
 8010a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a6c:	445a      	add	r2, fp
 8010a6e:	9209      	str	r2, [sp, #36]	; 0x24
 8010a70:	f89a 3000 	ldrb.w	r3, [sl]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	f000 80a2 	beq.w	8010bbe <_vfiprintf_r+0x20e>
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a84:	f10a 0a01 	add.w	sl, sl, #1
 8010a88:	9304      	str	r3, [sp, #16]
 8010a8a:	9307      	str	r3, [sp, #28]
 8010a8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a90:	931a      	str	r3, [sp, #104]	; 0x68
 8010a92:	4654      	mov	r4, sl
 8010a94:	2205      	movs	r2, #5
 8010a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a9a:	4858      	ldr	r0, [pc, #352]	; (8010bfc <_vfiprintf_r+0x24c>)
 8010a9c:	f7ef fc30 	bl	8000300 <memchr>
 8010aa0:	9a04      	ldr	r2, [sp, #16]
 8010aa2:	b9d8      	cbnz	r0, 8010adc <_vfiprintf_r+0x12c>
 8010aa4:	06d1      	lsls	r1, r2, #27
 8010aa6:	bf44      	itt	mi
 8010aa8:	2320      	movmi	r3, #32
 8010aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010aae:	0713      	lsls	r3, r2, #28
 8010ab0:	bf44      	itt	mi
 8010ab2:	232b      	movmi	r3, #43	; 0x2b
 8010ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8010abc:	2b2a      	cmp	r3, #42	; 0x2a
 8010abe:	d015      	beq.n	8010aec <_vfiprintf_r+0x13c>
 8010ac0:	9a07      	ldr	r2, [sp, #28]
 8010ac2:	4654      	mov	r4, sl
 8010ac4:	2000      	movs	r0, #0
 8010ac6:	f04f 0c0a 	mov.w	ip, #10
 8010aca:	4621      	mov	r1, r4
 8010acc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ad0:	3b30      	subs	r3, #48	; 0x30
 8010ad2:	2b09      	cmp	r3, #9
 8010ad4:	d94e      	bls.n	8010b74 <_vfiprintf_r+0x1c4>
 8010ad6:	b1b0      	cbz	r0, 8010b06 <_vfiprintf_r+0x156>
 8010ad8:	9207      	str	r2, [sp, #28]
 8010ada:	e014      	b.n	8010b06 <_vfiprintf_r+0x156>
 8010adc:	eba0 0308 	sub.w	r3, r0, r8
 8010ae0:	fa09 f303 	lsl.w	r3, r9, r3
 8010ae4:	4313      	orrs	r3, r2
 8010ae6:	9304      	str	r3, [sp, #16]
 8010ae8:	46a2      	mov	sl, r4
 8010aea:	e7d2      	b.n	8010a92 <_vfiprintf_r+0xe2>
 8010aec:	9b03      	ldr	r3, [sp, #12]
 8010aee:	1d19      	adds	r1, r3, #4
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	9103      	str	r1, [sp, #12]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	bfbb      	ittet	lt
 8010af8:	425b      	neglt	r3, r3
 8010afa:	f042 0202 	orrlt.w	r2, r2, #2
 8010afe:	9307      	strge	r3, [sp, #28]
 8010b00:	9307      	strlt	r3, [sp, #28]
 8010b02:	bfb8      	it	lt
 8010b04:	9204      	strlt	r2, [sp, #16]
 8010b06:	7823      	ldrb	r3, [r4, #0]
 8010b08:	2b2e      	cmp	r3, #46	; 0x2e
 8010b0a:	d10c      	bne.n	8010b26 <_vfiprintf_r+0x176>
 8010b0c:	7863      	ldrb	r3, [r4, #1]
 8010b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8010b10:	d135      	bne.n	8010b7e <_vfiprintf_r+0x1ce>
 8010b12:	9b03      	ldr	r3, [sp, #12]
 8010b14:	1d1a      	adds	r2, r3, #4
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	9203      	str	r2, [sp, #12]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	bfb8      	it	lt
 8010b1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b22:	3402      	adds	r4, #2
 8010b24:	9305      	str	r3, [sp, #20]
 8010b26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010c0c <_vfiprintf_r+0x25c>
 8010b2a:	7821      	ldrb	r1, [r4, #0]
 8010b2c:	2203      	movs	r2, #3
 8010b2e:	4650      	mov	r0, sl
 8010b30:	f7ef fbe6 	bl	8000300 <memchr>
 8010b34:	b140      	cbz	r0, 8010b48 <_vfiprintf_r+0x198>
 8010b36:	2340      	movs	r3, #64	; 0x40
 8010b38:	eba0 000a 	sub.w	r0, r0, sl
 8010b3c:	fa03 f000 	lsl.w	r0, r3, r0
 8010b40:	9b04      	ldr	r3, [sp, #16]
 8010b42:	4303      	orrs	r3, r0
 8010b44:	3401      	adds	r4, #1
 8010b46:	9304      	str	r3, [sp, #16]
 8010b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b4c:	482c      	ldr	r0, [pc, #176]	; (8010c00 <_vfiprintf_r+0x250>)
 8010b4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b52:	2206      	movs	r2, #6
 8010b54:	f7ef fbd4 	bl	8000300 <memchr>
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	d03f      	beq.n	8010bdc <_vfiprintf_r+0x22c>
 8010b5c:	4b29      	ldr	r3, [pc, #164]	; (8010c04 <_vfiprintf_r+0x254>)
 8010b5e:	bb1b      	cbnz	r3, 8010ba8 <_vfiprintf_r+0x1f8>
 8010b60:	9b03      	ldr	r3, [sp, #12]
 8010b62:	3307      	adds	r3, #7
 8010b64:	f023 0307 	bic.w	r3, r3, #7
 8010b68:	3308      	adds	r3, #8
 8010b6a:	9303      	str	r3, [sp, #12]
 8010b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b6e:	443b      	add	r3, r7
 8010b70:	9309      	str	r3, [sp, #36]	; 0x24
 8010b72:	e767      	b.n	8010a44 <_vfiprintf_r+0x94>
 8010b74:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b78:	460c      	mov	r4, r1
 8010b7a:	2001      	movs	r0, #1
 8010b7c:	e7a5      	b.n	8010aca <_vfiprintf_r+0x11a>
 8010b7e:	2300      	movs	r3, #0
 8010b80:	3401      	adds	r4, #1
 8010b82:	9305      	str	r3, [sp, #20]
 8010b84:	4619      	mov	r1, r3
 8010b86:	f04f 0c0a 	mov.w	ip, #10
 8010b8a:	4620      	mov	r0, r4
 8010b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b90:	3a30      	subs	r2, #48	; 0x30
 8010b92:	2a09      	cmp	r2, #9
 8010b94:	d903      	bls.n	8010b9e <_vfiprintf_r+0x1ee>
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d0c5      	beq.n	8010b26 <_vfiprintf_r+0x176>
 8010b9a:	9105      	str	r1, [sp, #20]
 8010b9c:	e7c3      	b.n	8010b26 <_vfiprintf_r+0x176>
 8010b9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ba2:	4604      	mov	r4, r0
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	e7f0      	b.n	8010b8a <_vfiprintf_r+0x1da>
 8010ba8:	ab03      	add	r3, sp, #12
 8010baa:	9300      	str	r3, [sp, #0]
 8010bac:	462a      	mov	r2, r5
 8010bae:	4b16      	ldr	r3, [pc, #88]	; (8010c08 <_vfiprintf_r+0x258>)
 8010bb0:	a904      	add	r1, sp, #16
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	f3af 8000 	nop.w
 8010bb8:	4607      	mov	r7, r0
 8010bba:	1c78      	adds	r0, r7, #1
 8010bbc:	d1d6      	bne.n	8010b6c <_vfiprintf_r+0x1bc>
 8010bbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bc0:	07d9      	lsls	r1, r3, #31
 8010bc2:	d405      	bmi.n	8010bd0 <_vfiprintf_r+0x220>
 8010bc4:	89ab      	ldrh	r3, [r5, #12]
 8010bc6:	059a      	lsls	r2, r3, #22
 8010bc8:	d402      	bmi.n	8010bd0 <_vfiprintf_r+0x220>
 8010bca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bcc:	f000 fc6b 	bl	80114a6 <__retarget_lock_release_recursive>
 8010bd0:	89ab      	ldrh	r3, [r5, #12]
 8010bd2:	065b      	lsls	r3, r3, #25
 8010bd4:	f53f af12 	bmi.w	80109fc <_vfiprintf_r+0x4c>
 8010bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bda:	e711      	b.n	8010a00 <_vfiprintf_r+0x50>
 8010bdc:	ab03      	add	r3, sp, #12
 8010bde:	9300      	str	r3, [sp, #0]
 8010be0:	462a      	mov	r2, r5
 8010be2:	4b09      	ldr	r3, [pc, #36]	; (8010c08 <_vfiprintf_r+0x258>)
 8010be4:	a904      	add	r1, sp, #16
 8010be6:	4630      	mov	r0, r6
 8010be8:	f000 f880 	bl	8010cec <_printf_i>
 8010bec:	e7e4      	b.n	8010bb8 <_vfiprintf_r+0x208>
 8010bee:	bf00      	nop
 8010bf0:	08011abc 	.word	0x08011abc
 8010bf4:	08011adc 	.word	0x08011adc
 8010bf8:	08011a9c 	.word	0x08011a9c
 8010bfc:	08011a68 	.word	0x08011a68
 8010c00:	08011a72 	.word	0x08011a72
 8010c04:	00000000 	.word	0x00000000
 8010c08:	0801098b 	.word	0x0801098b
 8010c0c:	08011a6e 	.word	0x08011a6e

08010c10 <_printf_common>:
 8010c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c14:	4616      	mov	r6, r2
 8010c16:	4699      	mov	r9, r3
 8010c18:	688a      	ldr	r2, [r1, #8]
 8010c1a:	690b      	ldr	r3, [r1, #16]
 8010c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c20:	4293      	cmp	r3, r2
 8010c22:	bfb8      	it	lt
 8010c24:	4613      	movlt	r3, r2
 8010c26:	6033      	str	r3, [r6, #0]
 8010c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c2c:	4607      	mov	r7, r0
 8010c2e:	460c      	mov	r4, r1
 8010c30:	b10a      	cbz	r2, 8010c36 <_printf_common+0x26>
 8010c32:	3301      	adds	r3, #1
 8010c34:	6033      	str	r3, [r6, #0]
 8010c36:	6823      	ldr	r3, [r4, #0]
 8010c38:	0699      	lsls	r1, r3, #26
 8010c3a:	bf42      	ittt	mi
 8010c3c:	6833      	ldrmi	r3, [r6, #0]
 8010c3e:	3302      	addmi	r3, #2
 8010c40:	6033      	strmi	r3, [r6, #0]
 8010c42:	6825      	ldr	r5, [r4, #0]
 8010c44:	f015 0506 	ands.w	r5, r5, #6
 8010c48:	d106      	bne.n	8010c58 <_printf_common+0x48>
 8010c4a:	f104 0a19 	add.w	sl, r4, #25
 8010c4e:	68e3      	ldr	r3, [r4, #12]
 8010c50:	6832      	ldr	r2, [r6, #0]
 8010c52:	1a9b      	subs	r3, r3, r2
 8010c54:	42ab      	cmp	r3, r5
 8010c56:	dc26      	bgt.n	8010ca6 <_printf_common+0x96>
 8010c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010c5c:	1e13      	subs	r3, r2, #0
 8010c5e:	6822      	ldr	r2, [r4, #0]
 8010c60:	bf18      	it	ne
 8010c62:	2301      	movne	r3, #1
 8010c64:	0692      	lsls	r2, r2, #26
 8010c66:	d42b      	bmi.n	8010cc0 <_printf_common+0xb0>
 8010c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c6c:	4649      	mov	r1, r9
 8010c6e:	4638      	mov	r0, r7
 8010c70:	47c0      	blx	r8
 8010c72:	3001      	adds	r0, #1
 8010c74:	d01e      	beq.n	8010cb4 <_printf_common+0xa4>
 8010c76:	6823      	ldr	r3, [r4, #0]
 8010c78:	68e5      	ldr	r5, [r4, #12]
 8010c7a:	6832      	ldr	r2, [r6, #0]
 8010c7c:	f003 0306 	and.w	r3, r3, #6
 8010c80:	2b04      	cmp	r3, #4
 8010c82:	bf08      	it	eq
 8010c84:	1aad      	subeq	r5, r5, r2
 8010c86:	68a3      	ldr	r3, [r4, #8]
 8010c88:	6922      	ldr	r2, [r4, #16]
 8010c8a:	bf0c      	ite	eq
 8010c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c90:	2500      	movne	r5, #0
 8010c92:	4293      	cmp	r3, r2
 8010c94:	bfc4      	itt	gt
 8010c96:	1a9b      	subgt	r3, r3, r2
 8010c98:	18ed      	addgt	r5, r5, r3
 8010c9a:	2600      	movs	r6, #0
 8010c9c:	341a      	adds	r4, #26
 8010c9e:	42b5      	cmp	r5, r6
 8010ca0:	d11a      	bne.n	8010cd8 <_printf_common+0xc8>
 8010ca2:	2000      	movs	r0, #0
 8010ca4:	e008      	b.n	8010cb8 <_printf_common+0xa8>
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	4652      	mov	r2, sl
 8010caa:	4649      	mov	r1, r9
 8010cac:	4638      	mov	r0, r7
 8010cae:	47c0      	blx	r8
 8010cb0:	3001      	adds	r0, #1
 8010cb2:	d103      	bne.n	8010cbc <_printf_common+0xac>
 8010cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cbc:	3501      	adds	r5, #1
 8010cbe:	e7c6      	b.n	8010c4e <_printf_common+0x3e>
 8010cc0:	18e1      	adds	r1, r4, r3
 8010cc2:	1c5a      	adds	r2, r3, #1
 8010cc4:	2030      	movs	r0, #48	; 0x30
 8010cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cca:	4422      	add	r2, r4
 8010ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010cd4:	3302      	adds	r3, #2
 8010cd6:	e7c7      	b.n	8010c68 <_printf_common+0x58>
 8010cd8:	2301      	movs	r3, #1
 8010cda:	4622      	mov	r2, r4
 8010cdc:	4649      	mov	r1, r9
 8010cde:	4638      	mov	r0, r7
 8010ce0:	47c0      	blx	r8
 8010ce2:	3001      	adds	r0, #1
 8010ce4:	d0e6      	beq.n	8010cb4 <_printf_common+0xa4>
 8010ce6:	3601      	adds	r6, #1
 8010ce8:	e7d9      	b.n	8010c9e <_printf_common+0x8e>
	...

08010cec <_printf_i>:
 8010cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010cf0:	460c      	mov	r4, r1
 8010cf2:	4691      	mov	r9, r2
 8010cf4:	7e27      	ldrb	r7, [r4, #24]
 8010cf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010cf8:	2f78      	cmp	r7, #120	; 0x78
 8010cfa:	4680      	mov	r8, r0
 8010cfc:	469a      	mov	sl, r3
 8010cfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d02:	d807      	bhi.n	8010d14 <_printf_i+0x28>
 8010d04:	2f62      	cmp	r7, #98	; 0x62
 8010d06:	d80a      	bhi.n	8010d1e <_printf_i+0x32>
 8010d08:	2f00      	cmp	r7, #0
 8010d0a:	f000 80d8 	beq.w	8010ebe <_printf_i+0x1d2>
 8010d0e:	2f58      	cmp	r7, #88	; 0x58
 8010d10:	f000 80a3 	beq.w	8010e5a <_printf_i+0x16e>
 8010d14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d1c:	e03a      	b.n	8010d94 <_printf_i+0xa8>
 8010d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d22:	2b15      	cmp	r3, #21
 8010d24:	d8f6      	bhi.n	8010d14 <_printf_i+0x28>
 8010d26:	a001      	add	r0, pc, #4	; (adr r0, 8010d2c <_printf_i+0x40>)
 8010d28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010d2c:	08010d85 	.word	0x08010d85
 8010d30:	08010d99 	.word	0x08010d99
 8010d34:	08010d15 	.word	0x08010d15
 8010d38:	08010d15 	.word	0x08010d15
 8010d3c:	08010d15 	.word	0x08010d15
 8010d40:	08010d15 	.word	0x08010d15
 8010d44:	08010d99 	.word	0x08010d99
 8010d48:	08010d15 	.word	0x08010d15
 8010d4c:	08010d15 	.word	0x08010d15
 8010d50:	08010d15 	.word	0x08010d15
 8010d54:	08010d15 	.word	0x08010d15
 8010d58:	08010ea5 	.word	0x08010ea5
 8010d5c:	08010dc9 	.word	0x08010dc9
 8010d60:	08010e87 	.word	0x08010e87
 8010d64:	08010d15 	.word	0x08010d15
 8010d68:	08010d15 	.word	0x08010d15
 8010d6c:	08010ec7 	.word	0x08010ec7
 8010d70:	08010d15 	.word	0x08010d15
 8010d74:	08010dc9 	.word	0x08010dc9
 8010d78:	08010d15 	.word	0x08010d15
 8010d7c:	08010d15 	.word	0x08010d15
 8010d80:	08010e8f 	.word	0x08010e8f
 8010d84:	680b      	ldr	r3, [r1, #0]
 8010d86:	1d1a      	adds	r2, r3, #4
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	600a      	str	r2, [r1, #0]
 8010d8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d94:	2301      	movs	r3, #1
 8010d96:	e0a3      	b.n	8010ee0 <_printf_i+0x1f4>
 8010d98:	6825      	ldr	r5, [r4, #0]
 8010d9a:	6808      	ldr	r0, [r1, #0]
 8010d9c:	062e      	lsls	r6, r5, #24
 8010d9e:	f100 0304 	add.w	r3, r0, #4
 8010da2:	d50a      	bpl.n	8010dba <_printf_i+0xce>
 8010da4:	6805      	ldr	r5, [r0, #0]
 8010da6:	600b      	str	r3, [r1, #0]
 8010da8:	2d00      	cmp	r5, #0
 8010daa:	da03      	bge.n	8010db4 <_printf_i+0xc8>
 8010dac:	232d      	movs	r3, #45	; 0x2d
 8010dae:	426d      	negs	r5, r5
 8010db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010db4:	485e      	ldr	r0, [pc, #376]	; (8010f30 <_printf_i+0x244>)
 8010db6:	230a      	movs	r3, #10
 8010db8:	e019      	b.n	8010dee <_printf_i+0x102>
 8010dba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010dbe:	6805      	ldr	r5, [r0, #0]
 8010dc0:	600b      	str	r3, [r1, #0]
 8010dc2:	bf18      	it	ne
 8010dc4:	b22d      	sxthne	r5, r5
 8010dc6:	e7ef      	b.n	8010da8 <_printf_i+0xbc>
 8010dc8:	680b      	ldr	r3, [r1, #0]
 8010dca:	6825      	ldr	r5, [r4, #0]
 8010dcc:	1d18      	adds	r0, r3, #4
 8010dce:	6008      	str	r0, [r1, #0]
 8010dd0:	0628      	lsls	r0, r5, #24
 8010dd2:	d501      	bpl.n	8010dd8 <_printf_i+0xec>
 8010dd4:	681d      	ldr	r5, [r3, #0]
 8010dd6:	e002      	b.n	8010dde <_printf_i+0xf2>
 8010dd8:	0669      	lsls	r1, r5, #25
 8010dda:	d5fb      	bpl.n	8010dd4 <_printf_i+0xe8>
 8010ddc:	881d      	ldrh	r5, [r3, #0]
 8010dde:	4854      	ldr	r0, [pc, #336]	; (8010f30 <_printf_i+0x244>)
 8010de0:	2f6f      	cmp	r7, #111	; 0x6f
 8010de2:	bf0c      	ite	eq
 8010de4:	2308      	moveq	r3, #8
 8010de6:	230a      	movne	r3, #10
 8010de8:	2100      	movs	r1, #0
 8010dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010dee:	6866      	ldr	r6, [r4, #4]
 8010df0:	60a6      	str	r6, [r4, #8]
 8010df2:	2e00      	cmp	r6, #0
 8010df4:	bfa2      	ittt	ge
 8010df6:	6821      	ldrge	r1, [r4, #0]
 8010df8:	f021 0104 	bicge.w	r1, r1, #4
 8010dfc:	6021      	strge	r1, [r4, #0]
 8010dfe:	b90d      	cbnz	r5, 8010e04 <_printf_i+0x118>
 8010e00:	2e00      	cmp	r6, #0
 8010e02:	d04d      	beq.n	8010ea0 <_printf_i+0x1b4>
 8010e04:	4616      	mov	r6, r2
 8010e06:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e0a:	fb03 5711 	mls	r7, r3, r1, r5
 8010e0e:	5dc7      	ldrb	r7, [r0, r7]
 8010e10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e14:	462f      	mov	r7, r5
 8010e16:	42bb      	cmp	r3, r7
 8010e18:	460d      	mov	r5, r1
 8010e1a:	d9f4      	bls.n	8010e06 <_printf_i+0x11a>
 8010e1c:	2b08      	cmp	r3, #8
 8010e1e:	d10b      	bne.n	8010e38 <_printf_i+0x14c>
 8010e20:	6823      	ldr	r3, [r4, #0]
 8010e22:	07df      	lsls	r7, r3, #31
 8010e24:	d508      	bpl.n	8010e38 <_printf_i+0x14c>
 8010e26:	6923      	ldr	r3, [r4, #16]
 8010e28:	6861      	ldr	r1, [r4, #4]
 8010e2a:	4299      	cmp	r1, r3
 8010e2c:	bfde      	ittt	le
 8010e2e:	2330      	movle	r3, #48	; 0x30
 8010e30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010e34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010e38:	1b92      	subs	r2, r2, r6
 8010e3a:	6122      	str	r2, [r4, #16]
 8010e3c:	f8cd a000 	str.w	sl, [sp]
 8010e40:	464b      	mov	r3, r9
 8010e42:	aa03      	add	r2, sp, #12
 8010e44:	4621      	mov	r1, r4
 8010e46:	4640      	mov	r0, r8
 8010e48:	f7ff fee2 	bl	8010c10 <_printf_common>
 8010e4c:	3001      	adds	r0, #1
 8010e4e:	d14c      	bne.n	8010eea <_printf_i+0x1fe>
 8010e50:	f04f 30ff 	mov.w	r0, #4294967295
 8010e54:	b004      	add	sp, #16
 8010e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e5a:	4835      	ldr	r0, [pc, #212]	; (8010f30 <_printf_i+0x244>)
 8010e5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010e60:	6823      	ldr	r3, [r4, #0]
 8010e62:	680e      	ldr	r6, [r1, #0]
 8010e64:	061f      	lsls	r7, r3, #24
 8010e66:	f856 5b04 	ldr.w	r5, [r6], #4
 8010e6a:	600e      	str	r6, [r1, #0]
 8010e6c:	d514      	bpl.n	8010e98 <_printf_i+0x1ac>
 8010e6e:	07d9      	lsls	r1, r3, #31
 8010e70:	bf44      	itt	mi
 8010e72:	f043 0320 	orrmi.w	r3, r3, #32
 8010e76:	6023      	strmi	r3, [r4, #0]
 8010e78:	b91d      	cbnz	r5, 8010e82 <_printf_i+0x196>
 8010e7a:	6823      	ldr	r3, [r4, #0]
 8010e7c:	f023 0320 	bic.w	r3, r3, #32
 8010e80:	6023      	str	r3, [r4, #0]
 8010e82:	2310      	movs	r3, #16
 8010e84:	e7b0      	b.n	8010de8 <_printf_i+0xfc>
 8010e86:	6823      	ldr	r3, [r4, #0]
 8010e88:	f043 0320 	orr.w	r3, r3, #32
 8010e8c:	6023      	str	r3, [r4, #0]
 8010e8e:	2378      	movs	r3, #120	; 0x78
 8010e90:	4828      	ldr	r0, [pc, #160]	; (8010f34 <_printf_i+0x248>)
 8010e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e96:	e7e3      	b.n	8010e60 <_printf_i+0x174>
 8010e98:	065e      	lsls	r6, r3, #25
 8010e9a:	bf48      	it	mi
 8010e9c:	b2ad      	uxthmi	r5, r5
 8010e9e:	e7e6      	b.n	8010e6e <_printf_i+0x182>
 8010ea0:	4616      	mov	r6, r2
 8010ea2:	e7bb      	b.n	8010e1c <_printf_i+0x130>
 8010ea4:	680b      	ldr	r3, [r1, #0]
 8010ea6:	6826      	ldr	r6, [r4, #0]
 8010ea8:	6960      	ldr	r0, [r4, #20]
 8010eaa:	1d1d      	adds	r5, r3, #4
 8010eac:	600d      	str	r5, [r1, #0]
 8010eae:	0635      	lsls	r5, r6, #24
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	d501      	bpl.n	8010eb8 <_printf_i+0x1cc>
 8010eb4:	6018      	str	r0, [r3, #0]
 8010eb6:	e002      	b.n	8010ebe <_printf_i+0x1d2>
 8010eb8:	0671      	lsls	r1, r6, #25
 8010eba:	d5fb      	bpl.n	8010eb4 <_printf_i+0x1c8>
 8010ebc:	8018      	strh	r0, [r3, #0]
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	6123      	str	r3, [r4, #16]
 8010ec2:	4616      	mov	r6, r2
 8010ec4:	e7ba      	b.n	8010e3c <_printf_i+0x150>
 8010ec6:	680b      	ldr	r3, [r1, #0]
 8010ec8:	1d1a      	adds	r2, r3, #4
 8010eca:	600a      	str	r2, [r1, #0]
 8010ecc:	681e      	ldr	r6, [r3, #0]
 8010ece:	6862      	ldr	r2, [r4, #4]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4630      	mov	r0, r6
 8010ed4:	f7ef fa14 	bl	8000300 <memchr>
 8010ed8:	b108      	cbz	r0, 8010ede <_printf_i+0x1f2>
 8010eda:	1b80      	subs	r0, r0, r6
 8010edc:	6060      	str	r0, [r4, #4]
 8010ede:	6863      	ldr	r3, [r4, #4]
 8010ee0:	6123      	str	r3, [r4, #16]
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ee8:	e7a8      	b.n	8010e3c <_printf_i+0x150>
 8010eea:	6923      	ldr	r3, [r4, #16]
 8010eec:	4632      	mov	r2, r6
 8010eee:	4649      	mov	r1, r9
 8010ef0:	4640      	mov	r0, r8
 8010ef2:	47d0      	blx	sl
 8010ef4:	3001      	adds	r0, #1
 8010ef6:	d0ab      	beq.n	8010e50 <_printf_i+0x164>
 8010ef8:	6823      	ldr	r3, [r4, #0]
 8010efa:	079b      	lsls	r3, r3, #30
 8010efc:	d413      	bmi.n	8010f26 <_printf_i+0x23a>
 8010efe:	68e0      	ldr	r0, [r4, #12]
 8010f00:	9b03      	ldr	r3, [sp, #12]
 8010f02:	4298      	cmp	r0, r3
 8010f04:	bfb8      	it	lt
 8010f06:	4618      	movlt	r0, r3
 8010f08:	e7a4      	b.n	8010e54 <_printf_i+0x168>
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	4632      	mov	r2, r6
 8010f0e:	4649      	mov	r1, r9
 8010f10:	4640      	mov	r0, r8
 8010f12:	47d0      	blx	sl
 8010f14:	3001      	adds	r0, #1
 8010f16:	d09b      	beq.n	8010e50 <_printf_i+0x164>
 8010f18:	3501      	adds	r5, #1
 8010f1a:	68e3      	ldr	r3, [r4, #12]
 8010f1c:	9903      	ldr	r1, [sp, #12]
 8010f1e:	1a5b      	subs	r3, r3, r1
 8010f20:	42ab      	cmp	r3, r5
 8010f22:	dcf2      	bgt.n	8010f0a <_printf_i+0x21e>
 8010f24:	e7eb      	b.n	8010efe <_printf_i+0x212>
 8010f26:	2500      	movs	r5, #0
 8010f28:	f104 0619 	add.w	r6, r4, #25
 8010f2c:	e7f5      	b.n	8010f1a <_printf_i+0x22e>
 8010f2e:	bf00      	nop
 8010f30:	08011a79 	.word	0x08011a79
 8010f34:	08011a8a 	.word	0x08011a8a

08010f38 <_sbrk_r>:
 8010f38:	b538      	push	{r3, r4, r5, lr}
 8010f3a:	4d06      	ldr	r5, [pc, #24]	; (8010f54 <_sbrk_r+0x1c>)
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	4604      	mov	r4, r0
 8010f40:	4608      	mov	r0, r1
 8010f42:	602b      	str	r3, [r5, #0]
 8010f44:	f7f0 fb12 	bl	800156c <_sbrk>
 8010f48:	1c43      	adds	r3, r0, #1
 8010f4a:	d102      	bne.n	8010f52 <_sbrk_r+0x1a>
 8010f4c:	682b      	ldr	r3, [r5, #0]
 8010f4e:	b103      	cbz	r3, 8010f52 <_sbrk_r+0x1a>
 8010f50:	6023      	str	r3, [r4, #0]
 8010f52:	bd38      	pop	{r3, r4, r5, pc}
 8010f54:	24004830 	.word	0x24004830

08010f58 <strncmp>:
 8010f58:	b510      	push	{r4, lr}
 8010f5a:	b16a      	cbz	r2, 8010f78 <strncmp+0x20>
 8010f5c:	3901      	subs	r1, #1
 8010f5e:	1884      	adds	r4, r0, r2
 8010f60:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010f64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010f68:	4293      	cmp	r3, r2
 8010f6a:	d103      	bne.n	8010f74 <strncmp+0x1c>
 8010f6c:	42a0      	cmp	r0, r4
 8010f6e:	d001      	beq.n	8010f74 <strncmp+0x1c>
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d1f5      	bne.n	8010f60 <strncmp+0x8>
 8010f74:	1a98      	subs	r0, r3, r2
 8010f76:	bd10      	pop	{r4, pc}
 8010f78:	4610      	mov	r0, r2
 8010f7a:	e7fc      	b.n	8010f76 <strncmp+0x1e>

08010f7c <strncpy>:
 8010f7c:	b510      	push	{r4, lr}
 8010f7e:	3901      	subs	r1, #1
 8010f80:	4603      	mov	r3, r0
 8010f82:	b132      	cbz	r2, 8010f92 <strncpy+0x16>
 8010f84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010f88:	f803 4b01 	strb.w	r4, [r3], #1
 8010f8c:	3a01      	subs	r2, #1
 8010f8e:	2c00      	cmp	r4, #0
 8010f90:	d1f7      	bne.n	8010f82 <strncpy+0x6>
 8010f92:	441a      	add	r2, r3
 8010f94:	2100      	movs	r1, #0
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d100      	bne.n	8010f9c <strncpy+0x20>
 8010f9a:	bd10      	pop	{r4, pc}
 8010f9c:	f803 1b01 	strb.w	r1, [r3], #1
 8010fa0:	e7f9      	b.n	8010f96 <strncpy+0x1a>
	...

08010fa4 <__swbuf_r>:
 8010fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fa6:	460e      	mov	r6, r1
 8010fa8:	4614      	mov	r4, r2
 8010faa:	4605      	mov	r5, r0
 8010fac:	b118      	cbz	r0, 8010fb6 <__swbuf_r+0x12>
 8010fae:	6983      	ldr	r3, [r0, #24]
 8010fb0:	b90b      	cbnz	r3, 8010fb6 <__swbuf_r+0x12>
 8010fb2:	f000 f9d9 	bl	8011368 <__sinit>
 8010fb6:	4b21      	ldr	r3, [pc, #132]	; (801103c <__swbuf_r+0x98>)
 8010fb8:	429c      	cmp	r4, r3
 8010fba:	d12b      	bne.n	8011014 <__swbuf_r+0x70>
 8010fbc:	686c      	ldr	r4, [r5, #4]
 8010fbe:	69a3      	ldr	r3, [r4, #24]
 8010fc0:	60a3      	str	r3, [r4, #8]
 8010fc2:	89a3      	ldrh	r3, [r4, #12]
 8010fc4:	071a      	lsls	r2, r3, #28
 8010fc6:	d52f      	bpl.n	8011028 <__swbuf_r+0x84>
 8010fc8:	6923      	ldr	r3, [r4, #16]
 8010fca:	b36b      	cbz	r3, 8011028 <__swbuf_r+0x84>
 8010fcc:	6923      	ldr	r3, [r4, #16]
 8010fce:	6820      	ldr	r0, [r4, #0]
 8010fd0:	1ac0      	subs	r0, r0, r3
 8010fd2:	6963      	ldr	r3, [r4, #20]
 8010fd4:	b2f6      	uxtb	r6, r6
 8010fd6:	4283      	cmp	r3, r0
 8010fd8:	4637      	mov	r7, r6
 8010fda:	dc04      	bgt.n	8010fe6 <__swbuf_r+0x42>
 8010fdc:	4621      	mov	r1, r4
 8010fde:	4628      	mov	r0, r5
 8010fe0:	f000 f92e 	bl	8011240 <_fflush_r>
 8010fe4:	bb30      	cbnz	r0, 8011034 <__swbuf_r+0x90>
 8010fe6:	68a3      	ldr	r3, [r4, #8]
 8010fe8:	3b01      	subs	r3, #1
 8010fea:	60a3      	str	r3, [r4, #8]
 8010fec:	6823      	ldr	r3, [r4, #0]
 8010fee:	1c5a      	adds	r2, r3, #1
 8010ff0:	6022      	str	r2, [r4, #0]
 8010ff2:	701e      	strb	r6, [r3, #0]
 8010ff4:	6963      	ldr	r3, [r4, #20]
 8010ff6:	3001      	adds	r0, #1
 8010ff8:	4283      	cmp	r3, r0
 8010ffa:	d004      	beq.n	8011006 <__swbuf_r+0x62>
 8010ffc:	89a3      	ldrh	r3, [r4, #12]
 8010ffe:	07db      	lsls	r3, r3, #31
 8011000:	d506      	bpl.n	8011010 <__swbuf_r+0x6c>
 8011002:	2e0a      	cmp	r6, #10
 8011004:	d104      	bne.n	8011010 <__swbuf_r+0x6c>
 8011006:	4621      	mov	r1, r4
 8011008:	4628      	mov	r0, r5
 801100a:	f000 f919 	bl	8011240 <_fflush_r>
 801100e:	b988      	cbnz	r0, 8011034 <__swbuf_r+0x90>
 8011010:	4638      	mov	r0, r7
 8011012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011014:	4b0a      	ldr	r3, [pc, #40]	; (8011040 <__swbuf_r+0x9c>)
 8011016:	429c      	cmp	r4, r3
 8011018:	d101      	bne.n	801101e <__swbuf_r+0x7a>
 801101a:	68ac      	ldr	r4, [r5, #8]
 801101c:	e7cf      	b.n	8010fbe <__swbuf_r+0x1a>
 801101e:	4b09      	ldr	r3, [pc, #36]	; (8011044 <__swbuf_r+0xa0>)
 8011020:	429c      	cmp	r4, r3
 8011022:	bf08      	it	eq
 8011024:	68ec      	ldreq	r4, [r5, #12]
 8011026:	e7ca      	b.n	8010fbe <__swbuf_r+0x1a>
 8011028:	4621      	mov	r1, r4
 801102a:	4628      	mov	r0, r5
 801102c:	f000 f80c 	bl	8011048 <__swsetup_r>
 8011030:	2800      	cmp	r0, #0
 8011032:	d0cb      	beq.n	8010fcc <__swbuf_r+0x28>
 8011034:	f04f 37ff 	mov.w	r7, #4294967295
 8011038:	e7ea      	b.n	8011010 <__swbuf_r+0x6c>
 801103a:	bf00      	nop
 801103c:	08011abc 	.word	0x08011abc
 8011040:	08011adc 	.word	0x08011adc
 8011044:	08011a9c 	.word	0x08011a9c

08011048 <__swsetup_r>:
 8011048:	4b32      	ldr	r3, [pc, #200]	; (8011114 <__swsetup_r+0xcc>)
 801104a:	b570      	push	{r4, r5, r6, lr}
 801104c:	681d      	ldr	r5, [r3, #0]
 801104e:	4606      	mov	r6, r0
 8011050:	460c      	mov	r4, r1
 8011052:	b125      	cbz	r5, 801105e <__swsetup_r+0x16>
 8011054:	69ab      	ldr	r3, [r5, #24]
 8011056:	b913      	cbnz	r3, 801105e <__swsetup_r+0x16>
 8011058:	4628      	mov	r0, r5
 801105a:	f000 f985 	bl	8011368 <__sinit>
 801105e:	4b2e      	ldr	r3, [pc, #184]	; (8011118 <__swsetup_r+0xd0>)
 8011060:	429c      	cmp	r4, r3
 8011062:	d10f      	bne.n	8011084 <__swsetup_r+0x3c>
 8011064:	686c      	ldr	r4, [r5, #4]
 8011066:	89a3      	ldrh	r3, [r4, #12]
 8011068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801106c:	0719      	lsls	r1, r3, #28
 801106e:	d42c      	bmi.n	80110ca <__swsetup_r+0x82>
 8011070:	06dd      	lsls	r5, r3, #27
 8011072:	d411      	bmi.n	8011098 <__swsetup_r+0x50>
 8011074:	2309      	movs	r3, #9
 8011076:	6033      	str	r3, [r6, #0]
 8011078:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801107c:	81a3      	strh	r3, [r4, #12]
 801107e:	f04f 30ff 	mov.w	r0, #4294967295
 8011082:	e03e      	b.n	8011102 <__swsetup_r+0xba>
 8011084:	4b25      	ldr	r3, [pc, #148]	; (801111c <__swsetup_r+0xd4>)
 8011086:	429c      	cmp	r4, r3
 8011088:	d101      	bne.n	801108e <__swsetup_r+0x46>
 801108a:	68ac      	ldr	r4, [r5, #8]
 801108c:	e7eb      	b.n	8011066 <__swsetup_r+0x1e>
 801108e:	4b24      	ldr	r3, [pc, #144]	; (8011120 <__swsetup_r+0xd8>)
 8011090:	429c      	cmp	r4, r3
 8011092:	bf08      	it	eq
 8011094:	68ec      	ldreq	r4, [r5, #12]
 8011096:	e7e6      	b.n	8011066 <__swsetup_r+0x1e>
 8011098:	0758      	lsls	r0, r3, #29
 801109a:	d512      	bpl.n	80110c2 <__swsetup_r+0x7a>
 801109c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801109e:	b141      	cbz	r1, 80110b2 <__swsetup_r+0x6a>
 80110a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110a4:	4299      	cmp	r1, r3
 80110a6:	d002      	beq.n	80110ae <__swsetup_r+0x66>
 80110a8:	4630      	mov	r0, r6
 80110aa:	f7ff fbad 	bl	8010808 <_free_r>
 80110ae:	2300      	movs	r3, #0
 80110b0:	6363      	str	r3, [r4, #52]	; 0x34
 80110b2:	89a3      	ldrh	r3, [r4, #12]
 80110b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80110b8:	81a3      	strh	r3, [r4, #12]
 80110ba:	2300      	movs	r3, #0
 80110bc:	6063      	str	r3, [r4, #4]
 80110be:	6923      	ldr	r3, [r4, #16]
 80110c0:	6023      	str	r3, [r4, #0]
 80110c2:	89a3      	ldrh	r3, [r4, #12]
 80110c4:	f043 0308 	orr.w	r3, r3, #8
 80110c8:	81a3      	strh	r3, [r4, #12]
 80110ca:	6923      	ldr	r3, [r4, #16]
 80110cc:	b94b      	cbnz	r3, 80110e2 <__swsetup_r+0x9a>
 80110ce:	89a3      	ldrh	r3, [r4, #12]
 80110d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110d8:	d003      	beq.n	80110e2 <__swsetup_r+0x9a>
 80110da:	4621      	mov	r1, r4
 80110dc:	4630      	mov	r0, r6
 80110de:	f000 fa07 	bl	80114f0 <__smakebuf_r>
 80110e2:	89a0      	ldrh	r0, [r4, #12]
 80110e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110e8:	f010 0301 	ands.w	r3, r0, #1
 80110ec:	d00a      	beq.n	8011104 <__swsetup_r+0xbc>
 80110ee:	2300      	movs	r3, #0
 80110f0:	60a3      	str	r3, [r4, #8]
 80110f2:	6963      	ldr	r3, [r4, #20]
 80110f4:	425b      	negs	r3, r3
 80110f6:	61a3      	str	r3, [r4, #24]
 80110f8:	6923      	ldr	r3, [r4, #16]
 80110fa:	b943      	cbnz	r3, 801110e <__swsetup_r+0xc6>
 80110fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011100:	d1ba      	bne.n	8011078 <__swsetup_r+0x30>
 8011102:	bd70      	pop	{r4, r5, r6, pc}
 8011104:	0781      	lsls	r1, r0, #30
 8011106:	bf58      	it	pl
 8011108:	6963      	ldrpl	r3, [r4, #20]
 801110a:	60a3      	str	r3, [r4, #8]
 801110c:	e7f4      	b.n	80110f8 <__swsetup_r+0xb0>
 801110e:	2000      	movs	r0, #0
 8011110:	e7f7      	b.n	8011102 <__swsetup_r+0xba>
 8011112:	bf00      	nop
 8011114:	240000ec 	.word	0x240000ec
 8011118:	08011abc 	.word	0x08011abc
 801111c:	08011adc 	.word	0x08011adc
 8011120:	08011a9c 	.word	0x08011a9c

08011124 <abort>:
 8011124:	b508      	push	{r3, lr}
 8011126:	2006      	movs	r0, #6
 8011128:	f000 fa56 	bl	80115d8 <raise>
 801112c:	2001      	movs	r0, #1
 801112e:	f7f0 f9a6 	bl	800147e <_exit>
	...

08011134 <__sflush_r>:
 8011134:	898a      	ldrh	r2, [r1, #12]
 8011136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801113a:	4605      	mov	r5, r0
 801113c:	0710      	lsls	r0, r2, #28
 801113e:	460c      	mov	r4, r1
 8011140:	d458      	bmi.n	80111f4 <__sflush_r+0xc0>
 8011142:	684b      	ldr	r3, [r1, #4]
 8011144:	2b00      	cmp	r3, #0
 8011146:	dc05      	bgt.n	8011154 <__sflush_r+0x20>
 8011148:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801114a:	2b00      	cmp	r3, #0
 801114c:	dc02      	bgt.n	8011154 <__sflush_r+0x20>
 801114e:	2000      	movs	r0, #0
 8011150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011156:	2e00      	cmp	r6, #0
 8011158:	d0f9      	beq.n	801114e <__sflush_r+0x1a>
 801115a:	2300      	movs	r3, #0
 801115c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011160:	682f      	ldr	r7, [r5, #0]
 8011162:	602b      	str	r3, [r5, #0]
 8011164:	d032      	beq.n	80111cc <__sflush_r+0x98>
 8011166:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011168:	89a3      	ldrh	r3, [r4, #12]
 801116a:	075a      	lsls	r2, r3, #29
 801116c:	d505      	bpl.n	801117a <__sflush_r+0x46>
 801116e:	6863      	ldr	r3, [r4, #4]
 8011170:	1ac0      	subs	r0, r0, r3
 8011172:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011174:	b10b      	cbz	r3, 801117a <__sflush_r+0x46>
 8011176:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011178:	1ac0      	subs	r0, r0, r3
 801117a:	2300      	movs	r3, #0
 801117c:	4602      	mov	r2, r0
 801117e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011180:	6a21      	ldr	r1, [r4, #32]
 8011182:	4628      	mov	r0, r5
 8011184:	47b0      	blx	r6
 8011186:	1c43      	adds	r3, r0, #1
 8011188:	89a3      	ldrh	r3, [r4, #12]
 801118a:	d106      	bne.n	801119a <__sflush_r+0x66>
 801118c:	6829      	ldr	r1, [r5, #0]
 801118e:	291d      	cmp	r1, #29
 8011190:	d82c      	bhi.n	80111ec <__sflush_r+0xb8>
 8011192:	4a2a      	ldr	r2, [pc, #168]	; (801123c <__sflush_r+0x108>)
 8011194:	40ca      	lsrs	r2, r1
 8011196:	07d6      	lsls	r6, r2, #31
 8011198:	d528      	bpl.n	80111ec <__sflush_r+0xb8>
 801119a:	2200      	movs	r2, #0
 801119c:	6062      	str	r2, [r4, #4]
 801119e:	04d9      	lsls	r1, r3, #19
 80111a0:	6922      	ldr	r2, [r4, #16]
 80111a2:	6022      	str	r2, [r4, #0]
 80111a4:	d504      	bpl.n	80111b0 <__sflush_r+0x7c>
 80111a6:	1c42      	adds	r2, r0, #1
 80111a8:	d101      	bne.n	80111ae <__sflush_r+0x7a>
 80111aa:	682b      	ldr	r3, [r5, #0]
 80111ac:	b903      	cbnz	r3, 80111b0 <__sflush_r+0x7c>
 80111ae:	6560      	str	r0, [r4, #84]	; 0x54
 80111b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111b2:	602f      	str	r7, [r5, #0]
 80111b4:	2900      	cmp	r1, #0
 80111b6:	d0ca      	beq.n	801114e <__sflush_r+0x1a>
 80111b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111bc:	4299      	cmp	r1, r3
 80111be:	d002      	beq.n	80111c6 <__sflush_r+0x92>
 80111c0:	4628      	mov	r0, r5
 80111c2:	f7ff fb21 	bl	8010808 <_free_r>
 80111c6:	2000      	movs	r0, #0
 80111c8:	6360      	str	r0, [r4, #52]	; 0x34
 80111ca:	e7c1      	b.n	8011150 <__sflush_r+0x1c>
 80111cc:	6a21      	ldr	r1, [r4, #32]
 80111ce:	2301      	movs	r3, #1
 80111d0:	4628      	mov	r0, r5
 80111d2:	47b0      	blx	r6
 80111d4:	1c41      	adds	r1, r0, #1
 80111d6:	d1c7      	bne.n	8011168 <__sflush_r+0x34>
 80111d8:	682b      	ldr	r3, [r5, #0]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d0c4      	beq.n	8011168 <__sflush_r+0x34>
 80111de:	2b1d      	cmp	r3, #29
 80111e0:	d001      	beq.n	80111e6 <__sflush_r+0xb2>
 80111e2:	2b16      	cmp	r3, #22
 80111e4:	d101      	bne.n	80111ea <__sflush_r+0xb6>
 80111e6:	602f      	str	r7, [r5, #0]
 80111e8:	e7b1      	b.n	801114e <__sflush_r+0x1a>
 80111ea:	89a3      	ldrh	r3, [r4, #12]
 80111ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111f0:	81a3      	strh	r3, [r4, #12]
 80111f2:	e7ad      	b.n	8011150 <__sflush_r+0x1c>
 80111f4:	690f      	ldr	r7, [r1, #16]
 80111f6:	2f00      	cmp	r7, #0
 80111f8:	d0a9      	beq.n	801114e <__sflush_r+0x1a>
 80111fa:	0793      	lsls	r3, r2, #30
 80111fc:	680e      	ldr	r6, [r1, #0]
 80111fe:	bf08      	it	eq
 8011200:	694b      	ldreq	r3, [r1, #20]
 8011202:	600f      	str	r7, [r1, #0]
 8011204:	bf18      	it	ne
 8011206:	2300      	movne	r3, #0
 8011208:	eba6 0807 	sub.w	r8, r6, r7
 801120c:	608b      	str	r3, [r1, #8]
 801120e:	f1b8 0f00 	cmp.w	r8, #0
 8011212:	dd9c      	ble.n	801114e <__sflush_r+0x1a>
 8011214:	6a21      	ldr	r1, [r4, #32]
 8011216:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011218:	4643      	mov	r3, r8
 801121a:	463a      	mov	r2, r7
 801121c:	4628      	mov	r0, r5
 801121e:	47b0      	blx	r6
 8011220:	2800      	cmp	r0, #0
 8011222:	dc06      	bgt.n	8011232 <__sflush_r+0xfe>
 8011224:	89a3      	ldrh	r3, [r4, #12]
 8011226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801122a:	81a3      	strh	r3, [r4, #12]
 801122c:	f04f 30ff 	mov.w	r0, #4294967295
 8011230:	e78e      	b.n	8011150 <__sflush_r+0x1c>
 8011232:	4407      	add	r7, r0
 8011234:	eba8 0800 	sub.w	r8, r8, r0
 8011238:	e7e9      	b.n	801120e <__sflush_r+0xda>
 801123a:	bf00      	nop
 801123c:	20400001 	.word	0x20400001

08011240 <_fflush_r>:
 8011240:	b538      	push	{r3, r4, r5, lr}
 8011242:	690b      	ldr	r3, [r1, #16]
 8011244:	4605      	mov	r5, r0
 8011246:	460c      	mov	r4, r1
 8011248:	b913      	cbnz	r3, 8011250 <_fflush_r+0x10>
 801124a:	2500      	movs	r5, #0
 801124c:	4628      	mov	r0, r5
 801124e:	bd38      	pop	{r3, r4, r5, pc}
 8011250:	b118      	cbz	r0, 801125a <_fflush_r+0x1a>
 8011252:	6983      	ldr	r3, [r0, #24]
 8011254:	b90b      	cbnz	r3, 801125a <_fflush_r+0x1a>
 8011256:	f000 f887 	bl	8011368 <__sinit>
 801125a:	4b14      	ldr	r3, [pc, #80]	; (80112ac <_fflush_r+0x6c>)
 801125c:	429c      	cmp	r4, r3
 801125e:	d11b      	bne.n	8011298 <_fflush_r+0x58>
 8011260:	686c      	ldr	r4, [r5, #4]
 8011262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d0ef      	beq.n	801124a <_fflush_r+0xa>
 801126a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801126c:	07d0      	lsls	r0, r2, #31
 801126e:	d404      	bmi.n	801127a <_fflush_r+0x3a>
 8011270:	0599      	lsls	r1, r3, #22
 8011272:	d402      	bmi.n	801127a <_fflush_r+0x3a>
 8011274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011276:	f000 f915 	bl	80114a4 <__retarget_lock_acquire_recursive>
 801127a:	4628      	mov	r0, r5
 801127c:	4621      	mov	r1, r4
 801127e:	f7ff ff59 	bl	8011134 <__sflush_r>
 8011282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011284:	07da      	lsls	r2, r3, #31
 8011286:	4605      	mov	r5, r0
 8011288:	d4e0      	bmi.n	801124c <_fflush_r+0xc>
 801128a:	89a3      	ldrh	r3, [r4, #12]
 801128c:	059b      	lsls	r3, r3, #22
 801128e:	d4dd      	bmi.n	801124c <_fflush_r+0xc>
 8011290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011292:	f000 f908 	bl	80114a6 <__retarget_lock_release_recursive>
 8011296:	e7d9      	b.n	801124c <_fflush_r+0xc>
 8011298:	4b05      	ldr	r3, [pc, #20]	; (80112b0 <_fflush_r+0x70>)
 801129a:	429c      	cmp	r4, r3
 801129c:	d101      	bne.n	80112a2 <_fflush_r+0x62>
 801129e:	68ac      	ldr	r4, [r5, #8]
 80112a0:	e7df      	b.n	8011262 <_fflush_r+0x22>
 80112a2:	4b04      	ldr	r3, [pc, #16]	; (80112b4 <_fflush_r+0x74>)
 80112a4:	429c      	cmp	r4, r3
 80112a6:	bf08      	it	eq
 80112a8:	68ec      	ldreq	r4, [r5, #12]
 80112aa:	e7da      	b.n	8011262 <_fflush_r+0x22>
 80112ac:	08011abc 	.word	0x08011abc
 80112b0:	08011adc 	.word	0x08011adc
 80112b4:	08011a9c 	.word	0x08011a9c

080112b8 <std>:
 80112b8:	2300      	movs	r3, #0
 80112ba:	b510      	push	{r4, lr}
 80112bc:	4604      	mov	r4, r0
 80112be:	e9c0 3300 	strd	r3, r3, [r0]
 80112c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112c6:	6083      	str	r3, [r0, #8]
 80112c8:	8181      	strh	r1, [r0, #12]
 80112ca:	6643      	str	r3, [r0, #100]	; 0x64
 80112cc:	81c2      	strh	r2, [r0, #14]
 80112ce:	6183      	str	r3, [r0, #24]
 80112d0:	4619      	mov	r1, r3
 80112d2:	2208      	movs	r2, #8
 80112d4:	305c      	adds	r0, #92	; 0x5c
 80112d6:	f7ff fa8f 	bl	80107f8 <memset>
 80112da:	4b05      	ldr	r3, [pc, #20]	; (80112f0 <std+0x38>)
 80112dc:	6263      	str	r3, [r4, #36]	; 0x24
 80112de:	4b05      	ldr	r3, [pc, #20]	; (80112f4 <std+0x3c>)
 80112e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80112e2:	4b05      	ldr	r3, [pc, #20]	; (80112f8 <std+0x40>)
 80112e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80112e6:	4b05      	ldr	r3, [pc, #20]	; (80112fc <std+0x44>)
 80112e8:	6224      	str	r4, [r4, #32]
 80112ea:	6323      	str	r3, [r4, #48]	; 0x30
 80112ec:	bd10      	pop	{r4, pc}
 80112ee:	bf00      	nop
 80112f0:	08011611 	.word	0x08011611
 80112f4:	08011633 	.word	0x08011633
 80112f8:	0801166b 	.word	0x0801166b
 80112fc:	0801168f 	.word	0x0801168f

08011300 <_cleanup_r>:
 8011300:	4901      	ldr	r1, [pc, #4]	; (8011308 <_cleanup_r+0x8>)
 8011302:	f000 b8af 	b.w	8011464 <_fwalk_reent>
 8011306:	bf00      	nop
 8011308:	08011241 	.word	0x08011241

0801130c <__sfmoreglue>:
 801130c:	b570      	push	{r4, r5, r6, lr}
 801130e:	1e4a      	subs	r2, r1, #1
 8011310:	2568      	movs	r5, #104	; 0x68
 8011312:	4355      	muls	r5, r2
 8011314:	460e      	mov	r6, r1
 8011316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801131a:	f7ff fac5 	bl	80108a8 <_malloc_r>
 801131e:	4604      	mov	r4, r0
 8011320:	b140      	cbz	r0, 8011334 <__sfmoreglue+0x28>
 8011322:	2100      	movs	r1, #0
 8011324:	e9c0 1600 	strd	r1, r6, [r0]
 8011328:	300c      	adds	r0, #12
 801132a:	60a0      	str	r0, [r4, #8]
 801132c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011330:	f7ff fa62 	bl	80107f8 <memset>
 8011334:	4620      	mov	r0, r4
 8011336:	bd70      	pop	{r4, r5, r6, pc}

08011338 <__sfp_lock_acquire>:
 8011338:	4801      	ldr	r0, [pc, #4]	; (8011340 <__sfp_lock_acquire+0x8>)
 801133a:	f000 b8b3 	b.w	80114a4 <__retarget_lock_acquire_recursive>
 801133e:	bf00      	nop
 8011340:	2400482c 	.word	0x2400482c

08011344 <__sfp_lock_release>:
 8011344:	4801      	ldr	r0, [pc, #4]	; (801134c <__sfp_lock_release+0x8>)
 8011346:	f000 b8ae 	b.w	80114a6 <__retarget_lock_release_recursive>
 801134a:	bf00      	nop
 801134c:	2400482c 	.word	0x2400482c

08011350 <__sinit_lock_acquire>:
 8011350:	4801      	ldr	r0, [pc, #4]	; (8011358 <__sinit_lock_acquire+0x8>)
 8011352:	f000 b8a7 	b.w	80114a4 <__retarget_lock_acquire_recursive>
 8011356:	bf00      	nop
 8011358:	24004827 	.word	0x24004827

0801135c <__sinit_lock_release>:
 801135c:	4801      	ldr	r0, [pc, #4]	; (8011364 <__sinit_lock_release+0x8>)
 801135e:	f000 b8a2 	b.w	80114a6 <__retarget_lock_release_recursive>
 8011362:	bf00      	nop
 8011364:	24004827 	.word	0x24004827

08011368 <__sinit>:
 8011368:	b510      	push	{r4, lr}
 801136a:	4604      	mov	r4, r0
 801136c:	f7ff fff0 	bl	8011350 <__sinit_lock_acquire>
 8011370:	69a3      	ldr	r3, [r4, #24]
 8011372:	b11b      	cbz	r3, 801137c <__sinit+0x14>
 8011374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011378:	f7ff bff0 	b.w	801135c <__sinit_lock_release>
 801137c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011380:	6523      	str	r3, [r4, #80]	; 0x50
 8011382:	4b13      	ldr	r3, [pc, #76]	; (80113d0 <__sinit+0x68>)
 8011384:	4a13      	ldr	r2, [pc, #76]	; (80113d4 <__sinit+0x6c>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	62a2      	str	r2, [r4, #40]	; 0x28
 801138a:	42a3      	cmp	r3, r4
 801138c:	bf04      	itt	eq
 801138e:	2301      	moveq	r3, #1
 8011390:	61a3      	streq	r3, [r4, #24]
 8011392:	4620      	mov	r0, r4
 8011394:	f000 f820 	bl	80113d8 <__sfp>
 8011398:	6060      	str	r0, [r4, #4]
 801139a:	4620      	mov	r0, r4
 801139c:	f000 f81c 	bl	80113d8 <__sfp>
 80113a0:	60a0      	str	r0, [r4, #8]
 80113a2:	4620      	mov	r0, r4
 80113a4:	f000 f818 	bl	80113d8 <__sfp>
 80113a8:	2200      	movs	r2, #0
 80113aa:	60e0      	str	r0, [r4, #12]
 80113ac:	2104      	movs	r1, #4
 80113ae:	6860      	ldr	r0, [r4, #4]
 80113b0:	f7ff ff82 	bl	80112b8 <std>
 80113b4:	68a0      	ldr	r0, [r4, #8]
 80113b6:	2201      	movs	r2, #1
 80113b8:	2109      	movs	r1, #9
 80113ba:	f7ff ff7d 	bl	80112b8 <std>
 80113be:	68e0      	ldr	r0, [r4, #12]
 80113c0:	2202      	movs	r2, #2
 80113c2:	2112      	movs	r1, #18
 80113c4:	f7ff ff78 	bl	80112b8 <std>
 80113c8:	2301      	movs	r3, #1
 80113ca:	61a3      	str	r3, [r4, #24]
 80113cc:	e7d2      	b.n	8011374 <__sinit+0xc>
 80113ce:	bf00      	nop
 80113d0:	08011a64 	.word	0x08011a64
 80113d4:	08011301 	.word	0x08011301

080113d8 <__sfp>:
 80113d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113da:	4607      	mov	r7, r0
 80113dc:	f7ff ffac 	bl	8011338 <__sfp_lock_acquire>
 80113e0:	4b1e      	ldr	r3, [pc, #120]	; (801145c <__sfp+0x84>)
 80113e2:	681e      	ldr	r6, [r3, #0]
 80113e4:	69b3      	ldr	r3, [r6, #24]
 80113e6:	b913      	cbnz	r3, 80113ee <__sfp+0x16>
 80113e8:	4630      	mov	r0, r6
 80113ea:	f7ff ffbd 	bl	8011368 <__sinit>
 80113ee:	3648      	adds	r6, #72	; 0x48
 80113f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80113f4:	3b01      	subs	r3, #1
 80113f6:	d503      	bpl.n	8011400 <__sfp+0x28>
 80113f8:	6833      	ldr	r3, [r6, #0]
 80113fa:	b30b      	cbz	r3, 8011440 <__sfp+0x68>
 80113fc:	6836      	ldr	r6, [r6, #0]
 80113fe:	e7f7      	b.n	80113f0 <__sfp+0x18>
 8011400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011404:	b9d5      	cbnz	r5, 801143c <__sfp+0x64>
 8011406:	4b16      	ldr	r3, [pc, #88]	; (8011460 <__sfp+0x88>)
 8011408:	60e3      	str	r3, [r4, #12]
 801140a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801140e:	6665      	str	r5, [r4, #100]	; 0x64
 8011410:	f000 f847 	bl	80114a2 <__retarget_lock_init_recursive>
 8011414:	f7ff ff96 	bl	8011344 <__sfp_lock_release>
 8011418:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801141c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011420:	6025      	str	r5, [r4, #0]
 8011422:	61a5      	str	r5, [r4, #24]
 8011424:	2208      	movs	r2, #8
 8011426:	4629      	mov	r1, r5
 8011428:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801142c:	f7ff f9e4 	bl	80107f8 <memset>
 8011430:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011434:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011438:	4620      	mov	r0, r4
 801143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801143c:	3468      	adds	r4, #104	; 0x68
 801143e:	e7d9      	b.n	80113f4 <__sfp+0x1c>
 8011440:	2104      	movs	r1, #4
 8011442:	4638      	mov	r0, r7
 8011444:	f7ff ff62 	bl	801130c <__sfmoreglue>
 8011448:	4604      	mov	r4, r0
 801144a:	6030      	str	r0, [r6, #0]
 801144c:	2800      	cmp	r0, #0
 801144e:	d1d5      	bne.n	80113fc <__sfp+0x24>
 8011450:	f7ff ff78 	bl	8011344 <__sfp_lock_release>
 8011454:	230c      	movs	r3, #12
 8011456:	603b      	str	r3, [r7, #0]
 8011458:	e7ee      	b.n	8011438 <__sfp+0x60>
 801145a:	bf00      	nop
 801145c:	08011a64 	.word	0x08011a64
 8011460:	ffff0001 	.word	0xffff0001

08011464 <_fwalk_reent>:
 8011464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011468:	4606      	mov	r6, r0
 801146a:	4688      	mov	r8, r1
 801146c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011470:	2700      	movs	r7, #0
 8011472:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011476:	f1b9 0901 	subs.w	r9, r9, #1
 801147a:	d505      	bpl.n	8011488 <_fwalk_reent+0x24>
 801147c:	6824      	ldr	r4, [r4, #0]
 801147e:	2c00      	cmp	r4, #0
 8011480:	d1f7      	bne.n	8011472 <_fwalk_reent+0xe>
 8011482:	4638      	mov	r0, r7
 8011484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011488:	89ab      	ldrh	r3, [r5, #12]
 801148a:	2b01      	cmp	r3, #1
 801148c:	d907      	bls.n	801149e <_fwalk_reent+0x3a>
 801148e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011492:	3301      	adds	r3, #1
 8011494:	d003      	beq.n	801149e <_fwalk_reent+0x3a>
 8011496:	4629      	mov	r1, r5
 8011498:	4630      	mov	r0, r6
 801149a:	47c0      	blx	r8
 801149c:	4307      	orrs	r7, r0
 801149e:	3568      	adds	r5, #104	; 0x68
 80114a0:	e7e9      	b.n	8011476 <_fwalk_reent+0x12>

080114a2 <__retarget_lock_init_recursive>:
 80114a2:	4770      	bx	lr

080114a4 <__retarget_lock_acquire_recursive>:
 80114a4:	4770      	bx	lr

080114a6 <__retarget_lock_release_recursive>:
 80114a6:	4770      	bx	lr

080114a8 <__swhatbuf_r>:
 80114a8:	b570      	push	{r4, r5, r6, lr}
 80114aa:	460e      	mov	r6, r1
 80114ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114b0:	2900      	cmp	r1, #0
 80114b2:	b096      	sub	sp, #88	; 0x58
 80114b4:	4614      	mov	r4, r2
 80114b6:	461d      	mov	r5, r3
 80114b8:	da07      	bge.n	80114ca <__swhatbuf_r+0x22>
 80114ba:	2300      	movs	r3, #0
 80114bc:	602b      	str	r3, [r5, #0]
 80114be:	89b3      	ldrh	r3, [r6, #12]
 80114c0:	061a      	lsls	r2, r3, #24
 80114c2:	d410      	bmi.n	80114e6 <__swhatbuf_r+0x3e>
 80114c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114c8:	e00e      	b.n	80114e8 <__swhatbuf_r+0x40>
 80114ca:	466a      	mov	r2, sp
 80114cc:	f000 f906 	bl	80116dc <_fstat_r>
 80114d0:	2800      	cmp	r0, #0
 80114d2:	dbf2      	blt.n	80114ba <__swhatbuf_r+0x12>
 80114d4:	9a01      	ldr	r2, [sp, #4]
 80114d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80114da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80114de:	425a      	negs	r2, r3
 80114e0:	415a      	adcs	r2, r3
 80114e2:	602a      	str	r2, [r5, #0]
 80114e4:	e7ee      	b.n	80114c4 <__swhatbuf_r+0x1c>
 80114e6:	2340      	movs	r3, #64	; 0x40
 80114e8:	2000      	movs	r0, #0
 80114ea:	6023      	str	r3, [r4, #0]
 80114ec:	b016      	add	sp, #88	; 0x58
 80114ee:	bd70      	pop	{r4, r5, r6, pc}

080114f0 <__smakebuf_r>:
 80114f0:	898b      	ldrh	r3, [r1, #12]
 80114f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114f4:	079d      	lsls	r5, r3, #30
 80114f6:	4606      	mov	r6, r0
 80114f8:	460c      	mov	r4, r1
 80114fa:	d507      	bpl.n	801150c <__smakebuf_r+0x1c>
 80114fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011500:	6023      	str	r3, [r4, #0]
 8011502:	6123      	str	r3, [r4, #16]
 8011504:	2301      	movs	r3, #1
 8011506:	6163      	str	r3, [r4, #20]
 8011508:	b002      	add	sp, #8
 801150a:	bd70      	pop	{r4, r5, r6, pc}
 801150c:	ab01      	add	r3, sp, #4
 801150e:	466a      	mov	r2, sp
 8011510:	f7ff ffca 	bl	80114a8 <__swhatbuf_r>
 8011514:	9900      	ldr	r1, [sp, #0]
 8011516:	4605      	mov	r5, r0
 8011518:	4630      	mov	r0, r6
 801151a:	f7ff f9c5 	bl	80108a8 <_malloc_r>
 801151e:	b948      	cbnz	r0, 8011534 <__smakebuf_r+0x44>
 8011520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011524:	059a      	lsls	r2, r3, #22
 8011526:	d4ef      	bmi.n	8011508 <__smakebuf_r+0x18>
 8011528:	f023 0303 	bic.w	r3, r3, #3
 801152c:	f043 0302 	orr.w	r3, r3, #2
 8011530:	81a3      	strh	r3, [r4, #12]
 8011532:	e7e3      	b.n	80114fc <__smakebuf_r+0xc>
 8011534:	4b0d      	ldr	r3, [pc, #52]	; (801156c <__smakebuf_r+0x7c>)
 8011536:	62b3      	str	r3, [r6, #40]	; 0x28
 8011538:	89a3      	ldrh	r3, [r4, #12]
 801153a:	6020      	str	r0, [r4, #0]
 801153c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011540:	81a3      	strh	r3, [r4, #12]
 8011542:	9b00      	ldr	r3, [sp, #0]
 8011544:	6163      	str	r3, [r4, #20]
 8011546:	9b01      	ldr	r3, [sp, #4]
 8011548:	6120      	str	r0, [r4, #16]
 801154a:	b15b      	cbz	r3, 8011564 <__smakebuf_r+0x74>
 801154c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011550:	4630      	mov	r0, r6
 8011552:	f000 f8d5 	bl	8011700 <_isatty_r>
 8011556:	b128      	cbz	r0, 8011564 <__smakebuf_r+0x74>
 8011558:	89a3      	ldrh	r3, [r4, #12]
 801155a:	f023 0303 	bic.w	r3, r3, #3
 801155e:	f043 0301 	orr.w	r3, r3, #1
 8011562:	81a3      	strh	r3, [r4, #12]
 8011564:	89a0      	ldrh	r0, [r4, #12]
 8011566:	4305      	orrs	r5, r0
 8011568:	81a5      	strh	r5, [r4, #12]
 801156a:	e7cd      	b.n	8011508 <__smakebuf_r+0x18>
 801156c:	08011301 	.word	0x08011301

08011570 <__malloc_lock>:
 8011570:	4801      	ldr	r0, [pc, #4]	; (8011578 <__malloc_lock+0x8>)
 8011572:	f7ff bf97 	b.w	80114a4 <__retarget_lock_acquire_recursive>
 8011576:	bf00      	nop
 8011578:	24004828 	.word	0x24004828

0801157c <__malloc_unlock>:
 801157c:	4801      	ldr	r0, [pc, #4]	; (8011584 <__malloc_unlock+0x8>)
 801157e:	f7ff bf92 	b.w	80114a6 <__retarget_lock_release_recursive>
 8011582:	bf00      	nop
 8011584:	24004828 	.word	0x24004828

08011588 <_raise_r>:
 8011588:	291f      	cmp	r1, #31
 801158a:	b538      	push	{r3, r4, r5, lr}
 801158c:	4604      	mov	r4, r0
 801158e:	460d      	mov	r5, r1
 8011590:	d904      	bls.n	801159c <_raise_r+0x14>
 8011592:	2316      	movs	r3, #22
 8011594:	6003      	str	r3, [r0, #0]
 8011596:	f04f 30ff 	mov.w	r0, #4294967295
 801159a:	bd38      	pop	{r3, r4, r5, pc}
 801159c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801159e:	b112      	cbz	r2, 80115a6 <_raise_r+0x1e>
 80115a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115a4:	b94b      	cbnz	r3, 80115ba <_raise_r+0x32>
 80115a6:	4620      	mov	r0, r4
 80115a8:	f000 f830 	bl	801160c <_getpid_r>
 80115ac:	462a      	mov	r2, r5
 80115ae:	4601      	mov	r1, r0
 80115b0:	4620      	mov	r0, r4
 80115b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115b6:	f000 b817 	b.w	80115e8 <_kill_r>
 80115ba:	2b01      	cmp	r3, #1
 80115bc:	d00a      	beq.n	80115d4 <_raise_r+0x4c>
 80115be:	1c59      	adds	r1, r3, #1
 80115c0:	d103      	bne.n	80115ca <_raise_r+0x42>
 80115c2:	2316      	movs	r3, #22
 80115c4:	6003      	str	r3, [r0, #0]
 80115c6:	2001      	movs	r0, #1
 80115c8:	e7e7      	b.n	801159a <_raise_r+0x12>
 80115ca:	2400      	movs	r4, #0
 80115cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80115d0:	4628      	mov	r0, r5
 80115d2:	4798      	blx	r3
 80115d4:	2000      	movs	r0, #0
 80115d6:	e7e0      	b.n	801159a <_raise_r+0x12>

080115d8 <raise>:
 80115d8:	4b02      	ldr	r3, [pc, #8]	; (80115e4 <raise+0xc>)
 80115da:	4601      	mov	r1, r0
 80115dc:	6818      	ldr	r0, [r3, #0]
 80115de:	f7ff bfd3 	b.w	8011588 <_raise_r>
 80115e2:	bf00      	nop
 80115e4:	240000ec 	.word	0x240000ec

080115e8 <_kill_r>:
 80115e8:	b538      	push	{r3, r4, r5, lr}
 80115ea:	4d07      	ldr	r5, [pc, #28]	; (8011608 <_kill_r+0x20>)
 80115ec:	2300      	movs	r3, #0
 80115ee:	4604      	mov	r4, r0
 80115f0:	4608      	mov	r0, r1
 80115f2:	4611      	mov	r1, r2
 80115f4:	602b      	str	r3, [r5, #0]
 80115f6:	f7ef ff32 	bl	800145e <_kill>
 80115fa:	1c43      	adds	r3, r0, #1
 80115fc:	d102      	bne.n	8011604 <_kill_r+0x1c>
 80115fe:	682b      	ldr	r3, [r5, #0]
 8011600:	b103      	cbz	r3, 8011604 <_kill_r+0x1c>
 8011602:	6023      	str	r3, [r4, #0]
 8011604:	bd38      	pop	{r3, r4, r5, pc}
 8011606:	bf00      	nop
 8011608:	24004830 	.word	0x24004830

0801160c <_getpid_r>:
 801160c:	f7ef bf1f 	b.w	800144e <_getpid>

08011610 <__sread>:
 8011610:	b510      	push	{r4, lr}
 8011612:	460c      	mov	r4, r1
 8011614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011618:	f000 f894 	bl	8011744 <_read_r>
 801161c:	2800      	cmp	r0, #0
 801161e:	bfab      	itete	ge
 8011620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011622:	89a3      	ldrhlt	r3, [r4, #12]
 8011624:	181b      	addge	r3, r3, r0
 8011626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801162a:	bfac      	ite	ge
 801162c:	6563      	strge	r3, [r4, #84]	; 0x54
 801162e:	81a3      	strhlt	r3, [r4, #12]
 8011630:	bd10      	pop	{r4, pc}

08011632 <__swrite>:
 8011632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011636:	461f      	mov	r7, r3
 8011638:	898b      	ldrh	r3, [r1, #12]
 801163a:	05db      	lsls	r3, r3, #23
 801163c:	4605      	mov	r5, r0
 801163e:	460c      	mov	r4, r1
 8011640:	4616      	mov	r6, r2
 8011642:	d505      	bpl.n	8011650 <__swrite+0x1e>
 8011644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011648:	2302      	movs	r3, #2
 801164a:	2200      	movs	r2, #0
 801164c:	f000 f868 	bl	8011720 <_lseek_r>
 8011650:	89a3      	ldrh	r3, [r4, #12]
 8011652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801165a:	81a3      	strh	r3, [r4, #12]
 801165c:	4632      	mov	r2, r6
 801165e:	463b      	mov	r3, r7
 8011660:	4628      	mov	r0, r5
 8011662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011666:	f000 b817 	b.w	8011698 <_write_r>

0801166a <__sseek>:
 801166a:	b510      	push	{r4, lr}
 801166c:	460c      	mov	r4, r1
 801166e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011672:	f000 f855 	bl	8011720 <_lseek_r>
 8011676:	1c43      	adds	r3, r0, #1
 8011678:	89a3      	ldrh	r3, [r4, #12]
 801167a:	bf15      	itete	ne
 801167c:	6560      	strne	r0, [r4, #84]	; 0x54
 801167e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011686:	81a3      	strheq	r3, [r4, #12]
 8011688:	bf18      	it	ne
 801168a:	81a3      	strhne	r3, [r4, #12]
 801168c:	bd10      	pop	{r4, pc}

0801168e <__sclose>:
 801168e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011692:	f000 b813 	b.w	80116bc <_close_r>
	...

08011698 <_write_r>:
 8011698:	b538      	push	{r3, r4, r5, lr}
 801169a:	4d07      	ldr	r5, [pc, #28]	; (80116b8 <_write_r+0x20>)
 801169c:	4604      	mov	r4, r0
 801169e:	4608      	mov	r0, r1
 80116a0:	4611      	mov	r1, r2
 80116a2:	2200      	movs	r2, #0
 80116a4:	602a      	str	r2, [r5, #0]
 80116a6:	461a      	mov	r2, r3
 80116a8:	f7ef ff10 	bl	80014cc <_write>
 80116ac:	1c43      	adds	r3, r0, #1
 80116ae:	d102      	bne.n	80116b6 <_write_r+0x1e>
 80116b0:	682b      	ldr	r3, [r5, #0]
 80116b2:	b103      	cbz	r3, 80116b6 <_write_r+0x1e>
 80116b4:	6023      	str	r3, [r4, #0]
 80116b6:	bd38      	pop	{r3, r4, r5, pc}
 80116b8:	24004830 	.word	0x24004830

080116bc <_close_r>:
 80116bc:	b538      	push	{r3, r4, r5, lr}
 80116be:	4d06      	ldr	r5, [pc, #24]	; (80116d8 <_close_r+0x1c>)
 80116c0:	2300      	movs	r3, #0
 80116c2:	4604      	mov	r4, r0
 80116c4:	4608      	mov	r0, r1
 80116c6:	602b      	str	r3, [r5, #0]
 80116c8:	f7ef ff1c 	bl	8001504 <_close>
 80116cc:	1c43      	adds	r3, r0, #1
 80116ce:	d102      	bne.n	80116d6 <_close_r+0x1a>
 80116d0:	682b      	ldr	r3, [r5, #0]
 80116d2:	b103      	cbz	r3, 80116d6 <_close_r+0x1a>
 80116d4:	6023      	str	r3, [r4, #0]
 80116d6:	bd38      	pop	{r3, r4, r5, pc}
 80116d8:	24004830 	.word	0x24004830

080116dc <_fstat_r>:
 80116dc:	b538      	push	{r3, r4, r5, lr}
 80116de:	4d07      	ldr	r5, [pc, #28]	; (80116fc <_fstat_r+0x20>)
 80116e0:	2300      	movs	r3, #0
 80116e2:	4604      	mov	r4, r0
 80116e4:	4608      	mov	r0, r1
 80116e6:	4611      	mov	r1, r2
 80116e8:	602b      	str	r3, [r5, #0]
 80116ea:	f7ef ff17 	bl	800151c <_fstat>
 80116ee:	1c43      	adds	r3, r0, #1
 80116f0:	d102      	bne.n	80116f8 <_fstat_r+0x1c>
 80116f2:	682b      	ldr	r3, [r5, #0]
 80116f4:	b103      	cbz	r3, 80116f8 <_fstat_r+0x1c>
 80116f6:	6023      	str	r3, [r4, #0]
 80116f8:	bd38      	pop	{r3, r4, r5, pc}
 80116fa:	bf00      	nop
 80116fc:	24004830 	.word	0x24004830

08011700 <_isatty_r>:
 8011700:	b538      	push	{r3, r4, r5, lr}
 8011702:	4d06      	ldr	r5, [pc, #24]	; (801171c <_isatty_r+0x1c>)
 8011704:	2300      	movs	r3, #0
 8011706:	4604      	mov	r4, r0
 8011708:	4608      	mov	r0, r1
 801170a:	602b      	str	r3, [r5, #0]
 801170c:	f7ef ff16 	bl	800153c <_isatty>
 8011710:	1c43      	adds	r3, r0, #1
 8011712:	d102      	bne.n	801171a <_isatty_r+0x1a>
 8011714:	682b      	ldr	r3, [r5, #0]
 8011716:	b103      	cbz	r3, 801171a <_isatty_r+0x1a>
 8011718:	6023      	str	r3, [r4, #0]
 801171a:	bd38      	pop	{r3, r4, r5, pc}
 801171c:	24004830 	.word	0x24004830

08011720 <_lseek_r>:
 8011720:	b538      	push	{r3, r4, r5, lr}
 8011722:	4d07      	ldr	r5, [pc, #28]	; (8011740 <_lseek_r+0x20>)
 8011724:	4604      	mov	r4, r0
 8011726:	4608      	mov	r0, r1
 8011728:	4611      	mov	r1, r2
 801172a:	2200      	movs	r2, #0
 801172c:	602a      	str	r2, [r5, #0]
 801172e:	461a      	mov	r2, r3
 8011730:	f7ef ff0f 	bl	8001552 <_lseek>
 8011734:	1c43      	adds	r3, r0, #1
 8011736:	d102      	bne.n	801173e <_lseek_r+0x1e>
 8011738:	682b      	ldr	r3, [r5, #0]
 801173a:	b103      	cbz	r3, 801173e <_lseek_r+0x1e>
 801173c:	6023      	str	r3, [r4, #0]
 801173e:	bd38      	pop	{r3, r4, r5, pc}
 8011740:	24004830 	.word	0x24004830

08011744 <_read_r>:
 8011744:	b538      	push	{r3, r4, r5, lr}
 8011746:	4d07      	ldr	r5, [pc, #28]	; (8011764 <_read_r+0x20>)
 8011748:	4604      	mov	r4, r0
 801174a:	4608      	mov	r0, r1
 801174c:	4611      	mov	r1, r2
 801174e:	2200      	movs	r2, #0
 8011750:	602a      	str	r2, [r5, #0]
 8011752:	461a      	mov	r2, r3
 8011754:	f7ef fe9d 	bl	8001492 <_read>
 8011758:	1c43      	adds	r3, r0, #1
 801175a:	d102      	bne.n	8011762 <_read_r+0x1e>
 801175c:	682b      	ldr	r3, [r5, #0]
 801175e:	b103      	cbz	r3, 8011762 <_read_r+0x1e>
 8011760:	6023      	str	r3, [r4, #0]
 8011762:	bd38      	pop	{r3, r4, r5, pc}
 8011764:	24004830 	.word	0x24004830

08011768 <_init>:
 8011768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801176a:	bf00      	nop
 801176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801176e:	bc08      	pop	{r3}
 8011770:	469e      	mov	lr, r3
 8011772:	4770      	bx	lr

08011774 <_fini>:
 8011774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011776:	bf00      	nop
 8011778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801177a:	bc08      	pop	{r3}
 801177c:	469e      	mov	lr, r3
 801177e:	4770      	bx	lr
